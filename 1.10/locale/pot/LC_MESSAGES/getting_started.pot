# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2018, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:21+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../getting_started.rst:4
msgid "Getting Started"
msgstr ""

#: ../../../getting_started.rst:6
msgid ""
"Let's get started with an example: We are going to create a an MD5 encrypter "
"app that uses one of the most popular C++ libraries: Poco_."
msgstr ""

#: ../../../getting_started.rst:8
msgid ""
"We'll use CMake as build system in this case but keep in mind that Conan "
"**works with any build system** and is not limited to using CMake."
msgstr ""

#: ../../../getting_started.rst:11
msgid "An MD5 Encrypter using the Poco Libraries"
msgstr ""

#: ../../../getting_started.rst:15
msgid ""
"The source files to recreate this project are available in the following "
"GitHub repository. You can skip the manual creation of folder an sources "
"with this command:"
msgstr ""

#: ../../../getting_started.rst:18
msgid "$ git clone https://github.com/conan-community/poco-md5-example.git"
msgstr ""

#: ../../../getting_started.rst:22
msgid "Let's create a folder for our project:"
msgstr ""

#: ../../../getting_started.rst:24
msgid ""
"$ mkdir poco-md5-example\n"
"$ cd poco-md5-example"
msgstr ""

#: ../../../getting_started.rst:29
msgid ""
"Create the following source file inside this folder. This will be the source "
"file of our application:"
msgstr ""

#: ../../../getting_started.rst:31
msgid "**md5.cpp**"
msgstr ""

#: ../../../getting_started.rst:31
msgid ""
" #include \"Poco/MD5Engine.h\"\n"
" #include \"Poco/DigestStream.h\"\n"
"\n"
" #include <iostream>\n"
"\n"
"\n"
" int main(int argc, char** argv)\n"
" {\n"
"     Poco::MD5Engine md5;\n"
"     Poco::DigestOutputStream ds(md5);\n"
"     ds << \"abcdefghijklmnopqrstuvwxyz\";\n"
"     ds.close();\n"
"     std::cout << Poco::DigestEngine::digestToHex(md5.digest()) << std::"
"endl;\n"
"     return 0;\n"
" }"
msgstr ""

#: ../../../getting_started.rst:50
msgid ""
"We know that our application relies on the Poco libraries. Let's look for it "
"in the Conan Center remote:"
msgstr ""

#: ../../../getting_started.rst:52
msgid ""
"$ conan search Poco* --remote=conan-center\n"
"Existing package recipes:\n"
"\n"
"Poco/1.7.8p3@pocoproject/stable\n"
"Poco/1.7.9@pocoproject/stable\n"
"Poco/1.7.9p1@pocoproject/stable\n"
"Poco/1.7.9p2@pocoproject/stable\n"
"Poco/1.8.0.1@pocoproject/stable\n"
"Poco/1.8.0@pocoproject/stable\n"
"Poco/1.8.1@pocoproject/stable\n"
"Poco/1.9.0@pocoproject/stable"
msgstr ""

#: ../../../getting_started.rst:66
msgid ""
"We got some interesting references for Poco. Let's inspect the metadata of "
"the 1.9.0 version:"
msgstr ""

#: ../../../getting_started.rst:68
msgid ""
"$ conan inspect Poco/1.9.0@pocoproject/stable\n"
"...\n"
"name: Poco\n"
"version: 1.9.0\n"
"url: http://github.com/pocoproject/conan-poco\n"
"license: The Boost Software License 1.0\n"
"author: None\n"
"description: Modern, powerful open source C++ class libraries for building "
"network- and internet-based applications that run on desktop, server, mobile "
"and embedded systems.\n"
"generators: ('cmake', 'txt')\n"
"exports: None\n"
"exports_sources: ('CMakeLists.txt', 'PocoMacros.cmake')\n"
"short_paths: False\n"
"apply_env: True\n"
"build_policy: None\n"
"settings: ('os', 'arch', 'compiler', 'build_type')\n"
"options:\n"
"    enable_apacheconnector: [True, False]\n"
"    shared: [True, False]\n"
"default_options:\n"
"    enable_apacheconnector: False\n"
"    shared: False"
msgstr ""

#: ../../../getting_started.rst:93
msgid ""
"Ok, it looks like this dependency could work with our Encrypter app. We "
"should indicate which are the requirements and the generator for our build "
"system. Let's create a *conanfile.txt* inside our project's folder with the "
"following content:"
msgstr ""

#: ../../../getting_started.rst:96
msgid "**conanfile.txt**"
msgstr ""

#: ../../../getting_started.rst:96
msgid ""
" [requires]\n"
" Poco/1.9.0@pocoproject/stable\n"
"\n"
" [generators]\n"
" cmake"
msgstr ""

#: ../../../getting_started.rst:105
msgid ""
"In this example we are using CMake to build the project, which is why the "
"``cmake`` generator is specified. This generator creates a *conanbuildinfo."
"cmake* file that defines CMake variables including paths and library names "
"that can be used in our build. Read more about :ref:`generators_reference`."
msgstr ""

#: ../../../getting_started.rst:109
msgid ""
"Next step: We are going to install the required dependencies and generate "
"the information for the build system:"
msgstr ""

#: ../../../getting_started.rst:113
msgid ""
"If you are using **GCC compiler >= 5.1**, Conan will set the ``compiler."
"libcxx`` to the old ABI for backwards compatibility. You can change this "
"with the following commands:"
msgstr ""

#: ../../../getting_started.rst:116
msgid ""
"$ conan profile new default --detect  # Generates default profile detecting "
"GCC and sets old ABI\n"
"$ conan profile update settings.compiler.libcxx=libstdc++11 default  # Sets "
"libcxx to C++11 ABI"
msgstr ""

#: ../../../getting_started.rst:121
msgid "You will find more information in :ref:`manage_gcc_abi`."
msgstr ""

#: ../../../getting_started.rst:123
msgid ""
"$ mkdir build && cd build\n"
"$ conan install ..\n"
"...\n"
"Requirements\n"
"    OpenSSL/1.0.2o@conan/stable from 'conan-center' - Downloaded\n"
"    Poco/1.9.0@pocoproject/stable from 'conan-center' - Cache\n"
"    zlib/1.2.11@conan/stable from 'conan-center' - Downloaded\n"
"Packages\n"
"    OpenSSL/1.0.2o@conan/stable:606fdb601e335c2001bdf31d478826b644747077 - "
"Download\n"
"    Poco/1.9.0@pocoproject/stable:09378ed7f51185386e9f04b212b79fe2d12d005c - "
"Download\n"
"    zlib/1.2.11@conan/stable:6cc50b139b9c3d27b3e9042d5f5372d327b3a9f7 - "
"Download\n"
"\n"
"zlib/1.2.11@conan/stable: Retrieving package "
"6cc50b139b9c3d27b3e9042d5f5372d327b3a9f7 from remote 'conan-center'\n"
"...\n"
"Downloading conan_package.tgz\n"
"[==================================================] 99.8KB/99.8KB\n"
"...\n"
"zlib/1.2.11@conan/stable: Package installed "
"6cc50b139b9c3d27b3e9042d5f5372d327b3a9f7\n"
"OpenSSL/1.0.2o@conan/stable: Retrieving package "
"606fdb601e335c2001bdf31d478826b644747077 from remote 'conan-center'\n"
"...\n"
"Downloading conan_package.tgz\n"
"[==================================================] 5.5MB/5.5MB\n"
"...\n"
"OpenSSL/1.0.2o@conan/stable: Package installed "
"606fdb601e335c2001bdf31d478826b644747077\n"
"Poco/1.9.0@pocoproject/stable: Retrieving package "
"09378ed7f51185386e9f04b212b79fe2d12d005c from remote 'conan-center'\n"
"...\n"
"Downloading conan_package.tgz\n"
"[==================================================] 11.5MB/11.5MB\n"
"...\n"
"Poco/1.9.0@pocoproject/stable: Package installed "
"09378ed7f51185386e9f04b212b79fe2d12d005c\n"
"PROJECT: Generator cmake created conanbuildinfo.cmake\n"
"PROJECT: Generator txt created conanbuildinfo.txt\n"
"PROJECT: Generated conaninfo.txt"
msgstr ""

#: ../../../getting_started.rst:159
msgid ""
"Conan installed our Poco dependency but also the **transitive dependencies** "
"for it: OpenSSL and zlib. I has also generated a *conanbuildinfo.cmake* file "
"for our build system."
msgstr ""

#: ../../../getting_started.rst:162
msgid ""
"Now let's create our build file. To inject the Conan information, include "
"the generated *conanbuildinfo.cmake* file like this:"
msgstr ""

#: ../../../getting_started.rst:164
msgid "**CMakeLists.txt**"
msgstr ""

#: ../../../getting_started.rst:164
msgid ""
" cmake_minimum_required(VERSION 2.8.12)\n"
" project(MD5Encrypter)\n"
"\n"
" add_definitions(\"-std=c++11\")\n"
"\n"
" include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)\n"
" conan_basic_setup()\n"
"\n"
" add_executable(md5 md5.cpp)\n"
" target_link_libraries(md5 ${CONAN_LIBS})"
msgstr ""

#: ../../../getting_started.rst:178
msgid "Now we are ready to build and run our Encrypter app:"
msgstr ""

#: ../../../getting_started.rst:180
msgid ""
"(win)\n"
"$ cmake .. -G \"Visual Studio 15 Win64\"\n"
"$ cmake --build . --config Release\n"
"\n"
"(linux, mac)\n"
"$ cmake .. -G \"Unix Makefiles\" -DCMAKE_BUILD_TYPE=Release\n"
"$ cmake --build .\n"
"...\n"
"[100%] Built target md5\n"
"$ ./bin/md5\n"
"c3fcd3d76192e4007dfb496cca67e13b"
msgstr ""

#: ../../../getting_started.rst:195
msgid "Installing Dependencies"
msgstr ""

#: ../../../getting_started.rst:197
msgid ""
"The :command:`conan install` command downloads the binary package required "
"for your configuration (detected the first time you ran the command), "
"**together with other (transitively required by Poco) libraries, like "
"OpenSSL and Zlib**. It will also create the *conanbuildinfo.cmake* file in "
"the current directory, in which you can see the CMake variables, and a "
"*conaninfo.txt* in which the settings, requirements and optional information "
"is saved."
msgstr ""

#: ../../../getting_started.rst:203
msgid ""
"Conan generates a :ref:`default profile <default_profile>` with your "
"detected settings (OS, compiler, architecture...) and that configuration is "
"printed at the top of every :command:`conan install` command. However, it is "
"strongly recommended to review it and adjust the settings to accurately "
"describe your system as shown in the :ref:"
"`getting_started_other_configurations` section."
msgstr ""

#: ../../../getting_started.rst:207
msgid ""
"It is very important to understand the installation process. When the :"
"command:`conan install` command runs, settings specified on the command line "
"or taken from the defaults in *<userhome>/.conan/profiles/default* file are "
"applied."
msgstr ""

#: ../../../getting_started.rst:215
msgid ""
"For example, the command :command:`conan install . --settings os=\"Linux\" --"
"settings compiler=\"gcc\"`, performs these steps:"
msgstr ""

#: ../../../getting_started.rst:217
msgid ""
"Checks if the package recipe (for ``Poco/1.9.0@pocoproject/stable`` package) "
"exists in the local cache. If we are just starting, the cache is empty."
msgstr ""

#: ../../../getting_started.rst:219
msgid ""
"Looks for the package recipe in the defined remotes. Conan comes with `conan-"
"center`_ Bintray remote as the default, but can be changed."
msgstr ""

#: ../../../getting_started.rst:220
msgid ""
"If the recipe exists, the Conan client fetches and stores it in your local "
"cache."
msgstr ""

#: ../../../getting_started.rst:221
msgid ""
"With the package recipe and the input settings (Linux, GCC), Conan looks for "
"the corresponding binary in the local cache."
msgstr ""

#: ../../../getting_started.rst:222
msgid ""
"Then Conan searches the corresponding binary package in the remote and "
"fetches it."
msgstr ""

#: ../../../getting_started.rst:223
msgid ""
"Finally, it generates an appropriate file for the build system specified in "
"the ``[generators]`` section."
msgstr ""

#: ../../../getting_started.rst:225
msgid ""
"There are binaries for several mainstream compilers and versions available "
"in Conan Center repository in Bintray, such as Visual Studio 14, 15, Linux "
"GCC 4.9 and Apple Clang 3.5... Conan will throw an error if the binary "
"package required for specific settings doesn't exist. You can build the "
"binary package from sources using :command:`conan install --build=missing`, "
"it will succeed if your configuration is supported by the recipe. You will "
"find more info in the :ref:`getting_started_other_configurations` section."
msgstr ""

#: ../../../getting_started.rst:231
msgid "Inspecting Dependencies"
msgstr ""

#: ../../../getting_started.rst:233
msgid ""
"The retrieved packages are installed to your local user cache (typically *."
"conan/data*), and can be reused from this location for other projects. This "
"allows to clean your current project and continue working even without "
"network connection. To search for packages in the local cache run:"
msgstr ""

#: ../../../getting_started.rst:237
msgid ""
"$ conan search \"*\"\n"
"Existing package recipes:\n"
"\n"
"OpenSSL/1.0.2o@conan/stable\n"
"Poco/1.9.0@pocoproject/stable\n"
"zlib/1.2.11@conan/stable"
msgstr ""

#: ../../../getting_started.rst:246
msgid "To inspect the different binary packages of a reference run:"
msgstr ""

#: ../../../getting_started.rst:248
msgid ""
"$ conan search Poco/1.9.0@pocoproject/stable\n"
"Existing packages for recipe Poco/1.9.0@pocoproject/stable:\n"
"\n"
"Package_ID: 09378ed7f51185386e9f04b212b79fe2d12d005c\n"
"    [options]\n"
"        cxx_14: False\n"
"        enable_apacheconnector: False\n"
"        enable_cppparser: False\n"
"        enable_crypto: True\n"
"        enable_data: True\n"
"..."
msgstr ""

#: ../../../getting_started.rst:262
msgid ""
"There is also the possibility to generate a table for all package binaries "
"available in a remote:"
msgstr ""

#: ../../../getting_started.rst:264
msgid ""
"$ conan search zlib/1.2.11@conan/stable --table=file.html -r=conan-center\n"
"$ file.html # or open the file, double-click"
msgstr ""

#: ../../../getting_started.rst:274
msgid ""
"To inspect all your current project's dependencies use the :command:`conan "
"info` command by pointing it to the location of the *conanfile.txt* folder:"
msgstr ""

#: ../../../getting_started.rst:277
msgid ""
"$ conan info ..\n"
"PROJECT\n"
"    ID: 6ecacba4f2b7535e0acb633a0cc4de0234445fea\n"
"    BuildID: None\n"
"    Requires:\n"
"        Poco/1.9.0@pocoproject/stable\n"
"OpenSSL/1.0.2o@conan/stable\n"
"    ID: 606fdb601e335c2001bdf31d478826b644747077\n"
"    BuildID: None\n"
"    Remote: conan-center=https://conan.bintray.com\n"
"    URL: http://github.com/conan-community/conan-openssl\n"
"    License: The current OpenSSL licence is an 'Apache style' license: "
"https://www.openssl.org/source/license.html\n"
"    Recipe: Cache\n"
"    Binary: Cache\n"
"    Binary remote: conan-center\n"
"    Creation date: 2018-08-27 09:12:47\n"
"    Required by:\n"
"        Poco/1.9.0@pocoproject/stable\n"
"    Requires:\n"
"        zlib/1.2.11@conan/stable\n"
"Poco/1.9.0@pocoproject/stable\n"
"    ID: 09378ed7f51185386e9f04b212b79fe2d12d005c\n"
"    BuildID: None\n"
"    Remote: conan-center=https://conan.bintray.com\n"
"    URL: http://github.com/pocoproject/conan-poco\n"
"    License: The Boost Software License 1.0\n"
"    Recipe: Cache\n"
"    Binary: Cache\n"
"    Binary remote: conan-center\n"
"    Creation date: 2018-08-30 13:28:08\n"
"    Required by:\n"
"        PROJECT\n"
"    Requires:\n"
"        OpenSSL/1.0.2o@conan/stable\n"
"zlib/1.2.11@conan/stable\n"
"    ID: 6cc50b139b9c3d27b3e9042d5f5372d327b3a9f7\n"
"    BuildID: None\n"
"    Remote: conan-center=https://conan.bintray.com\n"
"    URL: http://github.com/conan-community/conan-zlib\n"
"    License: Zlib\n"
"    Recipe: Cache\n"
"    Binary: Cache\n"
"    Binary remote: conan-center\n"
"    Creation date: 2018-10-24 12:40:49\n"
"    Required by:\n"
"        OpenSSL/1.0.2o@conan/stable"
msgstr ""

#: ../../../getting_started.rst:326
msgid "Or generate a graph of your dependencies using Dot or HTML formats:"
msgstr ""

#: ../../../getting_started.rst:328
msgid ""
"$ conan info .. --graph=file.html\n"
"$ file.html # or open the file, double-click"
msgstr ""

#: ../../../getting_started.rst:339
msgid "Searching Packages"
msgstr ""

#: ../../../getting_started.rst:341
msgid ""
"The remote repository where packages are installed from is configured by "
"default in Conan. It is called Conan Center (configured as :command:`conan-"
"center` remote) and it is located in Bintray_."
msgstr ""

#: ../../../getting_started.rst:344
msgid "You can search packages in Conan Center using this command:"
msgstr ""

#: ../../../getting_started.rst:346
msgid ""
"$ conan search \"*\" --remote=conan-center\n"
"Existing package recipes:\n"
"\n"
"Assimp/4.1.0@jacmoe/stable\n"
"CLI11/1.6.1@cliutils/stable\n"
"CTRE/2.1@ctre/stable\n"
"Catch/1.12.1@bincrafters/stable\n"
"Expat/2.2.5@pix4d/stable\n"
"FakeIt/2.0.5@gasuketsu/stable\n"
"IlmBase/2.2.0@Mikayex/stable\n"
"IrrXML/1.2@conan/stable\n"
"OpenSSL/1.0.2@conan/stable\n"
"..."
msgstr ""

#: ../../../getting_started.rst:362
msgid ""
"There are additional community repositories that can be configured and used. "
"See :ref:`Bintray Repositories <bintray_repositories>` for more information."
msgstr ""

#: ../../../getting_started.rst:368
msgid "Building with Other Configurations"
msgstr ""

#: ../../../getting_started.rst:370
msgid ""
"In this example, we have built our project using the default configuration "
"detected by Conan. This configuration is known as the :ref:`default profile "
"<default_profile>`."
msgstr ""

#: ../../../getting_started.rst:373
msgid ""
"A profile needs to be available prior to running commands such as :command:"
"`conan install`. When running the command, your settings are automatically "
"detected (compiler, architecture...) and stored as the default profile. You "
"can edit these settings *~/.conan/profiles/default* or create new profiles "
"with your desired configuration."
msgstr ""

#: ../../../getting_started.rst:377
msgid ""
"For example, if we have a profile with a 32-bit GCC configuration in a "
"profile called *gcc_x86*, we can run the following:"
msgstr ""

#: ../../../getting_started.rst:379
msgid "$ conan install . --profile=gcc_x86"
msgstr ""

#: ../../../getting_started.rst:385
msgid ""
"We strongly recommend using :ref:`profiles` and managing them with :ref:"
"`conan_config_install`."
msgstr ""

#: ../../../getting_started.rst:387
msgid ""
"However, the user can always override the default profile settings in the :"
"command:`conan install` command using the :command:`--settings` parameter. "
"As an exercise, try building the Encrypter project 32-bit version:"
msgstr ""

#: ../../../getting_started.rst:390
msgid "$ conan install . --profile=gcc_x86 --settings arch=x86_64"
msgstr ""

#: ../../../getting_started.rst:394
msgid ""
"The above command installs a different package, using the :command:`--"
"settings arch=x86` instead of the one of the profile used previously."
msgstr ""

#: ../../../getting_started.rst:396
msgid ""
"To use the 32-bit binaries, you will also have to change your project build:"
msgstr ""

#: ../../../getting_started.rst:398
msgid "In Windows, change the CMake invocation to ``Visual Studio 14``."
msgstr ""

#: ../../../getting_started.rst:399
msgid ""
"In Linux, you have to add the ``-m32`` flag to your ``CMakeLists.txt`` by "
"running ``SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -m32\")``, and the same "
"applies to ``CMAKE_C_FLAGS, CMAKE_SHARED_LINK_FLAGS and "
"CMAKE_EXE_LINKER_FLAGS``. This can also be done more easily, by "
"automatically using Conan, as we'll show later."
msgstr ""

#: ../../../getting_started.rst:402
msgid ""
"In macOS, you need to add the definition ``-DCMAKE_OSX_ARCHITECTURES=i386``."
msgstr ""

#: ../../../getting_started.rst:404
msgid ""
"Got any doubts? Check our :ref:`faq`, |write_us| or join the community in "
"`Cpplang Slack`_ ``#conan`` channel!"
msgstr ""

#: ../../../getting_started.rst:406
msgid "<a href=\"mailto:info@conan.io\" target=\"_blank\">write us</a>"
msgstr ""
