# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2018, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:21+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/commands/creator/test.rst:5
msgid "conan test"
msgstr ""

#: ../../../reference/commands/creator/test.rst:7
msgid ""
"$ conan test [-h] [-tbf TEST_BUILD_FOLDER] [-b [BUILD]] [-e ENV]\n"
"             [-o OPTIONS] [-pr PROFILE] [-r REMOTE] [-s SETTINGS] [-u]\n"
"             path reference"
msgstr ""

#: ../../../reference/commands/creator/test.rst:13
msgid ""
"Test a package consuming it from a conanfile.py with a test() method. This "
"command installs the conanfile dependencies (including the tested package), "
"calls a 'conan build' to build test apps and finally executes the test() "
"method. The testing recipe does not require name or version, neither "
"definition of package() or package_info() methods. The package to be tested "
"must exist in the local cache or in any configured remote."
msgstr ""

#: ../../../reference/commands/creator/test.rst:20
msgid ""
"positional arguments:\n"
"  path                  Path to the \"testing\" folder containing a "
"conanfile.py\n"
"                        or to a recipe file with test() methode.g. conan\n"
"                        test_package/conanfile.py pkg/version@user/channel\n"
"  reference             pkg/version@user/channel of the package to be "
"tested\n"
"\n"
"optional arguments:\n"
"  -h, --help            show this help message and exit\n"
"  -tbf TEST_BUILD_FOLDER, --test-build-folder TEST_BUILD_FOLDER\n"
"                        Working directory of the build process.\n"
"  -b [BUILD], --build [BUILD]\n"
"                        Optional, use it to choose if you want to build "
"from\n"
"                        sources: --build Build all from sources, do not use\n"
"                        binary packages. --build=never Never build, use "
"binary\n"
"                        packages or fail if a binary package is not found.\n"
"                        --build=missing Build from code if a binary package "
"is\n"
"                        not found. --build=outdated Build from code if the\n"
"                        binary is not built with the current recipe or when\n"
"                        missing binary package. --build=[pattern] Build "
"always\n"
"                        these packages from source, but never build the\n"
"                        others. Allows multiple --build parameters. "
"'pattern'\n"
"                        is a fnmatch file pattern of a package name. "
"Default\n"
"                        behavior: If you don't specify anything, it will be\n"
"                        similar to '--build=never', but package recipes can\n"
"                        override it with their 'build_policy' attribute in "
"the\n"
"                        conanfile.py.\n"
"  -e ENV, --env ENV     Environment variables that will be set during the\n"
"                        package build, -e CXX=/usr/bin/clang++\n"
"  -o OPTIONS, --options OPTIONS\n"
"                        Define options values, e.g., -o Pkg:with_qt=true\n"
"  -pr PROFILE, --profile PROFILE\n"
"                        Apply the specified profile to the install command\n"
"  -r REMOTE, --remote REMOTE\n"
"                        Look in the specified remote server\n"
"  -s SETTINGS, --settings SETTINGS\n"
"                        Settings to build the package, overwriting the\n"
"                        defaults. e.g., -s compiler=gcc\n"
"  -u, --update          Check updates exist from upstream remotes"
msgstr ""

#: ../../../reference/commands/creator/test.rst:62
msgid ""
"This command is util for testing existing packages, that have been "
"previously built (with :command:`conan create`, for example). :command:"
"`conan create` will automatically run this test if a *test_package* folder "
"is found besides the *conanfile.py*, or if the :command:`--test-folder` "
"argument is provided to :command:`conan create`."
msgstr ""

#: ../../../reference/commands/creator/test.rst:66
msgid "**Example**:"
msgstr ""

#: ../../../reference/commands/creator/test.rst:68
msgid ""
"$ conan new Hello/0.1 -s -t\n"
"$ mv test_package test_package2\n"
"$ conan create . user/testing\n"
"# doesn't automatically run test, it has been renamed\n"
"# now run test\n"
"$ conan test test_package2 Hello/0.1@user/testing"
msgstr ""

#: ../../../reference/commands/creator/test.rst:77
msgid ""
"The test package folder, could be elsewhere, or could be even applied to "
"different versions of the package."
msgstr ""
