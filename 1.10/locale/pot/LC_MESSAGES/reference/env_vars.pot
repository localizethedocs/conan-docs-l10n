# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2018, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:21+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/env_vars.rst:4
msgid "Environment variables"
msgstr ""

#: ../../../reference/env_vars.rst:6
msgid "These are the environment variables used to customize Conan."
msgstr ""

#: ../../../reference/env_vars.rst:8
msgid ""
"Most of them can be set in the *conan.conf* configuration file (inside your "
"``<userhome>/.conan`` folder). However, this environment variables will take "
"precedence over the *conan.conf* configuration."
msgstr ""

#: ../../../reference/env_vars.rst:14
msgid "CMAKE RELATED VARIABLES"
msgstr ""

#: ../../../reference/env_vars.rst:16
msgid ""
"There are some Conan environment variables that will set the equivalent "
"CMake variable using the :ref:`cmake generator<cmake_generator>` and the :"
"ref:`CMake build tool<cmake_reference>`:"
msgstr ""

#: ../../../reference/env_vars.rst:21
msgid "Variable"
msgstr ""

#: ../../../reference/env_vars.rst:21
msgid "CMake set variable"
msgstr ""

#: ../../../reference/env_vars.rst:23
msgid "CONAN_CMAKE_TOOLCHAIN_FILE"
msgstr ""

#: ../../../reference/env_vars.rst:23
msgid "CMAKE_TOOLCHAIN_FILE"
msgstr ""

#: ../../../reference/env_vars.rst:25
msgid "CONAN_CMAKE_SYSTEM_NAME"
msgstr ""

#: ../../../reference/env_vars.rst:25
msgid "CMAKE_SYSTEM_NAME"
msgstr ""

#: ../../../reference/env_vars.rst:27
msgid "CONAN_CMAKE_SYSTEM_VERSION"
msgstr ""

#: ../../../reference/env_vars.rst:27
msgid "CMAKE_SYSTEM_VERSION"
msgstr ""

#: ../../../reference/env_vars.rst:29
msgid "CONAN_CMAKE_SYSTEM_PROCESSOR"
msgstr ""

#: ../../../reference/env_vars.rst:29
msgid "CMAKE_SYSTEM_PROCESSOR"
msgstr ""

#: ../../../reference/env_vars.rst:31
msgid "CONAN_CMAKE_FIND_ROOT_PATH"
msgstr ""

#: ../../../reference/env_vars.rst:31
msgid "CMAKE_FIND_ROOT_PATH"
msgstr ""

#: ../../../reference/env_vars.rst:33
msgid "CONAN_CMAKE_FIND_ROOT_PATH_MODE_PROGRAM"
msgstr ""

#: ../../../reference/env_vars.rst:33
msgid "CMAKE_FIND_ROOT_PATH_MODE_PROGRAM"
msgstr ""

#: ../../../reference/env_vars.rst:35
msgid "CONAN_CMAKE_FIND_ROOT_PATH_MODE_LIBRARY"
msgstr ""

#: ../../../reference/env_vars.rst:35
msgid "CMAKE_FIND_ROOT_PATH_MODE_LIBRARY"
msgstr ""

#: ../../../reference/env_vars.rst:37
msgid "CONAN_CMAKE_FIND_ROOT_PATH_MODE_INCLUDE"
msgstr ""

#: ../../../reference/env_vars.rst:37
msgid "CMAKE_FIND_ROOT_PATH_MODE_INCLUDE"
msgstr ""

#: ../../../reference/env_vars.rst:42
msgid ""
"See `CMake cross building wiki <https://www.vtk.org/Wiki/"
"CMake_Cross_Compiling>`_"
msgstr ""

#: ../../../reference/env_vars.rst:47
msgid "CONAN_BASH_PATH"
msgstr ""

#: ../../../reference/env_vars.rst:49 ../../../reference/env_vars.rst:80
#: ../../../reference/env_vars.rst:108 ../../../reference/env_vars.rst:194
#: ../../../reference/env_vars.rst:216 ../../../reference/env_vars.rst:236
#: ../../../reference/env_vars.rst:257 ../../../reference/env_vars.rst:288
#: ../../../reference/env_vars.rst:410 ../../../reference/env_vars.rst:444
#: ../../../reference/env_vars.rst:456 ../../../reference/env_vars.rst:467
msgid "**Defaulted to**: Not defined"
msgstr ""

#: ../../../reference/env_vars.rst:51
msgid ""
"Used only in windows to help the :ref:`tools."
"run_in_windows_bash()<run_in_windows_bash_tool>` function to locate our "
"Cygwin/MSYS2 bash. Set it with the bash executable path if it's not in the "
"``PATH`` or you want to use a different one."
msgstr ""

#: ../../../reference/env_vars.rst:55
msgid "CONAN_CMAKE_GENERATOR"
msgstr ""

#: ../../../reference/env_vars.rst:57
msgid ""
"Conan ``CMake`` helper class is just a convenience to help to translate "
"conan settings and options into cmake parameters, but you can easily do it "
"yourself, or adapt it."
msgstr ""

#: ../../../reference/env_vars.rst:60
msgid ""
"For some compiler configurations, as ``gcc`` it will use by default the "
"``Unix Makefiles`` cmake generator. Note that this is not a package "
"settings, building it with makefiles or other build system, as Ninja, should "
"lead to the same binary if using appropriately the same underlying compiler "
"settings. So it doesn't make sense to provide a setting or option for this."
msgstr ""

#: ../../../reference/env_vars.rst:65
msgid ""
"So it can be set with the environment variable ``CONAN_CMAKE_GENERATOR``. "
"Just set its value to your desired cmake generator (as ``Ninja``)."
msgstr ""

#: ../../../reference/env_vars.rst:69
msgid "CONAN_COLOR_DARK"
msgstr ""

#: ../../../reference/env_vars.rst:71 ../../../reference/env_vars.rst:116
#: ../../../reference/env_vars.rst:361 ../../../reference/env_vars.rst:401
msgid "**Defaulted to**: ``False``/``0``"
msgstr ""

#: ../../../reference/env_vars.rst:73
msgid ""
"Set it to ``True``/``1`` to use dark colors in the terminal output, instead "
"of light ones. Useful for terminal or consoles with light colors as white, "
"so text is rendered in Blue, Black, Magenta, instead of Yellow, Cyan, White."
msgstr ""

#: ../../../reference/env_vars.rst:78
msgid "CONAN_COLOR_DISPLAY"
msgstr ""

#: ../../../reference/env_vars.rst:82
msgid ""
"By default if undefined conan output will use color if a tty is detected."
msgstr ""

#: ../../../reference/env_vars.rst:84
msgid ""
"Set it to ``False``/``0`` to remove console output colors. Set it to "
"``True``/``1`` to force console output colors."
msgstr ""

#: ../../../reference/env_vars.rst:88
msgid "CONAN_COMPRESSION_LEVEL"
msgstr ""

#: ../../../reference/env_vars.rst:90
msgid "**Defaulted to**: ``9``"
msgstr ""

#: ../../../reference/env_vars.rst:92
msgid ""
"Conan uses ``tgz`` compression for archives before uploading them to "
"remotes. The default compression level is good and fast enough for most "
"cases, but users with huge packages might want to change it and set "
"``CONAN_COMPRESSION_LEVEL`` environment variable to a lower number, which is "
"able to get slightly bigger archives but much better compression speed."
msgstr ""

#: ../../../reference/env_vars.rst:98
msgid "CONAN_CPU_COUNT"
msgstr ""

#: ../../../reference/env_vars.rst:100
msgid "**Defaulted to**: Number of available cores in your machine."
msgstr ""

#: ../../../reference/env_vars.rst:102
msgid ""
"Set the number of cores that the :ref:`tools.cpu_count()<cpu_count>` will "
"return. Conan recipes can use the cpu_count() tool to build the library "
"using more than one core."
msgstr ""

#: ../../../reference/env_vars.rst:106
msgid "CONAN_DEFAULT_PROFILE_PATH"
msgstr ""

#: ../../../reference/env_vars.rst:110
msgid ""
"This variable can be used to define a path to an existing profile file that "
"Conan will use as default. If relative, the path will be resolved from the "
"profiles folder."
msgstr ""

#: ../../../reference/env_vars.rst:114
msgid "CONAN_NON_INTERACTIVE"
msgstr ""

#: ../../../reference/env_vars.rst:118
msgid ""
"This environment variable, if set to ``True``/``1``, will prevent "
"interactive prompts. Invocations of Conan commands where an interactive "
"prompt would otherwise appear, will fail instead."
msgstr ""

#: ../../../reference/env_vars.rst:121
msgid ""
"This variable can also be set in ``conan.conf`` as ``non_interactive = "
"True`` in the ``[general]`` section."
msgstr ""

#: ../../../reference/env_vars.rst:126
msgid "CONAN_ENV_XXXX_YYYY"
msgstr ""

#: ../../../reference/env_vars.rst:128
msgid ""
"You can override the default settings (located in your ``~/.conan/profiles/"
"default`` directory) with environment variables."
msgstr ""

#: ../../../reference/env_vars.rst:130
msgid ""
"The ``XXXX`` is the setting name upper-case, and the ``YYYY`` (optional) is "
"the sub-setting name."
msgstr ""

#: ../../../reference/env_vars.rst:132
msgid "**Examples**:"
msgstr ""

#: ../../../reference/env_vars.rst:134
msgid "Override the default compiler:"
msgstr ""

#: ../../../reference/env_vars.rst:136
msgid "CONAN_ENV_COMPILER = \"Visual Studio\""
msgstr ""

#: ../../../reference/env_vars.rst:140
msgid "Override the default compiler version:"
msgstr ""

#: ../../../reference/env_vars.rst:142
msgid "CONAN_ENV_COMPILER_VERSION = \"14\""
msgstr ""

#: ../../../reference/env_vars.rst:146
msgid "Override the architecture:"
msgstr ""

#: ../../../reference/env_vars.rst:148
msgid "CONAN_ENV_ARCH = \"x86\""
msgstr ""

#: ../../../reference/env_vars.rst:155
msgid "CONAN_LOG_RUN_TO_FILE"
msgstr ""

#: ../../../reference/env_vars.rst:157 ../../../reference/env_vars.rst:266
#: ../../../reference/env_vars.rst:477
msgid "**Defaulted to**: ``0``"
msgstr ""

#: ../../../reference/env_vars.rst:159
msgid ""
"If set to ``1`` will log every ``self.run(\"{Some command}\")`` command "
"output in a file called ``conan_run.log``. That file will be located in the "
"current execution directory, so if we call ``self.run`` in the conanfile."
"py's build method, the file will be located in the build folder."
msgstr ""

#: ../../../reference/env_vars.rst:163
msgid ""
"In case we execute ``self.run`` in our ``source()`` method, the ``conan_run."
"log`` will be created in the source directory, but then conan will copy it "
"to the ``build`` folder following the regular execution flow. So the "
"``conan_run.log`` will contain all the logs from your conanfile.py command "
"executions."
msgstr ""

#: ../../../reference/env_vars.rst:167
msgid ""
"The file can be included in the conan package (for debugging purposes) using "
"the ``package`` method."
msgstr ""

#: ../../../reference/env_vars.rst:169
msgid ""
"def package(self):\n"
"    self.copy(pattern=\"conan_run.log\", dst=\"\", keep_path=False)"
msgstr ""

#: ../../../reference/env_vars.rst:175
msgid "CONAN_LOG_RUN_TO_OUTPUT"
msgstr ""

#: ../../../reference/env_vars.rst:177
msgid "**Defaulted to**: ``1``"
msgstr ""

#: ../../../reference/env_vars.rst:179
msgid ""
"If set to ``0`` conan won't print the command output to the stdout. Can be "
"used with ``CONAN_LOG_RUN_TO_FILE`` set to ``1`` to log only to file and not "
"printing the output."
msgstr ""

#: ../../../reference/env_vars.rst:183
msgid "CONAN_LOGGING_LEVEL"
msgstr ""

#: ../../../reference/env_vars.rst:185
msgid "**Defaulted to**: ``50``"
msgstr ""

#: ../../../reference/env_vars.rst:187
msgid ""
"By default conan logging level is only set for critical events. If you want "
"to show more detailed logging information, set this variable to lower "
"values, as ``10`` to show debug information."
msgstr ""

#: ../../../reference/env_vars.rst:192
msgid "CONAN_LOGIN_USERNAME, CONAN_LOGIN_USERNAME_{REMOTE_NAME}"
msgstr ""

#: ../../../reference/env_vars.rst:196
msgid ""
"You can define the username for the authentication process using environment "
"variables. Conan will use a variable **CONAN_LOGIN_USERNAME_{REMOTE_NAME}**, "
"if the variable is not declared Conan will use the variable "
"**CONAN_LOGIN_USERNAME**, if the variable is not declared either, Conan will "
"request to the user to input a username."
msgstr ""

#: ../../../reference/env_vars.rst:201 ../../../reference/env_vars.rst:243
msgid ""
"These variables are useful for unattended executions like CI servers or "
"automated tasks."
msgstr ""

#: ../../../reference/env_vars.rst:203
msgid ""
"If the remote name contains \"-\" you have to replace it with \"_\" in the "
"variable name:"
msgstr ""

#: ../../../reference/env_vars.rst:205
msgid "For example: For a remote named \"conan-center\":"
msgstr ""

#: ../../../reference/env_vars.rst:207
msgid "SET CONAN_LOGIN_USERNAME_CONAN_CENTER=MyUser"
msgstr ""

#: ../../../reference/env_vars.rst:214
msgid "CONAN_MAKE_PROGRAM"
msgstr ""

#: ../../../reference/env_vars.rst:218
msgid "Specify an alternative ``make`` program to use with:"
msgstr ""

#: ../../../reference/env_vars.rst:220
msgid ""
"The build helper :ref:`AutoToolsBuildEnvironment<autotools_reference>`. Will "
"invoke the specified executable in the `make` method."
msgstr ""

#: ../../../reference/env_vars.rst:221
msgid ""
"The build helper :ref:`build helper CMake<cmake_reference>`. By adjusting "
"the CMake variable `CMAKE_MAKE_PROGRAM <https://cmake.org/cmake/help/v3.0/"
"variable/CMAKE_MAKE_PROGRAM.html>`_."
msgstr ""

#: ../../../reference/env_vars.rst:223 ../../../reference/env_vars.rst:489
msgid "For example:"
msgstr ""

#: ../../../reference/env_vars.rst:225
msgid ""
"CONAN_MAKE_PROGRAM=\"/path/to/mingw32-make\"\n"
"\n"
"# Or only the exe name if it is in the path\n"
"\n"
"CONAN_MAKE_PROGRAM=\"mingw32-make\""
msgstr ""

#: ../../../reference/env_vars.rst:234
msgid "CONAN_PASSWORD, CONAN_PASSWORD_{REMOTE_NAME}"
msgstr ""

#: ../../../reference/env_vars.rst:238
msgid ""
"You can define the authentication password using environment variables. "
"Conan will use a variable **CONAN_PASSWORD_{REMOTE_NAME}**, if the variable "
"is not declared Conan will use the variable **CONAN_PASSWORD**, if the "
"variable is not declared either, Conan will request to the user to input a "
"password."
msgstr ""

#: ../../../reference/env_vars.rst:245
msgid ""
"The remote name is transformed to all uppercase. If the remote name contains "
"\"-\", you have to replace it with \"_\" in the variable name."
msgstr ""

#: ../../../reference/env_vars.rst:248
msgid "For example, for a remote named \"conan-center\":"
msgstr ""

#: ../../../reference/env_vars.rst:250
msgid "SET CONAN_PASSWORD_CONAN_CENTER=Mypassword"
msgstr ""

#: ../../../reference/env_vars.rst:255
msgid "CONAN_HOOKS"
msgstr ""

#: ../../../reference/env_vars.rst:259
msgid ""
"Can be set to a comma separated list with the names of the hooks that will "
"be executed when running a Conan command."
msgstr ""

#: ../../../reference/env_vars.rst:264
msgid "CONAN_PRINT_RUN_COMMANDS"
msgstr ""

#: ../../../reference/env_vars.rst:268
msgid ""
"If set to ``1``, every ``self.run(\"{Some command}\")`` call will log the "
"executed command {Some command} to the output."
msgstr ""

#: ../../../reference/env_vars.rst:270
msgid "For example: In the `conanfile.py` file:"
msgstr ""

#: ../../../reference/env_vars.rst:272
msgid ""
"self.run(\"cd %s && %s ./configure\" % (self.ZIP_FOLDER_NAME, env_line))"
msgstr ""

#: ../../../reference/env_vars.rst:276
msgid "Will print to the output (stout and/or file):"
msgstr ""

#: ../../../reference/env_vars.rst:278
msgid ""
"----Running------\n"
"> cd zlib-1.2.9 && env LIBS=\"\" LDFLAGS=\" -m64   $LDFLAGS\" CFLAGS=\"-"
"mstackrealign -fPIC $CFLAGS -m64  -s -DNDEBUG  \" CPPFLAGS=\"$CPPFLAGS -m64  "
"-s -DNDEBUG  \" C_INCLUDE_PATH=$C_INCLUDE_PATH: "
"CPLUS_INCLUDE_PATH=$CPLUS_INCLUDE_PATH: ./configure\n"
"-----------------\n"
"..."
msgstr ""

#: ../../../reference/env_vars.rst:286
msgid "CONAN_READ_ONLY_CACHE"
msgstr ""

#: ../../../reference/env_vars.rst:290
msgid ""
"This environment variable if defined, will make the conan cache read-only. "
"This could prevent developers to accidentally edit some header of their "
"dependencies while navigating code in their IDEs."
msgstr ""

#: ../../../reference/env_vars.rst:294
msgid ""
"This variable can also be set in ``conan.conf`` as ``read_only_cache = "
"True`` in the ``[general]`` section."
msgstr ""

#: ../../../reference/env_vars.rst:297
msgid ""
"The packages are made read-only in two points: when a package is built from "
"sources, and when a package is retrieved from a remote repository."
msgstr ""

#: ../../../reference/env_vars.rst:300
msgid ""
"The packages are not modified for upload, so users should take that into "
"consideration before uploading packages, as they will be read-only and that "
"could have other side-effects."
msgstr ""

#: ../../../reference/env_vars.rst:305
msgid ""
"It is not recommended to upload packages directly from developers machines "
"with read-only mode as it could lead to inconsistencies. For better "
"reproducibility we recommend that packages are created and uploaded by CI "
"machines."
msgstr ""

#: ../../../reference/env_vars.rst:311
msgid "CONAN_RUN_TESTS"
msgstr ""

#: ../../../reference/env_vars.rst:313
msgid "**Defaulted to**: Not defined (True/False if defined)"
msgstr ""

#: ../../../reference/env_vars.rst:315
msgid ""
"This environment variable (if defined) can be used in ``conanfile.py`` to "
"enable/disable the tests for a library or application."
msgstr ""

#: ../../../reference/env_vars.rst:318
msgid ""
"It can be used as a convention variable and it's specially useful if a "
"library has unit tests and you are doing :ref:`cross building "
"<cross_building>`, the target binary can't be executed in current host "
"machine building the package."
msgstr ""

#: ../../../reference/env_vars.rst:322
msgid "It can be defined in your profile files at ``~/.conan/profiles``"
msgstr ""

#: ../../../reference/env_vars.rst:324
msgid ""
"...\n"
"[env]\n"
"CONAN_RUN_TESTS=False"
msgstr ""

#: ../../../reference/env_vars.rst:330
msgid ""
"or declared in command line when invoking :command:`conan install` to reduce "
"the variable scope for conan execution"
msgstr ""

#: ../../../reference/env_vars.rst:332
msgid "$ conan install . -e CONAN_RUN_TEST=0"
msgstr ""

#: ../../../reference/env_vars.rst:336
msgid ""
"See how to retrieve the value with :ref:`tools.get_env() <tools_get_env>` "
"and check a use case with :ref:`a header only with unit tests recipe "
"<header_only_unit_tests_tip>` while cross building."
msgstr ""

#: ../../../reference/env_vars.rst:339
msgid ""
"See example of build method in ``conanfile.py`` to enable/disable running "
"tests with CMake:"
msgstr ""

#: ../../../reference/env_vars.rst:341
msgid ""
"from conans import ConanFile, CMake, tools\n"
"\n"
"class HelloConan(ConanFile):\n"
"    name = \"Hello\"\n"
"    version = \"0.1\"\n"
"\n"
"    def build(self):\n"
"        cmake = CMake(self)\n"
"        cmake.configure()\n"
"        cmake.build()\n"
"        if tools.get_env(\"CONAN_RUN_TESTS\", True):\n"
"            cmake.test()"
msgstr ""

#: ../../../reference/env_vars.rst:359
msgid "CONAN_SKIP_VS_PROJECTS_UPGRADE"
msgstr ""

#: ../../../reference/env_vars.rst:363
msgid ""
"When set to ``True``/``1``, the :ref:`build_sln_command<build_sln_command>`, "
"the :ref:`msvc_build_command<msvc_build_command>` and the :ref:"
"`MSBuild()<msbuild>` build helper, will not call ``devenv`` command to "
"upgrade the ``sln`` project, irrespective of the ``upgrade_project`` "
"parameter value."
msgstr ""

#: ../../../reference/env_vars.rst:368
msgid "CONAN_SYSREQUIRES_MODE"
msgstr ""

#: ../../../reference/env_vars.rst:370
msgid ""
"**Defaulted to**: ``enabled`` allowed values ``enabled``/``verify``/"
"``disabled``"
msgstr ""

#: ../../../reference/env_vars.rst:372
msgid ""
"This environment variable controls whether system packages should be "
"installed into the system via ``SystemPackageTool`` helper, typically used "
"in :ref:`method_system_requirements`."
msgstr ""

#: ../../../reference/env_vars.rst:375
msgid "See values behavior:"
msgstr ""

#: ../../../reference/env_vars.rst:377
msgid ""
"``enabled``: Default value and any call to install method of "
"``SystemPackageTool`` helper should modify the system packages."
msgstr ""

#: ../../../reference/env_vars.rst:379
msgid ""
"``verify``: Display a report of system packages to be installed and abort "
"with exception. Useful if you don't want to allow conan to modify your "
"system but you want to get a report of packages to be installed."
msgstr ""

#: ../../../reference/env_vars.rst:382
msgid ""
"``disabled``: Display a report of system packages that should be installed "
"but continue the conan execution and doesn't install any package in your "
"system. Useful if you want to keep manual control of these dependencies, for "
"example in your development environment."
msgstr ""

#: ../../../reference/env_vars.rst:387
msgid "CONAN_SYSREQUIRES_SUDO"
msgstr ""

#: ../../../reference/env_vars.rst:389
msgid "**Defaulted to**: ``True``/``1``"
msgstr ""

#: ../../../reference/env_vars.rst:391
msgid ""
"This environment variable controls whether ``sudo`` is used for installing "
"apt, yum, etc. system packages via ``SystemPackageTool`` helper, typically "
"used in ``system_requirements()``. By default when the environment variable "
"does not exist, \"True\" is assumed, and ``sudo`` is automatically prefixed "
"in front of package management commands.  If you set this to \"False\" or "
"\"0\" ``sudo`` will not be prefixed in front of the commands, however "
"installation or updates of some packages may fail due to a lack of "
"privilege, depending on the user account Conan is running under."
msgstr ""

#: ../../../reference/env_vars.rst:399
msgid "CONAN_TEMP_TEST_FOLDER"
msgstr ""

#: ../../../reference/env_vars.rst:403
msgid ""
"Activating this variable will make build folder of *test_package* to be "
"created in the temporary folder of your machine."
msgstr ""

#: ../../../reference/env_vars.rst:408
msgid "CONAN_TRACE_FILE"
msgstr ""

#: ../../../reference/env_vars.rst:412
msgid ""
"If you want extra logging information about your conan command executions, "
"you can enable it by setting the ``CONAN_TRACE_FILE`` environment variable. "
"Set it with an absolute path to a file."
msgstr ""

#: ../../../reference/env_vars.rst:415
msgid "export CONAN_TRACE_FILE=/tmp/conan_trace.log"
msgstr ""

#: ../../../reference/env_vars.rst:419
msgid ""
"When the conan command is executed, some traces will be appended to the "
"specified file. Each line contains a JSON object. The ``_action`` field "
"contains the action type, like ``COMMAND`` for command executions, "
"``EXCEPTION`` for errors and ``REST_API_CALL`` for HTTP calls to a remote."
msgstr ""

#: ../../../reference/env_vars.rst:423
msgid ""
"The logger will append the traces until the ``CONAN_TRACE_FILE`` variable is "
"unset or pointed to a different file."
msgstr ""

#: ../../../reference/env_vars.rst:427
msgid "Read more here: :ref:`logging_and_debugging`"
msgstr ""

#: ../../../reference/env_vars.rst:430
msgid "CONAN_USER, CONAN_CHANNEL"
msgstr ""

#: ../../../reference/env_vars.rst:432
msgid ""
"Environment variables commonly used in ``test_package`` conanfiles, to allow "
"package creation for different users and channel without modifying the code. "
"They are also the environment variables that will be checked when using "
"``self.user`` or ``self.channel`` in ``conanfile.py`` package recipes in "
"user space, where a user/channel has not been assigned yet (it is assigned "
"when exported in the local cache)."
msgstr ""

#: ../../../reference/env_vars.rst:439
msgid "Read more about it in :ref:`user_channel`"
msgstr ""

#: ../../../reference/env_vars.rst:442
msgid "CONAN_USER_HOME"
msgstr ""

#: ../../../reference/env_vars.rst:446
msgid ""
"Allows defining a custom conan cache directory. Can be useful for concurrent "
"builds under different users in CI, to retrieve and store per-project "
"specific dependencies (useful for deployment, for example)."
msgstr ""

#: ../../../reference/env_vars.rst:451
msgid "Read more about it in :ref:`custom_cache`"
msgstr ""

#: ../../../reference/env_vars.rst:454
msgid "CONAN_USER_HOME_SHORT"
msgstr ""

#: ../../../reference/env_vars.rst:458
msgid ""
"Specify the base folder to be used with the :ref:`short "
"paths<short_paths_reference>` feature. When not specified, the packages "
"marked as `short_paths` will be stored in the ``C:\\.conan`` (or the current "
"drive letter)."
msgstr ""

#: ../../../reference/env_vars.rst:461
msgid ""
"If set to ``None``, it will disable the `short_paths` feature in Windows for "
"modern Windows that enable long paths at the system level."
msgstr ""

#: ../../../reference/env_vars.rst:465
msgid "CONAN_USE_ALWAYS_SHORT_PATHS"
msgstr ""

#: ../../../reference/env_vars.rst:469
msgid ""
"If defined to ``True`` or ``1``, every package will be stored in the *short "
"paths directory* resolved by Conan after evaluating "
"``CONAN_USER_HOME_SHORT`` variable (see above). This variable, therefore, "
"overrides the value defined in recipes for the attribute :ref:`short "
"paths<short_paths_reference>`."
msgstr ""

#: ../../../reference/env_vars.rst:475
msgid "CONAN_VERBOSE_TRACEBACK"
msgstr ""

#: ../../../reference/env_vars.rst:479
msgid ""
"When an error is raised in a recipe or even in the conan code base, if set "
"to ``1`` it will show the complete traceback to ease the debugging."
msgstr ""

#: ../../../reference/env_vars.rst:482
msgid "CONAN_VS_INSTALLATION_PREFERENCE"
msgstr ""

#: ../../../reference/env_vars.rst:484
msgid "**Defaulted to**: ``Enterprise, Professional, Community, BuildTools``"
msgstr ""

#: ../../../reference/env_vars.rst:486
msgid ""
"This environment variables defines the order of preference when searching "
"for a Visual installation product. This would affect every tool that uses "
"``tools.vs_installation_path()`` and will search in the order indicated."
msgstr ""

#: ../../../reference/env_vars.rst:491
msgid ""
"set CONAN_VS_INSTALLATION_PREFERENCE=Enterprise, Professional, Community, "
"BuildTools"
msgstr ""

#: ../../../reference/env_vars.rst:495
msgid ""
"It can also be used to fix the type of installation you want to use "
"indicating just one product type:"
msgstr ""

#: ../../../reference/env_vars.rst:497
msgid "set CONAN_VS_INSTALLATION_PREFERENCE=BuildTools"
msgstr ""
