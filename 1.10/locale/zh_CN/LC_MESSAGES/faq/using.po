# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2018, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:21+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../faq/using.rst:2
msgid "Using conan"
msgstr ""

#: ../../../faq/using.rst:5
msgid "How to package header-only libraries?"
msgstr ""

#: ../../../faq/using.rst:7
msgid ""
"Packaging header-only libraries is similar to other packages, make sure to "
"first read and understand the :ref:`packaging getting started "
"guide<packaging_getting_started>`. The main difference is that the package "
"recipe is typically much simpler. There are different approaches depending "
"if you want Conan to run the library unit tests while creating the package "
"or not. Full details :ref:`in this how-to<header_only>`."
msgstr ""

#: ../../../faq/using.rst:13
msgid "When to use settings or options?"
msgstr ""

#: ../../../faq/using.rst:15
msgid ""
"While creating a package you might want to add different configurations and "
"variants of the package. There are 2 main inputs that define packages: "
"settings and options. Read about them in :ref:`this "
"section<settings_vs_options>`"
msgstr ""

#: ../../../faq/using.rst:19
msgid "How to obtain the dependents of a given package?"
msgstr ""

#: ../../../faq/using.rst:21
msgid ""
"The search model for Conan in commands such as :command:`conan install` and :"
"command:`conan info` is done from the downstream or \"consumer\" package as "
"the starting node of the dependency graph and upstream."
msgstr ""

#: ../../../faq/using.rst:24
msgid "$ conan info Poco/1.8.1@pocoproject/stable"
msgstr ""

#: ../../../faq/using.rst:31
msgid ""
"The inverse model (from upstream to downstream) is not simple to obtain for "
"Conan packages, because the dependency graph is not unique: It changes for "
"every configuration. The graph can be different for different operating "
"systems or just by changing some package options. So you cannot query which "
"packages are dependent on ``MyLib/0.1@user/channel``, but which packages are "
"dependent on ``MyLib/0.1@user/channel:63da998e3642b50bee33`` binary package, "
"and the response can contain many different binary packages for the same "
"recipe, like ``MyDependent/0.1@user/channel:packageID1... ID2... "
"MyDependent/0.1@user/channel:packageIDN``. That is the reason why :command:"
"`conan info` and :command:`conan install` need a profile (default profile or "
"one given with ``--profile```) or installation files ``conanbuildinfo.txt`` "
"to look for settings and options."
msgstr ""

#: ../../../faq/using.rst:39
msgid ""
"In order to show the inverse graph model, the bottom node is needed to build "
"the graph upstream and an additional node too to get the inverse list. This "
"is usually done to get the build order in case a package is updated. For "
"example, if we want to know the build order of the Poco dependency graph in "
"case OpenSSL is changed we could type:"
msgstr ""

#: ../../../faq/using.rst:43
msgid ""
"$ conan info Poco/1.8.1@pocoproject/stable -bo OpenSSL/1.0.2m@conan/stable\n"
"[OpenSSL/1.0.2m@conan/stable], [Poco/1.8.1@pocoproject/stable]"
msgstr ""

#: ../../../faq/using.rst:48
msgid ""
"So, if OpenSSL is changed, we would need to rebuild it (of course) and "
"rebuild Poco."
msgstr ""

#: ../../../faq/using.rst:51
msgid ""
"Packages got outdated when uploading an unchanged recipe from a different "
"machine"
msgstr ""

#: ../../../faq/using.rst:53
msgid ""
"Usually this is caused due to different line endings in Windows and Linux/"
"macOS. Normally this happens when Windows uploads it with CRLF while Linux/"
"macOS do it with only LF. Conan does not change the line endings to not "
"interfere with user. We suggest going with LF line endings always. If this "
"is being caused by git, it could be solved with :command:`git config --"
"system core.autocrlf input`."
msgstr ""

#: ../../../faq/using.rst:60
msgid ""
"Is there any recommendation regarding which ``<user>`` or ``<channel>`` to "
"use in a reference?"
msgstr ""

#: ../../../faq/using.rst:62
msgid ""
"A Conan reference is defined by the following template: ``<library-name>/"
"<library-version>@<user>/<channel>``"
msgstr ""

#: ../../../faq/using.rst:64
msgid ""
"The ``<user>`` term in a Conan reference is basically a namespace to avoid "
"collisions of libraries with the same name and version in the local cache "
"and in the same remote. This field is usually populated with the author's "
"name of the package recipe (which could be different from the author of the "
"library itself) or with the name of the organization creating it. Here are "
"some examples from Conan Center:"
msgstr ""

#: ../../../faq/using.rst:68
msgid ""
"OpenSSL/1.1.1@conan/stable\n"
"CLI11/1.6.1@cliutils/stable\n"
"CTRE/2.1@ctre/stable\n"
"Expat/2.2.5@pix4d/stable\n"
"FakeIt/2.0.5@gasuketsu/stable\n"
"Poco/1.9.0@pocoproject/stable\n"
"c-blosc/v1.14.4@francescalted/stable"
msgstr ""

#: ../../../faq/using.rst:78
msgid ""
"In the case of the ``<channel>`` term, normally OSS package creators use "
"``testing`` when they are developing a recipe (e.g., It compiles only in few "
"configurations) and ``stable`` when the recipe is ready enough to be used (e."
"g., It is built and tested in a wide range of configurations)."
msgstr ""

#: ../../../faq/using.rst:82
msgid ""
"From the perspective of a library developer, channels could be used to "
"create different scopes of your library. For example, use ``rc`` channel for "
"release candidates, maybe ``experimental`` for those kind of features, or "
"even ``qa``/``testing`` before the library is checked by QA department or "
"testers."
msgstr ""
