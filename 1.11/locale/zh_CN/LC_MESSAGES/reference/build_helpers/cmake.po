# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2018, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/build_helpers/cmake.rst:4
msgid "CMake"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:6
msgid ""
"The `CMake` class helps us to invoke `cmake` command with the generator, "
"flags and definitions, reflecting the specified Conan settings."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:8
msgid "There are two ways to invoke your cmake tools:"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:10
msgid ""
"Using the helper attributes ``cmake.command_line`` and ``cmake."
"build_config``:"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:12
msgid ""
"from conans import ConanFile, CMake\n"
"\n"
" class ExampleConan(ConanFile):\n"
"     ...\n"
"\n"
"     def build(self):\n"
"         cmake = CMake(self)\n"
"         self.run('cmake \"%s\" %s' % (self.source_folder, cmake."
"command_line))\n"
"         self.run('cmake --build . %s' % cmake.build_config)\n"
"         self.run('cmake --build . --target install')"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:25
msgid "Using the helper methods:"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:27
msgid ""
"from conans import ConanFile, CMake\n"
"\n"
"class ExampleConan(ConanFile):\n"
"    ...\n"
"\n"
"    def build(self):\n"
"        cmake = CMake(self)\n"
"        # same as cmake.configure(source_folder=self.source_folder, "
"build_folder=self.build_folder)\n"
"        cmake.configure()\n"
"        cmake.build()\n"
"        cmake.test() # Build the \"RUN_TESTS\" or \"test\" target\n"
"        # Build the \"install\" target, defining CMAKE_INSTALL_PREFIX to "
"self.package_folder\n"
"        cmake.install()"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:45
msgid "Constructor"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:47
msgid ""
"class CMake(object):\n"
"\n"
"    def __init__(self, conanfile, generator=None, cmake_system_name=True,\n"
"                 parallel=True, build_type=None, toolset=None, "
"make_program=None,\n"
"                 set_cmake_flags=False)"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:64
#: ../../../reference/build_helpers/cmake.rst:266
#: ../../../reference/build_helpers/cmake.rst:280
#: ../../../reference/build_helpers/cmake.rst:294
#: ../../../reference/build_helpers/cmake.rst:308
msgid "Parameters:"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:56
msgid ""
"**conanfile** (Required): Conanfile object. Usually ``self`` in a *conanfile."
"py*"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:57
msgid ""
"**generator** (Optional, Defaulted to ``None``): Specify a custom generator "
"instead of autodetect it. e.g., \"MinGW Makefiles\""
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:58
msgid ""
"**cmake_system_name** (Optional, Defaulted to ``True``): Specify a custom "
"value for ``CMAKE_SYSTEM_NAME`` instead of autodetect it."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:59
msgid ""
"**parallel** (Optional, Defaulted to ``True``): If ``True``, will append the "
"`-jN` attribute for parallel building being N the :ref:"
"`cpu_count()<tools_cpu_count>`."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:60
msgid ""
"**build_type** (Optional, Defaulted to ``None``): Force the build type "
"instead of taking the value from the settings. Note this will also make the "
"``CMAKE_BUILD_TYPE`` to be declared for multi configuration generators."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:62
msgid ""
"**toolset** (Optional, Defaulted to ``None``): Specify a toolset for Visual "
"Studio."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:63
msgid ""
"**make_program** (Optional, Defaulted to ``None``): Indicate path to "
"``make``."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:64
msgid ""
"**set_cmake_flags** (Optional, Defaulted to ``None``): Whether or not to set "
"CMake flags like ``CMAKE_CXX_FLAGS``, ``CMAKE_C_FLAGS``, etc."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:67
msgid "Attributes"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:70
msgid "verbose"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:72
msgid "**Defaulted to**: ``False``"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:74
msgid ""
"Set it to ``True`` or ``False`` to automatically set the definition "
"``CMAKE_VERBOSE_MAKEFILE``."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:76
msgid ""
"from conans import ConanFile, CMake\n"
"\n"
"class ExampleConan(ConanFile):\n"
"    ...\n"
"\n"
"    def build(self):\n"
"        cmake = CMake(self)\n"
"        cmake.verbose = True\n"
"        cmake.configure()\n"
"        cmake.build()"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:91
msgid "build_folder (Read only)"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:93
msgid ""
"Build folder where the ``configure()`` and ``build()`` methods will be "
"called."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:96
msgid "build_type [Deprecated]"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:98
msgid ""
"Build type can be forced with this variable instead of taking it from the "
"settings."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:101
msgid "flags (Read only)"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:103
msgid ""
"Flag conversion of ``definitions`` to be used in the command line invocation "
"(``-D``)."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:106
msgid "is_multi_configuration (Read only)"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:108
msgid ""
"Indicates whether the generator selected allows builds with multi "
"configuration: Release, Debug... Multi configuration generators are Visual "
"Studio and Xcode ones."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:112
msgid "command_line (Read only)"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:114
msgid ""
"Arguments and flags calculated by the build helper that will be applied. It "
"indicates the generator, the Conan definitions and the flags converted from "
"the specified Conan settings. For example:"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:117
msgid ""
"-G \"Unix Makefiles\" -DCMAKE_BUILD_TYPE=Release ... -DCONAN_C_FLAGS=-m64 -"
"Wno-dev"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:122
msgid "build_config (Read only)"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:124
msgid ""
"Value for :command:`--config` option for Multi-configuration IDEs. This flag "
"will only be set if the generator ``is_multi_configuration`` and "
"``build_type`` was not forced in constructor class."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:127
msgid "An example of the value of this property could be:"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:129
msgid "--config Release"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:134
msgid "definitions"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:136
msgid ""
"The CMake helper will automatically append some definitions based on your "
"settings:"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:139
#: ../../../reference/build_helpers/cmake.rst:193
msgid "Variable"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:139
#: ../../../reference/build_helpers/cmake.rst:193
msgid "Description"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:141
msgid "CMAKE_BUILD_TYPE"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:141
msgid ""
"Debug, Release... from ``self.settings.build_type`` or ``build_type`` "
"attribute **only** if ``is_multi_configuration``"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:143
msgid "CMAKE_OSX_ARCHITECTURES"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:143
msgid "``i386`` if architecture is x86 in an OSX system"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:145
msgid "BUILD_SHARED_LIBS"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:145
msgid "Only if your recipe has a ``shared`` option"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:147
msgid "CONAN_COMPILER"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:147
msgid "Conan internal variable to check the compiler"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:149
msgid "CMAKE_SYSTEM_NAME"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:149
msgid "Set to ``self.settings.os`` value if cross-building is detected"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:151
msgid "CMAKE_SYSTEM_VERSION"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:151
msgid "Set to ``self.settings.os_version`` value if cross-building is detected"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:153
msgid "CMAKE_ANDROID_ARCH_ABI"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:153
msgid "Set to a suitable value if cross-building to an Android is detected"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:155
msgid "CONAN_LIBCXX"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:155
msgid "Set to ``self.settings.compiler.libcxx`` value"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:157
msgid "CONAN_CMAKE_SYSTEM_PROCESSOR"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:157
#: ../../../reference/build_helpers/cmake.rst:159
#: ../../../reference/build_helpers/cmake.rst:161
#: ../../../reference/build_helpers/cmake.rst:163
#: ../../../reference/build_helpers/cmake.rst:165
msgid "Definition set only if same environment variable is declared by user"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:159
msgid "CONAN_CMAKE_FIND_ROOT_PATH"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:161
msgid "CONAN_CMAKE_FIND_ROOT_PATH_MODE_PROGRAM"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:163
msgid "CONAN_CMAKE_FIND_ROOT_PATH_MODE_LIBRARY"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:165
msgid "CONAN_CMAKE_FIND_ROOT_PATH_MODE_INCLUDE"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:167
msgid "CONAN_CMAKE_POSITION_INDEPENDENT_CODE"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:167
msgid ""
"Set when ``fPIC`` option exists and ``True`` or ``fPIC`` exists and "
"``False`` but ``shared`` option exists and ``True``"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:169
msgid "CONAN_SHARED_LINKER_FLAGS"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:169
msgid "Set to ``-m32`` or ``-m64`` values based on the architecture"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:171
msgid "CONAN_C_FLAGS"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:171
#: ../../../reference/build_helpers/cmake.rst:173
msgid ""
"Set to ``-m32`` or ``-m64`` values based on the architecture and ``/MP`` for "
"MSVS"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:173
msgid "CONAN_CXX_FLAGS"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:175
msgid "CONAN_LINK_RUNTIME"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:175
msgid ""
"Set to the runtime value from ``self.settings.compiler.runtime`` for MSVS"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:177
msgid "CONAN_CMAKE_CXX_STANDARD"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:177
msgid "Set to the ``self.settings.cppstd`` value"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:179
msgid "CONAN_CMAKE_CXX_EXTENSIONS"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:179
msgid ""
"Set to the ``self.settings.cppstd`` value when GNU extensions are enabled"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:181
msgid "CONAN_STD_CXX_FLAG"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:181
msgid ""
"Set to the ``self.settings.cppstd`` value. Flag for compiler directly (for "
"CMake < 3.1)"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:183
msgid "CMAKE_EXPORT_NO_PACKAGE_REGISTRY"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:183
msgid "Defined by default to disable the package registry"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:185
msgid "CONAN_IN_LOCAL_CACHE"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:185
msgid ""
"``ON`` if the build runs in local cache, ``OFF`` if running in a user folder"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:187
msgid "CONAN_EXPORTED"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:187
msgid "Defined when CMake is called using Conan CMake helper"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:190
msgid ""
"There are some definitions set to be used later on the the ``install()`` "
"step too:"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:195
msgid "CMAKE_INSTALL_PREFIX"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:195
msgid "Set to ``conanfile.package_folder`` value."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:197
msgid "CMAKE_INSTALL_BINDIR"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:197
#: ../../../reference/build_helpers/cmake.rst:199
#: ../../../reference/build_helpers/cmake.rst:201
msgid "Set to *bin* inside the package folder."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:199
msgid "CMAKE_INSTALL_SBINDIR"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:201
msgid "CMAKE_INSTALL_LIBEXECDIR"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:203
msgid "CMAKE_INSTALL_LIBDIR"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:203
msgid "Set to *lib* inside the package folder."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:205
msgid "CMAKE_INSTALL_INCLUDEDIR"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:205
#: ../../../reference/build_helpers/cmake.rst:207
msgid "Set to *include* inside the package folder."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:207
msgid "CMAKE_INSTALL_OLDINCLUDEDIR"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:209
msgid "CMAKE_INSTALL_DATAROOTDIR"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:209
msgid "Set to *share* inside the package folder."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:212
msgid ""
"But you can change the automatic definitions after the ``CMake()`` object "
"creation using the ``definitions`` property or even add your own ones:"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:215
msgid ""
"from conans import ConanFile, CMake\n"
"\n"
"class ExampleConan(ConanFile):\n"
"    ...\n"
"\n"
"    def build(self):\n"
"        cmake = CMake(self)\n"
"        cmake.definitions[\"CMAKE_SYSTEM_NAME\"] = \"Generic\"\n"
"        cmake.definitions[\"MY_CUSTOM_DEFINITION\"] = True\n"
"        cmake.configure()\n"
"        cmake.build()\n"
"        cmake.install()  # Build --target=install"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:230
msgid ""
"Note that definitions changed **after** the ``configure()`` call will "
"**not** take effect later on the ``build()``, ``test()`` or ``install()`` "
"ones."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:234
msgid "Methods"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:237
msgid "configure()"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:239
msgid ""
"def configure(self, args=None, defs=None, source_dir=None, build_dir=None,\n"
"              source_folder=None, build_folder=None, "
"cache_build_folder=None,\n"
"              pkg_config_paths=None)"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:245
msgid "Configures `CMake` project with the given parameters."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:248
#: ../../../reference/build_helpers/cmake.rst:278
msgid ""
"**args** (Optional, Defaulted to ``None``): A list of additional arguments "
"to be passed to the ``cmake`` command. Each argument will be escaped "
"according to the current shell. No extra arguments will be added if "
"``args=None``"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:249
msgid ""
"**defs** (Optional, Defaulted to ``None``): A dict that will be converted to "
"a list of CMake command line variable definitions of the form ``-"
"DKEY=VALUE``. Each value will be escaped according to the current shell and "
"can be either ``str``, ``bool`` or of numeric type"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:250
msgid ""
"**source_dir** (Optional, Defaulted to ``None``): **[DEPRECATED]** Use "
"``source_folder`` instead. CMake's source directory where *CMakeLists.txt* "
"is located. The default value is the ``build`` folder if ``None`` is "
"specified (or the ``source`` folder if ``no_copy_source`` is specified). "
"Relative paths are allowed and will be relative to ``build_folder``."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:253
msgid ""
"**build_dir** (Optional, Defaulted to ``None``): **[DEPRECATED]** Use "
"``build_folder`` instead. CMake's output directory. The default value is the "
"package ``build`` root folder if ``None`` is specified. The ``CMake`` object "
"will store ``build_folder`` internally for subsequent calls to ``build()``."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:256
msgid ""
"**source_folder**: CMake's source directory where ``CMakeLists.txt`` is "
"located. The default value is the ``self.source_folder``. Relative paths are "
"allowed and will be relative to ``self.source_folder``."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:258
msgid ""
"**build_folder**: CMake's output directory. The default value is the ``self."
"build_folder`` if ``None`` is specified. The ``CMake`` object will store "
"``build_folder`` internally for subsequent calls to ``build()``."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:260
msgid ""
"**cache_build_folder** (Optional, Defaulted to ``None``): Use the given "
"subfolder as build folder when building the package in the local cache. This "
"argument doesn't have effect when the package is being built in user folder "
"with :command:`conan build` but overrides **build_folder** when working in "
"the local cache. See :ref:`self.in_local_cache<in_local_cache>`."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:263
msgid ""
"**pkg_config_paths** (Optional, Defaulted to ``None``): Specify folders (in "
"a list) of relative paths to the install folder or absolute ones where to "
"find ``*.pc`` files (by using the env var ``PKG_CONFIG_PATH``). If ``None`` "
"is specified but the conanfile is using the ``pkg_config`` generator, the "
"``self.install_folder`` will be added to the ``PKG_CONFIG_PATH`` in order to "
"locate the pc files of the requirements of the conanfile."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:269
msgid "build()"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:271
msgid "def build(self, args=None, build_dir=None, target=None)"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:275
msgid "Builds `CMake` project with the given parameters."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:279
msgid ""
"**build_dir** (Optional, Defaulted to ``None``): CMake's output directory. "
"If ``None`` is specified the ``build_dir`` from ``configure()`` will be used."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:280
msgid ""
"**target** (Optional, Defaulted to ``None``): Specifies the target to "
"execute. The default *all* target will be built if ``None`` is specified. "
"``\"install\"`` can be used to relocate files to aid packaging."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:283
msgid "test()"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:285
msgid "def test(args=None, build_dir=None, target=None)"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:289
msgid ""
"Build `CMake` test target (could be RUN_TESTS in multi-config projects or "
"``test`` in single-config projects), which usually means building and "
"running unit tests"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:292
#: ../../../reference/build_helpers/cmake.rst:306
msgid ""
"**args** (Optional, Defaulted to ``None``): A list of additional arguments "
"to be passed to the ``cmake`` command. Each argument will be escaped "
"according to the current shell. No extra arguments will be added if "
"``args=None``."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:293
#: ../../../reference/build_helpers/cmake.rst:307
msgid ""
"**build_dir** (Optional, Defaulted to ``None``): CMake's output directory. "
"If ``None`` is specified the ``build_folder`` from ``configure()`` will be "
"used."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:294
msgid ""
"**target** (Optional, default to ``None``). Alternative target name for "
"running the tests. If not defined RUN_TESTS or ``test`` will be used"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:297
msgid "install()"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:299
msgid "def install(args=None, build_dir=None)"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:303
msgid "Installs `CMake` project with the given parameters."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:311
msgid "patch_config_paths() [EXPERIMENTAL]"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:313
msgid "def patch_config_paths()"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:319
msgid ""
"This is an **experimental** feature subject to breaking changes in future "
"releases."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:321
msgid ""
"This method changes references to the absolute path of the installed package "
"in exported CMake config files to the appropriate Conan variable. Method "
"also changes references to other packages installation paths in export CMake "
"config files to Conan variable with their installation roots. This makes "
"most CMake config files portable."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:326
msgid ""
"For example, if a package foo installs a file called *fooConfig.cmake* to be "
"used by cmake's ``find_package()`` method, normally this file will contain "
"absolute paths to the installed package folder, for example it will contain "
"a line such as:"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:329
msgid "SET(Foo_INSTALL_DIR /home/developer/.conan/data/Foo/1.0.0/...)"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:333
msgid ""
"This will cause cmake's ``find_package()`` method to fail when someone else "
"installs the package via Conan. This function will replace such paths to:"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:336
msgid "SET(Foo_INSTALL_DIR ${CONAN_FOO_ROOT})"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:340
msgid ""
"Which is a variable that is set by *conanbuildinfo.cmake*, so that "
"``find_package()`` now correctly works on this Conan package."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:342
msgid ""
"For dependent packages method replaces lines with references to dependencies "
"installation paths such as:"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:344
msgid ""
"SET_TARGET_PROPERTIES(foo PROPERTIES INTERFACE_INCLUDE_DIRECTORIES \"/home/"
"developer/.conan/data/Bar/1.0.0/user/channel/id/include\")"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:348
msgid "to following lines:"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:350
msgid ""
"SET_TARGET_PROPERTIES(foo PROPERTIES INTERFACE_INCLUDE_DIRECTORIES "
"\"${CONAN_BAR_ROOT}/include\")"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:354
msgid ""
"If the ``install()`` method of the CMake object in the conanfile is used, "
"this function should be called **after** that invocation. For example:"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:357
msgid ""
"def build(self):\n"
"    cmake = CMake(self)\n"
"    cmake.configure()\n"
"    cmake.build()\n"
"    cmake.install()\n"
"    cmake.patch_config_paths()"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:367
msgid "get_version()"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:369
msgid ""
"@staticmethod\n"
"def get_version()"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:374
msgid ""
"Returns the CMake version in a ``conans.model.Version`` object as it is "
"evaluated by the command line. Will raise if cannot resolve it to valid "
"version."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:378
msgid "Environment variables"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:380
msgid ""
"There are some environment variables that will also affect the ``CMake()`` "
"helper class. Check them in the :ref:`CMAKE RELATED "
"VARIABLES<cmake_related_variables>` section."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:384
msgid "Example"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:385
msgid ""
"The following example of ``conanfile.py`` shows you how to manage a project "
"with conan and CMake."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:387
msgid ""
"from conans import ConanFile, CMake\n"
"\n"
"class SomePackage(ConanFile):\n"
"    name = \"SomePackage\"\n"
"    version = \"1.0.0\"\n"
"    settings = \"os\", \"compiler\", \"build_type\", \"arch\"\n"
"    generators = \"cmake\"\n"
"\n"
"def configure_cmake(self):\n"
"    cmake = CMake(self)\n"
"\n"
"    # put definitions here so that they are re-used in cmake between\n"
"    # build() and package()\n"
"    cmake.definitions[\"SOME_DEFINITION_NAME\"] = \"On\"\n"
"\n"
"    cmake.configure()\n"
"    return cmake\n"
"\n"
"def build(self):\n"
"    cmake = self.configure_cmake()\n"
"    cmake.build()\n"
"\n"
"    # run unit tests after the build\n"
"    cmake.test()\n"
"\n"
"    # run custom make command\n"
"    self.run(\"make -j3 check)\n"
"\n"
"def package(self):\n"
"    cmake = self.configure_cmake()\n"
"    cmake.install()"
msgstr ""
