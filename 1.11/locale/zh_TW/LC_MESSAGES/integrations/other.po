# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2018, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../integrations/other.rst:5
msgid "Custom integrations"
msgstr ""

#: ../../../integrations/other.rst:7
msgid ""
"If you intend to use a build system that does not have a built-in generator, "
"you may still be able to do so. There are several options:"
msgstr ""

#: ../../../integrations/other.rst:10
msgid ""
"First, search in bintray. Generators can now be created and contributed by "
"users as regular packages, so you can depend on them, use versioning, and "
"evolve faster without depending on the conan releases. See :ref:`generator "
"packages <dyn_generators>`."
msgstr ""

#: ../../../integrations/other.rst:13
msgid ""
"You can use the **text or json generator**. It will generate a text file, "
"simple to read and to parse that you can easily parse with your tools to "
"extract the required information."
msgstr ""

#: ../../../integrations/other.rst:15
msgid ""
"Use the **conanfile data model** and access its properties and values, so "
"you can directly call your build system with that information, without "
"requiring to generate a file."
msgstr ""

#: ../../../integrations/other.rst:17
msgid ""
"Write and **create your own generator**. So you can upload it, version and "
"reuse it, as well as share it with your team or community. Check :ref:"
"`generator packages <dyn_generators>` too."
msgstr ""

#: ../../../integrations/other.rst:23
msgid ""
"Need help integrating your build system? Tell us what you need. info@conan.io"
msgstr ""

#: ../../../integrations/other.rst:29
msgid "Use the JSON generator"
msgstr ""

#: ../../../integrations/other.rst:31
msgid "Specify the **json** generator in your conanfile:"
msgstr ""

#: ../../../integrations/other.rst:33
msgid ""
"[requires]\n"
"fmt/4.1.0@<user>/<stable>\n"
"Poco/1.9.0@pocoproject/stable\n"
"\n"
"[generators]\n"
"json"
msgstr ""

#: ../../../integrations/other.rst:43
msgid ""
"A file named *conanbuildinfo.json* will be generated. It will contain the "
"information about every dependency:"
msgstr ""

#: ../../../integrations/other.rst:45
msgid ""
"{\n"
"  \"dependencies\":\n"
"  [\n"
"    {\n"
"      \"name\": \"fmt\",\n"
"      \"version\": \"4.1.0\",\n"
"      \"include_paths\": [\n"
"        \"/path/to/.conan/data/fmt/4.1.0/<user>/<channel>/package/<id>/"
"include\"\n"
"      ],\n"
"      \"lib_paths\": [\n"
"        \"/path/to/.conan/data/fmt/4.1.0/<user>/<channel>/package/<id>/"
"lib\"\n"
"      ],\n"
"      \"libs\": [\n"
"        \"fmt\"\n"
"      ],\n"
"      \"...\": \"...\",\n"
"    },\n"
"    {\n"
"      \"name\": \"Poco\",\n"
"      \"version\": \"1.7.8p3\",\n"
"      \"...\": \"...\"\n"
"    }\n"
"  ]\n"
"}"
msgstr ""

#: ../../../integrations/other.rst:76
msgid "Use the text generator"
msgstr ""

#: ../../../integrations/other.rst:78
msgid "Just specify the **txt** generator in your conanfile:"
msgstr ""

#: ../../../integrations/other.rst:80
msgid ""
"[requires]\n"
"Poco/1.9.0@pocoproject/stable\n"
"\n"
"[generators]\n"
"txt"
msgstr ""

#: ../../../integrations/other.rst:88
msgid ""
"And a file is generated, with the same information as in the case of CMake "
"and gcc, only in a generic, text format, containing the information from the "
"``deps_cpp_info`` and ``deps_user_info``. Check the conanfile :ref:"
"`package_info<method_package_info>` method to know more about these objects:"
msgstr ""

#: ../../../integrations/other.rst:92
msgid ""
"[includedirs]\n"
"/home/laso/.conan/data/Poco/1.6.1/lasote/stable/package/"
"afafc631e705f7296bec38318b28e4361ab6787c/include\n"
"/home/laso/.conan/data/OpenSSL/1.0.2d/lasote/stable/"
"package/154942d8bccb87fbba9157e1daee62e1200e80fc/include\n"
"/home/laso/.conan/data/zlib/1.2.8/lasote/stable/"
"package/3b92a20cb586af0d984797002d12b7120d38e95e/include\n"
"\n"
"[libs]\n"
"PocoUtil\n"
"PocoXML\n"
"PocoJSON\n"
"PocoMongoDB\n"
"PocoNet\n"
"PocoCrypto\n"
"PocoData\n"
"PocoDataSQLite\n"
"PocoZip\n"
"PocoFoundation\n"
"pthread\n"
"dl\n"
"rt\n"
"ssl\n"
"crypto\n"
"z\n"
"\n"
"[libdirs]\n"
"/home/laso/.conan/data/Poco/1.6.1/lasote/stable/package/"
"afafc631e705f7296bec38318b28e4361ab6787c/lib\n"
"/home/laso/.conan/data/OpenSSL/1.0.2d/lasote/stable/"
"package/154942d8bccb87fbba9157e1daee62e1200e80fc/lib\n"
"/home/laso/.conan/data/zlib/1.2.8/lasote/stable/"
"package/3b92a20cb586af0d984797002d12b7120d38e95e/lib\n"
"\n"
"[bindirs]\n"
"/home/laso/.conan/data/Poco/1.6.1/lasote/stable/package/"
"afafc631e705f7296bec38318b28e4361ab6787c/bin\n"
"/home/laso/.conan/data/OpenSSL/1.0.2d/lasote/stable/"
"package/154942d8bccb87fbba9157e1daee62e1200e80fc/bin\n"
"/home/laso/.conan/data/zlib/1.2.8/lasote/stable/"
"package/3b92a20cb586af0d984797002d12b7120d38e95e/bin\n"
"\n"
"[defines]\n"
"POCO_STATIC=ON\n"
"POCO_NO_AUTOMATIC_LIBS\n"
"\n"
"[USER_MyRequiredLib1]\n"
"somevariable=Some Value\n"
"othervar=Othervalue\n"
"\n"
"[USER_MyRequiredLib2]\n"
"myvar=34"
msgstr ""

#: ../../../integrations/other.rst:140
msgid "Use conan data model (conanfile.py)"
msgstr ""

#: ../../../integrations/other.rst:142
msgid ""
"If you are using any other build system you can use conan too. In the "
"``build()`` method you can access your settings and build information from "
"your requirements and pass it to your build system. Note, however, that "
"probably is simpler and much more reusable to create a generator to simplify "
"the task for your build system."
msgstr ""

#: ../../../integrations/other.rst:148
msgid ""
"from conans import ConanFile\n"
"\n"
"class MyProjectWithConan(ConanFile):\n"
"   settings = \"os\", \"compiler\", \"build_type\", \"arch\"\n"
"   requires = \"Poco/1.9.0@pocoproject/stable\"\n"
"   ########### IT'S IMPORTANT TO DECLARE THE TXT GENERATOR TO DEAL WITH A "
"GENERIC BUILD SYSTEM\n"
"   generators = \"txt\"\n"
"   default_options = {\"Poco:shared\": False, \"OpenSSL:shared\": False}\n"
"\n"
"   def imports(self):\n"
"      self.copy(\"*.dll\", dst=\"bin\", src=\"bin\") # From bin to bin\n"
"      self.copy(\"*.dylib*\", dst=\"bin\", src=\"lib\") # From lib to bin\n"
"\n"
"   def build(self):\n"
"      ############ Without any helper ###########\n"
"      # Settings\n"
"      print(self.settings.os)\n"
"      print(self.settings.arch)\n"
"      print(self.settings.compiler)\n"
"\n"
"      # Options\n"
"      #print(self.options.my_option)\n"
"      print(self.options[\"OpenSSL\"].shared)\n"
"      print(self.options[\"Poco\"].shared)\n"
"\n"
"      # Paths and libraries, all\n"
"      print(\"-------- ALL --------------\")\n"
"      print(self.deps_cpp_info.include_paths)\n"
"      print(self.deps_cpp_info.lib_paths)\n"
"      print(self.deps_cpp_info.bin_paths)\n"
"      print(self.deps_cpp_info.libs)\n"
"      print(self.deps_cpp_info.defines)\n"
"      print(self.deps_cpp_info.cflags)\n"
"      print(self.deps_cpp_info.cppflags)\n"
"      print(self.deps_cpp_info.sharedlinkflags)\n"
"      print(self.deps_cpp_info.exelinkflags)\n"
"\n"
"      # Just from OpenSSL\n"
"      print(\"--------- FROM OPENSSL -------------\")\n"
"      print(self.deps_cpp_info[\"OpenSSL\"].include_paths)\n"
"      print(self.deps_cpp_info[\"OpenSSL\"].lib_paths)\n"
"      print(self.deps_cpp_info[\"OpenSSL\"].bin_paths)\n"
"      print(self.deps_cpp_info[\"OpenSSL\"].libs)\n"
"      print(self.deps_cpp_info[\"OpenSSL\"].defines)\n"
"      print(self.deps_cpp_info[\"OpenSSL\"].cflags)\n"
"      print(self.deps_cpp_info[\"OpenSSL\"].cppflags)\n"
"      print(self.deps_cpp_info[\"OpenSSL\"].sharedlinkflags)\n"
"      print(self.deps_cpp_info[\"OpenSSL\"].exelinkflags)\n"
"\n"
"      # Just from POCO\n"
"      print(\"--------- FROM POCO -------------\")\n"
"      print(self.deps_cpp_info[\"Poco\"].include_paths)\n"
"      print(self.deps_cpp_info[\"Poco\"].lib_paths)\n"
"      print(self.deps_cpp_info[\"Poco\"].bin_paths)\n"
"      print(self.deps_cpp_info[\"Poco\"].libs)\n"
"      print(self.deps_cpp_info[\"Poco\"].defines)\n"
"      print(self.deps_cpp_info[\"Poco\"].cflags)\n"
"      print(self.deps_cpp_info[\"Poco\"].cppflags)\n"
"      print(self.deps_cpp_info[\"Poco\"].sharedlinkflags)\n"
"      print(self.deps_cpp_info[\"Poco\"].exelinkflags)\n"
"\n"
"\n"
"      # self.run(\"invoke here your configure, make, or others\")\n"
"      # self.run(\"basically you can do what you want with your requirements "
"build info)\n"
"\n"
"\n"
"      # Environment variables (from requirements self.env_info objects)\n"
"      # are automatically applied in the python ``os.environ`` but can be "
"accesible as well:\n"
"      print(\"--------- Globally -------------\")\n"
"      print(self.env)\n"
"\n"
"      print(\"--------- FROM MyLib -------------\")\n"
"      print(self.deps_env_info[\"MyLib\"].some_env_var)\n"
"\n"
"\n"
"      # User declared variables (from requirements self.user_info objects)\n"
"      # are available in the self.deps_user_info object\n"
"      print(\"--------- FROM MyLib -------------\")\n"
"      print(self.deps_user_info[\"MyLib\"].some_user_var)"
msgstr ""

#: ../../../integrations/other.rst:233
msgid "Create your own generator"
msgstr ""

#: ../../../integrations/other.rst:235
msgid "There are two ways in which generators can be contributed:"
msgstr ""

#: ../../../integrations/other.rst:237
msgid ""
"Forking and adding the new generator in the conan codebase. This will be a "
"built-in generator. It might have a much slower release and update cycle, it "
"needs to pass some tests before being accepted, but it has the advantage "
"than no extra things are needed to use that generator (once released in "
"conan)"
msgstr ""

#: ../../../integrations/other.rst:240
msgid ""
"Creating a custom :ref:`generator package <dyn_generators>`. You can write a "
"``conanfile.py`` and add the custom logic for a generator inside that file, "
"then upload, refer and depend on it as any other package. These generators "
"have to be discovered (search), but they have many advantages: much faster "
"release cycles, independent from the main conan codebase, can be versioned, "
"so backward compatibility and upgrades are much easier."
msgstr ""
