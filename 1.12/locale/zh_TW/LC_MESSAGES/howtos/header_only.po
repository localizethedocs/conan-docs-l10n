# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2018, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../howtos/header_only.rst:4
msgid "How to package header-only libraries"
msgstr ""

#: ../../../howtos/header_only.rst:7
msgid "Without unit tests"
msgstr ""

#: ../../../howtos/header_only.rst:8
msgid ""
"Packaging a header only library, without requiring to build and run unit "
"tests for it within conan, can be done with a very simple recipe. Assuming "
"you have the recipe in the source repo root folder, and the headers in a "
"subfolder called ``include``, you could do:"
msgstr ""

#: ../../../howtos/header_only.rst:12
msgid ""
"from conans import ConanFile\n"
"\n"
"class HelloConan(ConanFile):\n"
"    name = \"Hello\"\n"
"    version = \"0.1\"\n"
"    # No settings/options are necessary, this is header only\n"
"    exports_sources = \"include/*\"\n"
"    no_copy_source = True\n"
"\n"
"    def package(self):\n"
"        self.copy(\"*.h\")"
msgstr ""

#: ../../../howtos/header_only.rst:26
msgid ""
"If you want to package an external repository, you can use the ``source()`` "
"method to do a clone or download instead of the ``exports_sources`` fields."
msgstr ""

#: ../../../howtos/header_only.rst:29
msgid ""
"There is no need for ``settings``, as changing them will not affect the "
"final package artifacts"
msgstr ""

#: ../../../howtos/header_only.rst:30
msgid "There is no need for ``build()`` method, as header-only are not built"
msgstr ""

#: ../../../howtos/header_only.rst:31
msgid ""
"There is no need for a custom ``package_info()`` method. The default one "
"already adds \"include\" subfolder to the include path"
msgstr ""

#: ../../../howtos/header_only.rst:33
msgid ""
"``no_copy_source = True`` will disable the copy of the source folder to the "
"build directory as there is no need to do so because source code is not "
"modified at all by the ``configure()`` or ``build()`` methods."
msgstr ""

#: ../../../howtos/header_only.rst:35
msgid ""
"Note that this recipe has no other dependencies, settings or options. If it "
"had any of those, it would be very convenient to add the ``package_id()`` "
"method, to ensure that only one package with always the same ID is create "
"irrespective of the configurations and dependencies:"
msgstr ""

#: ../../../howtos/header_only.rst:39
msgid ""
"def package_id(self):\n"
"    self.info.header_only()"
msgstr ""

#: ../../../howtos/header_only.rst:44 ../../../howtos/header_only.rst:134
msgid "Package is created with:"
msgstr ""

#: ../../../howtos/header_only.rst:46 ../../../howtos/header_only.rst:136
msgid "$ conan create . user/channel"
msgstr ""

#: ../../../howtos/header_only.rst:51
msgid "With unit tests"
msgstr ""

#: ../../../howtos/header_only.rst:53
msgid ""
"If you want to run the library unit test while packaging, you would need "
"this recipe:"
msgstr ""

#: ../../../howtos/header_only.rst:55
msgid ""
"from conans import ConanFile, CMake\n"
"\n"
"class HelloConan(ConanFile):\n"
"    name = \"Hello\"\n"
"    version = \"0.1\"\n"
"    settings = \"os\", \"compiler\", \"arch\", \"build_type\"\n"
"    exports_sources = \"include/*\", \"CMakeLists.txt\", \"example.cpp\"\n"
"    no_copy_source = True\n"
"\n"
"    def build(self): # this is not building a library, just tests\n"
"        cmake = CMake(self)\n"
"        cmake.configure()\n"
"        cmake.build()\n"
"        cmake.test()\n"
"\n"
"    def package(self):\n"
"        self.copy(\"*.h\")\n"
"\n"
"    def package_id(self):\n"
"        self.info.header_only()"
msgstr ""

#: ../../../howtos/header_only.rst:82
msgid ""
"If you are :ref:`cross building <cross_building>` your **library** or "
"**app** you'll probably need to skip the **unit tests** because your target "
"binary cannot be executed in current building host. To do it you can use :"
"ref:`tools_get_env` in combination with :ref:`env_vars_conan_run_tests` "
"environment variable, defined as **False** in profile for cross building and "
"replace ``cmake.test()`` with:"
msgstr ""

#: ../../../howtos/header_only.rst:88
msgid ""
"if tools.get_env(\"CONAN_RUN_TESTS\", True):\n"
"    cmake.test()"
msgstr ""

#: ../../../howtos/header_only.rst:93
msgid "Which will use a ``CMakeLists.txt`` file in the root folder:"
msgstr ""

#: ../../../howtos/header_only.rst:95
msgid ""
"project(Package CXX)\n"
"cmake_minimum_required(VERSION 2.8.12)\n"
"\n"
"include_directories(\"include\")\n"
"add_executable(example example.cpp)\n"
"\n"
"enable_testing()\n"
"add_test(NAME example\n"
"        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/bin\n"
"        COMMAND example)"
msgstr ""

#: ../../../howtos/header_only.rst:108
msgid ""
"and some ``example.cpp`` file, which will be our \"unit test\" of the "
"library:"
msgstr ""

#: ../../../howtos/header_only.rst:110
msgid ""
"#include <iostream>\n"
"#include \"hello.h\"\n"
"\n"
"int main() {\n"
"    hello();\n"
"}"
msgstr ""

#: ../../../howtos/header_only.rst:120
msgid ""
"This will use different compilers and versions, as configured by conan "
"settings (in command line or profiles), but will always generate just 1 "
"output package, always with the same ID."
msgstr ""

#: ../../../howtos/header_only.rst:122
msgid ""
"The necessary files for the unit tests, must be ``exports_sources`` too (or "
"retrieved from ``source()`` method)"
msgstr ""

#: ../../../howtos/header_only.rst:123
msgid ""
"If the package had dependencies, via ``requires``, it would be necessary to "
"add the ``generators = \"cmake\"`` to the package recipe and adding the "
"``conanbuildinfo.cmake`` file to the testing CMakeLists.txt:"
msgstr ""

#: ../../../howtos/header_only.rst:126
msgid ""
"include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)\n"
"conan_basic_setup()\n"
"\n"
"add_executable(example example.cpp)\n"
"target_link_libraries(example ${CONAN_LIBS}) # not necessary if dependencies "
"are also header-only"
msgstr ""

#: ../../../howtos/header_only.rst:143
msgid ""
"This with/without tests is referring to running full unitary tests over the "
"library, which is different to the :command:`test` functionality that checks "
"the integrity of the package. The above examples are describing the "
"approaches for unit-testing the library within the recipe. In either case, "
"it is recommended to have a *test_package* folder, so the :command:`conan "
"create` command checks the package once it is created. Check the :ref:"
"`packaging getting started guide<packaging_getting_started>`"
msgstr ""
