# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2018, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../howtos/makefiles.rst:5
msgid "Creating and reusing packages based on Makefiles"
msgstr ""

#: ../../../howtos/makefiles.rst:7
msgid ""
"Conan can create packages and reuse them with Makefiles. The "
"``AutoToolsBuildEnvironment`` build helper helps with most of the necessary "
"task."
msgstr ""

#: ../../../howtos/makefiles.rst:10
msgid ""
"This how-to has been tested in Windows with MinGW and Linux with gcc. It is "
"using static libraries but could be extended to shared libraries too. The "
"Makefiles surely can be improved they are just an example."
msgstr ""

#: ../../../howtos/makefiles.rst:15
msgid "Creating packages"
msgstr ""

#: ../../../howtos/makefiles.rst:17
msgid ""
"Start cloning the existing example repository, containing a simple \"Hello "
"World\" library, and application:"
msgstr ""

#: ../../../howtos/makefiles.rst:19
msgid ""
"$ git clone https://github.com/memsharded/conan-example-makefiles\n"
"$ cd conan-example-makefiles\n"
"$ cd hellolib"
msgstr ""

#: ../../../howtos/makefiles.rst:26
msgid ""
"It contains a *src* folder with the source code and a *conanfile.py* file "
"for creating a package."
msgstr ""

#: ../../../howtos/makefiles.rst:28
msgid ""
"Inside the *src* folder, there is *Makefile* to build the static library. "
"This *Makefile* is using standard variables like ``$(CPPFLAGS)`` or "
"``$(CXX)`` to build it:"
msgstr ""

#: ../../../howtos/makefiles.rst:31
msgid ""
"SRC = hello.cpp\n"
"OBJ = $(SRC:.cpp=.o)\n"
"OUT = libhello.a\n"
"INCLUDES = -I.\n"
"\n"
".SUFFIXES: .cpp\n"
"\n"
"default: $(OUT)\n"
"\n"
".cpp.o:\n"
"    $(CXX) $(INCLUDES) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@\n"
"\n"
"$(OUT): $(OBJ)\n"
"    ar rcs $(OUT) $(OBJ)"
msgstr ""

#: ../../../howtos/makefiles.rst:49
msgid ""
"The *conanfile.py* file uses the ``AutoToolsBuildEnvironment`` build helper. "
"This helper defines the necessary environment variables with information "
"from dependencies, as well as other variables to match the current conan "
"settings (like ``-m32`` or ``-m64`` based on the conan ``arch`` setting)"
msgstr ""

#: ../../../howtos/makefiles.rst:53
msgid ""
"from conans import ConanFile, AutoToolsBuildEnvironment\n"
"from conans import tools\n"
"\n"
"class HelloConan(ConanFile):\n"
"    name = \"Hello\"\n"
"    version = \"0.1\"\n"
"    settings = \"os\", \"compiler\", \"build_type\", \"arch\"\n"
"    generators = \"cmake\"\n"
"    exports_sources = \"src/*\"\n"
"\n"
"    def build(self):\n"
"        with tools.chdir(\"src\"):\n"
"            env_build = AutoToolsBuildEnvironment(self)\n"
"            # env_build.configure() # use it to run \"./configure\" if using "
"autotools\n"
"            env_build.make()\n"
"\n"
"    def package(self):\n"
"        self.copy(\"*.h\", dst=\"include\", src=\"src\")\n"
"        self.copy(\"*.lib\", dst=\"lib\", keep_path=False)\n"
"        self.copy(\"*.a\", dst=\"lib\", keep_path=False)\n"
"\n"
"    def package_info(self):\n"
"        self.cpp_info.libs = [\"hello\"]"
msgstr ""

#: ../../../howtos/makefiles.rst:80
msgid "With this *conanfile.py* you can create the package:"
msgstr ""

#: ../../../howtos/makefiles.rst:82 ../../../howtos/makefiles.rst:151
msgid ""
"$ conan create . user/testing -s compiler=gcc -s compiler.version=4.9 -s "
"compiler.libcxx=libstdc++"
msgstr ""

#: ../../../howtos/makefiles.rst:88
msgid "Using packages"
msgstr ""

#: ../../../howtos/makefiles.rst:90
msgid "Now let's move to the application folder:"
msgstr ""

#: ../../../howtos/makefiles.rst:92
msgid "$ cd ../helloapp"
msgstr ""

#: ../../../howtos/makefiles.rst:97
msgid ""
"There you can see also a *src* folder with a *Makefile* creating an "
"executable:"
msgstr ""

#: ../../../howtos/makefiles.rst:99
msgid ""
"SRC = app.cpp\n"
"OBJ = $(SRC:.cpp=.o)\n"
"OUT = app\n"
"INCLUDES = -I.\n"
"\n"
".SUFFIXES: .cpp\n"
"\n"
"default: $(OUT)\n"
"\n"
".cpp.o:\n"
"    $(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@\n"
"\n"
"$(OUT): $(OBJ)\n"
"    $(CXX) -o $(OUT)  $(OBJ)  $(LDFLAGS)  $(LIBS)"
msgstr ""

#: ../../../howtos/makefiles.rst:117
msgid ""
"And also a *conanfile.py* very similar to the previous one, in this case "
"adding a ``requires`` and a ``deploy()`` method:"
msgstr ""

#: ../../../howtos/makefiles.rst:119
msgid ""
" from conans import ConanFile, AutoToolsBuildEnvironment\n"
" from conans import tools\n"
"\n"
" class AppConan(ConanFile):\n"
"     name = \"App\"\n"
"     version = \"0.1\"\n"
"     settings = \"os\", \"compiler\", \"build_type\", \"arch\"\n"
"     exports_sources = \"src/*\"\n"
"     requires = \"Hello/0.1@user/testing\"\n"
"\n"
"     def build(self):\n"
"         with tools.chdir(\"src\"):\n"
"             env_build = AutoToolsBuildEnvironment(self)\n"
"             env_build.make()\n"
"\n"
"     def package(self):\n"
"         self.copy(\"*app\", dst=\"bin\", keep_path=False)\n"
"         self.copy(\"*app.exe\", dst=\"bin\", keep_path=False)\n"
"\n"
"     def deploy(self):\n"
"         self.copy(\"*\", src=\"bin\", dst=\"bin\")"
msgstr ""

#: ../../../howtos/makefiles.rst:145
msgid ""
"Note that in this case, the ``AutoToolsBuildEnvironment`` will automatically "
"set values to ``CPPFLAGS``, ``LDFLAGS``, ``LIBS``, etc. existing in the "
"*Makefile* with the correct include directories, library names, etc. to "
"properly build and link with the ``hello`` library contained in the "
"\"Hello\" package."
msgstr ""

#: ../../../howtos/makefiles.rst:149
msgid "As above, we can create the package with:"
msgstr ""

#: ../../../howtos/makefiles.rst:156
msgid ""
"There are different ways to run executables contained in packages, like "
"using ``virtualrunenv`` generators. In this case, as the package has a "
"``deploy()`` method, we can use it:"
msgstr ""

#: ../../../howtos/makefiles.rst:159
msgid ""
"$ conan install Hello/0.1user/testing -s compiler=gcc -s compiler."
"version=4.9 -s compiler.libcxx=libstdc++\n"
"$ ./bin/app\n"
"$ Hello World Release!"
msgstr ""
