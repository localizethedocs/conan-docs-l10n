# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2019, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../howtos/python_code_reuse.rst:4
msgid "How to reuse Python code in recipes"
msgstr ""

#: ../../../howtos/python_code_reuse.rst:8
msgid ""
"To reuse python code, from conan 1.7 there is a new ``python_requires()`` "
"feature. See: :ref:`Python requires: reusing python code in "
"recipes<python_requires>` This \"how to\" might be deprecated and removed in "
"the future, it is left here for reference only."
msgstr ""

#: ../../../howtos/python_code_reuse.rst:13
msgid ""
"First, if you feel that you are repeating a lot of Python code, and that "
"repeated code could be useful for other Conan users, please propose it in a "
"github issue."
msgstr ""

#: ../../../howtos/python_code_reuse.rst:16
msgid "There are several ways to handle Python code reuse in package recipes:"
msgstr ""

#: ../../../howtos/python_code_reuse.rst:18
msgid ""
"To put common code in files, as explained :ref:`below <split_conanfile>`. "
"This code has to be exported into the recipe itself."
msgstr ""

#: ../../../howtos/python_code_reuse.rst:21
msgid ""
"To create a Conan package with the common python code, and then ``require`` "
"it from the recipe."
msgstr ""

#: ../../../howtos/python_code_reuse.rst:23
msgid "This howto explains the latter."
msgstr ""

#: ../../../howtos/python_code_reuse.rst:26
msgid "A basic Python package"
msgstr ""

#: ../../../howtos/python_code_reuse.rst:28
msgid ""
"Let's begin with a simple python package, a \"hello world\" functionality "
"that we want to package and reuse:"
msgstr ""

#: ../../../howtos/python_code_reuse.rst:30
msgid ""
"def hello():\n"
"    print(\"Hello World from Python!\")"
msgstr ""

#: ../../../howtos/python_code_reuse.rst:35
msgid "To create a package, all we need to do is create the following layout:"
msgstr ""

#: ../../../howtos/python_code_reuse.rst:37
msgid ""
"-| hello.py\n"
" | __init__.py\n"
" | conanfile.py"
msgstr ""

#: ../../../howtos/python_code_reuse.rst:44
msgid ""
"The ``__init__.py`` is blank. It is not necessary to compile code, so the "
"package recipe ``conanfile.py`` is quite simple:"
msgstr ""

#: ../../../howtos/python_code_reuse.rst:48
msgid ""
"from conans import ConanFile\n"
"\n"
"class HelloPythonConan(ConanFile):\n"
"    name = \"HelloPy\"\n"
"    version = \"0.1\"\n"
"    exports = '*'\n"
"    build_policy = \"missing\"\n"
"\n"
"    def package(self):\n"
"        self.copy('*.py')\n"
"\n"
"    def package_info(self):\n"
"        self.env_info.PYTHONPATH.append(self.package_folder)"
msgstr ""

#: ../../../howtos/python_code_reuse.rst:65
msgid ""
"The ``exports`` will copy both the ``hello.py`` and the ``__init__.py`` into "
"the recipe. The ``package()`` method is also obvious: to construct the "
"package just copy the python sources."
msgstr ""

#: ../../../howtos/python_code_reuse.rst:68
msgid ""
"The ``package_info()`` adds the current package folder to the ``PYTHONPATH`` "
"conan environment variable. It will not affect the real environment variable "
"unless the end user wants it."
msgstr ""

#: ../../../howtos/python_code_reuse.rst:72
msgid ""
"It can be seen that this recipe would be practically the same for most "
"python packages, so it could be factored in a ``PythonConanFile`` base class "
"to further simplify it (open a feature request, or better a pull request :) )"
msgstr ""

#: ../../../howtos/python_code_reuse.rst:76
msgid "With this recipe, all we have to do is:"
msgstr ""

#: ../../../howtos/python_code_reuse.rst:79
msgid "$ conan export . memsharded/testing"
msgstr ""

#: ../../../howtos/python_code_reuse.rst:83
msgid ""
"Of course if you want to share the package with your team, you can :command:"
"`conan upload` it to a remote server. But to create and test the package, we "
"can do everything locally."
msgstr ""

#: ../../../howtos/python_code_reuse.rst:86
msgid ""
"Now the package is ready for consumption. In another folder, we can create a "
"*conanfile.txt* (or a *conanfile.py* if we prefer):"
msgstr ""

#: ../../../howtos/python_code_reuse.rst:88
msgid ""
"[requires]\n"
"HelloPy/0.1@memsharded/testing"
msgstr ""

#: ../../../howtos/python_code_reuse.rst:94
msgid "And install it with the following command:"
msgstr ""

#: ../../../howtos/python_code_reuse.rst:97
msgid "$ conan install . -g virtualenv"
msgstr ""

#: ../../../howtos/python_code_reuse.rst:101
msgid ""
"Creating the above ``conanfile.txt`` might be unnecessary for this simple "
"example, as you can directly run :command:`conan install "
"HelloPy/0.1@memsharded/testing -g virtualenv`, however, using the file is "
"the canonical way."
msgstr ""

#: ../../../howtos/python_code_reuse.rst:104
msgid ""
"The specified ``virtualenv`` generator will create an ``activate`` script "
"(in Windows *activate.bat*), that basically contains the environment, in "
"this case, the ``PYTHONPATH``. Once we activate it, we are able to find the "
"package in the path and use it:"
msgstr ""

#: ../../../howtos/python_code_reuse.rst:107
msgid ""
"$ activate\n"
"$ python\n"
"Python 2.7.12 (v2.7.12:d33e0cf91556, Jun 27 2016, 15:19:22) [MSC v.1500 32 "
"bit (Intel)] on win32\n"
"...\n"
">>> import hello\n"
">>> hello.hello()\n"
"Hello World from Python!\n"
">>>"
msgstr ""

#: ../../../howtos/python_code_reuse.rst:118
msgid ""
"The above shows an interactive session, but you can import also the "
"functionality in a regular python script."
msgstr ""

#: ../../../howtos/python_code_reuse.rst:121
msgid "Reusing python code in your recipes"
msgstr ""

#: ../../../howtos/python_code_reuse.rst:124
msgid "Requiring a python conan package"
msgstr ""

#: ../../../howtos/python_code_reuse.rst:126
msgid ""
"As the conan recipes are python code itself, it is easy to reuse python "
"packages in them. A basic recipe using the created package would be:"
msgstr ""

#: ../../../howtos/python_code_reuse.rst:128
msgid ""
"from conans import ConanFile\n"
"\n"
"class HelloPythonReuseConan(ConanFile):\n"
"    requires = \"HelloPy/0.1@memsharded/testing\"\n"
"\n"
"    def build(self):\n"
"        from hello import hello\n"
"        hello()"
msgstr ""

#: ../../../howtos/python_code_reuse.rst:141
msgid ""
"The ``requires`` section is just referencing the previously created package. "
"The functionality of that package can be used in several methods of the "
"recipe: ``source()``, ``build()``, ``package()`` and ``package_info()``, i."
"e. all of the methods used for creating the package itself. Note that in "
"other places it is not possible, as it would require the dependencies of the "
"recipe to be already retrieved, and such dependencies cannot be retrieved "
"until the basic evaluation of the recipe has been executed."
msgstr ""

#: ../../../howtos/python_code_reuse.rst:146
msgid ""
"$ conan install .\n"
"...\n"
"$ conan build .\n"
"Hello World from Python!"
msgstr ""

#: ../../../howtos/python_code_reuse.rst:154
msgid "Sharing a python module"
msgstr ""

#: ../../../howtos/python_code_reuse.rst:156
msgid ""
"Another approach is sharing a python module and exporting within the recipe."
msgstr ""

#: ../../../howtos/python_code_reuse.rst:160
msgid ""
"Let's write for example a ``msgs.py`` file and put it besides the "
"``conanfile.py``:"
msgstr ""

#: ../../../howtos/python_code_reuse.rst:162
msgid ""
"def build_msg(output):\n"
"    output.info(\"Building!\")"
msgstr ""

#: ../../../howtos/python_code_reuse.rst:167
msgid "And then the main ``conanfile.py`` would be:"
msgstr ""

#: ../../../howtos/python_code_reuse.rst:169
msgid ""
"from conans import ConanFile\n"
"from msgs import build_msg\n"
"\n"
"class ConanFileToolsTest(ConanFile):\n"
"    name = \"test\"\n"
"    version = \"1.9\"\n"
"    exports = \"msgs.py\"  # Important to remember!\n"
"\n"
"    def build(self):\n"
"        build_msg(self.output)\n"
"        # ..."
msgstr ""

#: ../../../howtos/python_code_reuse.rst:183
msgid ""
"It is important to note that such ``msgs.py`` file **must be exported** too "
"when exporting the package, because package recipes must be self-contained."
msgstr ""

#: ../../../howtos/python_code_reuse.rst:186
msgid ""
"The code reuse can also be done in the form of a base class, something like "
"a file ``base_conan.py``"
msgstr ""

#: ../../../howtos/python_code_reuse.rst:188
msgid ""
"from conans import ConanFile\n"
"\n"
"class ConanBase(ConanFile):\n"
"    # common code here"
msgstr ""

#: ../../../howtos/python_code_reuse.rst:195
msgid "And then:"
msgstr ""

#: ../../../howtos/python_code_reuse.rst:197
msgid ""
"from conans import ConanFile\n"
"from base_conan import ConanBase\n"
"\n"
"class ConanFileToolsTest(ConanBase):\n"
"    name = \"test\"\n"
"    version = \"1.9\"\n"
"    exports = \"base_conan.py\""
msgstr ""
