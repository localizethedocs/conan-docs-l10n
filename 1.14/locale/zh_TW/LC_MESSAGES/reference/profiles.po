# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2019, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:15+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/profiles.rst:4
msgid "Profiles"
msgstr ""

#: ../../../reference/profiles.rst:6
msgid ""
"Profiles allows users to set a complete configuration set for **settings**, "
"**options**, **environment variables**, and **build requirements** in a "
"file. They have this structure:"
msgstr ""

#: ../../../reference/profiles.rst:9
msgid ""
"[settings]\n"
"setting=value\n"
"\n"
"[options]\n"
"MyLib:shared=True\n"
"\n"
"[env]\n"
"env_var=value\n"
"\n"
"[build_requires]\n"
"Tool1/0.1@user/channel\n"
"Tool2/0.1@user/channel, Tool3/0.1@user/channel\n"
"*: Tool4/0.1@user/channel"
msgstr ""

#: ../../../reference/profiles.rst:25
msgid ""
"Profile files can be used with ``-pr``/``--profile`` option in :command:"
"`conan install` and :command:`conan create` commands."
msgstr ""

#: ../../../reference/profiles.rst:27
msgid "$ conan create . demo/testing -pr=myprofile"
msgstr ""

#: ../../../reference/profiles.rst:31
msgid ""
"Profiles can be located in different folders. For example, the default "
"*<userhome>/.conan/profiles*, and be referenced by absolute or relative path:"
msgstr ""

#: ../../../reference/profiles.rst:34
msgid ""
"$ conan install . --profile /abs/path/to/profile  # abs path\n"
"$ conan install . --profile ./relpath/to/profile  # resolved to current dir\n"
"$ conan install . --profile profile  # resolved to user/.conan/profiles/"
"profile"
msgstr ""

#: ../../../reference/profiles.rst:40
msgid ""
"Listing existing profiles in the *profiles* folder can be done like this:"
msgstr ""

#: ../../../reference/profiles.rst:42
msgid ""
"$ conan profile list\n"
"default\n"
"myprofile1\n"
"myprofile2\n"
"..."
msgstr ""

#: ../../../reference/profiles.rst:50
msgid "You can also show profile's content:"
msgstr ""

#: ../../../reference/profiles.rst:52
msgid ""
"$ conan profile show myprofile1\n"
"Configuration for profile myprofile1:\n"
"\n"
"[settings]\n"
"os=Windows\n"
"arch=x86_64\n"
"compiler=Visual Studio\n"
"compiler.version=15\n"
"build_type=Release\n"
"[options]\n"
"[build_requires]\n"
"[env]"
msgstr ""

#: ../../../reference/profiles.rst:67
msgid ""
"Use ``$PROFILE_DIR`` in your profile and it will be replaced with the "
"absolute path to the profile file. It is useful to declare relative folders:"
msgstr ""

#: ../../../reference/profiles.rst:70
msgid ""
"[env]\n"
"PYTHONPATH=$PROFILE_DIR/my_python_tools"
msgstr ""

#: ../../../reference/profiles.rst:77
msgid ""
"You can manage your profiles and share them using :ref:"
"`conan_config_install`."
msgstr ""

#: ../../../reference/profiles.rst:80
msgid "Package settings and env vars"
msgstr ""

#: ../../../reference/profiles.rst:82
msgid ""
"Profiles also support **package settings** and **package environment "
"variables** definition, so you can override some settings or environment "
"variables for some specific package:"
msgstr ""

#: ../../../reference/profiles.rst:85
msgid "*.conan/profiles/zlib_with_clang*"
msgstr ""

#: ../../../reference/profiles.rst:85
msgid ""
" [settings]\n"
" zlib:compiler=clang\n"
" zlib:compiler.version=3.5\n"
" zlib:compiler.libcxx=libstdc++11\n"
" compiler=gcc\n"
" compiler.version=4.9\n"
" compiler.libcxx=libstdc++11\n"
"\n"
" [env]\n"
" zlib:CC=/usr/bin/clang\n"
" zlib:CXX=/usr/bin/clang++"
msgstr ""

#: ../../../reference/profiles.rst:100
msgid ""
"Your build tool will locate **clang** compiler only for the **zlib** package "
"and **gcc** (default one) for the rest of your dependency tree."
msgstr ""

#: ../../../reference/profiles.rst:104
msgid ""
"If you want to override existing system environment variables, you should "
"use the ``key=value`` syntax. If you need to pre-pend to the system "
"environment variables you should use the syntax ``key=[value]`` or "
"``key=[value1, value2, ...]``. A typical example is the ``PATH`` environment "
"variable, when you want to add paths to the existing system PATH, not "
"override it, you would use:"
msgstr ""

#: ../../../reference/profiles.rst:108
msgid ""
"[env]\n"
"PATH=[/some/path/to/my/tool]"
msgstr ""

#: ../../../reference/profiles.rst:114
msgid "Profile composition"
msgstr ""

#: ../../../reference/profiles.rst:116
msgid ""
"You can specify multiple profiles in the command line. The applied "
"configuration will be the composition of all the profiles applied in the "
"order they are specified."
msgstr ""

#: ../../../reference/profiles.rst:119
msgid ""
"If, for example, you want to apply a :ref:`build require<build_requires>`, "
"like a ``cmake`` installer to your dependency tree, it won't be very "
"practical adding the `cmake` installer reference, e.g  "
"``cmake_installer/3.9.0@conan/stable`` to all your profiles where you could "
"need to inject ``cmake`` as a build require."
msgstr ""

#: ../../../reference/profiles.rst:123
msgid "You can specify both profiles instead:"
msgstr ""

#: ../../../reference/profiles.rst:125
msgid "*.conan/profiles/cmake_39*"
msgstr ""

#: ../../../reference/profiles.rst:125
msgid ""
" [build_requires]\n"
" cmake_installer/3.9.0@conan/stable"
msgstr ""

#: ../../../reference/profiles.rst:131
msgid "$ conan install . --profile clang --profile cmake_39"
msgstr ""

#: ../../../reference/profiles.rst:136
msgid "Profile includes"
msgstr ""

#: ../../../reference/profiles.rst:138
msgid ""
"You can include other profiles using the ``include()`` statement. The path "
"can be relative to the current profile, absolute, or a profile name from the "
"default profile location in the local cache."
msgstr ""

#: ../../../reference/profiles.rst:141
msgid "The ``include()`` statement has to be at the top of the profile file:"
msgstr ""

#: ../../../reference/profiles.rst:143 ../../../reference/profiles.rst:189
msgid "*gcc_49*"
msgstr ""

#: ../../../reference/profiles.rst:143
msgid ""
" [settings]\n"
" compiler=gcc\n"
" compiler.version=4.9\n"
" compiler.libcxx=libstdc++11"
msgstr ""

#: ../../../reference/profiles.rst:151 ../../../reference/profiles.rst:171
#: ../../../reference/profiles.rst:199
msgid "*myprofile*"
msgstr ""

#: ../../../reference/profiles.rst:151
msgid ""
" include(gcc_49)\n"
"\n"
" [settings]\n"
" zlib:compiler=clang\n"
" zlib:compiler.version=3.5\n"
" zlib:compiler.libcxx=libstdc++11\n"
"\n"
" [env]\n"
" zlib:CC=/usr/bin/clang\n"
" zlib:CXX=/usr/bin/clang++"
msgstr ""

#: ../../../reference/profiles.rst:166
msgid "Variable declaration"
msgstr ""

#: ../../../reference/profiles.rst:168
msgid ""
"In a profile you can declare variables that will be replaced automatically "
"by Conan before the profile is applied. The variables have to be declared at "
"the top of the file, after the ``include()`` statements."
msgstr ""

#: ../../../reference/profiles.rst:171
msgid ""
"include(gcc_49)\n"
"CLANG=/usr/bin/clang\n"
"\n"
"[settings]\n"
"zlib:compiler=clang\n"
"zlib:compiler.version=3.5\n"
"zlib:compiler.libcxx=libstdc++11\n"
"\n"
"[env]\n"
"zlib:CC=$CLANG/clang\n"
"zlib:CXX=$CLANG/clang++"
msgstr ""

#: ../../../reference/profiles.rst:186
msgid ""
"The variables will be inherited too, so you can declare variables in a "
"profile and then include the profile in a different one, all the variables "
"will be available:"
msgstr ""

#: ../../../reference/profiles.rst:189
msgid ""
"GCC_PATH=/my/custom/toolchain/path/\n"
"\n"
"[settings]\n"
"compiler=gcc\n"
"compiler.version=4.9\n"
"compiler.libcxx=libstdc++11"
msgstr ""

#: ../../../reference/profiles.rst:199
msgid ""
"include(gcc_49)\n"
"\n"
"[settings]\n"
"zlib:compiler=clang\n"
"zlib:compiler.version=3.5\n"
"zlib:compiler.libcxx=libstdc++11\n"
"\n"
"[env]\n"
"zlib:CC=$GCC_PATH/gcc\n"
"zlib:CXX=$GCC_PATH/g++"
msgstr ""

#: ../../../reference/profiles.rst:214
msgid "Examples"
msgstr ""

#: ../../../reference/profiles.rst:216
msgid ""
"If you are working with Linux and you usually work with **gcc** compiler, "
"but you have installed **clang** compiler and want to install some package "
"for ``clang`` compiler, you could do:"
msgstr ""

#: ../../../reference/profiles.rst:219
msgid "Create a ``.conan/profiles/clang`` file:"
msgstr ""

#: ../../../reference/profiles.rst:221
msgid ""
"[settings]\n"
"compiler=clang\n"
"compiler.version=3.5\n"
"compiler.libcxx=libstdc++11\n"
"\n"
"[env]\n"
"CC=/usr/bin/clang\n"
"CXX=/usr/bin/clang++"
msgstr ""

#: ../../../reference/profiles.rst:232
msgid ""
"Execute an install command passing the :command:`--profile` or :command:`-"
"pr` parameter:"
msgstr ""

#: ../../../reference/profiles.rst:234
msgid "$ conan install . --profile clang"
msgstr ""

#: ../../../reference/profiles.rst:238
msgid ""
"Without profiles you would have needed to set CC and CXX variables in the "
"environment to point to your clang compiler and use :command:`-s` parameters "
"to specify the settings:"
msgstr ""

#: ../../../reference/profiles.rst:241
msgid ""
"$ export CC=/usr/bin/clang\n"
"$ export CXX=/usr/bin/clang++\n"
"$ conan install -s compiler=clang -s compiler.version=3.5 -s compiler."
"libcxx=libstdc++11"
msgstr ""

#: ../../../reference/profiles.rst:247
msgid ""
"A profile can also be used in :command:`conan create` and :command:`conan "
"info`:"
msgstr ""

#: ../../../reference/profiles.rst:249
msgid "$ conan create . demo/testing --profile clang"
msgstr ""

#: ../../../reference/profiles.rst:255
msgid ""
"Check the section :ref:`build_requires` to read more about its usage in a "
"profile."
msgstr ""

#: ../../../reference/profiles.rst:256
msgid ""
"Check :ref:`conan_profile` and :ref:`default_profile` for full reference."
msgstr ""

#: ../../../reference/profiles.rst:257
msgid "Related section: :ref:`cross_building`."
msgstr ""
