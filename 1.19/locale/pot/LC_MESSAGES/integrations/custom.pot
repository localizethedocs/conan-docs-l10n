# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2019, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.19\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:22+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../integrations/custom.rst:5
msgid "Custom integrations"
msgstr ""

#: ../../../integrations/custom.rst:7
msgid ""
"If you intend to use a build system that does not have a built-in generator, "
"you may still be able to do so. There are several options:"
msgstr ""

#: ../../../integrations/custom.rst:10
msgid ""
"First, search in Bintray for generator packages. Generators can be created "
"and contributed by users as regular packages, so you can depend on them as a "
"normal requirement, use versioning and evolve faster without depending on "
"the Conan releases."
msgstr ""

#: ../../../integrations/custom.rst:13
msgid ""
"You can use the :ref:`text_generator` or :ref:`json_generator` generators. "
"They will generate a text file, simple to read that you can easily parse "
"with your tools to extract the required information."
msgstr ""

#: ../../../integrations/custom.rst:16
msgid ""
"Use the **conanfile data model** (:ref:"
"`deps_cpp_info_attributes_reference`, :ref:"
"`deps_env_info_attributes_reference`) in your recipe to access its "
"properties and values, so you can directly call your build system with that "
"information, without requiring to generate a file."
msgstr ""

#: ../../../integrations/custom.rst:19
msgid ""
"Write and **create your own generator**. So you can upload it, version and "
"reuse it, as well as share it with your team or community. Check :ref:"
"`dyn_generators`."
msgstr ""

#: ../../../integrations/custom.rst:24
msgid ""
"Need help integrating your build system? Tell us what you need: info@conan.io"
msgstr ""

#: ../../../integrations/custom.rst:29
msgid "Use the JSON generator"
msgstr ""

#: ../../../integrations/custom.rst:31
msgid "Specify the ``json`` generator in your recipe:"
msgstr ""

#: ../../../integrations/custom.rst:33 ../../../integrations/custom.rst:80
msgid "*conanfile.txt*"
msgstr ""

#: ../../../integrations/custom.rst:33
msgid ""
" [requires]\n"
" fmt/5.3.0@bincrafters/stable\n"
" Poco/1.9.0@pocoproject/stable\n"
"\n"
" [generators]\n"
" json"
msgstr ""

#: ../../../integrations/custom.rst:43
msgid ""
"A file named *conanbuildinfo.json* will be generated. It will contain the "
"information about every dependency:"
msgstr ""

#: ../../../integrations/custom.rst:45
msgid "*conanbuildinfo.json*"
msgstr ""

#: ../../../integrations/custom.rst:45
msgid ""
" {\n"
"   \"dependencies\":\n"
"   [\n"
"     {\n"
"       \"name\": \"fmt\",\n"
"       \"version\": \"5.3.0\",\n"
"       \"include_paths\": [\n"
"         \"/path/to/.conan/data/fmt/5.3.0/bincrafters/stable/package/<id>/"
"include\"\n"
"       ],\n"
"       \"lib_paths\": [\n"
"         \"/path/to/.conan/data/fmt/5.3.0/bincrafters/stable/package/<id>/"
"lib\"\n"
"       ],\n"
"       \"libs\": [\n"
"         \"fmt\"\n"
"       ],\n"
"       \"...\": \"...\",\n"
"     },\n"
"     {\n"
"       \"name\": \"Poco\",\n"
"       \"version\": \"1.9.0\",\n"
"       \"...\": \"...\"\n"
"     }\n"
"   ]\n"
" }"
msgstr ""

#: ../../../integrations/custom.rst:76
msgid "Use the text generator"
msgstr ""

#: ../../../integrations/custom.rst:78
msgid "Just specify the ``txt`` generator in your recipe:"
msgstr ""

#: ../../../integrations/custom.rst:80
msgid ""
" [requires]\n"
" Poco/1.9.0@pocoproject/stable\n"
"\n"
" [generators]\n"
" txt"
msgstr ""

#: ../../../integrations/custom.rst:89
msgid "A file is generated with the same information in a generic text format."
msgstr ""

#: ../../../integrations/custom.rst:91
msgid "*conanbuildinfo.txt*"
msgstr ""

#: ../../../integrations/custom.rst:91
msgid ""
" [includedirs]\n"
" /home/laso/.conan/data/Poco/1.6.1/lasote/stable/package/"
"afafc631e705f7296bec38318b28e4361ab6787c/include\n"
" /home/laso/.conan/data/OpenSSL/1.0.2d/lasote/stable/"
"package/154942d8bccb87fbba9157e1daee62e1200e80fc/include\n"
" /home/laso/.conan/data/zlib/1.2.8/lasote/stable/"
"package/3b92a20cb586af0d984797002d12b7120d38e95e/include\n"
"\n"
" [libs]\n"
" PocoUtil\n"
" PocoXML\n"
" PocoJSON\n"
" PocoMongoDB\n"
" PocoNet\n"
" PocoCrypto\n"
" PocoData\n"
" PocoDataSQLite\n"
" PocoZip\n"
" PocoFoundation\n"
" pthread\n"
" dl\n"
" rt\n"
" ssl\n"
" crypto\n"
" z\n"
"\n"
" [libdirs]\n"
" /home/laso/.conan/data/Poco/1.6.1/lasote/stable/package/"
"afafc631e705f7296bec38318b28e4361ab6787c/lib\n"
" /home/laso/.conan/data/OpenSSL/1.0.2d/lasote/stable/"
"package/154942d8bccb87fbba9157e1daee62e1200e80fc/lib\n"
" /home/laso/.conan/data/zlib/1.2.8/lasote/stable/"
"package/3b92a20cb586af0d984797002d12b7120d38e95e/lib\n"
"\n"
" [bindirs]\n"
" /home/laso/.conan/data/Poco/1.6.1/lasote/stable/package/"
"afafc631e705f7296bec38318b28e4361ab6787c/bin\n"
" /home/laso/.conan/data/OpenSSL/1.0.2d/lasote/stable/"
"package/154942d8bccb87fbba9157e1daee62e1200e80fc/bin\n"
" /home/laso/.conan/data/zlib/1.2.8/lasote/stable/"
"package/3b92a20cb586af0d984797002d12b7120d38e95e/bin\n"
"\n"
" [defines]\n"
" POCO_STATIC=ON\n"
" POCO_NO_AUTOMATIC_LIBS\n"
"\n"
" [USER_MyRequiredLib1]\n"
" somevariable=Some Value\n"
" othervar=Othervalue\n"
"\n"
" [USER_MyRequiredLib2]\n"
" myvar=34"
msgstr ""

#: ../../../integrations/custom.rst:139
msgid "Use the Conan data model (in a *conanfile.py*)"
msgstr ""

#: ../../../integrations/custom.rst:141
msgid ""
"If you are using any other build system you can use Conan too. In the "
"``build()`` method you can access your settings and build information from "
"your requirements and pass it to your build system. Note, however, that "
"probably is simpler and much more reusable to create a generator to simplify "
"the task for your build system."
msgstr ""

#: ../../../integrations/custom.rst:145
msgid "*conanfile.py*"
msgstr ""

#: ../../../integrations/custom.rst:145
msgid ""
" from conans import ConanFile\n"
"\n"
"\n"
" class MyProjectWithConan(ConanFile):\n"
"     settings = \"os\", \"compiler\", \"build_type\", \"arch\"\n"
"     requires = \"Poco/1.9.0@pocoproject/stable\"\n"
"     ########### IT'S IMPORTANT TO DECLARE THE TXT GENERATOR TO DEAL WITH A "
"GENERIC BUILD SYSTEM\n"
"     generators = \"txt\"\n"
"     default_options = {\"Poco:shared\": False, \"OpenSSL:shared\": False}\n"
"\n"
"     def imports(self):\n"
"         self.copy(\"*.dll\", dst=\"bin\", src=\"bin\") # From bin to bin\n"
"         self.copy(\"*.dylib*\", dst=\"bin\", src=\"lib\") # From lib to "
"bin\n"
"\n"
"     def build(self):\n"
"         ############ Without any helper ###########\n"
"         # Settings\n"
"         print(self.settings.os)\n"
"         print(self.settings.arch)\n"
"         print(self.settings.compiler)\n"
"\n"
"         # Options\n"
"         #print(self.options.my_option)\n"
"         print(self.options[\"OpenSSL\"].shared)\n"
"         print(self.options[\"Poco\"].shared)\n"
"\n"
"         # Paths and libraries, all\n"
"         print(\"-------- ALL --------------\")\n"
"         print(self.deps_cpp_info.include_paths)\n"
"         print(self.deps_cpp_info.lib_paths)\n"
"         print(self.deps_cpp_info.bin_paths)\n"
"         print(self.deps_cpp_info.libs)\n"
"         print(self.deps_cpp_info.defines)\n"
"         print(self.deps_cpp_info.cflags)\n"
"         print(self.deps_cpp_info.cxxflags)\n"
"         print(self.deps_cpp_info.sharedlinkflags)\n"
"         print(self.deps_cpp_info.exelinkflags)\n"
"\n"
"         # Just from OpenSSL\n"
"         print(\"--------- FROM OPENSSL -------------\")\n"
"         print(self.deps_cpp_info[\"OpenSSL\"].include_paths)\n"
"         print(self.deps_cpp_info[\"OpenSSL\"].lib_paths)\n"
"         print(self.deps_cpp_info[\"OpenSSL\"].bin_paths)\n"
"         print(self.deps_cpp_info[\"OpenSSL\"].libs)\n"
"         print(self.deps_cpp_info[\"OpenSSL\"].defines)\n"
"         print(self.deps_cpp_info[\"OpenSSL\"].cflags)\n"
"         print(self.deps_cpp_info[\"OpenSSL\"].cxxflags)\n"
"         print(self.deps_cpp_info[\"OpenSSL\"].sharedlinkflags)\n"
"         print(self.deps_cpp_info[\"OpenSSL\"].exelinkflags)\n"
"\n"
"         # Just from POCO\n"
"         print(\"--------- FROM POCO -------------\")\n"
"         print(self.deps_cpp_info[\"Poco\"].include_paths)\n"
"         print(self.deps_cpp_info[\"Poco\"].lib_paths)\n"
"         print(self.deps_cpp_info[\"Poco\"].bin_paths)\n"
"         print(self.deps_cpp_info[\"Poco\"].libs)\n"
"         print(self.deps_cpp_info[\"Poco\"].defines)\n"
"         print(self.deps_cpp_info[\"Poco\"].cflags)\n"
"         print(self.deps_cpp_info[\"Poco\"].cxxflags)\n"
"         print(self.deps_cpp_info[\"Poco\"].sharedlinkflags)\n"
"         print(self.deps_cpp_info[\"Poco\"].exelinkflags)\n"
"\n"
"         # self.run(\"invoke here your configure, make, or others\")\n"
"         # self.run(\"basically you can do what you want with your "
"requirements build info)\n"
"\n"
"         # Environment variables (from requirements self.env_info objects)\n"
"         # are automatically applied in the python ``os.environ`` but can be "
"accesible as well:\n"
"         print(\"--------- Globally -------------\")\n"
"         print(self.env)\n"
"\n"
"         print(\"--------- FROM MyLib -------------\")\n"
"         print(self.deps_env_info[\"MyLib\"].some_env_var)\n"
"\n"
"         # User declared variables (from requirements self.user_info "
"objects)\n"
"         # are available in the self.deps_user_info object\n"
"         print(\"--------- FROM MyLib -------------\")\n"
"         print(self.deps_user_info[\"MyLib\"].some_user_var)"
msgstr ""

#: ../../../integrations/custom.rst:227
msgid "Create your own generator"
msgstr ""

#: ../../../integrations/custom.rst:229
msgid "There are two ways in which generators can be contributed:"
msgstr ""

#: ../../../integrations/custom.rst:231
msgid ""
"Forking and adding the new generator in the Conan codebase. This will be a "
"built-in generator. It might have a much slower release and update cycle, it "
"needs to pass some tests before being accepted, but it has the advantage "
"than no extra things are needed to use that generator (once next Conan "
"version is released)."
msgstr ""

#: ../../../integrations/custom.rst:235
msgid ""
"Creating a custom :ref:`generator package <dyn_generators>`. You can write a "
"*conanfile.py* and add the custom logic for a generator inside that file, "
"then upload, refer and depend on it as any other package. These generators "
"will be another node in the dependency graph but they have many advantages: "
"much faster release cycles, independent from the Conan codebase and can be "
"versioned. So backwards compatibility and upgrades are much easier."
msgstr ""

#: ../../../integrations/custom.rst:243
msgid "Extending Conan"
msgstr ""

#: ../../../integrations/custom.rst:245
msgid ""
"There are other powerful mechanisms to integrate other tools with Conan. "
"Check the :ref:`Extending Conan <extending>` section for further information."
msgstr ""
