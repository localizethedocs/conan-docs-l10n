# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2019, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.19\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:22+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../versioning/version_ranges.rst:5
msgid "Version ranges"
msgstr ""

#: ../../../versioning/version_ranges.rst:7
msgid ""
"Version range expressions are supported, both in ``conanfile.txt`` and in "
"``conanfile.py`` requirements."
msgstr ""

#: ../../../versioning/version_ranges.rst:9
msgid ""
"The syntax uses brackets. The square brackets are the way to inform Conan "
"that is a version range. Otherwise, versions are plain strings. They can be "
"whatever you want them to be (up to limitations of length and allowed "
"characters)."
msgstr ""

#: ../../../versioning/version_ranges.rst:11
msgid ""
"class HelloConan(ConanFile):\n"
"   requires = \"Pkg/[>1.0 <1.8]@user/stable\""
msgstr ""

#: ../../../versioning/version_ranges.rst:17
msgid ""
"So when specifying ``Pkg/[expression]@user/stable``, it means that "
"``expression`` will be evaluated as a version range. Otherwise, it will be "
"understood as plain text, so ``requires = \"Pkg/version@user/stable\"`` "
"always means to use the version ``version`` literally."
msgstr ""

#: ../../../versioning/version_ranges.rst:19
msgid ""
"There are some packages that do not follow semver. A popular one would be "
"the OpenSSL package with versions as ``1.0.2n``. They cannot be used with "
"version-ranges. To require such packages you always have to use explicit "
"versions (without brackets)."
msgstr ""

#: ../../../versioning/version_ranges.rst:21
msgid ""
"The process to manage plain versions vs version-ranges is also different. "
"The second one requires a \"search\" in the remote, which is orders of "
"magnitude slower than direct retrieval of the reference (plain versions). "
"Take it into account if you plan to use it for very large projects."
msgstr ""

#: ../../../versioning/version_ranges.rst:24
msgid ""
"Expressions are those defined and implemented by https://pypi.org/project/"
"node-semver/. Accepted expressions would be:"
msgstr ""

#: ../../../versioning/version_ranges.rst:26
msgid ""
"[>1.1 <2.1]                # In such range\n"
"[2.8]                      # equivalent to =2.8\n"
"[~=3.0]                    # compatible, according to semver\n"
"[>1.1 || 0.8]              # conditions can be OR'ed\n"
"[1.2.7 || >=1.2.9 <2.0.0]  # This range would match the versions 1.2.7, "
"1.2.9, and 1.4.6, but not the versions 1.2.8 or 2.0.0."
msgstr ""

#: ../../../versioning/version_ranges.rst:34
msgid "There are two options for the version range:"
msgstr ""

#: ../../../versioning/version_ranges.rst:36
msgid ""
"``loose=True|False`` (default ``True``): When using ``loose=False`` only "
"valid Semantic Versioning strings are accepted."
msgstr ""

#: ../../../versioning/version_ranges.rst:37
msgid ""
"``include_prerelease=True|False`` (default ``False``): If set to "
"``include_prerelease=True``, Conan will include prerelease versions in the "
"search range. Take into account that prerelease versions have lower "
"precedence than the associated normal one (e.g.: ``1.0.0 > 1.0.0-beta``)."
msgstr ""

#: ../../../versioning/version_ranges.rst:41
msgid ""
"[>1.1 <2.1, include_prerelease=True]            # Would e.g. accept \"2.0.0-"
"pre.1\" as match\n"
"[~1.2.3, loose=False]                           # Would only accept correct "
"Semantic Versioning strings.\n"
"                                                # E.g. version \"1.2.3.4\" "
"would not be accepted.\n"
"[~1.2.3, loose=False, include_prerelease=True]  # Both options can be used "
"for the same version range."
msgstr ""

#: ../../../versioning/version_ranges.rst:48
msgid ""
"Version range expressions are evaluated at the time of building the "
"dependency graph, from downstream to upstream dependencies. No joint-"
"compatibility of the full graph is computed. Instead, version ranges are "
"evaluated when dependencies are first retrieved."
msgstr ""

#: ../../../versioning/version_ranges.rst:52
msgid ""
"This means, that if a package A depends on another package B (A->B), and A "
"has a requirement for ``C/[>1.2 <1.8]``, this requirement is evaluated first "
"and it can lead to get the version ``C/1.7``. If package B has the "
"requirement to ``C/[>1.3 <1.6]``, this one will be overwritten by the "
"downstream one, it will output a version incompatibility error. But the "
"\"joint\" compatibility of the graph will not be obtained. Downstream "
"packages or consumer projects can impose their own requirements to comply "
"with upstream constraints. In this case a override dependency to ``C/[>1.3 "
"<1.6]`` can be easily defined in the downstream package or project."
msgstr ""

#: ../../../versioning/version_ranges.rst:60
msgid "The order of search for matching versions is as follows:"
msgstr ""

#: ../../../versioning/version_ranges.rst:62
msgid ""
"First, the local conan storage is searched for matching versions, unless "
"the :command:`--update` flag is provided to :command:`conan install`."
msgstr ""

#: ../../../versioning/version_ranges.rst:63
msgid ""
"If a matching version is found, it is used in the dependency graph as a "
"solution."
msgstr ""

#: ../../../versioning/version_ranges.rst:64
msgid ""
"If no matching version is locally found, it starts to search in the remotes, "
"in order. If some remote is specified with :command:`-r=remote`, then only "
"that remote will be used."
msgstr ""

#: ../../../versioning/version_ranges.rst:66
msgid ""
"If the :command:`--update` parameter is used, then the existing packages in "
"the local conan cache will not be used, and the same search of the previous "
"steps is carried out in the remotes. If new matching versions are found, "
"they will be retrieved, so subsequent calls to :command:`install` will find "
"them locally and use them."
msgstr ""
