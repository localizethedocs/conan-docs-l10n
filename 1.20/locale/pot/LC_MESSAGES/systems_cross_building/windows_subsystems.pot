# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2019, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.20\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:06+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../systems_cross_building/windows_subsystems.rst:4
msgid "Windows Subsystems"
msgstr ""

#: ../../../systems_cross_building/windows_subsystems.rst:6
msgid ""
"On Windows, you can run different `subsystems` that enhance the operating "
"system with UNIX capabilities."
msgstr ""

#: ../../../systems_cross_building/windows_subsystems.rst:8
msgid ""
"Conan supports ``MSYS2``, ``CYGWIN``, ``WSL`` and in general any subsystem "
"that is able to run a ``bash`` shell."
msgstr ""

#: ../../../systems_cross_building/windows_subsystems.rst:11
msgid ""
"Many libraries use these subsystems in order to use the Unix tools like the "
"``Autoconf`` suite that generates ``Makefiles``."
msgstr ""

#: ../../../systems_cross_building/windows_subsystems.rst:14
msgid ""
"The difference between MSYS2 and CYGWIN is that MSYS2 is oriented to the "
"development of native Windows packages, while CYGWIN tries to provide a "
"complete POSIX-like system to run any Unix application on it."
msgstr ""

#: ../../../systems_cross_building/windows_subsystems.rst:17
msgid ""
"For that reason, we recommend the use of MSYS2 as a subsystem to be used "
"with Conan."
msgstr ""

#: ../../../systems_cross_building/windows_subsystems.rst:21
msgid "Operation Modes"
msgstr ""

#: ../../../systems_cross_building/windows_subsystems.rst:23
msgid ""
"The ``MSYS2`` and ``CYGWIN`` can be used with different operation modes:"
msgstr ""

#: ../../../systems_cross_building/windows_subsystems.rst:25
msgid "You can use them together with  MinGW to build Windows-native software."
msgstr ""

#: ../../../systems_cross_building/windows_subsystems.rst:26
msgid ""
"You can use them together with any other compiler to build Windows-native "
"software, even with Visual Studio."
msgstr ""

#: ../../../systems_cross_building/windows_subsystems.rst:28
msgid ""
"You can use them with MinGW to build specific software for the subsystem, "
"with a dependency to a runtime DLL (``msys-2.0.dll`` and ``cygwin1.dll``)"
msgstr ""

#: ../../../systems_cross_building/windows_subsystems.rst:32
msgid ""
"If you are building specific software for the subsystem, you have to specify "
"a value for the setting ``os.subsystem``, if you are only using the "
"subsystem for taking benefit of the UNIX tools but generating native Windows "
"software, you shouldn't specify it."
msgstr ""

#: ../../../systems_cross_building/windows_subsystems.rst:38
msgid "Running commands inside the subsystem"
msgstr ""

#: ../../../systems_cross_building/windows_subsystems.rst:41
msgid "self.run()"
msgstr ""

#: ../../../systems_cross_building/windows_subsystems.rst:43
msgid ""
"In a Conan recipe, you can use the ``self.run`` method specifying the "
"parameter ``win_bash=True`` that will call automatically to the tool :ref:"
"`tools.run_in_windows_bash<tools_run_in_windows_bash>`."
msgstr ""

#: ../../../systems_cross_building/windows_subsystems.rst:46
msgid ""
"It will use the **bash** in the path or the **bash** specified for the "
"environment variable :ref:`CONAN_BASH_PATH<conan_bash_path_env>` to run the "
"specified command."
msgstr ""

#: ../../../systems_cross_building/windows_subsystems.rst:49
msgid ""
"Conan will automatically escape the command to match the detected subsystem. "
"If you also specify the ``msys_mingw`` parameter to False, and the subsystem "
"is ``MSYS2`` it will run in Windows-native mode, the compiler won't link "
"against the ``msys-2.0.dll``."
msgstr ""

#: ../../../systems_cross_building/windows_subsystems.rst:55
msgid "AutoToolsBuildEnvironment"
msgstr ""

#: ../../../systems_cross_building/windows_subsystems.rst:57
msgid ""
"In the constructor of the build helper, you have the ``win_bash`` parameter. "
"Set it to ``True`` to run the ``configure`` and ``make`` commands inside a "
"bash."
msgstr ""

#: ../../../systems_cross_building/windows_subsystems.rst:62
msgid "Controlling the build environment"
msgstr ""

#: ../../../systems_cross_building/windows_subsystems.rst:64
msgid ""
"Building software in a Windows subsystem for a different compiler than MinGW "
"can sometimes be painful. The reason is how the subsystem finds your "
"compiler/tools in your system."
msgstr ""

#: ../../../systems_cross_building/windows_subsystems.rst:67
msgid ""
"For example, the `icu <http://site.icu-project.org/>`_ library requires "
"Visual Studio to be built in Windows, but also a subsystem able to build the "
"Makefile. A very common problem and example of the pain is the ``link.exe`` "
"program. In the Visual Studio suite, ``link.exe`` is the linker, but in the "
"``MSYS2`` environment the ``link.exe`` is a tool to manage symbolic links."
msgstr ""

#: ../../../systems_cross_building/windows_subsystems.rst:72
msgid ""
"Conan is able to prioritize the tools when you use ``build_requires``, and "
"put the tools in the PATH in the right order."
msgstr ""

#: ../../../systems_cross_building/windows_subsystems.rst:75
msgid "There are some packages you can use as ``build_requires``:"
msgstr ""

#: ../../../systems_cross_building/windows_subsystems.rst:77
msgid "From Conan-center:"
msgstr ""

#: ../../../systems_cross_building/windows_subsystems.rst:79
msgid ""
"**mingw_installer/1.0@conan/stable**: MinGW compiler installer as a Conan "
"package."
msgstr ""

#: ../../../systems_cross_building/windows_subsystems.rst:80
msgid ""
"**msys2_installer/latest@bincrafters/stable**: MSYS2 subsystem as a Conan "
"package."
msgstr ""

#: ../../../systems_cross_building/windows_subsystems.rst:81
msgid ""
"**cygwin_installer/2.9.0@bincrafters/stable**: Cygwin subsystem as a Conan "
"package."
msgstr ""

#: ../../../systems_cross_building/windows_subsystems.rst:83
msgid ""
"For example, create a profile and name it *msys2_mingw* with the following "
"contents:"
msgstr ""

#: ../../../systems_cross_building/windows_subsystems.rst:85
msgid ""
"[build_requires]\n"
"mingw_installer/1.0@conan/stable\n"
"msys2_installer/latest@bincrafters/stable\n"
"\n"
"[settings]\n"
"os_build=Windows\n"
"os=Windows\n"
"arch=x86_64\n"
"arch_build=x86_64\n"
"compiler=gcc\n"
"compiler.version=4.9\n"
"compiler.exception=seh\n"
"compiler.libcxx=libstdc++11\n"
"compiler.threads=posix\n"
"build_type=Release"
msgstr ""

#: ../../../systems_cross_building/windows_subsystems.rst:103
msgid ""
"Then you can have a *conanfile.py* that can use ``self.run()`` with "
"``win_bash=True`` to run any command in a bash terminal or use the "
"``AutoToolsBuildEnvironment`` to invoke ``configure/make`` in the "
"``subsystem``:"
msgstr ""

#: ../../../systems_cross_building/windows_subsystems.rst:107
msgid ""
"from conans import ConanFile\n"
"import os\n"
"\n"
"\n"
"class MyToolchainXXXConan(ConanFile):\n"
"    name = \"mylib\"\n"
"    version = \"0.1\"\n"
"    ...\n"
"\n"
"    def build(self):\n"
"        self.run(\"some_command\", win_bash=True)\n"
"\n"
"        env_build = AutoToolsBuildEnvironment(self, win_bash=True)\n"
"        env_build.configure()\n"
"        env_build.make()\n"
"\n"
"     ..."
msgstr ""

#: ../../../systems_cross_building/windows_subsystems.rst:127
msgid ""
"Apply the profile in your recipe to create a package using the MSYS2 and "
"MINGW:"
msgstr ""

#: ../../../systems_cross_building/windows_subsystems.rst:129
msgid "$ conan create . user/testing --profile msys2_mingw"
msgstr ""

#: ../../../systems_cross_building/windows_subsystems.rst:133
msgid ""
"As we included in the profile the ``MinGW`` and then the ``MSYS2`` "
"build_require, when we run a command, the PATH will contain first the MinGW "
"tools and finally the MSYS2."
msgstr ""

#: ../../../systems_cross_building/windows_subsystems.rst:136
msgid ""
"What could we do with the Visual Studio issue with ``link.exe``? You can "
"pass an additional parameter to ``run_in_windows_bash`` with a dictionary of "
"environment variables to have more priority than the others:"
msgstr ""

#: ../../../systems_cross_building/windows_subsystems.rst:139
msgid ""
"def build(self):\n"
"    # ...\n"
"    vs_path = tools.vcvars_dict(self.settings)[\"PATH\"] # Extract the path "
"from the vcvars_dict tool\n"
"    tools.run_in_windows_bash(self, command, env={\"PATH\": vs_path})"
msgstr ""

#: ../../../systems_cross_building/windows_subsystems.rst:146
msgid "So you will get first the ``link.exe`` from the Visual Studio."
msgstr ""

#: ../../../systems_cross_building/windows_subsystems.rst:148
msgid ""
"Also, Conan has a tool ``tools.remove_from_path`` that you can use in a "
"recipe to temporarily remove a tool from the path if you know that it can "
"interfere with your build script:"
msgstr ""

#: ../../../systems_cross_building/windows_subsystems.rst:151
msgid ""
"class MyToolchainXXXConan(ConanFile):\n"
"    name = \"mylib\"\n"
"    version = \"0.1\"\n"
"    ...\n"
"\n"
"    def build(self):\n"
"        with tools.remove_from_path(\"link\"):\n"
"            # Call something\n"
"            self.run(\"some_command\", win_bash=True)\n"
"\n"
"     ..."
msgstr ""
