# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2019, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.22\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../integrations/ide/clion.rst:5
msgid "|clion_logo| CLion"
msgstr ""

#: ../../../integrations/ide/clion.rst:9
msgid "Conan-Clion plugin"
msgstr ""

#: ../../../integrations/ide/clion.rst:11
msgid "|clion_plugin|"
msgstr ""

#: ../../../integrations/ide/clion.rst:13
msgid ""
"There is an `official Jetbrains plugin <https://plugins.jetbrains.com/"
"plugin/11956-conan>`_ Conan plugin for Clion."
msgstr ""

#: ../../../integrations/ide/clion.rst:16
msgid ""
"You can read how to use it in the following `blog post <https://blog."
"jetbrains.com/clion/2019/05/getting-started-with-the-conan-clion-plugin/>`_"
msgstr ""

#: ../../../integrations/ide/clion.rst:20
msgid "General Integration"
msgstr ""

#: ../../../integrations/ide/clion.rst:22
msgid ""
"CLion uses **CMake** as the build system of projects, so you can use the :"
"ref:`CMake generator<cmake>` to manage your requirements in your CLion "
"project."
msgstr ""

#: ../../../integrations/ide/clion.rst:24
msgid "Just include the ``conanbuildinfo.cmake`` this way:"
msgstr ""

#: ../../../integrations/ide/clion.rst:26
#: ../../../integrations/ide/clion.rst:50
#: ../../../integrations/ide/clion.rst:126
msgid ""
"if(EXISTS ${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)\n"
"    include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)\n"
"    conan_basic_setup()\n"
"else()\n"
"    message(WARNING \"The file conanbuildinfo.cmake doesn't exist, you have "
"to run conan install first\")\n"
"endif()"
msgstr ""

#: ../../../integrations/ide/clion.rst:35
msgid ""
"If the ``conanbuildinfo.cmake`` file is not found, it will print a warning "
"message in the ``Messages`` console of your CLion IDE."
msgstr ""

#: ../../../integrations/ide/clion.rst:39
msgid "Using packages in a CLion project"
msgstr ""

#: ../../../integrations/ide/clion.rst:41
msgid ""
"Let see an example of how to consume Conan packages in a CLion project. We "
"are going to require and use the ``zlib`` conan package."
msgstr ""

#: ../../../integrations/ide/clion.rst:44
#: ../../../integrations/ide/clion.rst:120
msgid "Create a new CLion project"
msgstr ""

#: ../../../integrations/ide/clion.rst:46
#: ../../../integrations/ide/clion.rst:122
msgid "|wizard_new|"
msgstr ""

#: ../../../integrations/ide/clion.rst:48
#: ../../../integrations/ide/clion.rst:124
msgid "Edit the ``CMakeLists.txt`` file and add the following lines:"
msgstr ""

#: ../../../integrations/ide/clion.rst:59
#: ../../../integrations/ide/clion.rst:135
msgid "|cmakelists|"
msgstr ""

#: ../../../integrations/ide/clion.rst:61
msgid ""
"3. CLion will reload your CMake project and you will be able to see a "
"Warning in the console, because the ``conanbuildinfo.cmake`` file still "
"doesn't exist:"
msgstr ""

#: ../../../integrations/ide/clion.rst:64
msgid "|configure_warning_info|"
msgstr ""

#: ../../../integrations/ide/clion.rst:66
msgid ""
"4. Create a ``conanfile.txt`` with all your requirements and use the "
"``cmake`` generator. In this case we only require the zlib library from a "
"Conan package:"
msgstr ""

#: ../../../integrations/ide/clion.rst:69
msgid ""
"[requires]\n"
"zlib/1.2.11\n"
"\n"
"[generators]\n"
"cmake"
msgstr ""

#: ../../../integrations/ide/clion.rst:78
msgid "|conanfile_txt|"
msgstr ""

#: ../../../integrations/ide/clion.rst:82
msgid ""
"5. Now you can run :command:`conan install` for debug in the ``cmake-build-"
"debug`` folder to install your requirements and generate the "
"``conanbuildinfo.cmake`` file there:"
msgstr ""

#: ../../../integrations/ide/clion.rst:86
msgid ""
"$ conan install . -s build_type=Debug --install-folder=cmake-build-debug"
msgstr ""

#: ../../../integrations/ide/clion.rst:90
msgid ""
"6. Repeat the last step if you have the release build types configured in "
"your CLion IDE, but change the build_type setting accordingly:"
msgstr ""

#: ../../../integrations/ide/clion.rst:93
msgid ""
"$ conan install . -s build_type=Release --install-folder=cmake-build-release"
msgstr ""

#: ../../../integrations/ide/clion.rst:97
msgid ""
"Now reconfigure your CLion project. The Warning message is not shown anymore:"
msgstr ""

#: ../../../integrations/ide/clion.rst:99
msgid "|configure_ok|"
msgstr ""

#: ../../../integrations/ide/clion.rst:102
msgid ""
"8. Open the ``library.cpp`` file and include ``zlib.h``. If you follow the "
"link, you can see that CLion automatically detects the ``zlib.h`` header "
"file from the local Conan cache."
msgstr ""

#: ../../../integrations/ide/clion.rst:105
msgid "|library_cpp|"
msgstr ""

#: ../../../integrations/ide/clion.rst:107
msgid "Build your project normally using your CLion IDE:"
msgstr ""

#: ../../../integrations/ide/clion.rst:109
msgid "|built_ok|"
msgstr ""

#: ../../../integrations/ide/clion.rst:112
msgid ""
"You can check a complete example of a CLion project reusing conan packages "
"in this github repository: `lasote/clion-conan-consumer <https://github.com/"
"lasote/clion-conan-consumer>`_."
msgstr ""

#: ../../../integrations/ide/clion.rst:116
msgid "Creating Conan packages in a CLion project"
msgstr ""

#: ../../../integrations/ide/clion.rst:118
msgid ""
"Now we are going to see how to create a Conan package from the previous "
"library."
msgstr ""

#: ../../../integrations/ide/clion.rst:138
msgid ""
"Create a ``conanfile.py`` file. It's recommended to use the :command:`conan "
"new` command."
msgstr ""

#: ../../../integrations/ide/clion.rst:140
msgid "$ conan new mylibrary/1.0@myuser/channel"
msgstr ""

#: ../../../integrations/ide/clion.rst:144
msgid "Edit the ``conanfile.py``:"
msgstr ""

#: ../../../integrations/ide/clion.rst:146
msgid ""
"We are removing the ``source`` method because we have the sources in the "
"same project; so we can use the ``exports_sources``."
msgstr ""

#: ../../../integrations/ide/clion.rst:149
msgid ""
"In the ``package_info`` method, adjust the library name. In this case our "
"``CMakeLists.txt`` creates a target library called ``mylibrary``."
msgstr ""

#: ../../../integrations/ide/clion.rst:152
msgid ""
"Adjust the CMake helper in the ``build()`` method. The ``cmake.configure()`` "
"doesn't need to specify the ``source_folder``, because we have the ``library."
"*`` files in the root directory."
msgstr ""

#: ../../../integrations/ide/clion.rst:155
msgid ""
"Adjust the ``copy`` function calls in the ``package`` method to ensure that "
"all your headers and libraries are copied to the Conan package."
msgstr ""

#: ../../../integrations/ide/clion.rst:157
msgid ""
"from conans import ConanFile, CMake, tools\n"
"\n"
"\n"
"class MylibraryConan(ConanFile):\n"
"    name = \"mylibrary\"\n"
"    version = \"1.0\"\n"
"    license = \"<Put the package license here>\"\n"
"    url = \"<Package recipe repository url here, for issues about the "
"package>\"\n"
"    description = \"<Description of Mylibrary here>\"\n"
"    settings = \"os\", \"compiler\", \"build_type\", \"arch\"\n"
"    options = {\"shared\": [True, False]}\n"
"    default_options = {\"shared\": False}\n"
"    generators = \"cmake\"\n"
"    requires = \"zlib/1.2.11\"\n"
"\n"
"    def build(self):\n"
"        cmake = CMake(self)\n"
"        cmake.configure()\n"
"        cmake.build()\n"
"\n"
"        # Explicit way:\n"
"        # self.run('cmake \"%s\" %s' % (self.source_folder, cmake."
"command_line))\n"
"        # self.run(\"cmake --build . %s\" % cmake.build_config)\n"
"\n"
"    def package(self):\n"
"        self.copy(\"*.h\", dst=\"include\", src=\"hello\")\n"
"        self.copy(\"*.lib\", dst=\"lib\", keep_path=False)\n"
"        self.copy(\"*.dll\", dst=\"bin\", keep_path=False)\n"
"        self.copy(\"*.so\", dst=\"lib\", keep_path=False)\n"
"        self.copy(\"*.dylib\", dst=\"lib\", keep_path=False)\n"
"        self.copy(\"*.a\", dst=\"lib\", keep_path=False)\n"
"\n"
"    def package_info(self):\n"
"        self.cpp_info.libs = [\"mylibrary\"]"
msgstr ""

#: ../../../integrations/ide/clion.rst:197
msgid ""
"To build your library with CLion, follow the guide of :ref:`Using packages "
"from step 5<step_five>`."
msgstr ""

#: ../../../integrations/ide/clion.rst:199
msgid ""
"5. To package your library, use the :command:`conan export-pkg` command "
"passing the used build-folder. It will call your ``package()`` method to "
"extract the artifacts and push the Conan package to the local cache:"
msgstr ""

#: ../../../integrations/ide/clion.rst:203
msgid ""
"$ conan export-pkg . mylibrary/1.0@myuser/channel --build-folder cmake-build-"
"debug -pr=myprofile"
msgstr ""

#: ../../../integrations/ide/clion.rst:207
msgid "Now you can upload it to a Conan server if needed:"
msgstr ""

#: ../../../integrations/ide/clion.rst:209
msgid ""
"$ conan upload mylibrary/1.0@myuser/channel # This will upload only the "
"recipe, use --all to upload all the generated binary packages."
msgstr ""

#: ../../../integrations/ide/clion.rst:213
msgid ""
"8. If you would like to see how the package looks like before exporting it "
"to the local cache (:command:`conan export-pkg`) you can use the :command:"
"`conan package` command to create the package in a local directory:"
msgstr ""

#: ../../../integrations/ide/clion.rst:217
msgid ""
"$ conan package . --build-folder cmake-build-debug --package-folder=mypackage"
msgstr ""

#: ../../../integrations/ide/clion.rst:222
msgid "If we list the ``mypackage`` folder we can see:"
msgstr ""

#: ../../../integrations/ide/clion.rst:224
msgid "A ``lib`` folder containing our library"
msgstr ""

#: ../../../integrations/ide/clion.rst:225
msgid "A ``include`` folder containing our header files"
msgstr ""

#: ../../../integrations/ide/clion.rst:226
msgid ""
"A ``conaninfo.txt`` and ``conanmanifest.txt`` conan files, always present in "
"all packages."
msgstr ""

#: ../../../integrations/ide/clion.rst:229
msgid ""
"You can check a full example of a CLion project for creating a Conan package "
"in this github repository: `lasote/clion-conan-package <https://github.com/"
"lasote/clion-conan-package>`_."
msgstr ""
