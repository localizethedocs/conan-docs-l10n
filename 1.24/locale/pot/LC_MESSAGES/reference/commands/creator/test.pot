# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2019, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.24\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:03+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/commands/creator/test.rst:5
msgid "conan test"
msgstr ""

#: ../../../reference/commands/creator/test.rst:7
msgid ""
"$ conan test [-h] [-tbf TEST_BUILD_FOLDER] [-b [BUILD]] [-r REMOTE] [-u]\n"
"             [-l [LOCKFILE]] [-e ENV_HOST] [-e:b ENV_BUILD] [-e:h ENV_HOST]\n"
"             [-o OPTIONS_HOST] [-o:b OPTIONS_BUILD] [-o:h OPTIONS_HOST]\n"
"             [-pr PROFILE_HOST] [-pr:b PROFILE_BUILD] [-pr:h PROFILE_HOST]\n"
"             [-s SETTINGS_HOST] [-s:b SETTINGS_BUILD] [-s:h SETTINGS_HOST]\n"
"             path reference"
msgstr ""

#: ../../../reference/commands/creator/test.rst:16
msgid "Tests a package consuming it from a conanfile.py with a test() method."
msgstr ""

#: ../../../reference/commands/creator/test.rst:18
msgid ""
"This command installs the conanfile dependencies (including the tested "
"package), calls a 'conan build' to build test apps and finally executes the "
"test() method. The testing recipe does not require name or version, neither "
"definition of package() or package_info() methods. The package to be tested "
"must exist in the local cache or in any configured remote."
msgstr ""

#: ../../../reference/commands/creator/test.rst:24
msgid ""
"positional arguments:\n"
"  path                  Path to the \"testing\" folder containing a "
"conanfile.py or to a\n"
"                        recipe file with test() methode.g. conan "
"test_package/conanfile.py\n"
"                        pkg/version@user/channel\n"
"  reference             pkg/version@user/channel of the package to be "
"tested\n"
"\n"
"optional arguments:\n"
"  -h, --help            show this help message and exit\n"
"  -tbf TEST_BUILD_FOLDER, --test-build-folder TEST_BUILD_FOLDER\n"
"                        Working directory of the build process.\n"
"  -b [BUILD], --build [BUILD]\n"
"                        Optional, use it to choose if you want to build from "
"sources:\n"
"                        --build Build all from sources, do not use binary "
"packages.\n"
"                        --build=never Never build, use binary packages or "
"fail if a binary\n"
"                        package is not found. --build=missing Build from "
"code if a binary\n"
"                        package is not found. --build=cascade Will build "
"from code all the\n"
"                        nodes with some dependency being built (for any "
"reason). Can be\n"
"                        used together with any other build policy. Useful to "
"make sure that\n"
"                        any new change introduced in a dependency is "
"incorporated by\n"
"                        building again the package. --build=outdated Build "
"from code if the\n"
"                        binary is not built with the current recipe or when "
"missing a\n"
"                        binary package. --build=[pattern] Build always these "
"packages from\n"
"                        source, but never build the others. Allows multiple "
"--build\n"
"                        parameters. 'pattern' is a fnmatch file pattern of a "
"package\n"
"                        reference. Default behavior: If you don't specify "
"anything, it will\n"
"                        be similar to '--build=never', but package recipes "
"can override it\n"
"                        with their 'build_policy' attribute in the conanfile."
"py.\n"
"  -r REMOTE, --remote REMOTE\n"
"                        Look in the specified remote server\n"
"  -u, --update          Check updates exist from upstream remotes\n"
"  -l [LOCKFILE], --lockfile [LOCKFILE]\n"
"                        Path to a lockfile or folder containing 'conan.lock' "
"file. Lockfile\n"
"                        can be updated if packages change\n"
"  -e ENV_HOST, --env ENV_HOST\n"
"                        Environment variables that will be set during the "
"package build\n"
"                        (host machine). e.g.: -e CXX=/usr/bin/clang++\n"
"  -e:b ENV_BUILD, --env:build ENV_BUILD\n"
"                        Environment variables that will be set during the "
"package build\n"
"                        (build machine). e.g.: -e CXX=/usr/bin/clang++\n"
"  -e:h ENV_HOST, --env:host ENV_HOST\n"
"                        Environment variables that will be set during the "
"package build\n"
"                        (host machine). e.g.: -e CXX=/usr/bin/clang++\n"
"  -o OPTIONS_HOST, --options OPTIONS_HOST\n"
"                        Define options values (host machine), e.g.: -o Pkg:"
"with_qt=true\n"
"  -o:b OPTIONS_BUILD, --options:build OPTIONS_BUILD\n"
"                        Define options values (build machine), e.g.: -o Pkg:"
"with_qt=true\n"
"  -o:h OPTIONS_HOST, --options:host OPTIONS_HOST\n"
"                        Define options values (host machine), e.g.: -o Pkg:"
"with_qt=true\n"
"  -pr PROFILE_HOST, --profile PROFILE_HOST\n"
"                        Apply the specified profile to the host machine\n"
"  -pr:b PROFILE_BUILD, --profile:build PROFILE_BUILD\n"
"                        Apply the specified profile to the build machine\n"
"  -pr:h PROFILE_HOST, --profile:host PROFILE_HOST\n"
"                        Apply the specified profile to the host machine\n"
"  -s SETTINGS_HOST, --settings SETTINGS_HOST\n"
"                        Settings to build the package, overwriting the "
"defaults (host\n"
"                        machine). e.g.: -s compiler=gcc\n"
"  -s:b SETTINGS_BUILD, --settings:build SETTINGS_BUILD\n"
"                        Settings to build the package, overwriting the "
"defaults (build\n"
"                        machine). e.g.: -s compiler=gcc\n"
"  -s:h SETTINGS_HOST, --settings:host SETTINGS_HOST\n"
"                        Settings to build the package, overwriting the "
"defaults (host\n"
"                        machine). e.g.: -s compiler=gcc"
msgstr ""

#: ../../../reference/commands/creator/test.rst:91
msgid ""
"This command is util for testing existing packages, that have been "
"previously built (with :command:`conan create`, for example). :command:"
"`conan create` will automatically run this test if a *test_package* folder "
"is found besides the *conanfile.py*, or if the :command:`--test-folder` "
"argument is provided to :command:`conan create`."
msgstr ""

#: ../../../reference/commands/creator/test.rst:95
msgid "**Example**:"
msgstr ""

#: ../../../reference/commands/creator/test.rst:97
msgid ""
"$ conan new hello/0.1 -s -t\n"
"$ mv test_package test_package2\n"
"$ conan create . user/testing\n"
"# doesn't automatically run test, it has been renamed\n"
"# now run test\n"
"$ conan test test_package2 hello/0.1@user/testing"
msgstr ""

#: ../../../reference/commands/creator/test.rst:106
msgid ""
"The test package folder, could be elsewhere, or could be even applied to "
"different versions of the package."
msgstr ""
