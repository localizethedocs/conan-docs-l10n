# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2019, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.24\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:03+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/commands/creator/create.rst:9
msgid "conan create"
msgstr ""

#: ../../../reference/commands/creator/create.rst:11
msgid ""
"$ conan create [-h] [-j JSON] [-k] [-kb] [-ne] [-tbf TEST_BUILD_FOLDER]\n"
"               [-tf TEST_FOLDER] [--ignore-dirty] [-m [MANIFESTS]]\n"
"               [-mi [MANIFESTS_INTERACTIVE]] [-v [VERIFY]] [-b [BUILD]] [-r "
"REMOTE]\n"
"               [-u] [-l [LOCKFILE]] [-e ENV_HOST] [-e:b ENV_BUILD] [-e:h "
"ENV_HOST]\n"
"               [-o OPTIONS_HOST] [-o:b OPTIONS_BUILD] [-o:h OPTIONS_HOST]\n"
"               [-pr PROFILE_HOST] [-pr:b PROFILE_BUILD] [-pr:h "
"PROFILE_HOST]\n"
"               [-s SETTINGS_HOST] [-s:b SETTINGS_BUILD] [-s:h "
"SETTINGS_HOST]\n"
"               path [reference]"
msgstr ""

#: ../../../reference/commands/creator/create.rst:22
msgid "Builds a binary package for a recipe (conanfile.py)."
msgstr ""

#: ../../../reference/commands/creator/create.rst:24
msgid ""
"Uses the specified configuration in a profile or in -s settings, -o options "
"etc. If a 'test_package' folder (the name can be configured with -tf) is "
"found, the command will run the consumer project to ensure that the package "
"has been created correctly. Check 'conan test' command to know more about "
"'test_folder' project."
msgstr ""

#: ../../../reference/commands/creator/create.rst:30
msgid ""
"positional arguments:\n"
"  path                  Path to a folder containing a conanfile.py or to a "
"recipe file\n"
"                        e.g., my_folder/conanfile.py\n"
"  reference             user/channel, version@user/channel or pkg/"
"version@user/channel (if\n"
"                        name or version declared in conanfile.py, they "
"should match)\n"
"\n"
"optional arguments:\n"
"  -h, --help            show this help message and exit\n"
"  -j JSON, --json JSON  json file path where the install information will be "
"written to\n"
"  -k, -ks, --keep-source\n"
"                        Do not remove the source folder in the local cache, "
"even if the\n"
"                        recipe changed. Use this for testing purposes only\n"
"  -kb, --keep-build     Do not remove the build folder in local cache. "
"Implies --keep-\n"
"                        source. Use this for testing purposes only\n"
"  -ne, --not-export     Do not export the conanfile.py\n"
"  -tbf TEST_BUILD_FOLDER, --test-build-folder TEST_BUILD_FOLDER\n"
"                        Working directory for the build of the test "
"project.\n"
"  -tf TEST_FOLDER, --test-folder TEST_FOLDER\n"
"                        Alternative test folder name. By default it is "
"\"test_package\". Use\n"
"                        \"None\" to skip the test stage\n"
"  --ignore-dirty        When using the \"scm\" feature with \"auto\" values, "
"capture the\n"
"                        revision and url even if there are uncommitted "
"changes\n"
"  -m [MANIFESTS], --manifests [MANIFESTS]\n"
"                        Install dependencies manifests in folder for later "
"verify. Default\n"
"                        folder is .conan_manifests, but can be changed\n"
"  -mi [MANIFESTS_INTERACTIVE], --manifests-interactive "
"[MANIFESTS_INTERACTIVE]\n"
"                        Install dependencies manifests in folder for later "
"verify, asking\n"
"                        user for confirmation. Default folder is ."
"conan_manifests, but can\n"
"                        be changed\n"
"  -v [VERIFY], --verify [VERIFY]\n"
"                        Verify dependencies manifests against stored ones\n"
"  -b [BUILD], --build [BUILD]\n"
"                        Optional, use it to choose if you want to build from "
"sources:\n"
"                        --build Build all from sources, do not use binary "
"packages.\n"
"                        --build=never Never build, use binary packages or "
"fail if a binary\n"
"                        package is not found. --build=missing Build from "
"code if a binary\n"
"                        package is not found. --build=cascade Will build "
"from code all the\n"
"                        nodes with some dependency being built (for any "
"reason). Can be\n"
"                        used together with any other build policy. Useful to "
"make sure that\n"
"                        any new change introduced in a dependency is "
"incorporated by\n"
"                        building again the package. --build=outdated Build "
"from code if the\n"
"                        binary is not built with the current recipe or when "
"missing a\n"
"                        binary package. --build=[pattern] Build always these "
"packages from\n"
"                        source, but never build the others. Allows multiple "
"--build\n"
"                        parameters. 'pattern' is a fnmatch file pattern of a "
"package\n"
"                        reference. Default behavior: If you don't specify "
"anything, it will\n"
"                        be similar to '--build=package name', but package "
"recipes can\n"
"                        override it with their 'build_policy' attribute in "
"the\n"
"                        conanfile.py.\n"
"  -r REMOTE, --remote REMOTE\n"
"                        Look in the specified remote server\n"
"  -u, --update          Check updates exist from upstream remotes\n"
"  -l [LOCKFILE], --lockfile [LOCKFILE]\n"
"                        Path to a lockfile or folder containing 'conan.lock' "
"file. Lockfile\n"
"                        can be updated if packages change\n"
"  -e ENV_HOST, --env ENV_HOST\n"
"                        Environment variables that will be set during the "
"package build\n"
"                        (host machine). e.g.: -e CXX=/usr/bin/clang++\n"
"  -e:b ENV_BUILD, --env:build ENV_BUILD\n"
"                        Environment variables that will be set during the "
"package build\n"
"                        (build machine). e.g.: -e CXX=/usr/bin/clang++\n"
"  -e:h ENV_HOST, --env:host ENV_HOST\n"
"                        Environment variables that will be set during the "
"package build\n"
"                        (host machine). e.g.: -e CXX=/usr/bin/clang++\n"
"  -o OPTIONS_HOST, --options OPTIONS_HOST\n"
"                        Define options values (host machine), e.g.: -o Pkg:"
"with_qt=true\n"
"  -o:b OPTIONS_BUILD, --options:build OPTIONS_BUILD\n"
"                        Define options values (build machine), e.g.: -o Pkg:"
"with_qt=true\n"
"  -o:h OPTIONS_HOST, --options:host OPTIONS_HOST\n"
"                        Define options values (host machine), e.g.: -o Pkg:"
"with_qt=true\n"
"  -pr PROFILE_HOST, --profile PROFILE_HOST\n"
"                        Apply the specified profile to the host machine\n"
"  -pr:b PROFILE_BUILD, --profile:build PROFILE_BUILD\n"
"                        Apply the specified profile to the build machine\n"
"  -pr:h PROFILE_HOST, --profile:host PROFILE_HOST\n"
"                        Apply the specified profile to the host machine\n"
"  -s SETTINGS_HOST, --settings SETTINGS_HOST\n"
"                        Settings to build the package, overwriting the "
"defaults (host\n"
"                        machine). e.g.: -s compiler=gcc\n"
"  -s:b SETTINGS_BUILD, --settings:build SETTINGS_BUILD\n"
"                        Settings to build the package, overwriting the "
"defaults (build\n"
"                        machine). e.g.: -s compiler=gcc\n"
"  -s:h SETTINGS_HOST, --settings:host SETTINGS_HOST\n"
"                        Settings to build the package, overwriting the "
"defaults (host\n"
"                        machine). e.g.: -s compiler=gcc"
msgstr ""

#: ../../../reference/commands/creator/create.rst:119
msgid "This is the recommended way to create packages."
msgstr ""

#: ../../../reference/commands/creator/create.rst:121
msgid "The ``reference`` field can be:"
msgstr ""

#: ../../../reference/commands/creator/create.rst:123
msgid ""
"A complete package reference: ``pkg/version@user/channel``. In this case, "
"the recipe doesn't need to declare the name or the version. If the recipe "
"declares them, they should match the provided values in the command line."
msgstr ""

#: ../../../reference/commands/creator/create.rst:126
msgid ""
"The user and channel: ``user/channel``. The command will assume that the "
"name and version are provided by the recipe."
msgstr ""

#: ../../../reference/commands/creator/create.rst:128
msgid ""
"The version, user and channel: ``version@user/channel``. The recipe must "
"provide the name, and if it does provide the version, it should match the "
"command line one."
msgstr ""

#: ../../../reference/commands/creator/create.rst:132
msgid ":command:`conan create . demo/testing` is equivalent to:"
msgstr ""

#: ../../../reference/commands/creator/create.rst:134
msgid ""
"$ conan export . demo/testing\n"
"$ conan install hello/0.1@demo/testing --build=hello\n"
"# package is created now, use test to test it\n"
"$ cd test_package\n"
"$ conan test . hello/0.1@demo/testing"
msgstr ""

#: ../../../reference/commands/creator/create.rst:145
msgid ""
"Sometimes you need to **skip/disable test stage** to avoid a failure while "
"creating the package, i.e: when you are cross compiling libraries and target "
"code cannot be executed in current host platform. In that case you can skip/"
"disable the test package stage:"
msgstr ""

#: ../../../reference/commands/creator/create.rst:149
msgid "$ conan create . demo/testing --test-folder=None"
msgstr ""

#: ../../../reference/commands/creator/create.rst:153
msgid ""
":command:`conan create` executes methods of a *conanfile.py* in the "
"following order:"
msgstr ""

#: ../../../reference/commands/creator/create.rst:155
msgid "``config_options()``"
msgstr ""

#: ../../../reference/commands/creator/create.rst:156
msgid "``configure()``"
msgstr ""

#: ../../../reference/commands/creator/create.rst:157
msgid "``requirements()``"
msgstr ""

#: ../../../reference/commands/creator/create.rst:158
msgid "``package_id()``"
msgstr ""

#: ../../../reference/commands/creator/create.rst:159
msgid "``build_requirements()``"
msgstr ""

#: ../../../reference/commands/creator/create.rst:160
msgid "``build_id()``"
msgstr ""

#: ../../../reference/commands/creator/create.rst:161
msgid "``system_requirements()``"
msgstr ""

#: ../../../reference/commands/creator/create.rst:162
msgid "``source()``"
msgstr ""

#: ../../../reference/commands/creator/create.rst:163
msgid "``imports()``"
msgstr ""

#: ../../../reference/commands/creator/create.rst:164
msgid "``build()``"
msgstr ""

#: ../../../reference/commands/creator/create.rst:165
msgid "``package()``"
msgstr ""

#: ../../../reference/commands/creator/create.rst:166
msgid "``package_info()``"
msgstr ""

#: ../../../reference/commands/creator/create.rst:168
msgid ""
"In case of installing a pre-built binary, steps from 5 to 11 will be "
"skipped. Note that ``deploy()`` method is only used in :command:`conan "
"install`."
msgstr ""

#: ../../../reference/commands/creator/create.rst:173
msgid ""
"Installation of binaries can be accelerated setting up parallel downloads "
"with the ``general.parallel_download`` **experimental** configuration in :"
"ref:`conan_conf`."
msgstr ""
