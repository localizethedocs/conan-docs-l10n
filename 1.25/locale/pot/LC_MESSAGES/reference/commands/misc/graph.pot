# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2019, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.25\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:18+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/commands/misc/graph.rst:4
msgid "conan graph"
msgstr ""

#: ../../../reference/commands/misc/graph.rst:6
msgid "$ conan graph [-h] {update-lock,build-order,clean-modified,lock} ..."
msgstr ""

#: ../../../reference/commands/misc/graph.rst:10
msgid "Generates and manipulates lock files."
msgstr ""

#: ../../../reference/commands/misc/graph.rst:12
msgid ""
"positional arguments:\n"
"  {update-lock,build-order,clean-modified,lock}\n"
"                        sub-command help\n"
"    update-lock         merge two lockfiles\n"
"    build-order         Returns build-order\n"
"    clean-modified      Clean modified\n"
"    lock                create a lockfile\n"
"\n"
"optional arguments:\n"
"  -h, --help            show this help message and exit"
msgstr ""

#: ../../../reference/commands/misc/graph.rst:28
msgid "conan graph update-lock"
msgstr ""

#: ../../../reference/commands/misc/graph.rst:30
msgid "$ conan graph update-lock [-h] old_lockfile new_lockfile"
msgstr ""

#: ../../../reference/commands/misc/graph.rst:34
msgid ""
"Updates the *old_lockfile* file with the contents of the *new_lockfiles*."
msgstr ""

#: ../../../reference/commands/misc/graph.rst:36
msgid ""
"positional arguments:\n"
"  old_lockfile  path to previous lockfile\n"
"  new_lockfile  path to modified lockfile\n"
"\n"
"optional arguments:\n"
"  -h, --help    show this help message and exit"
msgstr ""

#: ../../../reference/commands/misc/graph.rst:46
msgid ""
"Only the packages in *new_lockfile* marked as \"modified\" will be "
"processed. If a node in *old_lockfile* is already modified and an "
"incompatible (different binary ID, different revision) updated is attempted, "
"it will raise an error. The updated nodes will keep the \"modified\" flag "
"when updated in *old_lockfile*"
msgstr ""

#: ../../../reference/commands/misc/graph.rst:51
msgid ""
"This command is useful for distributed or concurrent builds of different "
"packages in the same dependency graph locked by the same lockfile. When one "
"package is rebuilt it will modify the package reference, and will be marked "
"as \"modified\". The way of integrating the information of package builds "
"into the main lockfile is this command."
msgstr ""

#: ../../../reference/commands/misc/graph.rst:56
msgid "Example:"
msgstr ""

#: ../../../reference/commands/misc/graph.rst:58
msgid ""
"Integrate the information of building a \"pkgb\" package using a lockfile "
"(and modified in the folder pkgb_temp) in the main lockfile:"
msgstr ""

#: ../../../reference/commands/misc/graph.rst:61
msgid ""
"$ conan graph update-lock release/conan.lock pkgb_temp/release/conan.lock"
msgstr ""

#: ../../../reference/commands/misc/graph.rst:69
msgid "conan graph clean-modified"
msgstr ""

#: ../../../reference/commands/misc/graph.rst:71
msgid "$ conan graph clean-modified [-h] lockfile"
msgstr ""

#: ../../../reference/commands/misc/graph.rst:75
msgid "Cleans all \"modified\" flags from the given lockfile."
msgstr ""

#: ../../../reference/commands/misc/graph.rst:77
msgid ""
"positional arguments:\n"
"  lockfile    lockfile folder\n"
"\n"
"optional arguments:\n"
"  -h, --help  show this help message and exit"
msgstr ""

#: ../../../reference/commands/misc/graph.rst:85
msgid ""
"When a package of a dependency graph is going to be re-built, using a given "
"lockfile, it is desired to finish the build knowing which packages of the "
"graph have been actually rebuilt as a result of the last command. This "
"command will clean all the previously existing \"modified\" flags before "
"such build, so after the build the \"modified\" are only those that have "
"been built now."
msgstr ""

#: ../../../reference/commands/misc/graph.rst:94
msgid "conan graph build-order"
msgstr ""

#: ../../../reference/commands/misc/graph.rst:96
msgid "$ conan graph build-order [-h] [-b [BUILD]] [--json JSON] lockfile"
msgstr ""

#: ../../../reference/commands/misc/graph.rst:101
msgid ""
"Given a lockfile, compute which packages and in which order they should be "
"built, as mandated by the binary ID (``package_id()``) definitions and the "
"``--build`` argument, which is the same as :command:`conan create|install`"
msgstr ""

#: ../../../reference/commands/misc/graph.rst:105
msgid ""
"positional arguments:\n"
"  lockfile              lockfile folder\n"
"\n"
"optional arguments:\n"
"  -h, --help            show this help message and exit\n"
"  -b [BUILD], --build [BUILD]\n"
"                        Optional, specify which packages to build from "
"source.\n"
"                        Combining multiple '--build' options on one command\n"
"                        line is allowed. For dependencies, the optional\n"
"                        'build_policy' attribute in their conanfile.py "
"takes\n"
"                        precedence over the command line parameter. "
"Possible\n"
"                        parameters: --build Force build for all packages, "
"do\n"
"                        not use binary packages. --build=never Disallow "
"build\n"
"                        for all packages, use binary packages or fail if a\n"
"                        binary package is not found. Cannot be combined "
"with\n"
"                        other '--build' options. --build=missing Build\n"
"                        packages from source whose binary package is not\n"
"                        found. --build=outdated Build packages from source\n"
"                        whose binary package was not generated from the "
"latest\n"
"                        recipe or is not found. --build=cascade Build "
"packages\n"
"                        from source that have at least one dependency being\n"
"                        built from source. --build=[pattern] Build packages\n"
"                        from source whose package reference matches the\n"
"                        pattern. The pattern uses 'fnmatch' style "
"wildcards.\n"
"                        Default behavior: If you omit the '--build' option,\n"
"                        the 'build_policy' attribute in conanfile.py will "
"be\n"
"                        used if it exists, otherwise the behavior is like "
"'--\n"
"                        build=never'.\n"
"  --json JSON           generate output file in json format"
msgstr ""

#: ../../../reference/commands/misc/graph.rst:138
msgid ""
"The result is a list of lists, containing tuples. Each tuple contains 2 "
"elements, the first is a UUID of the node of the graph. It is unique and "
"ensures a way to address exactly one node, even if there are nodes with the "
"same reference (it is possible for example to have different build_requires "
"with the same name and version, but different configuration)"
msgstr ""

#: ../../../reference/commands/misc/graph.rst:146
msgid "conan graph lock"
msgstr ""

#: ../../../reference/commands/misc/graph.rst:148
msgid ""
"conan graph lock [-h] [-l LOCKFILE] [-b [BUILD]] [-r REMOTE] [-u] [-e "
"ENV_HOST]\n"
"                 [-e:b ENV_BUILD] [-e:h ENV_HOST] [-o OPTIONS_HOST]\n"
"                 [-o:b OPTIONS_BUILD] [-o:h OPTIONS_HOST] [-pr "
"PROFILE_HOST]\n"
"                 [-pr:b PROFILE_BUILD] [-pr:h PROFILE_HOST] [-s "
"SETTINGS_HOST]\n"
"                 [-s:b SETTINGS_BUILD] [-s:h SETTINGS_HOST]\n"
"                 path_or_reference"
msgstr ""

#: ../../../reference/commands/misc/graph.rst:157
msgid ""
"positional arguments:\n"
"  path_or_reference     Path to a folder containing a recipe (conanfile.py "
"or\n"
"                        conanfile.txt) or to a recipe file. e.g.,\n"
"                        ./my_project/conanfile.txt. It could also be a "
"reference\n"
"\n"
"optional arguments:\n"
"  -h, --help            show this help message and exit\n"
"  -l LOCKFILE, --lockfile LOCKFILE\n"
"                        Path to lockfile to be created. If not specified "
"'conan.lock' will\n"
"                        be created in current folder\n"
"  -b [BUILD], --build [BUILD]\n"
"                        Packages to build from source\n"
"  -r REMOTE, --remote REMOTE\n"
"                        Look in the specified remote server\n"
"  -u, --update          Check updates exist from upstream remotes\n"
"  -e ENV_HOST, --env ENV_HOST\n"
"                        Environment variables that will be set during the "
"package build\n"
"                        (host machine). e.g.: -e CXX=/usr/bin/clang++\n"
"  -e:b ENV_BUILD, --env:build ENV_BUILD\n"
"                        Environment variables that will be set during the "
"package build\n"
"                        (build machine). e.g.: -e CXX=/usr/bin/clang++\n"
"  -e:h ENV_HOST, --env:host ENV_HOST\n"
"                        Environment variables that will be set during the "
"package build\n"
"                        (host machine). e.g.: -e CXX=/usr/bin/clang++\n"
"  -o OPTIONS_HOST, --options OPTIONS_HOST\n"
"                        Define options values (host machine), e.g.: -o Pkg:"
"with_qt=true\n"
"  -o:b OPTIONS_BUILD, --options:build OPTIONS_BUILD\n"
"                        Define options values (build machine), e.g.: -o Pkg:"
"with_qt=true\n"
"  -o:h OPTIONS_HOST, --options:host OPTIONS_HOST\n"
"                        Define options values (host machine), e.g.: -o Pkg:"
"with_qt=true\n"
"  -pr PROFILE_HOST, --profile PROFILE_HOST\n"
"                        Apply the specified profile to the host machine\n"
"  -pr:b PROFILE_BUILD, --profile:build PROFILE_BUILD\n"
"                        Apply the specified profile to the build machine\n"
"  -pr:h PROFILE_HOST, --profile:host PROFILE_HOST\n"
"                        Apply the specified profile to the host machine\n"
"  -s SETTINGS_HOST, --settings SETTINGS_HOST\n"
"                        Settings to build the package, overwriting the "
"defaults (host\n"
"                        machine). e.g.: -s compiler=gcc\n"
"  -s:b SETTINGS_BUILD, --settings:build SETTINGS_BUILD\n"
"                        Settings to build the package, overwriting the "
"defaults (build\n"
"                        machine). e.g.: -s compiler=gcc\n"
"  -s:h SETTINGS_HOST, --settings:host SETTINGS_HOST\n"
"                        Settings to build the package, overwriting the "
"defaults (host\n"
"                        machine). e.g.: -s compiler=gcc"
msgstr ""

#: ../../../reference/commands/misc/graph.rst:207
msgid ""
"This command is similar to :command:`conan install` or :command:`conan "
"info`, but with a few differences:"
msgstr ""

#: ../../../reference/commands/misc/graph.rst:210
msgid ""
"It doesn't need to retrieve binaries, it will only compute what is necessary "
"to do, according to the ``--build`` argument and rules"
msgstr ""

#: ../../../reference/commands/misc/graph.rst:211
msgid ""
"Even when ``--build`` values are specified, packages will not be built from "
"sources. It will just compute, as a \"dry-run\" what would happen in an "
"equivalent :command:`conan install`"
msgstr ""
