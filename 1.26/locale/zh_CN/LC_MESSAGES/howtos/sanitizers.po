# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2019, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.26\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:03+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../howtos/sanitizers.rst:4
msgid "Compiler sanitizers"
msgstr ""

#: ../../../howtos/sanitizers.rst:6
msgid ""
"Sanitizers are tools that can detect bugs such as buffer overflows or "
"accesses, dangling pointer or different types of undefined behavior."
msgstr ""

#: ../../../howtos/sanitizers.rst:9
msgid ""
"The two compilers that mainly support sanitizing options are gcc and clang. "
"These options are passed to the compiler as flags and, depending on if you "
"are using `clang <https://clang.llvm.org/docs/UsersManual.html#controlling-"
"code-generation>`_ or `gcc <https://gcc.gnu.org/onlinedocs/gcc/"
"Instrumentation-Options.html>`_, different sanitizers are supported."
msgstr ""

#: ../../../howtos/sanitizers.rst:15
msgid ""
"Here we explain different options on how to model and use sanitizers with "
"your Conan packages."
msgstr ""

#: ../../../howtos/sanitizers.rst:18
msgid "Adding custom settings"
msgstr ""

#: ../../../howtos/sanitizers.rst:20
msgid ""
"If you want to model the sanitizer options so that the package id is "
"affected by them, you have to introduce new settings in the *settings.yml* "
"file (see :ref:`custom_settings` section for more information)."
msgstr ""

#: ../../../howtos/sanitizers.rst:24
msgid ""
"Sanitizer options should be modeled as sub-settings of the compiler. "
"Depending on how you want to combine the sanitizers you have two choices."
msgstr ""

#: ../../../howtos/sanitizers.rst:28
msgid "Adding a list of commonly used values"
msgstr ""

#: ../../../howtos/sanitizers.rst:30
msgid ""
"If you have a fixed set of sanitizers or combinations of them that are the "
"ones you usually set for your builds you can add the sanitizers as a list of "
"values. An example for *apple-clang* would be like this:"
msgstr ""

#: ../../../howtos/sanitizers.rst:34 ../../../howtos/sanitizers.rst:61
msgid "*settings.yml*"
msgstr ""

#: ../../../howtos/sanitizers.rst:34
msgid ""
"apple-clang:\n"
"    version: [\"5.0\", \"5.1\", \"6.0\", \"6.1\", \"7.0\", \"7.3\", \"8.0\", "
"\"8.1\",\n"
"              \"9.0\", \"9.1\", \"10.0\", \"11.0\"]\n"
"    libcxx: [libstdc++, libc++]\n"
"    cppstd: [None, 98, gnu98, 11, gnu11, 14, gnu14, 17, gnu17, 20, gnu20]\n"
"    sanitizer: [None, Address, Thread, Memory, UndefinedBehavior, "
"AddressUndefinedBehavior]"
msgstr ""

#: ../../../howtos/sanitizers.rst:45
msgid ""
"Here you have modeled the use of ``-fsanitize=address``, ``-"
"fsanitize=thread``, ``-fsanitize=memory``, ``-fsanitize=undefined`` and the "
"combination of ``-fsanitize=address`` and ``-fsanitize=undefined``. Note "
"that for example, for clang it is not possible to combine more than one of "
"the ``-fsanitize=address``, ``-fsanitize=thread``, and ``-fsanitize=memory`` "
"checkers in the same program."
msgstr ""

#: ../../../howtos/sanitizers.rst:51
msgid ""
"Adding thread sanitizer for a :command:`conan install`, in this case, could "
"be done by calling :command:`conan install .. -s compiler.sanitizer=Thread`"
msgstr ""

#: ../../../howtos/sanitizers.rst:55
msgid "Adding different values to combine"
msgstr ""

#: ../../../howtos/sanitizers.rst:57
msgid ""
"Another option would be to add the sanitizer values as multiple ``True`` or "
"``None`` fields so that they can be freely combined later. An example of "
"that for the previous sanitizer options would be as follows:"
msgstr ""

#: ../../../howtos/sanitizers.rst:61
msgid ""
"apple-clang:\n"
"    version: [\"5.0\", \"5.1\", \"6.0\", \"6.1\", \"7.0\", \"7.3\", "
"\"8.0\",\n"
"              \"8.1\", \"9.0\", \"9.1\", \"10.0\", \"11.0\"]\n"
"    libcxx: [libstdc++, libc++]\n"
"    cppstd: [None, 98, gnu98, 11, gnu11, 14, gnu14, 17, gnu17, 20, gnu20]\n"
"    address_sanitizer: [None, True]\n"
"    thread_sanitizer: [None, True]\n"
"    undefined_sanitizer: [None, True]"
msgstr ""

#: ../../../howtos/sanitizers.rst:74
msgid ""
"Then, you can add different sanitizers calling, for example, to :command:"
"`conan install .. -s compiler.address_sanitizer=True -s compiler."
"undefined_sanitizer=True`"
msgstr ""

#: ../../../howtos/sanitizers.rst:77
msgid ""
"A drawback of this approach is that not all the combinations will be valid "
"or will make sense, but it is up to the consumer to use it correctly."
msgstr ""

#: ../../../howtos/sanitizers.rst:81
msgid "Passing the information to the compiler or build system"
msgstr ""

#: ../../../howtos/sanitizers.rst:83
msgid ""
"Here again, we have multiple choices to pass sanitizers information to the "
"compiler or build system."
msgstr ""

#: ../../../howtos/sanitizers.rst:86
msgid "Using from custom profiles"
msgstr ""

#: ../../../howtos/sanitizers.rst:88
msgid ""
"It is possible to have different custom profiles defining the compiler "
"sanitizer setting and environment variables to inject that information to "
"the compiler, and then passing those profiles to Conan commands. An example "
"of this would be a profile like:"
msgstr ""

#: ../../../howtos/sanitizers.rst:92
msgid "*address_sanitizer_profile*"
msgstr ""

#: ../../../howtos/sanitizers.rst:92
msgid ""
" [settings]\n"
" os=Macos\n"
" os_build=Macos\n"
" arch=x86_64\n"
" arch_build=x86_64\n"
" compiler=apple-clang\n"
" compiler.version=10.0\n"
" compiler.libcxx=libc++\n"
" build_type=Release\n"
" compiler.sanitizer=Address\n"
" [env]\n"
" CXXFLAGS=-fsanitize=address\n"
" CFLAGS=-fsanitize=address"
msgstr ""

#: ../../../howtos/sanitizers.rst:110
msgid ""
"Then calling to :command:`conan create . -pr address_sanitizer_profile` "
"would inject ``-fsanitize=address`` to the build through the ``CXXFLAGS`` "
"environment variable."
msgstr ""

#: ../../../howtos/sanitizers.rst:114
msgid "Managing sanitizer settings with the build system"
msgstr ""

#: ../../../howtos/sanitizers.rst:116
msgid ""
"Another option is to make use of the information that is propagated to the "
"*conan generator*. For example, if we are using CMake we could use the "
"information from the *CMakeLists.txt* to append the flags to the compiler "
"settings like this:"
msgstr ""

#: ../../../howtos/sanitizers.rst:120
msgid "*CMakeLists.txt*"
msgstr ""

#: ../../../howtos/sanitizers.rst:120
msgid ""
" cmake_minimum_required(VERSION 3.2)\n"
" project(SanitizerExample)\n"
" set (CMAKE_CXX_STANDARD 11)\n"
" include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)\n"
" conan_basic_setup()\n"
" set(SANITIZER ${CONAN_SETTINGS_COMPILER_SANITIZER})\n"
" if(SANITIZER)\n"
"     if(SANITIZER MATCHES \"(Address)\")\n"
"     set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=address\" )\n"
"     endif()\n"
" endif()\n"
" add_executable(sanit_example src/main.cpp)"
msgstr ""

#: ../../../howtos/sanitizers.rst:137
msgid ""
"The sanitizer setting is propagated to CMake as the "
"``CONAN_SETTINGS_COMPILER_SANITIZER`` variable with a value equals to "
"``\"Address\"`` and we can set the behavior in CMake depending on the value "
"of the variable."
msgstr ""

#: ../../../howtos/sanitizers.rst:143
msgid "Using conan Hooks to set compiler environment variables"
msgstr ""

#: ../../../howtos/sanitizers.rst:147
msgid ""
"Take into account that the package ID doesn't encode information about the "
"environment, so different binaries due to different `CXX_FLAGS` would be "
"considered by Conan as the same package."
msgstr ""

#: ../../../howtos/sanitizers.rst:151
msgid ""
"If you are not interested in modelling the settings in the Conan package you "
"can use a :ref:`Hook <hooks_reference>` to modify the environment variable "
"and apply the sanitizer flags to the build. It could be something like:"
msgstr ""

#: ../../../howtos/sanitizers.rst:155 ../../../howtos/sanitizers.rst:170
msgid "*sanitizer_hook.py*"
msgstr ""

#: ../../../howtos/sanitizers.rst:155
msgid ""
"def set_sanitize_address_flag(self):\n"
"    self._old_cxx_flags = os.environ.get(\"CXXFLAGS\")\n"
"    os.environ[\"SOURCE_DATE_EPOCH\"] = _old_flags + \" -"
"fsanitize=address\"\n"
"\n"
"def reset_sanitize_address_flag(self):\n"
"    if self._old_cxx_flags is None:\n"
"        del os.environ[\"CXXFLAGS\"]\n"
"    else:\n"
"        os.environ[\"CXXFLAGS\"] = self._old_cxx_flags"
msgstr ""

#: ../../../howtos/sanitizers.rst:168
msgid ""
"And then calling those functions from a *pre_build* and a *post_build* hook:"
msgstr ""

#: ../../../howtos/sanitizers.rst:170
msgid ""
"def pre_build(output, conanfile, **kwargs):\n"
"    set_sanitize_address_flag()\n"
"\n"
"def post_build(output, conanfile, **kwargs):\n"
"    reset_sanitize_address_flag()"
msgstr ""
