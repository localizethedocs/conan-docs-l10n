# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2019, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.26\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:03+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../integrations/build_system/cmake/cmake_find_package_multi_generator.rst:6
msgid "``cmake_find_package_multi``"
msgstr ""

#: ../../../integrations/build_system/cmake/cmake_find_package_multi_generator.rst:11
msgid ""
"This is an **experimental** feature subject to breaking changes in future "
"releases."
msgstr ""

#: ../../../integrations/build_system/cmake/cmake_find_package_multi_generator.rst:13
msgid ""
"This generator is similar to the :ref:"
"`cmake_find_package<cmake_find_package_generator>` generator but it allows "
"working with multi-configuration projects like ``Visual Studio`` with both "
"``Debug`` and ``Release``. But there are some differences:"
msgstr ""

#: ../../../integrations/build_system/cmake/cmake_find_package_multi_generator.rst:16
msgid "Only works with CMake > 3.0"
msgstr ""

#: ../../../integrations/build_system/cmake/cmake_find_package_multi_generator.rst:17
msgid ""
"It doesn't generate ``FindXXX.cmake`` modules but ``XXXConfig.cmake`` files."
msgstr ""

#: ../../../integrations/build_system/cmake/cmake_find_package_multi_generator.rst:18
msgid ""
"The \"global\" approach is not supported, only \"modern\" CMake by using "
"targets."
msgstr ""

#: ../../../integrations/build_system/cmake/cmake_find_package_multi_generator.rst:22
msgid "Usage"
msgstr ""

#: ../../../integrations/build_system/cmake/cmake_find_package_multi_generator.rst:24
msgid ""
"$ conan install . -g cmake_find_package_multi -s build_type=Debug\n"
"$ conan install . -g cmake_find_package_multi -s build_type=Release"
msgstr ""

#: ../../../integrations/build_system/cmake/cmake_find_package_multi_generator.rst:29
msgid ""
"These commands will generate several files for each dependency in your "
"graph, including a ``XXXConfig.cmake`` that can be located by the CMake "
"`find_package(XXX CONFIG) <https://cmake.org/cmake/help/v3.0/command/"
"find_package.html>`_ command, with XXX as the package name."
msgstr ""

#: ../../../integrations/build_system/cmake/cmake_find_package_multi_generator.rst:34
msgid ""
"Add the ``CONFIG`` option to ``find_package`` so that *module mode* is "
"explicitly skipped by CMake. This helps to solve issues when there is for "
"example a ``FindXXXX.cmake`` file in CMake's default modules directory that "
"could be loaded instead of the ``XXXXConfig.cmake`` generated by Conan."
msgstr ""

#: ../../../integrations/build_system/cmake/cmake_find_package_multi_generator.rst:38
msgid ""
"The name of the files follows the pattern ``<package_name>Config.cmake``. So "
"for the ``zlib/1.2.11`` package, a ``zlibConfig.cmake`` file will be "
"generated."
msgstr ""

#: ../../../integrations/build_system/cmake/cmake_find_package_multi_generator.rst:44
msgid ""
"Check the section :ref:`cmake_find_package_multi_generator_reference` to "
"read more about this generator and the adjusted CMake variables/targets."
msgstr ""
