# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2018, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:17+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../creating_packages/package_dev_flow.rst:2
msgid "Package development flow"
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:4
msgid ""
"In the previous examples, we used :command:`conan create` command to create "
"a package of our library. Every time we run it, conan will perform some "
"costly operations:"
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:7
msgid "Copy the sources to a new and clean build folder."
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:8
msgid "Build the entire library from scratch."
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:9
msgid "Package the library once it is built."
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:10
msgid "Build the ``test_package`` example and test if it works."
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:12
msgid ""
"But sometimes, specially with big libraries, while we are developing the "
"recipe, **we cannot afford** to perform every time these operations."
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:15
msgid ""
"The following section is the local development flow description based on the "
"`Bincrafters community blog <https://bincrafters.github.io>`_."
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:20
msgid ""
"The local workflow encourages users to do trial-and-error in a local sub-"
"directory relative to their recipe, much like how developers typically test "
"building their projects with other build tools. The strategy is to test the "
"*conanfile.py* methods individually during this phase."
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:24
msgid ""
"We will use the following `conan flow example <https://github.com/memsharded/"
"example_conan_flow>`_ to follow the steps in the order below:"
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:27
msgid "conan source"
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:29
msgid ""
"You will generally want to start off with the :command:`conan source` "
"command. The strategy here is that you’re testing your source method in "
"isolation, and downloading the files to a temporary sub-folder relative to "
"the *conanfile.py*. This just makes it easier to get to the sources and "
"validate them."
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:33
msgid "This method outputs the source files into the source-folder."
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:36
#: ../../../creating_packages/package_dev_flow.rst:60
#: ../../../creating_packages/package_dev_flow.rst:85
#: ../../../creating_packages/package_dev_flow.rst:115
#: ../../../creating_packages/package_dev_flow.rst:144
msgid "Input folders"
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:36
#: ../../../creating_packages/package_dev_flow.rst:60
#: ../../../creating_packages/package_dev_flow.rst:85
#: ../../../creating_packages/package_dev_flow.rst:115
#: ../../../creating_packages/package_dev_flow.rst:144
msgid "Output folders"
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:38
#: ../../../creating_packages/package_dev_flow.rst:62
#: ../../../creating_packages/package_dev_flow.rst:146
msgid "--"
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:38
#: ../../../creating_packages/package_dev_flow.rst:87
#: ../../../creating_packages/package_dev_flow.rst:117
#: ../../../creating_packages/package_dev_flow.rst:146
msgid "``source-folder``"
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:41
msgid ""
"$ cd example_conan_flow\n"
"$ conan source . --source-folder=tmp/source\n"
"\n"
"PROJECT: Configuring sources in C:"
"\\Users\\conan\\example_conan_flow\\tmp\\source\n"
"Cloning into 'hello'...\n"
"..."
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:50
msgid ""
"Once you’ve got your source method right and it contains the files you "
"expect, you can move on to testing the various attributes and methods "
"relating to the downloading of dependencies."
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:54
msgid "conan install"
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:56
msgid ""
"Conan has multiple methods and attributes which relate to dependencies (all "
"the ones with the word \"require\" in the name). The command :command:`conan "
"install` activates all them."
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:62
#: ../../../creating_packages/package_dev_flow.rst:89
#: ../../../creating_packages/package_dev_flow.rst:119
#: ../../../creating_packages/package_dev_flow.rst:148
msgid "``install-folder``"
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:65
msgid ""
"$ conan install . --install-folder=tmp/install [--profile XXXX]\n"
"\n"
"PROJECT: Installing C:\\Users\\conan\\example_conan_flow\\conanfile.py\n"
"Requirements\n"
"Packages\n"
"..."
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:74
msgid ""
"This also generates *conaninfo.txt* and *conanbuildinfo.xyz* (extension "
"depends on generator you’ve used) in the temp folder (``install-folder``), "
"which will be needed for the next step. Once you've got this command working "
"with no errors, you can move on to testing the ``build()`` method."
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:79
msgid "conan build"
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:81
msgid ""
"The build method takes a path to a folder that has sources and also to the "
"install folder to get the information of the settings and dependencies. It "
"uses a path to a folder where it will perform the build."
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:87
#: ../../../creating_packages/package_dev_flow.rst:121
#: ../../../creating_packages/package_dev_flow.rst:150
msgid "``build-folder``"
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:92
msgid ""
"$ conan build . --source-folder=tmp/source --install-folder=tmp/install --"
"build-folder=tmp/build\n"
"\n"
"Project: Running build()\n"
"...\n"
"Build succeeded.\n"
"    0 Warning(s)\n"
"    0 Error(s)\n"
"\n"
"Time Elapsed 00:00:03.34"
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:104
msgid ""
"This is pretty strightforward, but it does add a very helpful new shortcut "
"for people who are packaging their own library. Now, developers can make "
"changes in their normal source directory and just pass that path as the ``--"
"source-folder``."
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:108
msgid "conan package"
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:110
msgid ""
"Just as it sounds, this command now simply runs the ``package()`` method of "
"a recipe. It needs all the information of the other folders in order to "
"collect the needed information for the package: header files from source "
"folder, settings and depency information from the install folder and built "
"artifacts from the build folder."
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:117
#: ../../../creating_packages/package_dev_flow.rst:152
msgid "``package-folder``"
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:124
msgid ""
"$ conan package . --source-folder=tmp/source --install-folder=tmp/install --"
"build-folder=tmp/build --package-folder=tmp/package\n"
"\n"
"PROJECT: Generating the package\n"
"PROJECT: Package folder C:\\Users\\conan\\example_conan_flow\\tmp\\package\n"
"PROJECT: Calling package()\n"
"PROJECT package(): Copied 1 '.h' files: hello.h\n"
"PROJECT package(): Copied 2 '.lib' files: greet.lib, hello.lib\n"
"PROJECT: Package 'package' created"
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:136
msgid "conan export-pkg"
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:138
msgid ""
"When you have checked that the packaged is done correctly, you can generate "
"the package in the local cache. Note that the package is generated again to "
"make sure this step is always reproducible."
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:141
msgid "This parameters takes the same parameters as ``package()``."
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:155
msgid "There are 2 modes of operation:"
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:157
msgid ""
"Using ``source-folder`` and ``build-folder``will use the ``package()`` "
"method to extract the artifacts from those folders and create the package, "
"directly in the conan local cache. Strictly speaking, it doesn't require "
"executing a ``$ conan package`` before, as it packages directly from those "
"source and build folder, though ``$ conan package`` is still recommended in "
"the dev-flow to debug the ``package()`` method."
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:161
msgid ""
"Using the ``package-folder`` argument (incompatible with the above 2), will "
"not use the ``package()`` method, it will do an exact copy of the provided "
"folder. It assumes the package has already been created by a previous ``$ "
"conan package`` command or with a ``$ conan build`` command with a "
"``build()`` method running a ``cmake.install()``."
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:165
msgid ""
"$ conan export-pkg . user/testing --source-folder=tmp/source --install-"
"folder=tmp/install --build-folder=tmp/build\n"
"\n"
"Packaging to 6cc50b139b9c3d27b3e9042d5f5372d327b3a9f7\n"
"Hello/0.1@user/channel: Generating the package\n"
"Hello/0.1@user/channel: Package folder C:\\Users\\conan\\."
"conan\\data\\Hello\\0.1\\user\\channel\\package\\6cc50b139b9c3d27b3e9042d5f5372d327b3a9f7\n"
"Hello/0.1@user/channel: Calling package()\n"
"Hello/0.1@user/channel package(): Copied 2 '.lib' files: greet.lib, hello."
"lib\n"
"Hello/0.1@user/channel package(): Copied 2 '.lib' files: greet.lib, hello."
"lib\n"
"Hello/0.1@user/channel: Package '6cc50b139b9c3d27b3e9042d5f5372d327b3a9f7' "
"created"
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:178
msgid "conan test"
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:180
msgid ""
"The finally step to test the package for consumer is the test command. This "
"step is quite straight-forward:"
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:182
msgid ""
"$ conan test test_package Hello/0.1@user/channel\n"
"\n"
"Hello/0.1@user/channel (test package): Installing C:"
"\\Users\\conan\\repos\\example_conan_flow\\test_package\\conanfile.py\n"
"Requirements\n"
"    Hello/0.1@user/channel from local\n"
"Packages\n"
"    Hello/0.1@user/channel:6cc50b139b9c3d27b3e9042d5f5372d327b3a9f7\n"
"\n"
"Hello/0.1@user/channel: Already installed!\n"
"Hello/0.1@user/channel (test package): Generator cmake created "
"conanbuildinfo.cmake\n"
"Hello/0.1@user/channel (test package): Generator txt created conanbuildinfo."
"txt\n"
"Hello/0.1@user/channel (test package): Generated conaninfo.txt\n"
"Hello/0.1@user/channel (test package): Running build()\n"
"..."
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:199
msgid ""
"There is often a need to repeatedly re-run the test to check the package is "
"well generated for consumers."
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:201
msgid ""
"As a summary, you could use the default folders and the flow would be as "
"simple as:"
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:203
msgid ""
"$ git clone git@github.com:memsharded/example_conan_flow.git\n"
"$ cd example_conan_flow\n"
"$ conan source .\n"
"$ conan install .\n"
"$ conan build .\n"
"$ conan package .\n"
"...\n"
"PROJECT package(): Copied 1 '.h' files: hello.h\n"
"PROJECT package(): Copied 2 '.lib' files: greet.lib, hello.lib\n"
"PROJECT: Package 'package' created"
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:217
msgid "conan create"
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:219
msgid ""
"Now we know we have all the steps of a recipe working. Thus, now is an "
"appropriate time to try to run the recipe all the way through, and put it "
"completely in the local cache."
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:222
msgid ""
"The usual command for this is :command:`conan create` and it basically "
"performs the previous commands with :command:`conan test` for the "
"`test_package` folder:"
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:225
msgid "$ conan create . user/channel"
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:229
msgid ""
"Even with this command, the package creator can iterate over the local cache "
"if something does not work. This could be done with ``--keep-source`` and "
"``--keep-build`` flags."
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:232
msgid ""
"If you see in the traces that the ``source()`` method has been properly "
"executed but the package creation finally failed, you can skip the "
"``source()`` method the next time you issue :command:`conan create` using :"
"command:`--keep-source`:"
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:235
msgid ""
"$ conan create . user/channel --keep-source\n"
"\n"
"Hello/0.1@user/channel: A new conanfile.py version was exported\n"
"Hello/0.1@user/channel: Folder: C:\\Users\\conan\\."
"conan\\data\\Hello\\0.1\\user\\channel\\export\n"
"Hello/0.1@user/channel (test package): Installing C:"
"\\Users\\conan\\repos\\example_conan_flow\\test_package\\conanfile.py\n"
"Requirements\n"
"    Hello/0.1@user/channel from local\n"
"Packages\n"
"    Hello/0.1@user/channel:6cc50b139b9c3d27b3e9042d5f5372d327b3a9f7\n"
"\n"
"Hello/0.1@user/channel: WARN: Forced build from source\n"
"Hello/0.1@user/channel: Building your package in C:\\Users\\conan\\."
"conan\\data\\Hello\\0.1\\user\\channel\\build\\6cc50b139b9c3d27b3e9042d5f5372d327b3a9f7\n"
"Hello/0.1@user/channel: Configuring sources in C:\\Users\\conan\\."
"conan\\data\\Hello\\0.1\\user\\channel\\source\n"
"Cloning into 'hello'...\n"
"remote: Counting objects: 17, done.\n"
"remote: Total 17 (delta 0), reused 0 (delta 0), pack-reused 17\n"
"Unpacking objects: 100% (17/17), done.\n"
"Switched to a new branch 'static_shared'\n"
"Branch 'static_shared' set up to track remote branch 'static_shared' from "
"'origin'.\n"
"Hello/0.1@user/channel: Copying sources to build folder\n"
"Hello/0.1@user/channel: Generator cmake created conanbuildinfo.cmake\n"
"Hello/0.1@user/channel: Calling build()\n"
"..."
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:261
msgid ""
"If you see that library builds correctly too, you can do the same to skip "
"also the ``build()`` step with the ``--keep-build`` flag:"
msgstr ""

#: ../../../creating_packages/package_dev_flow.rst:263
msgid "$ conan create --keep-build"
msgstr ""
