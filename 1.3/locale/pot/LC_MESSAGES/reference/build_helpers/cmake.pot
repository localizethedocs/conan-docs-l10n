# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2018, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:17+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/build_helpers/cmake.rst:4
msgid "CMake"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:6
msgid ""
"The `CMake` class helps us to invoke `cmake` command with the generator, "
"flags and definitions, reflecting the specified Conan settings."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:8
msgid "There are two ways to invoke your cmake tools:"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:10
msgid ""
"Using the helper attributes ``cmake.command_line`` and ``cmake."
"build_config``:"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:12
msgid ""
"from conans import ConanFile, CMake\n"
"\n"
" class ExampleConan(ConanFile):\n"
"     ...\n"
"\n"
"     def build(self):\n"
"         cmake = CMake(self)\n"
"         self.run('cmake \"%s\" %s' % (self.source_folder, cmake."
"command_line))\n"
"         self.run('cmake --build . %s' % cmake.build_config)\n"
"         self.run('cmake --build . --target install')"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:25
msgid "Using the helper methods:"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:27
msgid ""
"from conans import ConanFile, CMake\n"
"\n"
"class ExampleConan(ConanFile):\n"
"    ...\n"
"\n"
"    def build(self):\n"
"        cmake = CMake(self)\n"
"        # same as cmake.configure(source_folder=self.source_folder, "
"build_folder=self.build_folder)\n"
"        cmake.configure()\n"
"        cmake.build()\n"
"        cmake.test() # Build the \"RUN_TESTS\" or \"test\" target\n"
"        # Build the \"install\" target, defining CMAKE_INSTALL_PREFIX to "
"self.package_folder\n"
"        cmake.install()"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:45
msgid "Constructor"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:47
msgid ""
"class CMake(object):\n"
"\n"
"    def __init__(self, conanfile, generator=None, cmake_system_name=True,\n"
"                 parallel=True, build_type=None, toolset=None)"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:61
#: ../../../reference/build_helpers/cmake.rst:197
#: ../../../reference/build_helpers/cmake.rst:211
#: ../../../reference/build_helpers/cmake.rst:226
#: ../../../reference/build_helpers/cmake.rst:240
msgid "Parameters:"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:55
msgid ""
"**conanfile** (Required): Conanfile object. Usually ``self`` in a conanfile."
"py"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:56
msgid ""
"**generator** (Optional, Defaulted to ``None``): Specify a custom generator "
"instead of autodetect it. e.j: \"MinGW Makefiles\""
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:57
msgid ""
"**cmake_system_name** (Optional, Defaulted to ``True``): Specify a custom "
"value for ``CMAKE_SYSTEM_NAME`` instead of autodetect it."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:58
msgid ""
"**parallel** (Optional, Defaulted to ``True``): If ``True``, will append the "
"`-jN` attribute for parallel building being N the :ref:"
"`cpu_count()<cpu_count>`."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:59
msgid ""
"**build_type** (Optional, Defaulted to ``None``): Force the build type to be "
"declared in ``CMAKE_BUILD_TYPE``. If you set this parameter the build type "
"not will be taken from the settings."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:61
msgid ""
"**toolset** (Optional, Defaulted to ``None``): Specify a toolset for Visual "
"Studio."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:64
msgid "Attributes"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:67
msgid "verbose"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:69
msgid "**Defaulted to**: ``False``"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:71
msgid ""
"Set it to ``True`` or ``False`` to automatically set the definition "
"``CMAKE_VERBOSE_MAKEFILE``."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:73
msgid ""
"from conans import ConanFile, CMake\n"
"\n"
"class ExampleConan(ConanFile):\n"
"    ...\n"
"\n"
"    def build(self):\n"
"        cmake = CMake(self)\n"
"        cmake.verbose = True\n"
"        cmake.configure()\n"
"        cmake.build()"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:88
msgid "command_line (read only)"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:90
msgid ""
"Generator, conan definitions and flags that reflects the specified Conan "
"settings."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:92
msgid ""
"-G \"Unix Makefiles\" -DCMAKE_BUILD_TYPE=Release ... -DCONAN_C_FLAGS=-m64 -"
"Wno-dev"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:97
msgid "build_config (read only)"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:99
msgid "Value for ``--config`` option for Multi-configuration IDEs."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:101
msgid "--config Release"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:106
msgid "definitions"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:108
msgid ""
"The CMake helper will automatically append some definitions based on your "
"settings:"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:111
msgid "Variable"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:111
msgid "Description"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:113
msgid "CMAKE_BUILD_TYPE"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:113
msgid "Debug or Release (from self.settings.build_type)"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:115
msgid "CMAKE_OSX_ARCHITECTURES"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:115
msgid "\"i386\" if architecture is x86 in an OSX system"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:117
msgid "BUILD_SHARED_LIBS"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:117
msgid "Only If your conanfile has a \"shared\" option"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:119
msgid "CONAN_COMPILER"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:119
msgid "Conan internal variable to check compiler"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:121
msgid "CMAKE_SYSTEM_NAME"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:121
msgid "If detected cross building it's set to self.settings.os"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:123
msgid "CMAKE_SYSTEM_VERSION"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:123
msgid "If detected cross building it's set to the self.settings.os_version"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:125
msgid "CMAKE_ANDROID_ARCH_ABI"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:125
msgid "If detected cross building to Android"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:127
msgid "CONAN_LIBCXX"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:127
msgid "from self.settings.compiler.libcxx"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:129
msgid "CONAN_CMAKE_SYSTEM_PROCESSOR"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:129
#: ../../../reference/build_helpers/cmake.rst:131
#: ../../../reference/build_helpers/cmake.rst:133
#: ../../../reference/build_helpers/cmake.rst:135
#: ../../../reference/build_helpers/cmake.rst:137
msgid "Definition only set if same environment variable is declared by user"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:131
msgid "CONAN_CMAKE_FIND_ROOT_PATH"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:133
msgid "CONAN_CMAKE_FIND_ROOT_PATH_MODE_PROGRAM"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:135
msgid "CONAN_CMAKE_FIND_ROOT_PATH_MODE_LIBRARY"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:137
msgid "CONAN_CMAKE_FIND_ROOT_PATH_MODE_INCLUDE"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:139
msgid "CONAN_CMAKE_POSITION_INDEPENDENT_CODE"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:139
msgid ""
"When ``fPIC`` option is present and True or when ``fPIC`` is present and "
"False but and option ``shared`` is present and True"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:141
msgid "CONAN_SHARED_LINKER_FLAGS"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:141
msgid "-m32 and -m64 based on your architecture"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:143
#: ../../../reference/build_helpers/cmake.rst:145
msgid "CONAN_C_FLAGS"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:143
#: ../../../reference/build_helpers/cmake.rst:145
msgid "-m32 and -m64 based on your architecture and /MP for MSVS"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:147
msgid "CONAN_LINK_RUNTIME"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:147
msgid "Runtime from self.settings.compiler.runtime for MSVS"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:149
msgid "CONAN_CMAKE_CXX_STANDARD"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:149
msgid "From setting ``cppstd``"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:151
msgid "CONAN_CMAKE_CXX_EXTENSIONS"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:151
msgid "From setting ``cppstd``, when GNU extensions are enabled"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:153
msgid "CONAN_STD_CXX_FLAG"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:153
msgid "From setting ``cppstd``. Flag for compiler directly (for CMake < 3.1)"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:158
msgid ""
"But you can change the automatic definitions after the ``CMake()`` object "
"creation using the ``definitions`` property:"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:160
msgid ""
"from conans import ConanFile, CMake\n"
"\n"
"class ExampleConan(ConanFile):\n"
"    ...\n"
"\n"
"    def build(self):\n"
"        cmake = CMake(self)\n"
"        cmake.definitions[\"CMAKE_SYSTEM_NAME\"] = \"Generic\"\n"
"        cmake.configure()\n"
"        cmake.build()\n"
"        cmake.install() # Build --target=install"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:176
msgid "Methods"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:179
msgid "configure()"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:181
msgid ""
"def configure(self, args=None, defs=None, source_folder=None, "
"build_folder=None,\n"
"              cache_build_folder=None)"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:186
msgid "Configures `CMake` project with the given parameters."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:189
#: ../../../reference/build_helpers/cmake.rst:209
msgid ""
"**args** (Optional, Defaulted to ``None``): A list of additional arguments "
"to be passed to the ``cmake`` command. Each argument will be escaped "
"according to the current shell. No extra arguments will be added if "
"``args=None``"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:190
msgid ""
"**definitions** (Optional, Defaulted to ``None``): A dict that will be "
"converted to a list of CMake command line variable definitions of the form "
"``-DKEY=VALUE``. Each value will be escaped according to the current shell "
"and can be either ``str``, ``bool`` or of numeric type"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:191
msgid ""
"**source_folder**: CMake's source directory where ``CMakeLists.txt`` is "
"located. The default value is the ``self.source_folder``. Relative paths are "
"allowed and will be relative to ``self.source_folder``."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:193
msgid ""
"**build_folder**: CMake's output directory. The default value is the ``self."
"build_folder`` if ``None`` is specified. The ``CMake`` object will store "
"``build_folder`` internally for subsequent calls to ``build()``."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:195
msgid ""
"**cache_build_folder** (Optional, Defaulted to ``None``): Use the given "
"subfolder as build folder when building the package in the local cache. This "
"argument doesn't have effect when the package is being built in user folder "
"with :command:`conan build` but overrides **build_folder** when working in "
"the local cache. See :ref:`self.in_local_cache<in_local_cache>`."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:200
msgid "build()"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:202
msgid "def build(self, args=None, build_dir=None, target=None)"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:206
msgid "Builds `CMake` project with the given parameters."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:210
msgid ""
"**build_dir** (Optional, Defaulted to ``None``): CMake's output directory. "
"If ``None`` is specified the ``build_dir`` from ``configure()`` will be used."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:211
msgid ""
"**target** (Optional, Defaulted to ``None``): Specifies the target to "
"execute. The default *all* target will be built if ``None`` is specified. "
"``\"install\"`` can be used to relocate files to aid packaging."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:214
msgid "test()"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:216
msgid "def test(args=None, build_dir=None, target=None)"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:220
msgid ""
"Build `CMake` test target (could be RUN_TESTS in multi-config projects or "
"``test`` in single-config projects), which usually means building and "
"running unit tests"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:223
#: ../../../reference/build_helpers/cmake.rst:238
msgid ""
"**args** (Optional, Defaulted to ``None``): A list of additional arguments "
"to be passed to the ``cmake`` command. Each argument will be escaped "
"according to the current shell. No extra arguments will be added if "
"``args=None``."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:224
#: ../../../reference/build_helpers/cmake.rst:239
msgid ""
"**build_dir** (Optional, Defaulted to ``None``): CMake's output directory. "
"If ``None`` is specified the ``build_folder`` from ``configure()`` will be "
"used."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:225
msgid ""
"**target** (Optional, default to ``None``). Alternative target name for "
"running the tests. If not defined RUN_TESTS or ``test`` will be used"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:229
msgid "install()"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:231
msgid "def install(args=None, build_dir=None)"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:235
msgid "Installs `CMake` project with the given parameters."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:243
msgid "patch_config_paths() [EXPERIMENTAL]"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:245
msgid "def patch_config_paths()"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:250
msgid ""
"This method changes references to the absolute path of the installed package "
"in exported CMake config files to the appropriate Conan variable. This makes "
"most CMake config files portable."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:253
msgid ""
"For example, if a package foo installs a file called *fooConfig.cmake* to be "
"used by cmake's ``find_package()`` method, normally this file will contain "
"absolute paths to the installed package folder, for example it will contain "
"a line such as:"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:256
msgid "SET(Foo_INSTALL_DIR /home/developer/.conan/data/Foo/1.0.0/...)"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:260
msgid ""
"This will cause cmake's ``find_package()`` method to fail when someone else "
"installs the package via Conan. This function will replace such paths to:"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:263
msgid "SET(Foo_INSTALL_DIR ${CONAN_FOO_ROOT})"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:267
msgid ""
"Which is a variable that is set by *conanbuildinfo.cmake*, so that "
"``find_package()`` now correctly works on this Conan package."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:269
msgid ""
"If the ``install()`` method of the CMake object in the conanfile is used, "
"this function should be called **after** that invocation. For example:"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:272
msgid ""
"def build(self):\n"
"    cmake = CMake(self)\n"
"    cmake.configure()\n"
"    cmake.build()\n"
"    cmake.install()\n"
"    cmake.patch_config_paths()"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:282
msgid "Environment variables"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:284
msgid ""
"There are some environment variables that will also affect the ``CMake()`` "
"helper class. Check them in the :ref:`CMAKE RELATED "
"VARIABLES<cmake_related_variables>` section."
msgstr ""
