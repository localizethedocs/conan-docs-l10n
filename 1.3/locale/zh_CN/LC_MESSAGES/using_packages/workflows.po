# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2018, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:17+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../using_packages/workflows.rst:4
msgid "Workflows"
msgstr ""

#: ../../../using_packages/workflows.rst:6
msgid ""
"This section summarizes some possible layouts and workflows while using "
"conan together with other tools as an end-user, i.e. installing and "
"consuming existing packages. For creating your own packages, have a look at "
"the :ref:`Packaging section <packaging>`."
msgstr ""

#: ../../../using_packages/workflows.rst:10
msgid ""
"In both cases, the recommended approach is to have a conanfile (either .py "
"or .txt) at the root of your project."
msgstr ""

#: ../../../using_packages/workflows.rst:14
msgid "Single configuration"
msgstr ""

#: ../../../using_packages/workflows.rst:16
msgid ""
"The single configuration is simple. It is the one that has been used so far "
"for the examples and tutorials. In :ref:`Getting started<getting_started>`, "
"we ran the :command:`conan install ..` command inside the *build* folder and "
"the *conaninfo.txt* and *conanbuildinfo.cmake* files were generated there. "
"The build folder is temporary, you should exclude it from version control, "
"so those temporary files are excluded too."
msgstr ""

#: ../../../using_packages/workflows.rst:21
msgid ""
"**Out-of-source builds** are also supported. Let's make a simple example:"
msgstr ""

#: ../../../using_packages/workflows.rst:23
msgid ""
"$ git clone https://github.com/memsharded/example-hello.git\n"
"$ conan install ./example-hello --build=missing --install-folder example-"
"hello-build"
msgstr ""

#: ../../../using_packages/workflows.rst:28
#: ../../../using_packages/workflows.rst:83
msgid "So the layout will be:"
msgstr ""

#: ../../../using_packages/workflows.rst:30
msgid ""
"example-hello-build\n"
"  conaninfo.txt\n"
"  conanbuildinfo.txt\n"
"  conanbuildinfo.cmake\n"
"example-hello\n"
"  conanfile.txt\n"
"  CMakeLists.txt  # If using cmake, but can be Makefile, sln...\n"
"  main.cpp"
msgstr ""

#: ../../../using_packages/workflows.rst:41
msgid "Now you are ready to build:"
msgstr ""

#: ../../../using_packages/workflows.rst:43
msgid ""
"$ cmake ../example-hello -G \"Visual Studio 14 Win64\"  # or other "
"generator\n"
"$ cmake --build . --config Release\n"
"$ ./bin/greet"
msgstr ""

#: ../../../using_packages/workflows.rst:49
msgid ""
"We have created a separate build configuration of the project, without "
"affecting at all the original source directory. The benefit is that we can "
"experiment freely, and even erase it and create a new build with a new "
"configuration with different settings, if needed:"
msgstr ""

#: ../../../using_packages/workflows.rst:53
msgid ""
"$ cd example-hello-build && rm -rf *\n"
"$ conan install ../example-hello -s compiler=\"<other compiler>\" --"
"build=missing\n"
"$ cmake ../example-hello -G \"<other generator>\"\n"
"$ cmake --build . --config Release"
msgstr ""

#: ../../../using_packages/workflows.rst:61
msgid "Multi configuration"
msgstr ""

#: ../../../using_packages/workflows.rst:63
msgid ""
"You can also manage different configurations, in-source or out of source, "
"and you can switch between them without taking the extra step of re-issuing "
"the :command:`conan install` command (even though this is not a speed-"
"related issue, since the second time :command:`conan install` is executed "
"with the same parameters, it will run very fast: packages are installed in "
"the local cache, not inside the project)."
msgstr ""

#: ../../../using_packages/workflows.rst:69
msgid ""
"$ git clone https://github.com/memsharded/example-hello.git\n"
"$ conan install ./example-hello -s build_type=Debug --build=missing -if "
"example-hello-build/debug\n"
"$ conan install ./example-hello -s build_type=Release --build=missing -if "
"example-hello-build/release\n"
"\n"
"$ cd example-hello-build/debug && cmake ../../example-hello -G \"Visual "
"Studio 14 Win64\" && cd ../..\n"
"$ cd example-hello-build/release && cmake ../../example-hello -G \"Visual "
"Studio 14 Win64\" && cd ../.."
msgstr ""

#: ../../../using_packages/workflows.rst:80
msgid ""
"You can use the ``--install-folder`` or ``-if`` to specify where to generate "
"the output files or create manually the directory and change to it before "
"execute the :command:`conan install` command."
msgstr ""

#: ../../../using_packages/workflows.rst:85
msgid ""
"example-hello-build\n"
"  debug\n"
"      conaninfo.txt\n"
"      conanbuildinfo.txt\n"
"      conanbuildinfo.cmake\n"
"      CMakeCache.txt # and other cmake files\n"
"  release\n"
"      conaninfo.txt\n"
"      conanbuildinfo.txt\n"
"      conanbuildinfo.cmake\n"
"      CMakeCache.txt # and other cmake files\n"
"example-hello\n"
"  conanfile.txt\n"
"  CMakeLists.txt  # If using cmake, but can be Makefile, sln...\n"
"  main.cpp"
msgstr ""

#: ../../../using_packages/workflows.rst:103
msgid ""
"Now you can switch between your build configurations in exactly the same way "
"you do for CMake or other build systems, moving to the folder in which the "
"build configuration lives, because the conan configuration files for that "
"build configuration will also be there."
msgstr ""

#: ../../../using_packages/workflows.rst:107
msgid ""
"$ cd example-hello-build/debug && cmake --build . --config Debug && "
"cd ../..\n"
"$ cd example-hello-build/release && cmake --build . --config Release && "
"cd ../.."
msgstr ""

#: ../../../using_packages/workflows.rst:112
msgid ""
"Note that the CMake ``INCLUDE()`` of your project must be prefixed with the "
"current cmake binary directory, otherwise it will not find the necessary "
"file:"
msgstr ""

#: ../../../using_packages/workflows.rst:115
msgid ""
"include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)\n"
"conan_basic_setup()"
msgstr ""
