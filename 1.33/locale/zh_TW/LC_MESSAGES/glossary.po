# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2020, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.33\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../glossary.rst:5
msgid "Glossary"
msgstr ""

#: ../../../glossary.rst:66
msgid "binary package"
msgstr ""

#: ../../../glossary.rst:68
msgid ""
"Output binary usually obtained with a `conan create` command applying "
"settings and options as input. Usually, there are N binary packages inside "
"one Conan package, one for each set of settings and options. Every binary "
"package is identified by a package_id."
msgstr ""

#: ../../../glossary.rst:117
msgid "build helper"
msgstr ""

#: ../../../glossary.rst:119
msgid ""
"A build helper is a Python script that translates Conan settings to the "
"specific settings of a build tool. For example, in the case of CMake, the "
"build helper sets the CMake flag for the generator from Conan settings like "
"the compiler, operating system, and architecture. Conan provides integration "
"for several build tools such as :ref:`CMake<cmake_reference>`, :ref:"
"`Autotools<autotools_reference>`, :ref:`MSBuild<msbuild>` or :ref:"
"`Meson<meson_build_reference>`. You can also `integrate your preferred build "
"system <https://blog.conan.io/2019/07/24/C++-build-systems-new-integrations-"
"in-Conan-package-manager.html>`_ in Conan if it is not available by default."
msgstr ""

#: ../../../glossary.rst:87
msgid "build requirement"
msgstr ""

#: ../../../glossary.rst:89
msgid ""
"Requirements that are only needed when you need to build a package (that "
"declares the `build requirement`) from sources, but if the binary package "
"already exists, the build-require is not retrieved."
msgstr ""

#: ../../../glossary.rst:97
msgid "build system"
msgstr ""

#: ../../../glossary.rst:99
msgid ""
"Tools used to automate the process of building binaries from sources. Some "
"examples are Make, Autotools, SCons, CMake, Premake, Ninja or Meson. Conan "
"has integrations with some of these build systems using :ref:"
"`generators<generators>` and :ref:`build helpers<build_helpers>`."
msgstr ""

#: ../../../glossary.rst:9
msgid "conanfile"
msgstr ""

#: ../../../glossary.rst:11
msgid ""
"Can refer to either `conanfile.txt` or `conanfile.py` depending on what's "
"the context it is used in."
msgstr ""

#: ../../../glossary.rst:13
msgid "conanfile.py"
msgstr ""

#: ../../../glossary.rst:15
msgid ""
"The file that defines a Conan recipe that is typically used to create "
"packages, but can be used also to consume packages only (see conanfile.txt). "
"Inside of this recipe, it is defined (among other things) how to download "
"the package's source code, how to build the binaries from those sources, how "
"to package the binaries and information for future consumers on how to "
"consume the package."
msgstr ""

#: ../../../glossary.rst:20
msgid "conanfile.txt"
msgstr ""

#: ../../../glossary.rst:22
msgid ""
"It is a simplified version of the `conanfile.py` used only for consuming "
"packages. It defines a list of packages to be consumed by a project and can "
"also define the :ref:`generators<generators>` for the build system we are "
"using, and if we want to :ref:`import<imports_txt>` files from the "
"dependencies, as shared libraries, executables or assets."
msgstr ""

#: ../../../glossary.rst:106
msgid "cross compiler"
msgstr ""

#: ../../../glossary.rst:108
msgid ""
"A cross compiler is a compiler capable of creating an executable intended to "
"run in a platform different from the one in which the compiler is running."
msgstr ""

#: ../../../glossary.rst:91
msgid "dependency graph"
msgstr ""

#: ../../../glossary.rst:93
msgid ""
"A directed graph representing dependencies of several Conan packages towards "
"each other. The relations between the packages are declared with the "
"`requirements` in the recipes. A dependency graph in Conan depends on the "
"input profile applied because the requirements can be :ref:"
"`conditioned<conditional_settings_options_requirements>` to a specific "
"configuration."
msgstr ""

#: ../../../glossary.rst:155
msgid "editable package"
msgstr ""

#: ../../../glossary.rst:157
msgid ""
"A :ref:`package<editable_packages>` that resides in the user workspace, but "
"is consumed as if it was in the cache. This mode is useful when you are "
"developing the packages, and the projects that consume them at the same time."
msgstr ""

#: ../../../glossary.rst:110
msgid "generator"
msgstr ""

#: ../../../glossary.rst:112
msgid ""
"A generator provides the information of dependencies calculated by Conan in "
"a suitable format that is usually injected in a build system. They normally "
"provide a file that can be included or passed as input to the specific build "
"system to help it to find the packages declared in the recipe. There are "
"other generators that are not intended to be used with the build system. e."
"g. :ref:`\"deploy\"<deploy_generator>`, :ref:"
"`\"YouCompleteMe\"<youcompleteme_integration>`."
msgstr ""

#: ../../../glossary.rst:133
msgid "hook"
msgstr ""

#: ../../../glossary.rst:135
msgid ""
":ref:`Conan Hooks <hooks>` are Python scripts containing functions that will "
"be executed before and after a particular task performed by the Conan "
"client. Those tasks could be Conan commands, recipe interactions such as "
"exporting or packaging, or interactions with the remotes. For example, you "
"could have a hook that checks that the recipe includes attributes like "
"license, url and description."
msgstr ""

#: ../../../glossary.rst:178
msgid "library"
msgstr ""

#: ../../../glossary.rst:180
msgid ""
"A library is a collection of code and resources to be reused by other "
"programs."
msgstr ""

#: ../../../glossary.rst:148
msgid "local cache"
msgstr ""

#: ../../../glossary.rst:150
msgid ""
"A folder in which Conan stores the package cache and some configuration "
"files such as the `conan.conf` or `settings.yml`. By default, this file will "
"be located in the user home folder **~/.conan/** but it's configurable with "
"the environment variable ``CONAN_USER_HOME``. In some scenarios like CI "
"environments or when using per-project management and storage changing the "
"default conan cache location :ref:`could be useful<custom_cache>`."
msgstr ""

#: ../../../glossary.rst:45
msgid "lockfile"
msgstr ""

#: ../../../glossary.rst:47
msgid ""
"Files that store the information with the exact versions, revisions, "
"options, and configuration of a dependency graph. They are intended to make "
"the building process reproducible even if the dependency definitions in "
"conanfile recipes are not fully deterministic."
msgstr ""

#: ../../../glossary.rst:75
msgid "options"
msgstr ""

#: ../../../glossary.rst:77
msgid ""
":ref:`Options<conanfile_options>` are declared in the recipes, it is similar "
"to the `setting` concept but it is something that can be defaulted by the "
"recipe creator, like if a library is static or shared. Options are specific "
"to each package (there is not a yml file like the `settings.yml` file), and "
"each package creator can define their options \"header_only\" for example. "
"The most common example is the \"shared\" option, with possibles values "
"`True/False` and typically defaulted to `False`."
msgstr ""

#: ../../../glossary.rst:40
msgid "package"
msgstr ""

#: ../../../glossary.rst:42
msgid ""
"A Conan package is a collection of files that include the recipe and the N "
"binary packages generated for different configurations and settings. It can "
"contain binary files such as libraries, headers or tools to be reused by the "
"consumer of the package."
msgstr ""

#: ../../../glossary.rst:61
msgid "package ID"
msgstr ""

#: ../../../glossary.rst:63
msgid ""
"The package id is a hash of the settings options and requirements used to "
"identify the binary packages.  Applying different profiles to the `conan "
"create` command, it will generate different package IDs. e.g: Windows, x86, "
"shared..."
msgstr ""

#: ../../../glossary.rst:36
msgid "package reference"
msgstr ""

#: ../../../glossary.rst:38
msgid ""
"A package reference is the combination of the recipe reference and the "
"package ID. It adopts the form of ``name/version@user/channel:"
"package_id_hash``."
msgstr ""

#: ../../../glossary.rst:58
msgid "package revision"
msgstr ""

#: ../../../glossary.rst:60
msgid ""
"A unique ID using the checksum of the package (all files stored in a binary "
"package). See the :ref:`revisions mechanism<package_revisions>` page."
msgstr ""

#: ../../../glossary.rst:172
msgid "profile"
msgstr ""

#: ../../../glossary.rst:174
msgid ""
":ref:`A profile<conan_profile>` is the set of different settings, options, "
"environment variables and build requirements used when working with "
"packages. The settings define the operating system, architecture, compiler, "
"build type, and C++ standard. Options define, among other things, if "
"dependencies are linked in shared or static mode or other compile options."
msgstr ""

#: ../../../glossary.rst:27
msgid "recipe"
msgstr ""

#: ../../../glossary.rst:29
msgid ""
"Python script defined in a `conanfile.py` that specifies how the package is "
"built from sources, what the final binary artifacts are, the package "
"dependencies, etc."
msgstr ""

#: ../../../glossary.rst:31
msgid "recipe reference"
msgstr ""

#: ../../../glossary.rst:33
msgid ""
"A recipe reference is the combination of the package name, version, and two "
"optional fields named user and channel that could be useful to identify a "
"forked recipe from the community with changes specific to your company. It "
"adopts the form of ``name/version@user/channel``."
msgstr ""

#: ../../../glossary.rst:54
msgid "recipe revision"
msgstr ""

#: ../../../glossary.rst:56
msgid ""
"A unique ID using the latest VCS hash or a checksum of the `conanfile.py` "
"with the exported files if any. See the :ref:`revisions "
"mechanism<package_revisions>` page."
msgstr ""

#: ../../../glossary.rst:187
msgid "remote"
msgstr ""

#: ../../../glossary.rst:189
msgid "The binary repository that hosts Conan packages inside a server."
msgstr ""

#: ../../../glossary.rst:83
msgid "requirement"
msgstr ""

#: ../../../glossary.rst:85
msgid ""
"Packages on which another package depends on. They are represented by a "
"conan reference: `lib/1.0@`"
msgstr ""

#: ../../../glossary.rst:50
msgid "revision"
msgstr ""

#: ../../../glossary.rst:52
msgid ""
"It is the :ref:`mechanism<package_revisions>` to implicitly version the "
"changes done in a recipe or package without bumping the actual reference or "
"package version."
msgstr ""

#: ../../../glossary.rst:140
msgid "semantic versioning"
msgstr ""

#: ../../../glossary.rst:142
msgid ""
"Versioning system with versions in the form of ``MAJOR.MINOR.PATCH`` where "
"``PATCH`` version changes when you make backward-compatible bug fixes, "
"``MINOR`` version changes when you add functionality in a backward-"
"compatible manner, and ``MAJOR`` version changes when you make incompatible "
"API changes. Conan uses semantic versioning by default but this behavior can "
"be :ref:`easily configured and changed<define_abi_compatibility>` in the "
"``package_id()`` method of your conanfile, and any versioning scheme you "
"desire is supported."
msgstr ""

#: ../../../glossary.rst:71
msgid "settings"
msgstr ""

#: ../../../glossary.rst:73
msgid ""
"A set of keys and values, like  `os`, `compiler` and `build_type` that are "
"declared at the `~/.conan/settings.yml` file."
msgstr ""

#: ../../../glossary.rst:181
msgid "shared library"
msgstr ""

#: ../../../glossary.rst:183
msgid "A library that is loaded at runtime into the target application."
msgstr ""

#: ../../../glossary.rst:184
msgid "static library"
msgstr ""

#: ../../../glossary.rst:186
msgid "A library that is copied at compile time to the target application."
msgstr ""

#: ../../../glossary.rst:127
msgid "system packages"
msgstr ""

#: ../../../glossary.rst:129
msgid ""
"System packages are packages that are typically installed system-wide via "
"system package management tools such as apt, yum, pkg, pkgutil, brew or "
"pacman. It is possible to install :ref:`system-wide packages "
"methods<method_system_requirements>` from Conan adding a "
"``system_requirements()`` method to the conanfile."
msgstr ""

#: ../../../glossary.rst:102
msgid "toolchain"
msgstr ""

#: ../../../glossary.rst:104
msgid ""
"A toolchain is the set of tools usually intended for compiling, debugging "
"and profiling applications."
msgstr ""

#: ../../../glossary.rst:166
msgid "transitive dependency"
msgstr ""

#: ../../../glossary.rst:168
msgid ""
"A dependency that is induced by the dependency that the program references "
"directly. Imagine that your project uses the **Poco** library that needs the "
"**OpenSSL** library, and **OpenSSL** is calling to the zlib library. In this "
"case, **OpenSSL** and **zlib** would be transitive dependencies."
msgstr ""

#: ../../../glossary.rst:160
msgid "workspace"
msgstr ""

#: ../../../glossary.rst:162
msgid ""
":ref:`Conan workspaces<workspaces>` allow us to have more than one package "
"in user folders and have them directly use other packages from user folders "
"without needing to put them in the local cache. Furthermore, they enable "
"incremental builds on large projects containing multiple packages."
msgstr ""
