# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2020, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.33\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/conanfile/tools/qbs.rst:4
msgid "conan.tools.qbs"
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:7
msgid "QbsToolchain"
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:11
msgid ""
"This is an **experimental** feature subject to breaking changes in future "
"releases."
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:14
msgid "The ``QbsToolchain`` can be used in the ``generate()`` method:"
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:32
msgid ""
"from conans import ConanFile\n"
"from conan.tools.qbs import QbsToolchain\n"
"\n"
"class App(ConanFile):\n"
"    settings = \"os\", \"arch\", \"compiler\", \"build_type\"\n"
"    requires = \"hello/0.1\"\n"
"    options = {\"shared\": [True, False]}\n"
"    default_options = {\"shared\": False}\n"
"\n"
"    def generate(self):\n"
"        tc = QbsToolchain(self)\n"
"        tc.generate()"
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:33
msgid ""
"The ``QbsToolchain`` will generate the following file during :command:`conan "
"install` command (or before calling the ``build()`` method when the package "
"is being built in the cache): *conan_toolchain.qbs*. This file will contain "
"a qbs profile named *conan_toolchain_profile*."
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:39
msgid ""
"*conan_toolchain.qbs* will contain the definitions of all the Qbs properties "
"related to the Conan options and settings for the current package, platform, "
"etc. This includes the following:"
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:43
msgid "Detection of compiler."
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:45
msgid "Based on the compiler set in environment variable ``CC``."
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:47
msgid ""
"Uses detected system compiler based on Conan setting ``compiler`` if "
"environment variable ``CC`` is not set."
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:49
msgid ""
"Detection of compiler flags from environment (as defined at https://www.gnu."
"org/software/make/manual/html_node/Implicit-Variables.html):"
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:51
msgid "``ASFLAGS``"
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:53
msgid "``CFLAGS``"
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:55
msgid "``CPPFLAGS``"
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:57
msgid "``CXXFLAGS``"
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:59
msgid "``LDFLAGS``"
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:61
msgid "Detection of sysroot from environment."
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:63
msgid "Detection of ``build_type`` from Conan settings."
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:65
msgid "Detection of ``arch`` from Conan settings."
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:67
msgid "Detection of ``compiler.cxxstd`` from Conan settings."
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:69
msgid ""
"Detection of ``fPIC`` based on the existence of such option in the recipe."
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:73
msgid "Qbs"
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:75
msgid ""
"If you are using **Qbs** as your build system, you can use the **Qbs** build "
"helper."
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:77
msgid ""
"from conans import ConanFile\n"
"from conan.tools.qbs import Qbs\n"
"\n"
"class ConanFileToolsTest(ConanFile):\n"
"    ...\n"
"\n"
"    def build(self):\n"
"        qbs = Qbs(self)\n"
"        qbs.build()"
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:90
msgid "Constructor"
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:92
msgid ""
"class Qbs(object):\n"
"\n"
"    def __init__(self, conanfile, project_file=None)"
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:100
#: ../../../reference/conanfile/tools/qbs.rst:128
#: ../../../reference/conanfile/tools/qbs.rst:141
msgid "Parameters:"
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:99
msgid "**conanfile** (Required): Use ``self`` inside a ``conanfile.py``."
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:100
msgid ""
"**project_file** (Optional, Defaulted to ``None``): Path to the root project "
"file."
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:103
msgid "Attributes"
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:106
msgid "use_toolchain_profile"
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:108
msgid "**Defaulted to**: ``conan_toolchain_profile``"
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:110
msgid "Specifies the qbs profile to build the project for."
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:114
msgid "Methods"
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:117
msgid "add_configuration()"
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:119
msgid "def add_configuration(self, name, values)"
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:123
msgid "Add a build configuration to use."
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:126
msgid "**name** (Required): Specifies build configuration name."
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:127
msgid ""
"**values** (Required): A dict of properties set for this build configuration."
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:131
msgid "build()"
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:133
msgid "def build(self, products=None)"
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:137
msgid "Build Qbs project."
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:140
msgid ""
"**products** (Optional, Defaulted to ``None``): Specifies a list of products "
"to build. If ``None`` build all products which have the qbs property "
"``buildByDefault`` set to ``true``."
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:144
msgid "build_all()"
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:146
msgid "def build_all(self)"
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:150
msgid ""
"Build all products of Qbs project, even products which set the qbs property "
"``buildByDefault`` set to ``false``"
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:154
msgid "install()"
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:156
msgid "def install(self)"
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:160
msgid "Install products."
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:164
msgid "Example"
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:166
msgid ""
"A typical usage of the Qbs build helper, if you want to be able to both "
"execute :command:`conan create` and also build your package for a library "
"locally (in your user folder, not in the local cache), could be:"
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:169
msgid ""
"from conans import ConanFile\n"
"from conan.tools.qbs import Qbs\n"
"\n"
"\n"
"class HelloConan(ConanFile):\n"
"    name = \"hello\"\n"
"    version = \"0.1\"\n"
"    settings = \"os\", \"compiler\", \"build_type\", \"arch\"\n"
"    generators = \"qbs\"\n"
"    exports_sources = \"src/*\", \"*.qbs\"\n"
"    no_copy_source = True\n"
"    requires = \"zlib/1.2.11\"\n"
"\n"
"    def build(self):\n"
"        qbs = Qbs(self)\n"
"        qbs.add_configuration(\"default\", {\n"
"            \"project.conanBuildInfo\", self.build_folder + \"/"
"conanbuildinfo.qbs\"\n"
"        })\n"
"        qbs.build()\n"
"\n"
"    def package(self):\n"
"        self.copy(\"*.h\", dst=\"include\", src=\"src\")\n"
"        self.copy(\"*.lib\", dst=\"lib\", keep_path=False)\n"
"        self.copy(\"*.dll\", dst=\"bin\", keep_path=False)\n"
"        self.copy(\"*.dylib*\", dst=\"lib\", keep_path=False)\n"
"        self.copy(\"*.so\", dst=\"lib\", keep_path=False)\n"
"        self.copy(\"*.a\", dst=\"lib\", keep_path=False)\n"
"\n"
"    def package_info(self):\n"
"        self.cpp_info.libs = [\"hello\"]"
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:202
msgid ""
"Note the ``qbs`` generator, which generates the *conanbuildinfo.qbs* file, "
"to process dependencies information. Setting ``no_copy_source = True`` helps "
"qbs to pick the right project file and not get confused by the generated "
"files."
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:206
msgid "The *hello.qbs* could be as simple as:"
msgstr ""

#: ../../../reference/conanfile/tools/qbs.rst:208
msgid ""
"Project {\n"
"    readonly property path conanBuildInfo\n"
"\n"
"    references: conanBuildInfo\n"
"\n"
"    DynamicLibrary {\n"
"        name: \"hello\"\n"
"        version: \"0.1.0\"\n"
"        files: \"src/hello.cpp\"\n"
"        cpp.cxxLanguageVersion: \"c++11\"\n"
"\n"
"        Depends { name: \"cpp\" }\n"
"        Depends { name: \"zlib\" }\n"
"    }\n"
"}"
msgstr ""
