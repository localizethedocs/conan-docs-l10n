# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2020, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.36\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../integrations/cross_platform/emscripten.rst:4
msgid "|emscripten_logo| Emscripten"
msgstr ""

#: ../../../integrations/cross_platform/emscripten.rst:6
msgid ""
"It should be possible to build packages for `Emscripten <https://emscripten."
"org>`__ (`asm.js <http://asmjs.org>`_) via the following conan profile:"
msgstr ""

#: ../../../integrations/cross_platform/emscripten.rst:8
msgid ""
"include(default)\n"
"[settings]\n"
"os=Emscripten\n"
"arch=asm.js\n"
"compiler=clang\n"
"compiler.version=6.0\n"
"compiler.libcxx=libc++\n"
"[options]\n"
"[build_requires]\n"
"emsdk_installer/1.38.29@bincrafters/stable\n"
"[env]"
msgstr ""

#: ../../../integrations/cross_platform/emscripten.rst:22
msgid ""
"And the following conan profile is required for the `WASM <https://"
"webassembly.org>`_ (Web Assembly):"
msgstr ""

#: ../../../integrations/cross_platform/emscripten.rst:24
msgid ""
"include(default)\n"
"[settings]\n"
"os=Emscripten\n"
"arch=wasm\n"
"compiler=clang\n"
"compiler.version=6.0\n"
"compiler.libcxx=libc++\n"
"[options]\n"
"[build_requires]\n"
"emsdk_installer/1.38.29@bincrafters/stable\n"
"[env]"
msgstr ""

#: ../../../integrations/cross_platform/emscripten.rst:38
msgid ""
"These profile above are using the `emsdk_installer/1.38.29@bincrafters/"
"stable <https://github.com/bincrafters/conan-emsdk_installer>`_ conan "
"package. It will automatically download the `Emscripten SDK <https://github."
"com/emscripten-core/emsdk>`_ and set up required environment variables (like "
"``CC``, ``CXX``, etc.)."
msgstr ""

#: ../../../integrations/cross_platform/emscripten.rst:42
msgid ""
"In order to use ``emsdk_installer`` package, you need to add it to the "
"remotes:"
msgstr ""

#: ../../../integrations/cross_platform/emscripten.rst:44
msgid ""
"$ conan remote add bincrafters https://api.bintray.com/conan/bincrafters/"
"public-conan"
msgstr ""

#: ../../../integrations/cross_platform/emscripten.rst:50
msgid ""
"Alternatively, it's always possible to use an existing ``emsdk`` "
"installation and manually specify required environment variables within the "
"`[env]` section of the conan profile."
msgstr ""

#: ../../../integrations/cross_platform/emscripten.rst:54
msgid ""
"In addition to the above, Windows users may need to specify "
"``CONAN_MAKE_PROGRAM``, for instance from the existing MinGW installation (e."
"g. ``C:\\MinGW\\bin\\mingw32-make.exe``), or use make from the "
"``mingw_installer/1.0@conan/stable``."
msgstr ""

#: ../../../integrations/cross_platform/emscripten.rst:59
msgid ""
"In addition to the above, Windows users may need to specify "
"``CONAN_CMAKE_GENERATOR``, e.g. to ``MinGW Makefiles``, because default one "
"is Visual Studio. Other options (e.g. Ninja) work as well."
msgstr ""

#: ../../../integrations/cross_platform/emscripten.rst:62
msgid ""
"As specified, ``os`` has been set to the ``Emscripten``, and ``arch`` has "
"been set to either ``asm.js`` or ``wasm`` (only these two are currently "
"supported). And ``compiler`` setting has been set to match the one used by "
"``Emscripten`` - Clang 6.0 with libc++ standard library."
msgstr ""

#: ../../../integrations/cross_platform/emscripten.rst:67
msgid "Running the code inside the browser"
msgstr ""

#: ../../../integrations/cross_platform/emscripten.rst:71
msgid ""
"Emscripten requires Python 2.7.12 or above, make sure that you have an up-to-"
"date Python version installed."
msgstr ""

#: ../../../integrations/cross_platform/emscripten.rst:75
msgid ""
"Running demo on Windows may require pywin32 module. Install it by running "
"``pip install pywin32``."
msgstr ""

#: ../../../integrations/cross_platform/emscripten.rst:77
msgid ""
"In order to demonstrate how to use conan with Emscripten, let's check out "
"the example project:"
msgstr ""

#: ../../../integrations/cross_platform/emscripten.rst:79
msgid "$ git clone --depth 1 git@github.com:conan-io/examples.git"
msgstr ""

#: ../../../integrations/cross_platform/emscripten.rst:83
msgid "Change the directory to the Emscripten demo:"
msgstr ""

#: ../../../integrations/cross_platform/emscripten.rst:85
msgid ""
"$ cd features\n"
"$ cd emscripten"
msgstr ""

#: ../../../integrations/cross_platform/emscripten.rst:90
msgid ""
"This is an extremely simple demo, which just imports the famous `zlib "
"<https://www.zlib.net/>`_ library and outputs its version into the browser."
msgstr ""

#: ../../../integrations/cross_platform/emscripten.rst:92
msgid "In order to build it for the Emscripten run:"
msgstr ""

#: ../../../integrations/cross_platform/emscripten.rst:94
msgid "$ ./build.sh"
msgstr ""

#: ../../../integrations/cross_platform/emscripten.rst:98
#: ../../../integrations/cross_platform/emscripten.rst:140
msgid "or (on Windows):"
msgstr ""

#: ../../../integrations/cross_platform/emscripten.rst:100
msgid "$ ./build.cmd"
msgstr ""

#: ../../../integrations/cross_platform/emscripten.rst:104
msgid ""
"Please note that running the above command may take a while to download and "
"build required dependencies. This script will execute several conan commands:"
msgstr ""

#: ../../../integrations/cross_platform/emscripten.rst:107
msgid ""
"$ conan remove conan-hello-emscripten/* -f\n"
"$ conan create . conan/testing  -k -p emscripten.profile --build missing\n"
"$ conan install conanfile.txt  -pr emscripten.profile"
msgstr ""

#: ../../../integrations/cross_platform/emscripten.rst:113
msgid ""
"First one removes any traces of previous demo installations, just to ensure "
"that environment is clean. Then, it builds the simple demo (it uses "
"``CMakeLists.txt`` and ``main.cpp`` files from the current directory). The "
"following local profile is used (file ``emscripten.profile`` within the "
"current directory):"
msgstr ""

#: ../../../integrations/cross_platform/emscripten.rst:117
msgid ""
"include(default)\n"
"[settings]\n"
"os=Emscripten\n"
"arch=wasm\n"
"compiler=clang\n"
"compiler.version=6.0\n"
"compiler.libcxx=libc++\n"
"[options]\n"
"[build_requires]\n"
"emsdk_installer/1.38.29@bincrafters/stable\n"
"ninja/1.9.0\n"
"[env]"
msgstr ""

#: ../../../integrations/cross_platform/emscripten.rst:132
msgid ""
"Finally, it installs the demo importing ithe required files (``.html``, ``."
"js`` and ``.wasm``) into the ``bin`` subdirectory."
msgstr ""

#: ../../../integrations/cross_platform/emscripten.rst:134
msgid ""
"Then we can run the code inside the browser via `emrun <https://emscripten."
"org/docs/compiling/Running-html-files-with-emrun.html>`_ helper:"
msgstr ""

#: ../../../integrations/cross_platform/emscripten.rst:136
msgid "$ ./run.sh"
msgstr ""

#: ../../../integrations/cross_platform/emscripten.rst:142
msgid "$ ./run.cmd"
msgstr ""

#: ../../../integrations/cross_platform/emscripten.rst:146
msgid ""
"The command above uses :ref:`virtualenv "
"generator<virtual_environment_generator>` generator in order to get "
"``emrun`` command available in the ``PATH``. And as the result, Web Browser "
"should be opened (or new tab in Web Browser will be opened, if it was "
"already run), and the following output should be displayed:"
msgstr ""

#: ../../../integrations/cross_platform/emscripten.rst:149
msgid "$ Using zlib version: 1.2.11"
msgstr ""

#: ../../../integrations/cross_platform/emscripten.rst:153
msgid ""
"It confirms the fact we have just built ``zlib`` into JavaScript and run it "
"inside the Web Browser."
msgstr ""
