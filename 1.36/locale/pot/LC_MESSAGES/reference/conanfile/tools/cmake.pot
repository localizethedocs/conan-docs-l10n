# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2020, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.36\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/conanfile/tools/cmake.rst:4
msgid "conan.tools.cmake"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:8
msgid "These tools are **experimental** and subject to breaking changes."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:12
msgid "CMakeDeps"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:14
msgid ""
"Available since: `1.33.0 <https://github.com/conan-io/conan/releases/"
"tag/1.33.0>`_"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:16
msgid ""
"The ``CMakeDeps`` helper will generate one **xxxx-config.cmake** file per "
"dependency, together with other necessary *.cmake* files like version, flags "
"and directory data or configuration. It can be used like:"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:20
msgid ""
"from conans import ConanFile\n"
"\n"
"class App(ConanFile):\n"
"    settings = \"os\", \"arch\", \"compiler\", \"build_type\"\n"
"    requires = \"hello/0.1\"\n"
"    generators = \"CMakeDeps\""
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:30
msgid ""
"The full instantiation, that allows custom configuration can be done in the "
"``generate()`` method:"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:33
msgid ""
"from conans import ConanFile\n"
"from conan.tools.cmake import CMakeDeps\n"
"\n"
"class App(ConanFile):\n"
"    settings = \"os\", \"arch\", \"compiler\", \"build_type\"\n"
"    requires = \"hello/0.1\"\n"
"\n"
"    def generate(self):\n"
"        cmake = CMakeDeps(self)\n"
"        cmake.configurations.append(\"ReleaseShared\")\n"
"        if self.options[\"hello\"].shared:\n"
"            cmake.configuration = \"ReleaseShared\"\n"
"        cmake.generate()"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:49
msgid ""
"As it can be seen, it allows to define custom user CMake configurations "
"besides the standard Release, Debug, etc ones. If the **settings.yml** file "
"is customized to add new configurations to the ``settings.build_type``, "
"then, adding it explicitly to ``.configurations`` is not necessary."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:56
msgid "CMakeToolchain"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:57
msgid ""
"The ``CMakeToolchain`` is the toolchain generator for CMake. It will "
"generate toolchain files that can be used in the command line invocation of "
"CMake with the ``-DCMAKE_TOOLCHAIN_FILE=conantoolchain.cmake``. This "
"generator translates the current package configuration, settings, and "
"options, into CMake toolchain syntax."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:61
msgid "It can be declared as:"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:63
msgid ""
"from conans import ConanFile\n"
"\n"
"class Pkg(ConanFile):\n"
"    generators = \"CMakeToolchain\""
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:70
msgid "Or fully instantiated in the ``generate()`` method:"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:72
msgid ""
"from conans import ConanFile\n"
"from conan.tools.cmake import CMakeToolchain\n"
"\n"
"class App(ConanFile):\n"
"    settings = \"os\", \"arch\", \"compiler\", \"build_type\"\n"
"    requires = \"hello/0.1\"\n"
"    generators = \"cmake_find_package_multi\"\n"
"    options = {\"shared\": [True, False], \"fPIC\": [True, False]}\n"
"    default_options = {\"shared\": False, \"fPIC\": True}\n"
"\n"
"    def generate(self):\n"
"        tc = CMakeToolchain(self)\n"
"        tc.variables[\"MYVAR\"] = \"MYVAR_VALUE\"\n"
"        tc.preprocessor_definitions[\"MYDEFINE\"] = \"MYDEF_VALUE\"\n"
"        tc.generate()"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:91
msgid ""
"This will generate the following files after a ``conan install`` (or when "
"building the package in the cache) with the information provided in the "
"``generate()`` method as well as information translated from the current "
"``settings``:"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:95
msgid ""
"*conan_toolchain.cmake* file, containing the translation of Conan settings "
"to CMake variables. Some things that will be defined in this file:"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:98
msgid "Definition of the CMake generator platform and generator toolset"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:99
msgid "Definition of the CMake ``build_type``"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:100
msgid ""
"Definition of the ``CMAKE_POSITION_INDEPENDENT_CODE``, based on ``fPIC`` "
"option."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:101
msgid "Definition of the C++ standard as necessary"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:102
msgid "Definition of the standard library used for C++"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:103
msgid "Deactivation of rpaths in OSX"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:105
msgid ""
"*conanbuild.json*: The toolchain can also generate a ``conanbuild.json`` "
"file that contains arguments to the command line ``CMake()`` helper used in "
"the recipe ``build()`` method. At the moment it contains only the CMake "
"generator. The CMake generator will be deduced from the current Conan "
"compiler settings:"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:109
msgid ""
"For ``settings.compiler=\"Visual Studio\"``, the CMake generator is a direct "
"mapping of ``compiler.version``, as this version represents the IDE version, "
"not the compiler version."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:110
msgid ""
"For ``settings.compiler=msvc``, the CMake generator will be by default the "
"one of the Visual Studio that introduced this compiler version (``msvc "
"19.0`` => ``Visual Studio 14``, ``msvc 19.1`` => ``Visual Studio 15``, etc). "
"This can be changed, using the ``tools.microsoft.msbuild:vs_version`` [conf] "
"configuration. If it is defined, that Visual Studio version will be used as "
"the CMake generator, and the specific compiler version and toolset will be "
"defined in the ``conan_toolchain.cmake`` file."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:112
msgid ""
"*conanvcvars.bat*: In some cases, the Visual Studio environment needs to be "
"defined correctly for building, like when using the Ninja or NMake "
"generators. If necessary, the ``CMakeToolchain`` will generate this script, "
"so defining the correct Visual Studio prompt is easier."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:118
#: ../../../reference/conanfile/tools/cmake.rst:338
msgid "constructor"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:125
msgid ""
"def __init__(self, conanfile, generator=None, generator_platform=None, "
"build_type=None,\n"
"             cmake_system_name=True, toolset=None):"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:126
msgid ""
"Most of the arguments are optional and will be deduced from the current "
"``settings``, and not necessary to define them."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:131
msgid "preprocessor_definitions"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:133
msgid ""
"This attribute allows defining CMake variables, for multiple configurations "
"(Debug, Release, etc)."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:143
msgid ""
"def generate(self):\n"
"    tc = CMakeToolchain(self)\n"
"    tc.preprocessor_definitions[\"MYVAR\"] = \"MyValue\"\n"
"    tc.preprocessor_definitions.debug[\"MYCONFIGVAR\"] = \"MyDebugValue\"\n"
"    tc.preprocessor_definitions.release[\"MYCONFIGVAR\"] = "
"\"MyReleaseValue\"\n"
"    tc.generate()"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:144
msgid "This will be translated to:"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:146
msgid ""
"One ``set()`` definition for ``MYVAR`` in ``conan_toolchain.cmake`` file."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:147
msgid ""
"One ``set()`` definition, using a cmake generator expression in "
"``conan_toolchain.cmake`` file, using the different values for different "
"configurations."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:151
msgid ""
"The ``CMakeToolchain`` is intended to run with the ``CMakeDeps`` "
"dependencies generator. It might temporarily work with others like "
"``cmake_find_package`` and ``cmake_find_package_multi``, but this will be "
"removed soon."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:156
msgid "Using the toolchain in developer flow"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:158
msgid ""
"One of the advantages of using Conan toolchains is that they can help to "
"achieve the exact same build with local development flows, than when the "
"package is created in the cache."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:161
msgid ""
"With the ``CMakeToolchain`` it is possible to do, for multi-configuration "
"systems like Visual Studio (assuming we are using the "
"``cmake_find_package_multi`` generator):"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:179
msgid ""
"# Lets start in the folder containing the conanfile.py\n"
"$ mkdir build && cd build\n"
"# Install both debug and release deps and create the toolchain\n"
"$ conan install ..\n"
"$ conan install .. -s build_type=Debug\n"
"# the conan_toolchain.cmake is common for both configurations\n"
"# Need to pass the generator WITHOUT the platform, that matches your default "
"settings\n"
"$ cmake .. -G \"Visual Studio 15\" -DCMAKE_TOOLCHAIN_FILE=conan_toolchain."
"cmake\n"
"# Now you can open the IDE, select Debug or Release config and build\n"
"# or, in the command line\n"
"$ cmake --build . --config Release\n"
"$ cmake --build . --config Debug"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:180
msgid ""
"**NOTE**: The platform (Win64), is already encoded in the toolchain. The "
"command line shouldn't pass it, so using ``-G \"Visual Studio 15\"`` instead "
"of the ``-G \"Visual Studio 15 Win64\"``"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:184
msgid "For single-configuration build systems:"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:204
msgid ""
"# Lets start in the folder containing the conanfile.py\n"
"$ mkdir build_release && cd build_release\n"
"$ conan install ..\n"
"# the build type Release is encoded in the toolchain already.\n"
"# This conan_toolchain.cmake is specific for release\n"
"$ cmake .. -G \"Unix Makefiles\" -DCMAKE_TOOLCHAIN_FILE=conan_toolchain."
"cmake\n"
"$ cmake --build .  # or just \"make\"\n"
"\n"
"# debug build requires its own folder\n"
"$ cd .. && mkdir build_debug && cd build_debug\n"
"$ conan install .. -s build_type=Debug\n"
"# the build type Debug is encoded in the toolchain already.\n"
"# This conan_toolchain.cmake is specific for debug\n"
"$ cmake .. -G \"Unix Makefiles\" -DCMAKE_TOOLCHAIN_FILE=conan_toolchain."
"cmake\n"
"$ cmake --build .  # or just \"make\""
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:206
msgid "Extending and customizing CMakeToolchain"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:208
msgid ""
"Since Conan 1.36, ``CMakeToolchain`` implements a powerful capability for "
"extending and customizing the resulting toolchain file."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:210
msgid "The following predefined blocks are available:"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:212
msgid ""
"``generic_system``: Defines ``CMAKE_GENERATOR_PLATFORM``, "
"``CMAKE_GENERATOR_TOOLSET``, ``CMAKE_C_COMPILER``,``CMAKE_CXX_COMPILER`` and "
"``CMAKE_BUILD_TYPE``"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:213
msgid ""
"``android_system``: Defines ``ANDROID_PLATFORM``, ``ANDROID_STL``, "
"``ANDROID_ABI`` and includes ``CMAKE_ANDROID_NDK/build/cmake/android."
"toolchain.cmake`` where CMAKE_ANDROID_NDK comes defined in ``tools.android:"
"ndk_path``"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:215
msgid ""
"``ios_system``: Defines ``CMAKE_SYSTEM_NAME``, ``CMAKE_SYSTEM_VERSION``, "
"``CMAKE_OSX_ARCHITECTURES``, ``CMAKE_OSX_SYSROOT`` for Apple systems."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:216
msgid ""
"``find_paths``: Defines ``CMAKE_FIND_PACKAGE_PREFER_CONFIG``, "
"``CMAKE_MODULE_PATH``, ``CMAKE_PREFIX_PATH`` so the generated files from "
"``CMakeDeps`` are found."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:217
msgid ""
"``fpic``: Defines the ``CMAKE_POSITION_INDEPENDENT_CODE`` when there is a "
"``options.fPIC``"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:218
msgid "``rpath``: Defines ``CMAKE_SKIP_RPATH`` for OSX"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:219
msgid "``arch_flags``: Defines C/C++ flags like ``-m32, -m64`` when necessary."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:220
msgid ""
"``libcxx``: Defines ``-stdlib=libc++`` flag when necessary as well as "
"``_GLIBCXX_USE_CXX11_ABI``."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:221
msgid ""
"``vs_runtime``: Defines the ``CMAKE_MSVC_RUNTIME_LIBRARY`` variable, as a "
"generator expression for for multiple configurations."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:223
msgid "``cppstd``: defines ``CMAKE_CXX_STANDARD``, ``CMAKE_CXX_EXTENSIONS``"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:224
msgid "``shared``: defines ``BUILD_SHARED_LIBS``"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:225
msgid "``parallel``: defines ``/MP`` parallel build flag for Visual."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:228
msgid "Blocks can be customized in different ways:"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:294
msgid ""
"# remove an existing block\n"
"def generate(self):\n"
"    tc = CMakeToolchain(self)\n"
"    tc.pre_blocks.remove(\"generic_system\")\n"
"\n"
"# modify the template of an existing block\n"
"def generate(self):\n"
"    tc = CMakeToolchain(self)\n"
"    tmp = tc.pre_blocks[\"generic_system\"].template\n"
"    new_tmp = tmp.replace(...)  # replace, fully replace, append...\n"
"    tc.pre_blocks[\"generic_system\"].template = new_tmp\n"
"\n"
"# modify the context (variables) of an existing block\n"
"import types\n"
"\n"
"def generate(self):\n"
"    tc = CMakeToolchain(self)\n"
"    generic_block = toolchain.pre_blocks[\"generic_system\"]\n"
"\n"
"    def context(self):\n"
"        assert self  # Your own custom logic here\n"
"        return {\"build_type\": \"SuperRelease\"}\n"
"    generic_block.context = types.MethodType(context, generic_block)\n"
"\n"
"# completely replace existing block\n"
"def generate(self):\n"
"    tc = CMakeToolchain(self)\n"
"    # this could go to a python_requires\n"
"    class MyGenericBlock(Block):\n"
"        template = \"HelloWorld\"\n"
"\n"
"        def context(self):\n"
"            return {}\n"
"\n"
"    tc.pre_blocks[\"generic_system\"] = MyBlock\n"
"\n"
"# add a completely new block\n"
"def generate(self):\n"
"    tc = CMakeToolchain(self)\n"
"    # this could go to a python_requires\n"
"    class MyBlock(Block):\n"
"        template = \"Hello {{myvar}}!!!\"\n"
"\n"
"        def context(self):\n"
"            return {\"myvar\": \"World\"}\n"
"\n"
"    tc.pre_blocks[\"mynewblock\"] = MyBlock\n"
"\n"
"\n"
"# extend from an existing block\n"
"def generate(self):\n"
"    tc = CMakeToolchain(self)\n"
"    # this could go to a python_requires\n"
"    class MyBlock(GenericSystemBlock):\n"
"        template = \"Hello {{build_type}}!!\"\n"
"\n"
"        def context(self):\n"
"            c = super(MyBlock, self).context()\n"
"            c[\"build_type\"] = c[\"build_type\"] + \"Super\"\n"
"            return c\n"
"\n"
"    tc.pre_blocks[\"generic_system\"] = MyBlock"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:295
msgid ""
"Recall that this is a very **experimental** feature, and these interfaces "
"might change in the following releases."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:297
msgid ""
"For more information about these blocks, please have a look at the source "
"code."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:301
msgid "CMake"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:302
msgid ""
"The ``CMake`` build helper is a wrapper around the command line invocation "
"of cmake. It will abstract the calls like ``cmake --build . --config "
"Release`` into Python method calls. It will also add the argument ``-"
"DCMAKE_TOOLCHAIN_FILE=conantoolchain.cmake`` to the ``configure()`` call."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:306
msgid ""
"The helper is intended to be used in the ``build()`` method, to call CMake "
"commands automatically when a package is being built directly by Conan "
"(create, install)"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:310
msgid ""
"from conans import ConanFile\n"
"from conan.tools.cmake import CMake, CMakeToolchain, CMakeDeps\n"
"\n"
"class App(ConanFile):\n"
"    settings = \"os\", \"arch\", \"compiler\", \"build_type\"\n"
"    requires = \"hello/0.1\"\n"
"    options = {\"shared\": [True, False], \"fPIC\": [True, False]}\n"
"    default_options = {\"shared\": False, \"fPIC\": True}\n"
"\n"
"    def generate(self):\n"
"        tc = CMakeToolchain(self)\n"
"        tc.generate()\n"
"        deps = CMakeDeps(self)\n"
"        deps.generate()\n"
"\n"
"    def build(self):\n"
"        cmake = CMake(self)\n"
"        cmake.configure()\n"
"        cmake.build()"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:332
msgid ""
"**Note:** This helper includes the additional flag `-DCMAKE_SH=\"CMAKE_SH-"
"NOTFOUND\"` when using the `MinGW Makefiles` CMake's generator, to avoid the "
"error of `sh` being in the PATH (CMake version < 3.17.0)."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:335
msgid "It supports the following methods:"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:343
msgid "def __init__(self, conanfile, build_folder=None):"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:344
msgid "``conanfile``: the current recipe object. Always use ``self``."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:345
msgid ""
"``build_folder``: Relative path to a folder to contain the temporary build "
"files"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:349
msgid "configure()"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:354
msgid "def configure(self, source_folder=None):"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:355
msgid ""
"Calls ``cmake``, with the generator defined in the ``cmake_generator`` field "
"of the ``conanbuild.json`` file, and passing ``-"
"DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake``. If ``conanbuild.json`` file "
"is not there, no generator will be passed."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:359
msgid ""
"``source_folder``: Relative path to the folder containing the root "
"*CMakeLists.txt*"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:363
msgid "build()"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:369
msgid "def build(self, build_type=None, target=None):"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:370
msgid ""
"Calls the build system. Equivalent to :command:`cmake --build .` in the "
"build folder."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:373
msgid ""
"``build_type``: Use it only to override the value defined in the ``settings."
"build_type`` for a multi-configuration generator (e.g. Visual Studio, "
"XCode). This value will be ignored for single-configuration generators, they "
"will use the one defined in the toolchain file during the install step."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:375
msgid "``target``: name of the build target to run."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:379
msgid "install()"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:385
msgid "def install(self, build_type=None):"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:386
msgid "Equivalent to run ``cmake --build . --target=install``"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:388
#: ../../../reference/conanfile/tools/cmake.rst:403
msgid ""
"``build_type``: Use it only to override the value defined in the ``settings."
"build_type``. It can fail if the build is single configuration (e.g. Unix "
"Makefiles), as in that case the build type must be specified at configure "
"time, not build type."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:394
msgid "test()"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:400
msgid "def test(self, build_type=None, target=None, output_on_failure=False):"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:401
msgid "Equivalent to running :command:`cmake --build . --target=RUN_TESTS`."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:406
msgid ""
"``target``: name of the build target to run, by default ``RUN_TESTS`` or "
"``test``."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:410
msgid "conf"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:412
msgid ""
"``tools.microsoft.msbuild:verbosity`` will accept one of ``\"Quiet\", "
"\"Minimal\", \"Normal\", \"Detailed\", \"Diagnostic\"`` to be passed to the "
"``CMake.build()`` command, when a Visual Studio generator (MSBuild build "
"system) is being used for CMake. It is passed as an argument to the "
"underlying build system via the call ``cmake --build . --config Release -- /"
"verbosity:Diagnostic``"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:416
msgid ""
"``tools.ninja:jobs`` argument for the ``--jobs`` parameter when running "
"Ninja generator. (overrides the general ``tools.build:processes``)."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:419
msgid ""
"``tools.microsoft.msbuild:max_cpu_count`` argument for the ``/m`` (``/"
"maxCpuCount``) when running ``MSBuild`` (overrides the general ``tools.build:"
"processes``)."
msgstr ""
