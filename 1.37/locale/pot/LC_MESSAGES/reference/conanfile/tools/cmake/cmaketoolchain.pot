# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2020, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.37\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:4
msgid "CMakeToolchain"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:8
msgid "These tools are **experimental** and subject to breaking changes."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:11
msgid ""
"The ``CMakeToolchain`` is the toolchain generator for CMake. It will "
"generate toolchain files that can be used in the command line invocation of "
"CMake with the ``-DCMAKE_TOOLCHAIN_FILE=conantoolchain.cmake``. This "
"generator translates the current package configuration, settings, and "
"options, into CMake toolchain syntax."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:15
msgid "It can be declared as:"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:17
msgid ""
"from conans import ConanFile\n"
"\n"
"class Pkg(ConanFile):\n"
"    generators = \"CMakeToolchain\""
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:24
msgid "Or fully instantiated in the ``generate()`` method:"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:26
msgid ""
"from conans import ConanFile\n"
"from conan.tools.cmake import CMakeToolchain\n"
"\n"
"class App(ConanFile):\n"
"    settings = \"os\", \"arch\", \"compiler\", \"build_type\"\n"
"    requires = \"hello/0.1\"\n"
"    generators = \"cmake_find_package_multi\"\n"
"    options = {\"shared\": [True, False], \"fPIC\": [True, False]}\n"
"    default_options = {\"shared\": False, \"fPIC\": True}\n"
"\n"
"    def generate(self):\n"
"        tc = CMakeToolchain(self)\n"
"        tc.variables[\"MYVAR\"] = \"MYVAR_VALUE\"\n"
"        tc.preprocessor_definitions[\"MYDEFINE\"] = \"MYDEF_VALUE\"\n"
"        tc.generate()"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:45
msgid ""
"This will generate the following files after a ``conan install`` (or when "
"building the package in the cache) with the information provided in the "
"``generate()`` method as well as information translated from the current "
"``settings``:"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:49
msgid ""
"*conan_toolchain.cmake* file, containing the translation of Conan settings "
"to CMake variables. Some things that will be defined in this file:"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:52
msgid "Definition of the CMake generator platform and generator toolset"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:53
msgid "Definition of the CMake ``build_type``"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:54
msgid ""
"Definition of the ``CMAKE_POSITION_INDEPENDENT_CODE``, based on ``fPIC`` "
"option."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:55
msgid "Definition of the C++ standard as necessary"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:56
msgid "Definition of the standard library used for C++"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:57
msgid "Deactivation of rpaths in OSX"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:59
msgid ""
"*conanbuild.json*: The toolchain can also generate a ``conanbuild.json`` "
"file that contains arguments to the command line ``CMake()`` helper used in "
"the recipe ``build()`` method. At the moment it contains only the CMake "
"generator and the CMake toolchain file. The CMake generator will be deduced "
"from the current Conan compiler settings:"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:63
msgid ""
"For ``settings.compiler=\"Visual Studio\"``, the CMake generator is a direct "
"mapping of ``compiler.version``, as this version represents the IDE version, "
"not the compiler version."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:64
msgid ""
"For ``settings.compiler=msvc``, the CMake generator will be by default the "
"one of the Visual Studio that introduced this compiler version (``msvc "
"19.0`` => ``Visual Studio 14``, ``msvc 19.1`` => ``Visual Studio 15``, etc). "
"This can be changed, using the ``tools.microsoft.msbuild:vs_version`` [conf] "
"configuration. If it is defined, that Visual Studio version will be used as "
"the CMake generator, and the specific compiler version and toolset will be "
"defined in the ``conan_toolchain.cmake`` file."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:66
msgid ""
"*conanvcvars.bat*: In some cases, the Visual Studio environment needs to be "
"defined correctly for building, like when using the Ninja or NMake "
"generators. If necessary, the ``CMakeToolchain`` will generate this script, "
"so defining the correct Visual Studio prompt is easier."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:72
msgid "constructor"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:78
msgid "def __init__(self, conanfile, generator=None):"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:79
msgid ""
"Most of the arguments are optional and will be deduced from the current "
"``settings``, and not necessary to define them."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:84
msgid "preprocessor_definitions"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:86
msgid ""
"This attribute allows defining CMake variables, for multiple configurations "
"(Debug, Release, etc)."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:96
msgid ""
"def generate(self):\n"
"    tc = CMakeToolchain(self)\n"
"    tc.preprocessor_definitions[\"MYVAR\"] = \"MyValue\"\n"
"    tc.preprocessor_definitions.debug[\"MYCONFIGVAR\"] = \"MyDebugValue\"\n"
"    tc.preprocessor_definitions.release[\"MYCONFIGVAR\"] = "
"\"MyReleaseValue\"\n"
"    tc.generate()"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:97
msgid "This will be translated to:"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:99
msgid ""
"One ``set()`` definition for ``MYVAR`` in ``conan_toolchain.cmake`` file."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:100
msgid ""
"One ``set()`` definition, using a cmake generator expression in "
"``conan_toolchain.cmake`` file, using the different values for different "
"configurations."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:104
msgid ""
"The ``CMakeToolchain`` is intended to run with the ``CMakeDeps`` "
"dependencies generator. It might temporarily work with others like "
"``cmake_find_package`` and ``cmake_find_package_multi``, but this will be "
"removed soon."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:109
msgid "Using a custom toolchain file"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:111
msgid "There are two ways of providing a custom CMake toolchain file:"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:113
msgid ""
"The ``conan_toolchain.cmake`` file can be completely skipped and replaced by "
"a user one, defining the ``tools.cmake.cmaketoolchain:"
"toolchain_file=<filepath>`` configuration value"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:114
msgid ""
"A custom user toolchain file can be added (included from) the "
"``conan_toolchain.cmake`` one, by using the ``user_toolchain`` block "
"described below, and defining the ``tools.cmake.cmaketoolchain:"
"user_toolchain=<filepath>`` configuration value."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:118
msgid "Using the toolchain in developer flow"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:120
msgid ""
"One of the advantages of using Conan toolchains is that they can help to "
"achieve the exact same build with local development flows, than when the "
"package is created in the cache."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:123
msgid ""
"With the ``CMakeToolchain`` it is possible to do, for multi-configuration "
"systems like Visual Studio (assuming we are using the "
"``cmake_find_package_multi`` generator):"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:141
msgid ""
"# Lets start in the folder containing the conanfile.py\n"
"$ mkdir build && cd build\n"
"# Install both debug and release deps and create the toolchain\n"
"$ conan install ..\n"
"$ conan install .. -s build_type=Debug\n"
"# the conan_toolchain.cmake is common for both configurations\n"
"# Need to pass the generator WITHOUT the platform, that matches your default "
"settings\n"
"$ cmake .. -G \"Visual Studio 15\" -DCMAKE_TOOLCHAIN_FILE=conan_toolchain."
"cmake\n"
"# Now you can open the IDE, select Debug or Release config and build\n"
"# or, in the command line\n"
"$ cmake --build . --config Release\n"
"$ cmake --build . --config Debug"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:142
msgid ""
"**NOTE**: The platform (Win64), is already encoded in the toolchain. The "
"command line shouldn't pass it, so using ``-G \"Visual Studio 15\"`` instead "
"of the ``-G \"Visual Studio 15 Win64\"``"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:146
msgid "For single-configuration build systems:"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:166
msgid ""
"# Lets start in the folder containing the conanfile.py\n"
"$ mkdir build_release && cd build_release\n"
"$ conan install ..\n"
"# the build type Release is encoded in the toolchain already.\n"
"# This conan_toolchain.cmake is specific for release\n"
"$ cmake .. -G \"Unix Makefiles\" -DCMAKE_TOOLCHAIN_FILE=conan_toolchain."
"cmake\n"
"$ cmake --build .  # or just \"make\"\n"
"\n"
"# debug build requires its own folder\n"
"$ cd .. && mkdir build_debug && cd build_debug\n"
"$ conan install .. -s build_type=Debug\n"
"# the build type Debug is encoded in the toolchain already.\n"
"# This conan_toolchain.cmake is specific for debug\n"
"$ cmake .. -G \"Unix Makefiles\" -DCMAKE_TOOLCHAIN_FILE=conan_toolchain."
"cmake\n"
"$ cmake --build .  # or just \"make\""
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:168
msgid "Extending and customizing CMakeToolchain"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:170
msgid ""
"Since Conan 1.36, ``CMakeToolchain`` implements a powerful capability for "
"extending and customizing the resulting toolchain file."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:172
msgid "The following predefined blocks are available, and added in this order:"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:174
msgid ""
"``user_toolchain``: Allows to include a user toolchain from the "
"``conan_toolchain.cmake`` file. If the configuration ``tools.cmake."
"cmaketoolchain:user_toolchain=xxxx`` is defined, its value will be "
"``include(xxx)`` as the first line in ``conan_toolchain.cmake``."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:175
msgid ""
"``generic_system``: Defines ``CMAKE_GENERATOR_PLATFORM``, "
"``CMAKE_GENERATOR_TOOLSET``, ``CMAKE_C_COMPILER``,``CMAKE_CXX_COMPILER`` and "
"``CMAKE_BUILD_TYPE``"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:176
msgid ""
"``android_system``: Defines ``ANDROID_PLATFORM``, ``ANDROID_STL``, "
"``ANDROID_ABI`` and includes ``CMAKE_ANDROID_NDK/build/cmake/android."
"toolchain.cmake`` where CMAKE_ANDROID_NDK comes defined in ``tools.android:"
"ndk_path`` configuration value."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:178
msgid ""
"``apple_system``: Defines ``CMAKE_SYSTEM_NAME``, ``CMAKE_SYSTEM_VERSION``, "
"``CMAKE_OSX_ARCHITECTURES``, ``CMAKE_OSX_SYSROOT`` for Apple systems."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:179
msgid ""
"``fpic``: Defines the ``CMAKE_POSITION_INDEPENDENT_CODE`` when there is a "
"``options.fPIC``"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:180
msgid "``arch_flags``: Defines C/C++ flags like ``-m32, -m64`` when necessary."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:181
msgid ""
"``libcxx``: Defines ``-stdlib=libc++`` flag when necessary as well as "
"``_GLIBCXX_USE_CXX11_ABI``."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:182
msgid ""
"``vs_runtime``: Defines the ``CMAKE_MSVC_RUNTIME_LIBRARY`` variable, as a "
"generator expression for multiple configurations."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:183
msgid "``cppstd``: defines ``CMAKE_CXX_STANDARD``, ``CMAKE_CXX_EXTENSIONS``"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:184
msgid "``parallel``: defines ``/MP`` parallel build flag for Visual."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:185
msgid ""
"``cmake_flags_init``: defines ``CMAKE_XXX_FLAGS`` variables based on "
"previously defined Conan variables. The blocks above only define "
"``CONAN_XXX`` variables, and this block will define CMake ones like "
"``set(CMAKE_CXX_FLAGS_INIT \"${CONAN_CXX_FLAGS}\" CACHE STRING \"\" "
"FORCE)```."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:186
msgid ""
"``try_compile``: Stop processing the toolchain, skipping the blocks below "
"this one, if ``IN_TRY_COMPILE`` CMake property is defined."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:187
msgid ""
"``find_paths``: Defines ``CMAKE_FIND_PACKAGE_PREFER_CONFIG``, "
"``CMAKE_MODULE_PATH``, ``CMAKE_PREFIX_PATH`` so the generated files from "
"``CMakeDeps`` are found."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:188
msgid ""
"``rpath``: Defines ``CMAKE_SKIP_RPATH``. By default it is disabled, and it "
"is needed to define ``self.blocks[\"rpath\"].skip_rpath=True`` if you want "
"to activate ``CMAKE_SKIP_RPATH``"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:189
msgid "``shared``: defines ``BUILD_SHARED_LIBS``"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:193
msgid "Blocks can be customized in different ways:"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:259
msgid ""
"# remove an existing block\n"
"def generate(self):\n"
"    tc = CMakeToolchain(self)\n"
"    tc.blocks.remove(\"generic_system\")\n"
"\n"
"# modify the template of an existing block\n"
"def generate(self):\n"
"    tc = CMakeToolchain(self)\n"
"    tmp = tc.blocks[\"generic_system\"].template\n"
"    new_tmp = tmp.replace(...)  # replace, fully replace, append...\n"
"    tc.blocks[\"generic_system\"].template = new_tmp\n"
"\n"
"# modify the context (variables) of an existing block\n"
"import types\n"
"\n"
"def generate(self):\n"
"    tc = CMakeToolchain(self)\n"
"    generic_block = toolchain.blocks[\"generic_system\"]\n"
"\n"
"    def context(self):\n"
"        assert self  # Your own custom logic here\n"
"        return {\"build_type\": \"SuperRelease\"}\n"
"    generic_block.context = types.MethodType(context, generic_block)\n"
"\n"
"# completely replace existing block\n"
"def generate(self):\n"
"    tc = CMakeToolchain(self)\n"
"    # this could go to a python_requires\n"
"    class MyGenericBlock(Block):\n"
"        template = \"HelloWorld\"\n"
"\n"
"        def context(self):\n"
"            return {}\n"
"\n"
"    tc.blocks[\"generic_system\"] = MyBlock\n"
"\n"
"# add a completely new block\n"
"def generate(self):\n"
"    tc = CMakeToolchain(self)\n"
"    # this could go to a python_requires\n"
"    class MyBlock(Block):\n"
"        template = \"Hello {{myvar}}!!!\"\n"
"\n"
"        def context(self):\n"
"            return {\"myvar\": \"World\"}\n"
"\n"
"    tc.blocks[\"mynewblock\"] = MyBlock\n"
"\n"
"\n"
"# extend from an existing block\n"
"def generate(self):\n"
"    tc = CMakeToolchain(self)\n"
"    # this could go to a python_requires\n"
"    class MyBlock(GenericSystemBlock):\n"
"        template = \"Hello {{build_type}}!!\"\n"
"\n"
"        def context(self):\n"
"            c = super(MyBlock, self).context()\n"
"            c[\"build_type\"] = c[\"build_type\"] + \"Super\"\n"
"            return c\n"
"\n"
"    tc.blocks[\"generic_system\"] = MyBlock"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:260
msgid ""
"Recall that this is a very **experimental** feature, and these interfaces "
"might change in the following releases."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmaketoolchain.rst:262
msgid ""
"For more information about these blocks, please have a look at the source "
"code."
msgstr ""
