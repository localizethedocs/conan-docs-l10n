# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2020, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.37\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../howtos/vs2017_cmake.rst:4
msgid "Using Visual Studio 2017 - CMake integration"
msgstr ""

#: ../../../howtos/vs2017_cmake.rst:6
msgid ""
"Visual Studio 2017 comes with a CMake integration that allows one to just "
"open a folder that contains a *CMakeLists.txt* and Visual will use it to "
"define the project build."
msgstr ""

#: ../../../howtos/vs2017_cmake.rst:9
msgid ""
"Conan can also be used in this setup to install dependencies. Let`s say that "
"we are going to build an application that depends on an existing Conan "
"package called ``hello/0.1@user/testing``. For the purpose of this example, "
"you can quickly create this package by typing in your terminal:"
msgstr ""

#: ../../../howtos/vs2017_cmake.rst:13
msgid ""
"$ conan new hello/0.1 -s\n"
"$ conan create . user/testing # Default conan profile is Release\n"
"$ conan create . user/testing -s build_type=Debug"
msgstr ""

#: ../../../howtos/vs2017_cmake.rst:19
msgid ""
"The project we want to develop will be a simple application with these 3 "
"files in the same folder:"
msgstr ""

#: ../../../howtos/vs2017_cmake.rst:21
msgid "**example.cpp**"
msgstr ""

#: ../../../howtos/vs2017_cmake.rst:21
msgid ""
" #include <iostream>\n"
" #include \"hello.h\"\n"
"\n"
" int main() {\n"
"     hello();\n"
"     std::cin.ignore();\n"
" }"
msgstr ""

#: ../../../howtos/vs2017_cmake.rst:32
msgid "**conanfile.txt**"
msgstr ""

#: ../../../howtos/vs2017_cmake.rst:32
msgid ""
"[requires]\n"
"hello/0.1@user/testing\n"
"\n"
"[generators]\n"
"cmake"
msgstr ""

#: ../../../howtos/vs2017_cmake.rst:41
msgid "**CMakeLists.txt**"
msgstr ""

#: ../../../howtos/vs2017_cmake.rst:41
msgid ""
"project(Example CXX)\n"
"cmake_minimum_required(VERSION 2.8.12)\n"
"\n"
"include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)\n"
"conan_basic_setup()\n"
"\n"
"add_executable(example example.cpp)\n"
"target_link_libraries(example ${CONAN_LIBS})"
msgstr ""

#: ../../../howtos/vs2017_cmake.rst:53
msgid ""
"If we open Visual Studio 2017 (with CMake support installed), and select "
"\"Open Folder\" from the menu, and select the above folder, we will see "
"something like the following error:"
msgstr ""

#: ../../../howtos/vs2017_cmake.rst:56
msgid ""
"1> Command line: C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL "
"STUDIO\\2017\\COMMUNITY\\COMMON7\\IDE\\COMMONEXTENSIONS\\MICROSOFT\\CMAKE\\CMake\\bin\\cmake."
"exe  -G \"Ninja\" -DCMAKE_INSTALL_PREFIX:PATH=\"C:"
"\\Users\\user\\CMakeBuilds\\df6639d2-3ef2-bc32-"
"abb3-2cd1bdb3c1ab\\install\\x64-Debug\"  -DCMAKE_CXX_COMPILER=\"C:/Program "
"Files (x86)/Microsoft Visual Studio/2017/Community/VC/Tools/MSVC/14.12.25827/"
"bin/HostX64/x64/cl.exe\"  -DCMAKE_C_COMPILER=\"C:/Program Files (x86)/"
"Microsoft Visual Studio/2017/Community/VC/Tools/MSVC/14.12.25827/bin/HostX64/"
"x64/cl.exe\"  -DCMAKE_BUILD_TYPE=\"Debug\" -DCMAKE_MAKE_PROGRAM=\"C:"
"\\PROGRAM FILES (X86)\\MICROSOFT VISUAL "
"STUDIO\\2017\\COMMUNITY\\COMMON7\\IDE\\COMMONEXTENSIONS\\MICROSOFT\\CMAKE\\Ninja\\ninja."
"exe\" \"C:\\Users\\user\\conanws\\visual-cmake\"\n"
"1> Working directory: C:\\Users\\user\\CMakeBuilds\\df6639d2-3ef2-bc32-"
"abb3-2cd1bdb3c1ab\\build\\x64-Debug\n"
"1> -- The CXX compiler identification is MSVC 19.12.25831.0\n"
"1> -- Check for working CXX compiler: C:/Program Files (x86)/Microsoft "
"Visual Studio/2017/Community/VC/Tools/MSVC/14.12.25827/bin/HostX64/x64/cl."
"exe\n"
"1> -- Check for working CXX compiler: C:/Program Files (x86)/Microsoft "
"Visual Studio/2017/Community/VC/Tools/MSVC/14.12.25827/bin/HostX64/x64/cl."
"exe -- works\n"
"1> -- Detecting CXX compiler ABI info\n"
"1> -- Detecting CXX compiler ABI info - done\n"
"1> -- Detecting CXX compile features\n"
"1> -- Detecting CXX compile features - done\n"
"1> CMake Error at CMakeLists.txt:4 (include):\n"
"1>   include could not find load file:\n"
"1>\n"
"1>     C:/Users/user/CMakeBuilds/df6639d2-3ef2-bc32-abb3-2cd1bdb3c1ab/build/"
"x64-Debug/conanbuildinfo.cmake"
msgstr ""

#: ../../../howtos/vs2017_cmake.rst:73
msgid ""
"As expected, our *CMakeLists.txt* is using an ``include(${CMAKE_BINARY_DIR}/"
"conanbuildinfo.cmake)``, and that file doesn't exist yet, because Conan has "
"not yet installed the dependencies of this project. Visual Studio 2017 uses "
"different build folders for each configuration. In this case, the default "
"configuration at startup is ``x64-Debug``. This means that we need to "
"install the dependencies that match this configuration. Assuming that our "
"default profile is using Visual Studio 2017 for x64 (it should typically be "
"the default one created by Conan if VS2017 is present), then all we need to "
"specify is the ``-s build_type=Debug`` setting:"
msgstr ""

#: ../../../howtos/vs2017_cmake.rst:79
msgid ""
"$ conan install . -s build_type=Debug -if=C:"
"\\Users\\user\\CMakeBuilds\\df6639d2-3ef2-bc32-abb3-2cd1bdb3c1ab\\build\\x64-"
"Debug"
msgstr ""

#: ../../../howtos/vs2017_cmake.rst:83
msgid ""
"Now, you should be able to regenerate the CMake project from the IDE, Menu-"
">CMake, build it, select the \"example\" executable to run, and run it."
msgstr ""

#: ../../../howtos/vs2017_cmake.rst:86
msgid ""
"Now, let's say that you want to build the Release application. You switch "
"configuration from the IDE, and then the above error happens again. The "
"dependencies for Release mode need to be installed too:"
msgstr ""

#: ../../../howtos/vs2017_cmake.rst:89
msgid ""
"$ conan install . -if=C:\\Users\\user\\CMakeBuilds\\df6639d2-3ef2-bc32-"
"abb3-2cd1bdb3c1ab\\build\\x64-Release"
msgstr ""

#: ../../../howtos/vs2017_cmake.rst:93
msgid ""
"The process can be extended to x86 (passing ``-s arch=x86`` in the command "
"line), or to other configurations. For production usage, Conan **profiles** "
"are highly recommended."
msgstr ""

#: ../../../howtos/vs2017_cmake.rst:97
msgid "Using cmake-conan"
msgstr ""

#: ../../../howtos/vs2017_cmake.rst:99
msgid ""
"The **cmake-conan** project in https://github.com/conan-io/cmake-conan is a "
"CMake script that runs an ``execute_process`` that automatically launches :"
"command:`conan install` to install dependencies. The settings passed in the "
"command line will be derived from the current CMake configuration, that will "
"match the Visual Studio one. This script can be used to further automate the "
"installation task:"
msgstr ""

#: ../../../howtos/vs2017_cmake.rst:103
msgid ""
"project(Example CXX)\n"
"cmake_minimum_required(VERSION 2.8.12)\n"
"\n"
"# Download automatically, you can also just copy the conan.cmake file\n"
"if(NOT EXISTS \"${CMAKE_BINARY_DIR}/conan.cmake\")\n"
"message(STATUS \"Downloading conan.cmake from https://github.com/conan-io/"
"cmake-conan\")\n"
"    file(DOWNLOAD \"https://raw.githubusercontent.com/conan-io/cmake-conan/"
"v0.9/conan.cmake\"\n"
"                \"${CMAKE_BINARY_DIR}/conan.cmake\")\n"
"endif()\n"
"\n"
"include(${CMAKE_BINARY_DIR}/conan.cmake)\n"
"\n"
"conan_cmake_run(CONANFILE conanfile.txt\n"
"                BASIC_SETUP)\n"
"\n"
"add_executable(example example.cpp)\n"
"target_link_libraries(example ${CONAN_LIBS})"
msgstr ""

#: ../../../howtos/vs2017_cmake.rst:123
msgid ""
"This code will manage to download the **cmake-conan** CMake script, and use "
"it automatically, calling a :command:`conan install` automatically."
msgstr ""

#: ../../../howtos/vs2017_cmake.rst:125
msgid ""
"There could be an issue, though, for the ``Release`` configuration. "
"Internally, the Visual Studio 2017 defines the ``configurationType`` As "
"``RelWithDebInfo`` for ``Release`` builds. But Conan default settings (in "
"the Conan *settings.yml* file), only have ``Debug`` and ``Release`` defined. "
"It is possible to modify the *settings.yml* file, and add those extra build "
"types. Then you should create the ``hello`` package for those settings. And "
"most existing packages, specially in central repositories, are built only "
"for Debug and Release modes."
msgstr ""

#: ../../../howtos/vs2017_cmake.rst:130
msgid ""
"An easier approach is to change the CMake configuration in Visual: go to the "
"Menu -> CMake -> Change CMake Configuration. That should open the "
"*CMakeSettings.json* file, and there you can change the "
"``configurationType`` to ``Release``:"
msgstr ""

#: ../../../howtos/vs2017_cmake.rst:133
msgid ""
" {\n"
"     \"name\": \"x64-Release\",\n"
"     \"generator\": \"Ninja\",\n"
"     \"configurationType\": \"Release\",\n"
"     \"inheritEnvironments\": [ \"msvc_x64_x64\" ],\n"
"     \"buildRoot\": \"${env.USERPROFILE}\\\\CMakeBuilds\\\\${workspaceHash}\\"
"\\build\\\\${name}\",\n"
"     \"installRoot\": \"${env.USERPROFILE}\\\\CMakeBuilds\\\\"
"${workspaceHash}\\\\install\\\\${name}\",\n"
"     \"cmakeCommandArgs\": \"\",\n"
"     \"buildCommandArgs\": \"-v\",\n"
"     \"ctestCommandArgs\": \"\"\n"
" }"
msgstr ""

#: ../../../howtos/vs2017_cmake.rst:148
msgid ""
"Note that the above CMake code is only valid for consuming existing "
"packages. If you are also creating a package, you would need to make sure "
"the right CMake code is executed, please check https://github.com/conan-io/"
"cmake-conan/blob/master/README.md"
msgstr ""

#: ../../../howtos/vs2017_cmake.rst:152
msgid "Using tasks with tasks.vs.json"
msgstr ""

#: ../../../howtos/vs2017_cmake.rst:154
msgid ""
"Another alternative is using file `tasks <https://docs.microsoft.com/en-us/"
"visualstudio/ide/customize-build-and-debug-tasks-in-visual-studio?"
"view=vs-2017>`_ feature of Visual Studio 2017. This way you can install "
"dependencies by running :command:`conan install` as task directly in the IDE."
msgstr ""

#: ../../../howtos/vs2017_cmake.rst:157
msgid ""
"All you need is to right click on your *conanfile.py* -> Configure Tasks "
"(see the `link above <https://docs.microsoft.com/en-us/visualstudio/ide/"
"customize-build-and-debug-tasks-in-visual-studio?view=vs-2017>`_) and add "
"the following to your *tasks.vs.json*."
msgstr ""

#: ../../../howtos/vs2017_cmake.rst:163
msgid ""
"The file *tasks.vs.json* is added to your local *.vs* folder so it is not "
"supposed to be added to your version control system."
msgstr ""

#: ../../../howtos/vs2017_cmake.rst:165
msgid ""
" {\n"
"     \"tasks\": [\n"
"         {\n"
"         \"taskName\": \"conan install debug\",\n"
"         \"appliesTo\": \"conanfile.py\",\n"
"         \"type\": \"launch\",\n"
"         \"command\": \"${env.COMSPEC}\",\n"
"         \"args\": [\n"
"             \"conan install ${file} -s build_type=Debug -if C:/Users/user/"
"CMakeBuilds/4c2d87b9-ec5a-9a30-a47a-32ccb6cca172/build/x64-Debug/\"\n"
"         ]\n"
"         },\n"
"         {\n"
"         \"taskName\": \"conan install release\",\n"
"         \"appliesTo\": \"conanfile.py\",\n"
"         \"type\": \"launch\",\n"
"         \"command\": \"${env.COMSPEC}\",\n"
"         \"args\": [\n"
"             \"conan install ${file} -s build_type=Release -if C:/Users/user/"
"CMakeBuilds/4c2d87b9-ec5a-9a30-a47a-32ccb6cca172/build/x64-Release/\"\n"
"         ]\n"
"         }\n"
"     ],\n"
"     \"version\": \"0.2.1\"\n"
" }"
msgstr ""

#: ../../../howtos/vs2017_cmake.rst:192
msgid ""
"Then just right click on your *conanfile.py* and launch your :command:`conan "
"install` and regenerate your *CMakeLists.txt*."
msgstr ""
