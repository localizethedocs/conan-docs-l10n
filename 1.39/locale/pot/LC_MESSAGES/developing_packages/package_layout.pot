# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2020, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.39\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:19+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../developing_packages/package_layout.rst:4
msgid "Package layout"
msgstr ""

#: ../../../developing_packages/package_layout.rst:8
msgid ""
"This is an **experimental** feature subject to breaking changes in future "
"releases. The ``layout()`` feature will be fully functional only in the new "
"build system integrations (:ref:`in the conan.tools space <conan_tools>`). "
"If you are using other integrations, they might not fully support this "
"feature."
msgstr ""

#: ../../../developing_packages/package_layout.rst:14
msgid "Available since: `1.37.0 <https://github.com/conan-io/conan/releases>`_"
msgstr ""

#: ../../../developing_packages/package_layout.rst:16
msgid ""
"You can declare a ``layout()`` method in the recipe to describe the package "
"contents, not only the final package in the cache but also the package while "
"developing. As the package will have the same structure in the cache and in "
"our local directory, the recipe development becomes easier."
msgstr ""

#: ../../../developing_packages/package_layout.rst:20
msgid "In the ``layout()`` method you can adjust 3 different things:"
msgstr ""

#: ../../../developing_packages/package_layout.rst:22
msgid ""
"``self.folders``: Specify the location of several things, like the sources, "
"the build folder or even the folder where the generators files (e.g the `xx-"
"config.cmake` files from the ``CMakeDeps``) will be created."
msgstr ""

#: ../../../developing_packages/package_layout.rst:25
msgid ""
"``self.patterns``: Describe the file patterns of your **source** and "
"**build** folders. It will ease the process of packaging the files in the "
"``package()`` method."
msgstr ""

#: ../../../developing_packages/package_layout.rst:28
msgid ""
"``self.cpp``: The same you could adjust the ``self.cpp_info`` in the :ref:"
"`package_info()<method_package_info>` for the package in the cache, you can "
"do the same for the `source` and `build` folders while developing the "
"package. This feature enables an easier way to use :ref:`editable "
"packages<editable_packages>`."
msgstr ""

#: ../../../developing_packages/package_layout.rst:34
msgid "self.folders"
msgstr ""

#: ../../../developing_packages/package_layout.rst:36
msgid "**self.folders.source**: To specify a folder where your sources are."
msgstr ""

#: ../../../developing_packages/package_layout.rst:37
msgid ""
"**self.folders.build**: To specify a subfolder where the files from the "
"build are (or will be)."
msgstr ""

#: ../../../developing_packages/package_layout.rst:38
msgid ""
"**self.folders.generators**: To specify a subfolder where to write the files "
"from the generators and the toolchains."
msgstr ""

#: ../../../developing_packages/package_layout.rst:39
msgid ""
"**self.folders.imports**: To specify a subfolder where to write the files "
"copied when using the ``imports(self)`` method in a ``conanfile.py``."
msgstr ""

#: ../../../developing_packages/package_layout.rst:41
msgid ""
"**self.folders.package**: To specify a subfolder where to write the package "
"files when running the :command:`conan package` command."
msgstr ""

#: ../../../developing_packages/package_layout.rst:44
msgid ""
"Check the :ref:`complete reference<layout_folders_reference>` of the folders "
"attribute."
msgstr ""

#: ../../../developing_packages/package_layout.rst:46
msgid ""
"In the following example we are declaring a layout that follows the standard "
"CLion one, where the build directory is ``cmake-build-release`` or ``cmake-"
"build-debug`` depending on the declared ``build_type`` setting. The sources "
"of the project are in the ``src`` folder. Also the generators folders inside "
"the build folder is quite convenient to include the :ref:`conan_toolchain."
"cmake<conan-cmake-toolchain>` file when using the :ref:"
"`CMakeDeps<conan_tools_cmake>` generator because it will be always in the "
"same relative path to the build folder."
msgstr ""

#: ../../../developing_packages/package_layout.rst:52
msgid ""
"<my_project_folder>\n"
"  | - conanfile.py\n"
"  | - src\n"
"      | - CMakeLists.txt\n"
"      | - hello.cpp\n"
"      | - hello.h"
msgstr ""

#: ../../../developing_packages/package_layout.rst:89
msgid ""
"import os\n"
"from conans import ConanFile, CMake\n"
"\n"
"class Pkg(ConanFile):\n"
"\n"
"    settings = \"os\", \"build_type\", \"arch\"\n"
"    requires = \"zlib/1.2.11\"\n"
"    generators = \"CMakeDeps\", \"CMakeToolchain\"\n"
"    exports_sources = \"src*\"\n"
"\n"
"    def layout(self):\n"
"        self.folders.build = \"cmake-build-{}\".format(str(self.settings."
"build_type).lower())\n"
"        self.folders.generators = os.path.join(self.folders.build, "
"\"generators\")\n"
"        self.folders.imports = self.folders.build\n"
"        self.folders.source = \"src\"\n"
"\n"
"    def source(self):\n"
"        # In the source method, the current directory == self.source_folder\n"
"        assert self.source_folder == os.getcwd()\n"
"\n"
"    def build(self):\n"
"        # We are at a folder like \"myproject/cmake-build-debug\"\n"
"        cmake = CMake(self)\n"
"        cmake.configure()\n"
"        cmake.build()"
msgstr ""

#: ../../../developing_packages/package_layout.rst:90
msgid ""
"Given the previous example we can run the conan local methods without taking "
"much care of the directories where the files are or the build files should "
"be:"
msgstr ""

#: ../../../developing_packages/package_layout.rst:106
msgid ""
"# This will write the toolchains and generator files from the dependencies "
"to the ``cmake-build-debug/generators``\n"
"$ conan install . -if=my_install -s build_type=Debug\n"
"\n"
"# In case we needed it, this will fetch the sources to the ./src folder.\n"
"$ conan source . -if=my_install\n"
"\n"
"# This will build the project using the declared source folder and ``cmake-"
"build-debug`` as the build folder\n"
"$ conan build . -if=my_install\n"
"\n"
"# This will import, if declared imports(self) method, the files to the "
"``cmake-build-debug`` folder\n"
"$ conan imports . -if=my_install"
msgstr ""

#: ../../../developing_packages/package_layout.rst:107
msgid ""
"Of course we could open the **Clion IDE** and build from there and the "
"artifacts will be created at the same  ``cmake-build-debug`` folder."
msgstr ""

#: ../../../developing_packages/package_layout.rst:113
msgid ""
"Maybe you are wondering why the **install folder** is not parametrized and "
"has to be specified with the ``-if`` argument. Currently, Conan generates "
"several files like the ``graph_info.json`` and the ``conanbuildinfo.txt`` "
"that are read to restore the configuration saved (settings, options, etc) to "
"be applied in the local commands. That configuration is needed before "
"running the ``layout()`` method because the folders might depend on the "
"settings like in the previous example. It is a kind of a chicken-egg issue. "
"In Conan 2.0, likely, the configuration won't be stored, and the local "
"methods like :command:`conan build .` will compute the graph from arguments "
"(--profile, -s, -o...) and won't need the ``--if`` argument anymore, being "
"always trivial to run."
msgstr ""

#: ../../../developing_packages/package_layout.rst:128
msgid "self.cpp"
msgstr ""

#: ../../../developing_packages/package_layout.rst:130
msgid ""
"The ``layout()`` method allows to declare ``cpp_info`` objects not only for "
"the final package (like the classic approach with the ``self.cpp_info`` in "
"the ``package_info(self)`` method) but for the ``self.source_folder`` and "
"``self.build_folder``. This is useful when a package is in :ref:`editable "
"mode<editable_packages>` to automatically propagate to the consumers all the "
"needed information (library names, include directories...) but pointing to "
"the local project directories while developing, whether you are calling "
"directly your build-system, using an IDE or executing the :command:`conan "
"build` command to build your code."
msgstr ""

#: ../../../developing_packages/package_layout.rst:138
msgid "Example:"
msgstr ""

#: ../../../developing_packages/package_layout.rst:156
msgid ""
"from conans import ConanFile\n"
"\n"
"class Pkg(ConanFile):\n"
"\n"
"    def layout(self):\n"
"\n"
"        self.cpp.source.includedirs = [\"include\"]\n"
"\n"
"        self.cpp.build.libdirs = [\".\"]\n"
"        self.cpp.build.libs = [\"mylib\"]\n"
"        self.cpp.build.includedirs = [\"gen_include\"]\n"
"\n"
"        self.cpp.package.libs = [\"mylib\"]"
msgstr ""

#: ../../../developing_packages/package_layout.rst:157
msgid ""
"The fields of the cpp_info objects at ``self.info.build`` and ``self.info."
"source`` are the same described :ref:`here<cpp_info_attributes_reference>`. "
"Components are also supported."
msgstr ""

#: ../../../developing_packages/package_layout.rst:162
msgid ""
"You can still use the ``package_info(self)`` method. The received `self."
"cpp_info` object will be populated with the information explicitly declared "
"in the ``self.cpp.package`` object, so you can complete it or modify it "
"later."
msgstr ""

#: ../../../developing_packages/package_layout.rst:166
msgid ""
"Once you have your ``self.cpp.source`` and ``self.cpp.build`` objects "
"declared you can put the package in :ref:`editable mode<editable_packages>` "
"and keep working on the code development with your IDE. Other packages "
"depending on this one, will locate the libraries being developed instead of "
"the Conan package in the cache."
msgstr ""

#: ../../../developing_packages/package_layout.rst:175
msgid "$ conan editable add .  hello/1.0"
msgstr ""

#: ../../../developing_packages/package_layout.rst:177
msgid "self.patterns"
msgstr ""

#: ../../../developing_packages/package_layout.rst:179
msgid ""
"You can fill the ``self.patterns.source`` and ``self.patterns.build`` "
"objects describing the patterns of the files that are at the ``self.folders."
"source`` and ``self.folders.build`` to automate the ``package(self)`` method "
"with the **LayoutPackager()** tool (see the :ref:`example "
"below<layout_example>`)."
msgstr ""

#: ../../../developing_packages/package_layout.rst:182
msgid ""
"The defaults are the following but you can customize anything based on the "
"configuration (``self.settings``, ``self.options``...):"
msgstr ""

#: ../../../developing_packages/package_layout.rst:194
msgid ""
"self.patterns.source.include = [\"*.h\", \"*.hpp\", \"*.hxx\"]\n"
"self.patterns.source.lib = []\n"
"self.patterns.source.bin = []\n"
"\n"
"self.patterns.build.include = [\"*.h\", \"*.hpp\", \"*.hxx\"]\n"
"self.patterns.build.lib = [\"*.so\", \"*.so.*\", \"*.a\", \"*.lib\", \"*."
"dylib\"]\n"
"self.patterns.build.bin = [\"*.exe\", \"*.dll\"]"
msgstr ""

#: ../../../developing_packages/package_layout.rst:195
msgid ""
"These are all the fields that can be adjusted, both in ``self.patterns."
"source`` and ``self.patterns.build``:"
msgstr ""

#: ../../../developing_packages/package_layout.rst:198
msgid "NAME"
msgstr ""

#: ../../../developing_packages/package_layout.rst:198
msgid "DESCRIPTION (xxx can be either ``build`` or ``source``)"
msgstr ""

#: ../../../developing_packages/package_layout.rst:200
msgid "include"
msgstr ""

#: ../../../developing_packages/package_layout.rst:200
msgid "Patterns of the files from the folders: ``self.cpp.xxx.includedirs``"
msgstr ""

#: ../../../developing_packages/package_layout.rst:202
msgid "lib"
msgstr ""

#: ../../../developing_packages/package_layout.rst:202
msgid "Patterns of the files from the folders: ``self.cpp.xxx.libdirs``"
msgstr ""

#: ../../../developing_packages/package_layout.rst:204
msgid "bin"
msgstr ""

#: ../../../developing_packages/package_layout.rst:204
msgid "Patterns of the files from the folders: ``self.cpp.xxx.bindirs``"
msgstr ""

#: ../../../developing_packages/package_layout.rst:206
msgid "src"
msgstr ""

#: ../../../developing_packages/package_layout.rst:206
msgid "Patterns of the files from the folders: ``self.cpp.xxx.srcdirs``"
msgstr ""

#: ../../../developing_packages/package_layout.rst:208
msgid "build"
msgstr ""

#: ../../../developing_packages/package_layout.rst:208
msgid "Patterns of the files from the folders: ``self.cpp.xxx.builddirs``"
msgstr ""

#: ../../../developing_packages/package_layout.rst:210
msgid "res"
msgstr ""

#: ../../../developing_packages/package_layout.rst:210
msgid "Patterns of the files from the folders: ``self.cpp.xxx.resdirs``"
msgstr ""

#: ../../../developing_packages/package_layout.rst:212
msgid "framework"
msgstr ""

#: ../../../developing_packages/package_layout.rst:212
msgid "Patterns of the files from the folders: ``self.cpp.xxx.frameworkdirs``"
msgstr ""

#: ../../../developing_packages/package_layout.rst:219
msgid "Example: Everything together"
msgstr ""

#: ../../../developing_packages/package_layout.rst:221
msgid ""
"Let's see how we can use the ``layout()`` method to both write simpler "
"recipes, improve the local methods and the integration with the IDE and "
"develop the package as an :ref:`editable package<editable_packages>`."
msgstr ""

#: ../../../developing_packages/package_layout.rst:224
msgid "This is the project structure:"
msgstr ""

#: ../../../developing_packages/package_layout.rst:226
msgid ""
"<project_folder>\n"
"  | - CMakeLists.txt\n"
"  | - hello.cpp\n"
"  | - include\n"
"      | - hello.h\n"
"  | - res\n"
"      | - myasset.jpg"
msgstr ""

#: ../../../developing_packages/package_layout.rst:236
msgid ""
"We want to use CLion to build the project so we open the project (using both "
"**Release** and **Debug** configurations). After building the project we "
"have this layout:"
msgstr ""

#: ../../../developing_packages/package_layout.rst:239
msgid ""
"<project_folder>\n"
"  | - cmake-build-debug\n"
"      | - CMakeFiles\n"
"      | - ... other CMake stuff...\n"
"      | - libhello.a\n"
"      | - gen.h\n"
"  | - cmake-build-release\n"
"      | - CMakeFiles\n"
"      | - ... other CMake stuff...\n"
"      | - libhello.a\n"
"      | - gen.h\n"
"  | - CMakeLists.txt\n"
"  | - hello.cpp\n"
"  | - include\n"
"      | - hello.h\n"
"  | - res\n"
"      | - myasset.jpeg"
msgstr ""

#: ../../../developing_packages/package_layout.rst:260
msgid "We can write a ``layout()`` method describing it:"
msgstr ""

#: ../../../developing_packages/package_layout.rst:297
msgid ""
"from conans import ConanFile\n"
"from conan.tools.layout import LayoutPackager\n"
"\n"
"class Pkg(ConanFile):\n"
"\n"
"    def layout(self):\n"
"        # ###### FOLDERS\n"
"        # The sources can be found in the root dir\n"
"        self.folders.source = \".\"\n"
"\n"
"        # The build folder is created with the CLion way\n"
"        self.folders.build = \"cmake-build-{}\".format(str(self.settings."
"build_type).lower())\n"
"\n"
"        # We want to have the toolchains in the build folder so we can "
"always pass\n"
"        # `-DCMAKE_TOOLCHAIN_FILE=generators/conan_toolchain.cmake` to "
"CMake\n"
"        self.folders.generators = os.path.join(self.folders.build, "
"\"generators\")\n"
"\n"
"        # In case we use \"conan package\" we declare an output directory\n"
"        self.folders.package = \"package-{}\".format(str(self.settings."
"build_type).lower())\n"
"\n"
"        # ###### INFOS\n"
"        self.cpp.source.includedirs = [\"include\"] # Relative to [\".\"] "
"(self.folders.source)\n"
"        self.cpp.build.libdirs = [\".\"]  # Relative to (self.folders."
"build)\n"
"        self.cpp.build.libs = [\"hello\"]\n"
"        self.cpp.build.includedirs = [\".\"] # Relative to (self.folders."
"build)\n"
"        self.cpp.package.libs = [\"hello\"]\n"
"\n"
"        # ###### PATTERNS\n"
"        self.patterns.source.res = [\"*.jpeg\"] # To package automatically "
"the myasset.jpeg\n"
"\n"
"    def package(self):\n"
"        LayoutPackager(self).package()"
msgstr ""

#: ../../../developing_packages/package_layout.rst:298
msgid ""
"There is no need to declare the ``package_info(self)`` method, we declared "
"the needed information at ``self.cpp.package``."
msgstr ""

#: ../../../developing_packages/package_layout.rst:299
msgid ""
"The ``package(self)`` method is quite simple using the "
"``LayoutPackager(self).package()``"
msgstr ""

#: ../../../developing_packages/package_layout.rst:300
msgid ""
"We can easily put the package in editable mode and keep using the CLion IDE "
"to build the libraries:"
msgstr ""

#: ../../../developing_packages/package_layout.rst:None
msgid "$ conan editable add . hello/1.0"
msgstr ""

#: ../../../developing_packages/package_layout.rst:306
msgid ""
"The packages requiring \"hello/1.0\" will find the headers and libraries in "
"the right CLion output directories automatically."
msgstr ""

#: ../../../developing_packages/package_layout.rst:308
msgid ""
"If we want to verify the that the Conan recipe is totally correct we can use "
"the Conan local methods always with the same syntax:"
msgstr ""

#: ../../../developing_packages/package_layout.rst:None
msgid ""
"$ conan install . -if=my_install\n"
"$ conan imports . -if=my_install\n"
"$ conan build . -if=my_install\n"
"$ conan package . -if=my_install"
msgstr ""

#: ../../../developing_packages/package_layout.rst:317
msgid ""
"The conan commands will follow the same directory layout while building, and "
"the ``conan package`` command will create an additional ``package-release`` "
"folder with the packaged artifacts."
msgstr ""
