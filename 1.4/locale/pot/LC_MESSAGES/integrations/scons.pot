# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2018, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../integrations/scons.rst:5
msgid "|scons_logo| SCons"
msgstr ""

#: ../../../integrations/scons.rst:58
msgid "scons_logo"
msgstr ""

#: ../../../integrations/scons.rst:7
msgid ""
"SCons can be used both to generate and consume conan packages, via the "
"``scons`` generator :ref:`generator <scons_generator>`. The package recipe "
"``build()`` method could be similar to:"
msgstr ""

#: ../../../integrations/scons.rst:10
msgid ""
"class PkgConan(ConanFile):\n"
"    settings = 'os', 'compiler', 'build_type', 'arch'\n"
"    requires = 'Hello/1.0@user/stable'\n"
"    generators = \"scons\"\n"
"\n"
"    ...\n"
"\n"
"    def build(self):\n"
"        debug_opt = '--debug-build' if self.settings.build_type == 'Debug' "
"else ''\n"
"        os.makedirs(\"build\")\n"
"        # FIXME: Compiler, version, arch are hardcoded, not parametrized\n"
"        with tools.chdir(\"build\"):\n"
"            self.run('scons -C {}/src {}'.format(self.source_folder, "
"debug_opt))\n"
"\n"
"    ..."
msgstr ""

#: ../../../integrations/scons.rst:29
msgid ""
"The ``SConscript`` build script can load the generated ``SConscript_conan`` "
"file that contains the information of the dependencies, and use it to build"
msgstr ""

#: ../../../integrations/scons.rst:31
msgid ""
"conan = SConscript('{}/SConscript_conan'."
"format(build_path_relative_to_sconstruct))\n"
"if not conan:\n"
"    print 'File `SConscript_conan` is missing.'\n"
"    print 'It should be generated by running `conan install`.'\n"
"    sys.exit(1)\n"
"\n"
"flags = conan[\"conan\"]\n"
"version = flags.pop(\"VERSION\")\n"
"env.MergeFlags(flags)\n"
"env.Library(\"hello\", \"hello.cpp\")"
msgstr ""

#: ../../../integrations/scons.rst:45
msgid ""
"A complete example, with a ``test_package`` that also uses SCons is in a "
"github repository, you can try it:"
msgstr ""

#: ../../../integrations/scons.rst:47
msgid ""
"$ git clone https://github.com/memsharded/conan-scons-template\n"
"$ cd conan-scons-template\n"
"$ conan create . demo/testing\n"
"> Hello World Release!\n"
"$ conan create . demo/testing -s build_type=Debug\n"
"> Hello World Debug!"
msgstr ""
