# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2018, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../using_packages/conanfile_txt.rst:4
msgid "Installing dependencies"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:6
msgid ""
"In :ref:`Getting started<getting_started>` we used :command:`conan install` "
"command to download the **Poco** library and build an example."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:9
msgid ""
"Please take a moment to inspect the generated ``conanbuildinfo.cmake`` file "
"that was created when we did :command:`conan install`. You can see there "
"that there are many CMake variables declared. For example "
"``CONAN_INCLUDE_DIRS_ZLIB``, which defines the include path to the ZLib "
"headers, or ``CONAN_INCLUDE_DIRS`` that defines include paths for all "
"dependencies headers."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:19
msgid ""
"If you check the full path, you will see that they are pointing to a folder "
"in your ``<userhome>`` folder, this is called the **local cache**. It is the "
"place where package recipes and binary packages are stored and cached, so "
"they don't have to be retrieved again. You can inspect the **local cache** "
"with :command:`conan search`, and you can also remove packages from it with :"
"command:`conan remove` command."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:25
msgid ""
"If you navigate to the paths pointed by the ``conanbuildinfo.cmake`` you "
"will be able to see the headers and the libraries for each package."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:28
msgid ""
"If you execute a :command:`conan install Poco/1.9.0@pocoproject/stable` "
"command in your shell, conan will download the Poco package and its "
"dependencies (*OpenSSL/1.0.2l@conan/stable* and *zlib/1.2.11@conan/stable*) "
"to your local cache and print information about the folder of the where they "
"are installed. You could handle them manually if you want. But the "
"recommended approach is using a ``conanfile.txt``."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:35
msgid "Requires"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:37
msgid ""
"We put the required dependencies in the **[requires]** section. The "
"requirements look like this:"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:40
msgid ""
"[requires]\n"
"Poco/1.9.0@pocoproject/stable"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:45
msgid "Where:"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:47
msgid ""
"``Poco`` is the name of the package, usually the same of the project/library."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:48
msgid ""
"``1.9.0`` is the version, usually matching the one of the packaged project/"
"library. Can be any string, not necessarily a number, so it is possible to "
"have a \"develop\" or \"master\" version. Packages can be overwritten, so it "
"is also OK to have packages like \"nightly\" or \"weekly\", that are "
"regenerated periodically."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:52
msgid ""
"``pocoproject`` is the owner of this package version. It is basically a "
"namespace that allows different users to have their own packages for the "
"same library with the same name, and interchange them. So, for example, you "
"can easily upload a certain library under your own user name \"lasote\", and "
"later those packages can be uploaded without modifications to another "
"official group or company username."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:57
msgid ""
"``stable`` is the channel. Channels also allow to have different packages "
"for the same library and use them interchangeably. They usually denote the "
"maturity of the package, as an arbitrary string: \"stable\", \"testing\", "
"but it can be used for any purpose, like package revisions (the library "
"version has not changed, but the package recipe has evolved)."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:63
msgid "Overriding requirements"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:65
msgid ""
"You can specify multiple requirements and you can **override** the "
"transitive \"require's requirements\". In our example, conan installed the "
"Poco package and all its requirements transitively:"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:69
msgid "**OpenSSL/1.0.2l@conan/stable**"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:70
msgid "**zlib/1.2.11@conan/stable**"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:74
msgid ""
"This is a good example to explain requirements overriding. We all know the "
"importance of keeping the OpenSSL library updated."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:77
msgid ""
"Now imagine that a new release of OpenSSL library is out, and a new conan "
"package for it is available. Do we need to wait until the author "
"`pocoproject`_ generates a new package of POCO that includes the new OpenSSL "
"library?"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:81
msgid "Not necessarily, just enter the new version in **[requires]**:"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:83
msgid ""
"[requires]\n"
"Poco/1.9.0@pocoproject/stable\n"
"OpenSSL/1.0.2p@conan/stable"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:89
msgid ""
"The second line will override the OpenSSL/1.0.2l required by POCO, with the "
"(non-existent yet) **OpenSSL/1.0.2p**."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:92
msgid ""
"Other example could be, in order to try out some new zlib alpha features, we "
"could replace the zlib requirement with one from another user or channel."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:95
msgid ""
"[requires]\n"
"Poco/1.9.0@pocoproject/stable\n"
"OpenSSL/1.0.2p@conan/stable\n"
"zlib/1.2.11@otheruser/alpha"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:105
msgid "Generators"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:107
msgid ""
"Conan reads the **[generators]** section from ``conanfile.txt`` and creates "
"files for each generator with all the necessary information to link your "
"program with the specified requirements. The generated files are usually "
"temporary, created in build folders and not committed to version control, as "
"they have paths to local folder that will not exist in another machine. "
"Also, it is very important to highlight that generated files match the given "
"configuration (Debug/Release, x86/x86_64, etc), specified at :command:`conan "
"install` time. If the configuration changes, the files will change."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:115
msgid "Check the complete :ref:`generators<generators_reference>` reference."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:120
msgid "Options"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:122
msgid ""
"We have already seen that there are some **settings** that can be specified "
"at install time, for example :command:`conan install . -s build_type=Debug`. "
"The settings are typically a project-wide configuration, defined by the "
"client machine. So they cannot have a default value in the recipe. For "
"example, it doesn't make sense for a package recipe to declare as default "
"compiler \"Visual Studio\", because that is something defined by the end "
"consumer, and unlikely to make sense if they are working in Linux."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:129
msgid ""
"On the other hand, **options** are intended for package specific "
"configuration, that can be set to a default value in the recipe. For "
"example, one package can define that its default linkage is static, and such "
"default will be used if consumers don't specify otherwise."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:135
msgid ""
"You can see the available options for a package inspecting the recipe with :"
"command:`conan get <reference>` command:"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:137
msgid "$ conan get Poco/1.9.0@pocoproject/stable"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:141
msgid ""
"As an example, we can modify the previous example to use dynamic linkage "
"instead of the default one, which was static. Just edit the *conanfile.txt*:"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:144
msgid ""
"[requires]\n"
"Poco/1.9.0@pocoproject/stable\n"
"\n"
"[generators]\n"
"cmake\n"
"\n"
"[options]\n"
"Poco:shared=True # PACKAGE:OPTION=VALUE\n"
"OpenSSL:shared=True"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:156
msgid ""
"Install the requirements and compile from the build folder (change the CMake "
"generator if not in Windows):"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:158
msgid ""
"$ conan install ..\n"
"$ cmake .. -G \"Visual Studio 14 Win64\"\n"
"$ cmake --build . --config Release"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:164
msgid ""
"You can also avoid defining the options in the ``conanfile.txt`` and "
"directly define them in the command line:"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:167
msgid ""
"$ conan install .. -o Poco:shared=True -o OpenSSL:shared=True\n"
"# or even with wildcards, to apply to many packages\n"
"$ conan install .. -o *:shared=True"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:173
msgid ""
"Conan will install the shared library packages binaries, and the example "
"will link with them. You can again inspect the different installed binaries, "
"e.g. :command:`conan search zlib/1.2.8@lasote/stable`."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:176
msgid "Finally, launch the executable:"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:178
msgid "$ ./bin/timer"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:182
msgid ""
"What happened? It fails because it can't find the shared libraries in the "
"path. Remember that shared libraries are used at runtime, and should be "
"locatable by the OS, which is the one running the application."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:186
msgid ""
"We could inspect the generated executable, and see that it is using the "
"shared libraries. For example in Linux, we could use the `objdump` tool and "
"see in *Dynamic section*:"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:189
msgid ""
"$ cd bin\n"
"$ objdump -p timer\n"
"...\n"
"Dynamic Section:\n"
" NEEDED               libPocoUtil.so.31\n"
" NEEDED               libPocoXML.so.31\n"
" NEEDED               libPocoJSON.so.31\n"
" NEEDED               libPocoMongoDB.so.31\n"
" NEEDED               libPocoNet.so.31\n"
" NEEDED               libPocoCrypto.so.31\n"
" NEEDED               libPocoData.so.31\n"
" NEEDED               libPocoDataSQLite.so.31\n"
" NEEDED               libPocoZip.so.31\n"
" NEEDED               libPocoFoundation.so.31\n"
" NEEDED               libpthread.so.0\n"
" NEEDED               libdl.so.2\n"
" NEEDED               librt.so.1\n"
" NEEDED               libssl.so.1.0.0\n"
" NEEDED               libcrypto.so.1.0.0\n"
" NEEDED               libstdc++.so.6\n"
" NEEDED               libm.so.6\n"
" NEEDED               libgcc_s.so.1\n"
" NEEDED               libc.so.6"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:218
msgid "Imports"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:220
msgid ""
"There are some differences between shared libraries on linux (\\*.so), "
"windows (\\*.dll) and MacOS (\\*.dylib). The shared libraries must be "
"located in some folder where they can be found, either by the linker, or by "
"the OS runtime."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:224
msgid ""
"It is possible to add the folders of the libraries to the path (dynamic "
"linker LD_LIBRARY_PATH path in Linux, DYLD_LIBRARY_PATH in OSX, or system "
"PATH in Windows), or copy those shared libraries to some system folder, so "
"they are found by the OS. But those are typical operations of deploys or "
"final installation of apps, not desired while developing, and conan is "
"intended for developers, so it tries not to mess with the OS."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:230
msgid ""
"In Windows and OSX, the simplest approach is just to copy the shared "
"libraries to the executable folder, so they are found by the executable, "
"without having to modify the path."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:233
msgid ""
"We can easily do that with the **[imports]** section in ``conanfile.txt``. "
"Let's try it."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:235
msgid ""
"Edit the ``conanfile.txt`` file and paste the following **[imports]** "
"section:"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:237
msgid ""
"[requires]\n"
"Poco/1.9.0@pocoproject/stable\n"
"\n"
"[generators]\n"
"cmake\n"
"\n"
"[options]\n"
"Poco:shared=True\n"
"OpenSSL:shared=True\n"
"\n"
"[imports]\n"
"bin, *.dll -> ./bin # Copies all dll files from packages bin folder to my "
"\"bin\" folder\n"
"lib, *.dylib* -> ./bin # Copies all dylib files from packages lib folder to "
"my \"bin\" folder"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:255
msgid ""
"You can explore the package folder in your local cache (~/.conan/data) and "
"look where the shared libraries are. It is common that **\\*.dll** are "
"copied in **/bin** the rest of the libraries should be found in the **/lib** "
"folder. But it's just a convention, different layouts are possible."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:260
msgid ""
"Install the requirements (from the ``mytimer/build`` folder), and run the "
"binary again:"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:262
msgid ""
"$ conan install ..\n"
"$ ./bin/timer"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:267
msgid ""
"Now look at the ``mytimer/build/bin`` folder and verify that the needed "
"shared libraries are there."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:269
msgid ""
"As you can see, the **[imports]** section is a very generic way to import "
"files from your requirements to your project."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:272
msgid ""
"This method can be used for packaging applications and copying the result "
"executables to your bin folder, or for copying assets, images, sounds, test "
"static files, etc. Conan is a generic solution for package management, not "
"only (but focused in) for C/C++ or libraries."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:278
msgid ""
"Check the section :ref:`Howtos/Manage shared libraries<manage_shared>` to "
"know more about working with shared libraries."
msgstr ""
