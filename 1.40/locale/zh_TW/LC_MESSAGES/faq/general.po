# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2020, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.40\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../faq/general.rst:2
msgid "General"
msgstr ""

#: ../../../faq/general.rst:5
msgid "Is Conan CMake based, or is CMake a requirement?"
msgstr ""

#: ../../../faq/general.rst:6
msgid ""
"No. It isn't. Conan is build-system agnostic. Package creators could very "
"well use cmake to create their packages, but you will only need it if you "
"want to build packages from source, or if there are no available precompiled "
"packages for your system/settings. We use CMake extensively in our examples "
"and documentation, but only because it is very convenient and most C/C++ "
"devs are familiar with it."
msgstr ""

#: ../../../faq/general.rst:13
msgid "Is build-system XXXXX supported?"
msgstr ""

#: ../../../faq/general.rst:14
msgid ""
"Yes. It is. Conan makes no assumption about the build system. It just wraps "
"any build commands specified by the package creators. There are already some "
"helper methods in code to ease the use of CMake, but similar functions can "
"be very easily added for your favorite build system. Please check out the "
"alternatives explained in :ref:`generator packages <dyn_generators>`"
msgstr ""

#: ../../../faq/general.rst:20
msgid "Is my compiler, version, architecture, or setting supported?"
msgstr ""

#: ../../../faq/general.rst:21
msgid ""
"Yes. Conan is very general, and does not restrict any configuration at all. "
"However, Conan comes with some compilers, versions, architectures, ..., etc. "
"pre-configured in the ``~/.conan/settings.yml`` file, and you can get an "
"error if using settings not present in that file. Go to :ref:`invalid "
"settings<error_invalid_setting>` to learn more about it, or see the section :"
"ref:`custom_settings`."
msgstr ""

#: ../../../faq/general.rst:28
msgid "Does it run offline?"
msgstr ""

#: ../../../faq/general.rst:29
msgid ""
"Yes. It runs offline very well. Package recipes and binary packages are "
"stored in your machine, per user, and so you can start new projects that "
"depend on the same libraries without any Internet connection at all. "
"Packages can be fully created, tested and consumed locally, without needing "
"to upload them anywhere."
msgstr ""

#: ../../../faq/general.rst:34
msgid "Is it possible to install 2 different versions of the same library?"
msgstr ""

#: ../../../faq/general.rst:35
msgid ""
"Yes. You can install as many different versions of the same library as you "
"need, and easily switch among them in the same project, or have different "
"projects use different versions simultaneously, and without having to "
"install/uninstall or re-build any of them."
msgstr ""

#: ../../../faq/general.rst:39
msgid ""
"Package binaries are stored per user in (e.g.) ``~/.conan/data/Boost/1.59/"
"user/stable/package/{sha_0, sha_1, sha_2...}`` with a different SHA "
"signature for every different configuration (debug, release, 32-bit, 64-bit, "
"compiler...). Packages are managed per user, but additionally differentiated "
"by version and channel, and also by their configuration. So large packages, "
"like Boost, don't have to be compiled or downloaded for every project."
msgstr ""

#: ../../../faq/general.rst:45
msgid ""
"Can I run multiple Conan isolated instances (virtual environments) on the "
"same machine?"
msgstr ""

#: ../../../faq/general.rst:46
msgid ""
"Yes, Conan supports the concept of virtual environments; so it manages all "
"the information (packages, remotes, user credentials, ..., etc.) in "
"different, isolated environments. Check :ref:`virtual "
"environments<custom_cache>` for more details."
msgstr ""

#: ../../../faq/general.rst:51
msgid ""
"Can I run the conan_server or Artifactory behind a firewall (on-premises)?"
msgstr ""

#: ../../../faq/general.rst:52
msgid ""
"Yes. Conan does not require a connection to conan.io site or any other "
"external service at all for its operation. You can install packages from the "
"ConanCenter repository if you want, test them, and only after approval, "
"upload them to your on-premises server and forget about the original "
"repository. Or you can just get the package recipes, re-build from source on "
"your premises, and then upload the packages to your server."
msgstr ""

#: ../../../faq/general.rst:59
msgid "Can I connect to Conan remote servers through a corporate proxy?"
msgstr ""

#: ../../../faq/general.rst:60
msgid ""
"Yes, it can be configured in your **~/.conan/conan.conf** configuration file "
"or with some environment variables. Check :ref:`proxy configuration "
"<proxys>` for more details."
msgstr ""

#: ../../../faq/general.rst:65
msgid "Can I create packages for third-party libraries?"
msgstr ""

#: ../../../faq/general.rst:66
msgid "Of course, as long as their license allows it."
msgstr ""

#: ../../../faq/general.rst:69
msgid "Can I upload closed source libraries to ConanCenter?"
msgstr ""

#: ../../../faq/general.rst:70
msgid ""
"No. ConanCenter (https://conan.io/center/) is for Open Source packages only. "
"Binaries in ConanCenter are created by our build service from recipes in "
"https://github.com/conan-io/conan-center-index. Read how to contribute to "
"ConanCenter in https://github.com/conan-io/conan-center-index/wiki"
msgstr ""

#: ../../../faq/general.rst:75
msgid "Do I always need to specify how to build the package from source?"
msgstr ""

#: ../../../faq/general.rst:76
msgid ""
"No. But it is highly recommended. If you want, you can just directly start "
"with the binaries, build elsewhere, and upload them directly. Maybe your "
"``build()`` step can download pre-compiled binaries from another source and "
"unzip them, instead of actually compiling from sources. You can also use "
"the :ref:`conan export-pkg<conan_export-pkg>`  command to create packages "
"from existing binaries."
msgstr ""

#: ../../../faq/general.rst:82
msgid "Does Conan use semantic versioning (semver) for dependencies?"
msgstr ""

#: ../../../faq/general.rst:83
msgid ""
"It uses a convention by which package dependencies follow semver by default; "
"thus it intelligently avoids recompilation/repackaging if you update "
"upstream minor versions, but will correctly do so if you update major "
"versions upstream. This behavior can be easily configured and changed in the "
"``package_id()`` method of your conanfile, and any versioning scheme you "
"desire is supported."
msgstr ""
