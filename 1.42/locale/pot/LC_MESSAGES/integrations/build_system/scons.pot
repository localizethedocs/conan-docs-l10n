# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2021, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.42\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:05+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../integrations/build_system/scons.rst:4
msgid "|scons_logo| SCons"
msgstr ""

#: ../../../integrations/build_system/scons.rst:6
msgid ""
"SCons can be used both to generate and consume Conan packages via the :ref:"
"`scons_generator` generator. The package recipe ``build()`` method could be "
"similar to:"
msgstr ""

#: ../../../integrations/build_system/scons.rst:9
msgid ""
"class PkgConan(ConanFile):\n"
"    settings = 'os', 'compiler', 'build_type', 'arch'\n"
"    requires = 'hello/1.0@user/stable'\n"
"    generators = \"scons\"\n"
"    ...\n"
"\n"
"    def build(self):\n"
"        debug_opts = ['--debug-build'] if self.settings.build_type == "
"'Debug' else []\n"
"        os.makedirs(\"build\")\n"
"        # FIXME: Compiler, version, arch are hardcoded, not parametrized\n"
"        with tools.chdir(\"build\"):\n"
"            self.run(['scons', '-C', '{}/src'.format(self.source_folder)] + "
"debug_opts)\n"
"\n"
"    ..."
msgstr ""

#: ../../../integrations/build_system/scons.rst:27
msgid ""
"The ``SConscript`` build script can load the generated ``SConscript_conan`` "
"file that contains the information of the dependencies, and use it to build"
msgstr ""

#: ../../../integrations/build_system/scons.rst:30
msgid ""
"conan = SConscript('{}/SConscript_conan'."
"format(build_path_relative_to_sconstruct))\n"
"if not conan:\n"
"    print(\"File `SConscript_conan` is missing.\")\n"
"    print(\"It should be generated by running `conan install`.\")\n"
"    sys.exit(1)\n"
"\n"
"flags = conan[\"conan\"]\n"
"version = flags.pop(\"VERSION\")\n"
"env.MergeFlags(flags)\n"
"env.Library(\"hello\", \"hello.cpp\")"
msgstr ""

#: ../../../integrations/build_system/scons.rst:43
msgid ""
"A complete example with a *test_package* that uses SCons too is available in "
"the following GitHub repository. Give it a try!"
msgstr ""

#: ../../../integrations/build_system/scons.rst:46
msgid ""
"$ git clone https://github.com/memsharded/conan-scons-template\n"
"$ cd conan-scons-template\n"
"$ conan create . demo/testing\n"
"> Hello World Release!\n"
"$ conan create . demo/testing -s build_type=Debug\n"
"> Hello World Debug!"
msgstr ""
