# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2021, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.43\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:18+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/commands/creator/test.rst:5
msgid "conan test"
msgstr ""

#: ../../../reference/commands/creator/test.rst:7
msgid ""
"$ conan test [-h] [-tbf TEST_BUILD_FOLDER] [-b [BUILD]] [-r REMOTE] [-u]\n"
"             [-l LOCKFILE] [--lockfile-out LOCKFILE_OUT] [-e ENV_HOST]\n"
"             [-e:b ENV_BUILD] [-e:h ENV_HOST] [-o OPTIONS_HOST]\n"
"             [-o:b OPTIONS_BUILD] [-o:h OPTIONS_HOST] [-pr PROFILE_HOST]\n"
"             [-pr:b PROFILE_BUILD] [-pr:h PROFILE_HOST]\n"
"             [-s SETTINGS_HOST] [-s:b SETTINGS_BUILD] [-s:h SETTINGS_HOST]\n"
"             [-c CONF_HOST] [-c:b CONF_BUILD] [-c:h CONF_HOST]\n"
"             path reference"
msgstr ""

#: ../../../reference/commands/creator/test.rst:18
msgid "Tests a package consuming it from a conanfile.py with a test() method."
msgstr ""

#: ../../../reference/commands/creator/test.rst:20
msgid ""
"This command installs the conanfile dependencies (including the tested "
"package), calls a 'conan build' to build test apps and finally executes the "
"test() method. The testing recipe does not require name or version, neither "
"definition of package() or package_info() methods. The package to be tested "
"must exist in the local cache or any configured remote."
msgstr ""

#: ../../../reference/commands/creator/test.rst:26
msgid ""
"positional arguments:\n"
"  path                  Path to the \"testing\" folder containing a "
"conanfile.py\n"
"                        or to a recipe file with test() method e.g. conan\n"
"                        test_package/conanfile.py pkg/version@user/channel\n"
"  reference             pkg/version@user/channel of the package to be "
"tested\n"
"\n"
"optional arguments:\n"
"  -h, --help            show this help message and exit\n"
"  -tbf TEST_BUILD_FOLDER, --test-build-folder TEST_BUILD_FOLDER\n"
"                        Working directory of the build process.\n"
"  -b [BUILD], --build [BUILD]\n"
"                        Optional, specify which packages to build from "
"source.\n"
"                        Combining multiple '--build' options on one command\n"
"                        line is allowed. For dependencies, the optional\n"
"                        'build_policy' attribute in their conanfile.py "
"takes\n"
"                        precedence over the command line parameter. "
"Possible\n"
"                        parameters: --build Force build for all packages, "
"do\n"
"                        not use binary packages. --build=never Disallow "
"build\n"
"                        for all packages, use binary packages or fail if a\n"
"                        binary package is not found. Cannot be combined "
"with\n"
"                        other '--build' options. --build=missing Build\n"
"                        packages from source whose binary package is not\n"
"                        found. --build=outdated Build packages from source\n"
"                        whose binary package was not generated from the "
"latest\n"
"                        recipe or is not found. --build=cascade Build "
"packages\n"
"                        from source that have at least one dependency being\n"
"                        built from source. --build=[pattern] Build packages\n"
"                        from source whose package reference matches the\n"
"                        pattern. The pattern uses 'fnmatch' style "
"wildcards.\n"
"                        --build=![pattern] Excluded packages, which will "
"not\n"
"                        be built from the source, whose package reference\n"
"                        matches the pattern. The pattern uses 'fnmatch' "
"style\n"
"                        wildcards. Default behavior: If you omit the '--"
"build'\n"
"                        option, the 'build_policy' attribute in conanfile."
"py\n"
"                        will be used if it exists, otherwise the behavior "
"is\n"
"                        like '--build=never'.\n"
"  -r REMOTE, --remote REMOTE\n"
"                        Look in the specified remote server\n"
"  -u, --update          Will check the remote and in case a newer version\n"
"                        and/or revision of the dependencies exists there, "
"it\n"
"                        will install those in the local cache. When using\n"
"                        version ranges, it will install the latest version\n"
"                        that satisfies the range. Also, if using revisions, "
"it\n"
"                        will update to the latest revision for the resolved\n"
"                        version range.\n"
"  -l LOCKFILE, --lockfile LOCKFILE\n"
"                        Path to a lockfile\n"
"  --lockfile-out LOCKFILE_OUT\n"
"                        Filename of the updated lockfile\n"
"  -e ENV_HOST, --env ENV_HOST\n"
"                        Environment variables that will be set during the\n"
"                        package build (host machine). e.g.: -e\n"
"                        CXX=/usr/bin/clang++\n"
"  -e:b ENV_BUILD, --env:build ENV_BUILD\n"
"                        Environment variables that will be set during the\n"
"                        package build (build machine). e.g.: -e:b\n"
"                        CXX=/usr/bin/clang++\n"
"  -e:h ENV_HOST, --env:host ENV_HOST\n"
"                        Environment variables that will be set during the\n"
"                        package build (host machine). e.g.: -e:h\n"
"                        CXX=/usr/bin/clang++\n"
"  -o OPTIONS_HOST, --options OPTIONS_HOST\n"
"                        Define options values (host machine), e.g.: -o\n"
"                        Pkg:with_qt=true\n"
"  -o:b OPTIONS_BUILD, --options:build OPTIONS_BUILD\n"
"                        Define options values (build machine), e.g.: -o:b\n"
"                        Pkg:with_qt=true\n"
"  -o:h OPTIONS_HOST, --options:host OPTIONS_HOST\n"
"                        Define options values (host machine), e.g.: -o:h\n"
"                        Pkg:with_qt=true\n"
"  -pr PROFILE_HOST, --profile PROFILE_HOST\n"
"                        Apply the specified profile to the host machine\n"
"  -pr:b PROFILE_BUILD, --profile:build PROFILE_BUILD\n"
"                        Apply the specified profile to the build machine\n"
"  -pr:h PROFILE_HOST, --profile:host PROFILE_HOST\n"
"                        Apply the specified profile to the host machine\n"
"  -s SETTINGS_HOST, --settings SETTINGS_HOST\n"
"                        Settings to build the package, overwriting the\n"
"                        defaults (host machine). e.g.: -s compiler=gcc\n"
"  -s:b SETTINGS_BUILD, --settings:build SETTINGS_BUILD\n"
"                        Settings to build the package, overwriting the\n"
"                        defaults (build machine). e.g.: -s:b compiler=gcc\n"
"  -s:h SETTINGS_HOST, --settings:host SETTINGS_HOST\n"
"                        Settings to build the package, overwriting the\n"
"                        defaults (host machine). e.g.: -s:h compiler=gcc\n"
"  -c CONF_HOST, --conf CONF_HOST\n"
"                        Configuration to build the package, overwriting the "
"defaults (host machine). e.g.: -c\n"
"                        tools.cmake.cmaketoolchain:generator=Xcode\n"
"  -c:b CONF_BUILD, --conf:build CONF_BUILD\n"
"                        Configuration to build the package, overwriting the "
"defaults (build machine). e.g.: -c:b\n"
"                        tools.cmake.cmaketoolchain:generator=Xcode\n"
"  -c:h CONF_HOST, --conf:host CONF_HOST\n"
"                        Configuration to build the package, overwriting the "
"defaults (host machine). e.g.: -c:h\n"
"                        tools.cmake.cmaketoolchain:generator=Xcode"
msgstr ""

#: ../../../reference/commands/creator/test.rst:125
msgid ""
"This command is useful for testing existing packages, that have been "
"previously built (with :command:`conan create`, for example). :command:"
"`conan create` will automatically run this test if a *test_package* folder "
"is found besides the *conanfile.py*, or if the :command:`--test-folder` "
"argument is provided to :command:`conan create`."
msgstr ""

#: ../../../reference/commands/creator/test.rst:129
msgid "**Example**:"
msgstr ""

#: ../../../reference/commands/creator/test.rst:131
msgid ""
"$ conan new hello/0.1 -s -t\n"
"$ mv test_package test_package2\n"
"$ conan create . user/testing\n"
"# doesn't automatically run test, it has been renamed\n"
"# now run test\n"
"$ conan test test_package2 hello/0.1@user/testing"
msgstr ""

#: ../../../reference/commands/creator/test.rst:140
msgid ""
"The test package folder, could be elsewhere, or could be even applied to "
"different versions of the package."
msgstr ""
