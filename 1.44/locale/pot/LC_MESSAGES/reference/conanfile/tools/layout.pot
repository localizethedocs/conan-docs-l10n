# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2022, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.44\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/conanfile/tools/layout.rst:4
msgid "conan.tools.layout"
msgstr ""

#: ../../../reference/conanfile/tools/layout.rst:8
msgid ""
"This is an **experimental** feature subject to breaking changes in future "
"releases. The ``layout()`` feature will be fully functional only in the new "
"build system integrations (:ref:`in the conan.tools space <conan_tools>`). "
"If you are using other integrations, they might not fully support this "
"feature."
msgstr ""

#: ../../../reference/conanfile/tools/layout.rst:16
msgid "Predefined layouts"
msgstr ""

#: ../../../reference/conanfile/tools/layout.rst:18
msgid ""
"There are some pre-defined common layouts, ready to be simply used in "
"recipes."
msgstr ""

#: ../../../reference/conanfile/tools/layout.rst:20
msgid "For example, this would implement the standard CMake project layout:"
msgstr ""

#: ../../../reference/conanfile/tools/layout.rst:28
msgid ""
"from conan.tools.layout import cmake_layout\n"
"\n"
"def layout(self):\n"
"    cmake_layout(self)"
msgstr ""

#: ../../../reference/conanfile/tools/layout.rst:29
msgid ""
"If you want to try it, use the ``conan new hello/0.1 --template=cmake_lib`` "
"template."
msgstr ""

#: ../../../reference/conanfile/tools/layout.rst:31
msgid ""
"It is very important to note that this ``cmake_layout()`` is just calling "
"the ``folders`` and ``cpp`` attributes described before:"
msgstr ""

#: ../../../reference/conanfile/tools/layout.rst:63
msgid ""
"def cmake_layout(conanfile, generator=None):\n"
"    gen = conanfile.conf[\"tools.cmake.cmaketoolchain:generator\"] or "
"generator\n"
"    if gen:\n"
"        multi = \"Visual\" in gen or \"Xcode\" in gen or \"Multi-Config\" in "
"gen\n"
"    elif conanfile.settings.compiler == \"Visual Studio\" or conanfile."
"settings.compiler == \"msvc\":\n"
"        multi = True\n"
"    else:\n"
"        multi = False\n"
"\n"
"    conanfile.folders.source = \".\"\n"
"    if multi:\n"
"        conanfile.folders.build = \"build\"\n"
"        conanfile.folders.generators = \"build/conan\"\n"
"    else:\n"
"        build_type = str(conanfile.settings.build_type).lower()\n"
"        conanfile.folders.build = \"cmake-build-{}\".format(build_type)\n"
"        conanfile.folders.generators = os.path.join(conanfile.folders.build, "
"\"conan\")\n"
"\n"
"    conanfile.cpp.local.includedirs = [\"src\"]\n"
"    if multi:\n"
"        _dir = os.path.join(conanfile.folders.build, str(conanfile.settings."
"build_type))\n"
"        conanfile.cpp.local.libdirs = [_dir]\n"
"        conanfile.cpp.local.bindirs = [_dir]\n"
"    else:\n"
"        conanfile.cpp.local.libdirs = [conanfile.folders.build]\n"
"        conanfile.cpp.local.bindirs = [conanfile.folders.build]"
msgstr ""

#: ../../../reference/conanfile/tools/layout.rst:64
msgid ""
"First, it is important to notice that the layout depends on the CMake "
"generator that will be used. So if defined from ``[conf]``, that value will "
"be used. If defined in recipe, then the recipe should pass it as "
"``cmake_layout(self, cmake_generator)``."
msgstr ""

#: ../../../reference/conanfile/tools/layout.rst:68
msgid ""
"The definitions of the folders is different if it is a multi-config "
"generator (like Visual Studio or Xcode), or a single-config generator (like "
"Unix Makefiles). In the first case, the folder is the same irrespective of "
"the build type, and the build system will manage the different build types "
"inside that folder. But single-config generators like Unix Makefiles, must "
"use a different folder for each different configuration (as a different "
"build_type Release/Debug)."
msgstr ""

#: ../../../reference/conanfile/tools/layout.rst:74
msgid ""
"Finally, the location where the libraries are created also depends. For "
"multi-config, the respective libraries will be located in a dedicated folder "
"inside the build folder, while for single-config, the libraries will be "
"located directly in the build folder."
msgstr ""

#: ../../../reference/conanfile/tools/layout.rst:78
msgid ""
"This helper defines a few things, for example that the source folder is "
"called ``\".\"``, meaning that Conan will expect the sources in the same "
"directory were the conanfile is (most likely the project root). This could "
"be customized without fully changing the layout:"
msgstr ""

#: ../../../reference/conanfile/tools/layout.rst:89
msgid ""
"def layout(self):\n"
"    cmake_layout(self)\n"
"    self.folders.source = \"mysrcfolder\""
msgstr ""

#: ../../../reference/conanfile/tools/layout.rst:90
msgid ""
"Even if this pre-defined layout doesn't suit your specific projects layout, "
"it is a good example how you could implement your own logic (and probably "
"put it in a common ``python_require`` if you are going to use it in multiple "
"packages)."
msgstr ""
