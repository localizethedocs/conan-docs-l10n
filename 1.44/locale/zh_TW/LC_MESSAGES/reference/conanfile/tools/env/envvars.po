# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2022, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.44\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/conanfile/tools/env/envvars.rst:2
msgid "EnvVars"
msgstr ""

#: ../../../reference/conanfile/tools/env/envvars.rst:6
msgid ""
"This is a **very experimental** feature and it will have breaking changes in "
"future releases."
msgstr ""

#: ../../../reference/conanfile/tools/env/envvars.rst:9
msgid ""
"``EnvVars`` is a class that represents an instance of environment variables "
"for a given system. It is obtained from the generic ``Environment`` class."
msgstr ""

#: ../../../reference/conanfile/tools/env/envvars.rst:12
msgid ""
"This class is used by other tools like the :ref:`conan.tools."
"gnu<conan_tools_gnu>` autotools helpers and the :ref:"
"`VirtualBuildEnv<conan_tools_env_virtualbuildenv>` and :ref:"
"`VirtualRunEnv<conan_tools_env_virtualrunenv>` generator."
msgstr ""

#: ../../../reference/conanfile/tools/env/envvars.rst:18
msgid "Creating launcher files"
msgstr ""

#: ../../../reference/conanfile/tools/env/envvars.rst:20
msgid "``EnvVars`` object can generate launcher (shell or bat scripts) files:"
msgstr ""

#: ../../../reference/conanfile/tools/env/envvars.rst:30
msgid ""
"def generate(self):\n"
"    env1 = Environment(self)\n"
"    env1.define(\"foo\", \"var\")\n"
"    envvars = env1.vars(self)\n"
"    env1.save_script(\"my_launcher\")"
msgstr ""

#: ../../../reference/conanfile/tools/env/envvars.rst:31
msgid ""
"Although it potentially could be used in other methods, this functionality "
"is intended to work in the ``generate()`` method."
msgstr ""

#: ../../../reference/conanfile/tools/env/envvars.rst:34
msgid ""
"It will generate automatically a ``my_launcher.bat`` for Windows systems or "
"``my_launcher.sh`` otherwise."
msgstr ""

#: ../../../reference/conanfile/tools/env/envvars.rst:36
msgid ""
"Also, by default, Conan will automatically append that launcher file path to "
"a list that will be used to create a ``conanbuild.bat|sh`` file aggregating "
"all the launchers in order. The ``conanbuild.sh/bat`` launcher will be "
"created after the execution of the ``generate()`` method."
msgstr ""

#: ../../../reference/conanfile/tools/env/envvars.rst:40
msgid ""
"The ``conanbuild.bat/sh`` launcher will be executed by default before "
"calling every ``self.run()`` command. This would be typically done in the "
"``build()`` method."
msgstr ""

#: ../../../reference/conanfile/tools/env/envvars.rst:43
msgid "You can change the default launcher with the ``env`` argument:"
msgstr ""

#: ../../../reference/conanfile/tools/env/envvars.rst:52
msgid ""
"...\n"
"def build(self):\n"
"    # This will automatically wrap the \"foo\" command with the correct "
"launcher:\n"
"    # my_launcher.sh && foo\n"
"    self.run(\"foo\", env=[\"my_launcher\"])"
msgstr ""

#: ../../../reference/conanfile/tools/env/envvars.rst:53
msgid ""
"The ``scope`` argument (``\"build\"`` by default) can be used to define "
"different scope of environment files, to aggregate them separately. For "
"example, using a ``scope=\"run\"``, like the ``VirtualRunEnv`` generator "
"does, will aggregate and create a ``conanrun.bat|sh`` script:"
msgstr ""

#: ../../../reference/conanfile/tools/env/envvars.rst:66
msgid ""
"def generate(self):\n"
"    env1 = Environment(self)\n"
"    env1.define(\"foo\", \"var\")\n"
"    envvars = env1.vars(self, scope=\"run\")\n"
"    # Will append \"my_launcher\" to \"conanrun.bat|sh\"\n"
"    envvars.save_script(\"my_launcher\")"
msgstr ""

#: ../../../reference/conanfile/tools/env/envvars.rst:67
msgid ""
"You can also use ``scope=None`` argument to avoid appending the script to "
"the aggregated ``conanbuild.bat|sh``:"
msgstr ""

#: ../../../reference/conanfile/tools/env/envvars.rst:78
msgid ""
"env1 = Environment(self)\n"
"env1.define(\"foo\", \"var\")\n"
"# Will not append \"my_launcher\" to \"conanbuild.bat|sh\"\n"
"envvars = env1.vars(self, scope=None)\n"
"envvars.save_script(\"my_launcher\")"
msgstr ""

#: ../../../reference/conanfile/tools/env/envvars.rst:80
msgid "Applying the environment variables"
msgstr ""

#: ../../../reference/conanfile/tools/env/envvars.rst:82
msgid ""
"As an alternative to a launcher, environments can be applied in the python "
"environment, but the usage of the launchers is recommended if possible:"
msgstr ""

#: ../../../reference/conanfile/tools/env/envvars.rst:95
msgid ""
"from conan.tools.env import Environment\n"
"\n"
"env1 = Environment(self)\n"
"env1.define(\"foo\", \"var\")\n"
"envvars = env1.vars(self)\n"
"with envvars.apply():\n"
"   # Here os.getenv(\"foo\") == \"var\"\n"
"   ..."
msgstr ""

#: ../../../reference/conanfile/tools/env/envvars.rst:97
msgid "Iterating the variables"
msgstr ""

#: ../../../reference/conanfile/tools/env/envvars.rst:99
msgid "You can iterate an ``EnvVars`` object like this:"
msgstr ""

#: ../../../reference/conanfile/tools/env/envvars.rst:109
msgid ""
"env1 = Environment()\n"
"env1.append(\"foo\", \"var\")\n"
"env1.append(\"foo\", \"var2\")\n"
"envvars = env1.vars(self)\n"
"for name, value in envvars.items():\n"
"    assert name == \"foo\":\n"
"    assert value == \"var var2\""
msgstr ""
