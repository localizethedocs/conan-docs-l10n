# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2022, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.45\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:12+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../conan_v2.rst:4
msgid "Conan migration guide to 2.0"
msgstr ""

#: ../../../conan_v2.rst:6
msgid ""
"Conan team is working hard on the next major release. We've been gathering "
"feedback from the community about our features and we think it's time to "
"break some default behaviors, clean the codebase and add space for new "
"developments. Development is ongoing and the `Conan 2.0 Tribe <https://conan."
"io/tribe.html>`_ is having discussions about it."
msgstr ""

#: ../../../conan_v2.rst:11
msgid ""
"Conan 2.0-alpha `is already released <https://pypi.org/project/conan/"
"#history>`_  and can be installed from PyPI doing:"
msgstr ""

#: ../../../conan_v2.rst:14
msgid "$ pip install conan==2.0.0-alpha3"
msgstr ""

#: ../../../conan_v2.rst:18
msgid ""
"The documentation for 2.0 is still far from being complete, but we are "
"working on it and you can access it `with the right version label <https://"
"docs.conan.io/en/2.0-alpha/index.html>`_."
msgstr ""

#: ../../../conan_v2.rst:23
msgid ""
"This section summarizes some of the necessary changes during Conan 1.X to be "
"ready to upgrade to Conan 2.0:"
msgstr ""

#: ../../../conan_v2.rst:26
msgid "Update the syntax of your Conanfile"
msgstr ""

#: ../../../conan_v2.rst:28
msgid ""
"Use the ``from conan import ConanFile`` import instead of the legacy ``from "
"conans ...`` (note the plural)"
msgstr ""

#: ../../../conan_v2.rst:29
msgid ""
"Do not use dictionary expressions in your recipe ``settings`` definition "
"(like ``settings = {\"os\": [\"Windows\", \"Linux\"]}``. This way of "
"limiting supported configurations by one recipe will be removed. Use the "
"``validate()`` method instead to raise ``ConanInvalidConfiguration`` if "
"strictly necessary to fail fast for unsupported configurations."
msgstr ""

#: ../../../conan_v2.rst:32
msgid ""
"Use ``self.test_requires()`` to define test requirements instead of the "
"legacy ``self.build_requires(..., force_host_context)``."
msgstr ""

#: ../../../conan_v2.rst:34
msgid "Use ``self.tool_requires()`` to define the legacy build_requires."
msgstr ""

#: ../../../conan_v2.rst:35
msgid ""
"Move all your packages to lowercase. Uppercase package names (or versions/"
"user/channel) will not be possible in 2.0."
msgstr ""

#: ../../../conan_v2.rst:38
msgid "Explicit test package requirement"
msgstr ""

#: ../../../conan_v2.rst:40
msgid ""
"In Conan 2.0, the ``test_package/conanfile.py`` needs to declare the "
"requirement being tested explicitly. To be prepared you have to set the "
"attribute ``test_type=\"explicit\"`` (this will be ignored in 2.0) to make "
"Conan activate the explicit mode, then declaring the require using the "
"``self.tested_reference_str`` that contains the reference being tested."
msgstr ""

#: ../../../conan_v2.rst:45
msgid ""
"from conans import ConanFile\n"
"\n"
"class MyTestPkg(ConanFile):\n"
"    test_type = \"explicit\"\n"
"\n"
"    def requirements(self):\n"
"        # A regular requirement\n"
"        self.requires(self.tested_reference_str)\n"
"\n"
"    def build_requirements(self):\n"
"        # If we want to test the package as a tool_require (formerly "
"`test_type = \"build_requires\"`)\n"
"        # Keep both \"requires()\" and \"tool_requires()\" if you want to "
"test the same package both as a regular\n"
"        # require and a tool_require (formerly `test_type = "
"\"build_requires\", \"requires\"`)\n"
"        self.tool_requires(self.tested_reference_str)"
msgstr ""

#: ../../../conan_v2.rst:65
msgid "New namespace conan.tools.xxxxx"
msgstr ""

#: ../../../conan_v2.rst:67
msgid ""
"Use generators and helpers only from ``conan.tools.xxxx`` space. All the "
"other ones are going to be removed. Please check the :ref:`tools<tools>` "
"section to learn more about the new tools available for Conan 2.0."
msgstr ""

#: ../../../conan_v2.rst:72
msgid "Host and build profiles and new cross-building model"
msgstr ""

#: ../../../conan_v2.rst:74
msgid ""
"Use always :ref:`build and host profiles <build_profiles_and_host_profiles>`."
msgstr ""

#: ../../../conan_v2.rst:76
msgid ""
"Conan 1.x uses one profile by default, to start using two profiles, please "
"do the following:"
msgstr ""

#: ../../../conan_v2.rst:78
msgid "Pass ``-pr:b=default`` in the command line to most commands."
msgstr ""

#: ../../../conan_v2.rst:79
msgid ""
"Or set the variable ``core:default_build_profile=default`` at the :ref:"
"`global.conf<global_conf>` file to apply it always, automatically."
msgstr ""

#: ../../../conan_v2.rst:82
msgid ""
"Do not use ``os_build``, ``arch_build`` anywhere in your recipes or code."
msgstr ""

#: ../../../conan_v2.rst:86
msgid "Conan uses revisions by default in Conan 2.0"
msgstr ""

#: ../../../conan_v2.rst:88
msgid ""
"Conan 2.0 uses :ref:`revisions<package_revisions>` by default and the local "
"cache 2.0 will store multiple recipe and package revisions for your Conan "
"packages (Conan 1.X supports only one revision). To start working with "
"revisions enabled in Conan 1.X, please enable them in your Conan "
"configuration:"
msgstr ""

#: ../../../conan_v2.rst:93
msgid "$ conan config set general.revisions_enabled=True"
msgstr ""

#: ../../../conan_v2.rst:98
msgid "self.dependencies to access information about dependencies"
msgstr ""

#: ../../../conan_v2.rst:100
msgid ""
"Do not use ``self.deps_cpp_info``, ``self.deps_env_info`` or ``self."
"deps_user_info``. Use the `self.dependencies access <https://docs.conan.io/"
"en/latest/reference/conanfile/dependencies.html#dependencies-interface>`_ to "
"get information about dependencies."
msgstr ""

#: ../../../conan_v2.rst:106
msgid "Commands that disappear in 2.0: copy"
msgstr ""

#: ../../../conan_v2.rst:108
msgid ""
"Do not use the ``conan copy`` command to change user/channel. Packages will "
"be immutable, and this command will dissapear in 2.0. Package promotions are "
"generally done in the server side, copying packages from one server "
"repository to another repository."
msgstr ""

#: ../../../conan_v2.rst:113
msgid "Editables don't use external templates any more. New layout model"
msgstr ""

#: ../../../conan_v2.rst:115
msgid ""
"If you are using ``editables``, the external template files are going to be "
"removed. Use the ``layout()`` method definition instead. Please check the "
"documentation for more information about :ref:`layouts <conan_tools_layout>`."
msgstr ""

#: ../../../conan_v2.rst:120
msgid "Symlinks in recipes and packages"
msgstr ""

#: ../../../conan_v2.rst:122
msgid ""
"Conan won't alter any symlink while exporting or packaging files. If any "
"manipulation to the symlinks is required, the package :ref:`conan.tools."
"files.symlinks<conan_tools_files_symlinks>` contains some tools to help with "
"that."
msgstr ""

#: ../../../conan_v2.rst:127
msgid "Default cpp_info.builddirs"
msgstr ""

#: ../../../conan_v2.rst:129
msgid ""
"The default root package folder (``self.cpp_info.builddirs = ['']``) has "
"been removed. Also assign it will be discouraged because it affects how :ref:"
"`CMakeToolchain<conan-cmake-toolchain>` and :ref:`CMakeDeps<CMakeDeps>` "
"locate executables, libraries, headers... from the right context (host vs "
"build)."
msgstr ""

#: ../../../conan_v2.rst:133
msgid "To be prepared for Conan 2.0:"
msgstr ""

#: ../../../conan_v2.rst:135
msgid ""
"If you have *cmake modules* or *cmake config files* at the root of the "
"package, it is strongly recommended to move them to a subfolder ``cmake`` "
"and assing it: ``self.cpp_info.builddirs = [\"cmake\"]``"
msgstr ""

#: ../../../conan_v2.rst:137
msgid ""
"If you are not assigning any ``self.cpp_info.builddirs`` assign an empty "
"list: ``self.cpp_info.builddirs = []``."
msgstr ""

#: ../../../conan_v2.rst:138
msgid ""
"Instead of appending new values to the default list, assign it: ``self."
"cpp_info.builddirs = [\"cmake\"]``"
msgstr ""

#: ../../../conan_v2.rst:144
msgid "New properties model for the cpp_info in Conan 2.0 generators"
msgstr ""

#: ../../../conan_v2.rst:151
msgid ""
"Using ``.names``, ``.filenames`` and ``.build_modules`` will not work any "
"more for new generators, like :ref:`CMakeDeps<CMakeDeps>` and :ref:"
"`PkgConfigDeps<PkgConfigDeps>`. They have a new way of setting this "
"information using ``set_property`` and ``get_property`` methods of the "
"``cpp_info`` object (available since Conan 1.36)."
msgstr ""

#: ../../../conan_v2.rst:156
msgid ""
"def set_property(self, property_name, value)\n"
"def get_property(self, property_name):"
msgstr ""

#: ../../../conan_v2.rst:161
msgid ""
"New properties ``cmake_target_name``, ``cmake_file_name``, "
"``cmake_module_target_name``, ``cmake_module_file_name``, "
"``pkg_config_name`` and ``cmake_build_modules`` are defined to allow "
"migrating ``names``, ``filenames`` and ``build_modules`` properties to this "
"model. In Conan 2.0 this will be the default way of setting these properties "
"for all generators and also passing custom properties to generators."
msgstr ""

#: ../../../conan_v2.rst:169
msgid "The 2 mechanisms are completely independent:"
msgstr ""

#: ../../../conan_v2.rst:171
msgid ""
"Old way using ``.names``, ``.filenames`` will work exclusively for legacy "
"generators like ``cmake_find_package``"
msgstr ""

#: ../../../conan_v2.rst:172
msgid ""
"New properties, like ``set_property(\"cmake_target_name\")`` will work "
"exclusively for new generators like ``CMakeDeps``. They have changed to be "
"absolute, and that would break legacy generators."
msgstr ""

#: ../../../conan_v2.rst:174
msgid ""
"Recipes that want to provide support for both generators need to provide the "
"2 definitions in their ``package_info()``"
msgstr ""

#: ../../../conan_v2.rst:177
msgid ""
"New properties defined for *CMake* generators family, used by :ref:"
"`CMakeDeps<CMakeDeps>` generator:"
msgstr ""

#: ../../../conan_v2.rst:179
msgid ""
"**cmake_file_name** property will define in ``CMakeDeps`` the name of the "
"generated config file (``xxx-config.cmake``)"
msgstr ""

#: ../../../conan_v2.rst:180
msgid ""
"**cmake_target_name** property will define the absolute target name in "
"``CMakeDeps``"
msgstr ""

#: ../../../conan_v2.rst:181
msgid ""
"**cmake_module_file_name** property defines the generated filename for "
"modules (``Findxxxx.cmake``)"
msgstr ""

#: ../../../conan_v2.rst:182
msgid ""
"**cmake_module_target_name** defines the absolute target name for find "
"modules."
msgstr ""

#: ../../../conan_v2.rst:183
msgid ""
"**cmake_build_modules** property replaces the ``build_modules`` property."
msgstr ""

#: ../../../conan_v2.rst:184
msgid ""
"**cmake_find_mode** will tell :ref:`CMakeDeps<CMakeDeps>` to generate config "
"files, modules files, both or none of them, depending on the value set "
"(``config``, ``module``, ``both`` or ``none``)"
msgstr ""

#: ../../../conan_v2.rst:189
msgid ""
"Properties related to *pkg_config*, supported by both legacy :ref:"
"`pkg_config<pkg_config_generator>` and new :ref:"
"`PkgConfigDeps<PkgConfigDeps>`:"
msgstr ""

#: ../../../conan_v2.rst:191
msgid "**pkg_config_name** property equivalent to the ``names`` attribute."
msgstr ""

#: ../../../conan_v2.rst:192
msgid ""
"**pkg_config_custom_content** property supported by both generators that "
"will add user defined content to the *.pc* files created by the generator"
msgstr ""

#: ../../../conan_v2.rst:195
msgid ""
"Properties related to *pkg_config*, only supported by new :ref:"
"`PkgConfigDeps<PkgConfigDeps>`:"
msgstr ""

#: ../../../conan_v2.rst:197
msgid ""
"**pkg_config_aliases** property sets some aliases of any package/component "
"name for the ``PkgConfigDeps`` generator only, it doesn't work in "
"``pkg_config``. This property only accepts list-like Python objects."
msgstr ""

#: ../../../conan_v2.rst:200
msgid ""
"All of these properties, but ``cmake_file_name`` and "
"``cmake_module_file_name`` can be defined at global ``cpp_info`` level or at "
"component level."
msgstr ""

#: ../../../conan_v2.rst:203
msgid ""
"The `set/get_property` model is very useful if you are creating a :ref:"
"`custom generator<custom_generator>`. Using ``set_property()`` you can pass "
"the parameters of your choice and read them using the ``get_property()`` "
"method inside the generator."
msgstr ""

#: ../../../conan_v2.rst:207
msgid ""
"def package_info(self):\n"
"    ...\n"
"    # you have created a custom generator that reads the 'custom_property' "
"property and you set here\n"
"    # the value to 'prop_value'\n"
"    self.cpp_info.components[\"mycomponent\"]."
"set_property(\"custom_property\", \"prop_value\")\n"
"    ..."
msgstr ""

#: ../../../conan_v2.rst:216
msgid ""
"Please **check a detailed migration guide** in the :ref:`dedicated section "
"<properties_migration>`."
msgstr ""
