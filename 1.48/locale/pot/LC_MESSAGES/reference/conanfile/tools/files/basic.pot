# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2022, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.48\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/conanfile/tools/files/basic.rst:2
msgid "conan.tools.files basic operations"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:7
msgid "These tools are **experimental** and subject to breaking changes."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:12
msgid "conan.tools.files.copy()"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:14
msgid ""
"def copy(conanfile, pattern, src, dst, keep_path=True, excludes=None, "
"ignore_case=True, copy_symlink_folders=True)"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:19
msgid ""
"Copy the files matching the ``pattern`` (fnmatch) at the ``src`` folder to a "
"``dst`` folder."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:32
#: ../../../reference/conanfile/tools/files/basic.rst:54
#: ../../../reference/conanfile/tools/files/basic.rst:80
#: ../../../reference/conanfile/tools/files/basic.rst:102
#: ../../../reference/conanfile/tools/files/basic.rst:129
#: ../../../reference/conanfile/tools/files/basic.rst:152
#: ../../../reference/conanfile/tools/files/basic.rst:175
#: ../../../reference/conanfile/tools/files/basic.rst:197
#: ../../../reference/conanfile/tools/files/basic.rst:253
#: ../../../reference/conanfile/tools/files/basic.rst:262
msgid "Parameters:"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:22
#: ../../../reference/conanfile/tools/files/basic.rst:51
#: ../../../reference/conanfile/tools/files/basic.rst:74
#: ../../../reference/conanfile/tools/files/basic.rst:99
#: ../../../reference/conanfile/tools/files/basic.rst:122
#: ../../../reference/conanfile/tools/files/basic.rst:150
#: ../../../reference/conanfile/tools/files/basic.rst:173
#: ../../../reference/conanfile/tools/files/basic.rst:195
#: ../../../reference/conanfile/tools/files/basic.rst:242
#: ../../../reference/conanfile/tools/files/basic.rst:264
msgid "**conanfile**: Conanfile object."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:23
msgid ""
"**pattern** (Required): An fnmatch file pattern of the files that should be "
"copied. It must not start with ``..`` relative path or an exception will be "
"raised."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:24
msgid ""
"**src** (Required): Source folder in which those files will be searched. "
"This folder will be stripped from the dst parameter. E.g., `lib/Debug/x86`."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:26
msgid ""
"**dst** (Required): Destination local folder. It must be different from "
"``src`` value or an exception will be raised."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:27
msgid ""
"**keep_path** (Optional, defaulted to ``True``): Means if you want to keep "
"the relative path when you copy the files from the **src** folder to the "
"**dst** one."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:29
msgid ""
"**excludes** (Optional, defaulted to ``None``): A tuple/list of fnmatch "
"patterns or even a single one to be excluded from the copy."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:30
msgid ""
"**ignore_case** (Optional, defaulted to ``True``): If enabled, it will do a "
"case-insensitive pattern matching."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:31
msgid ""
"**copy_symlink_folders** (Optional, defaulted to ``True``): If enabled, it "
"will copy symlink folders, no matter where they point to."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:35
msgid "conan.tools.files.load()"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:37
msgid "def load(conanfile, path, encoding=\"utf-8\")"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:41
msgid ""
"Utility function to load files in one line. It will manage the open and "
"close of the file, and load binary encodings. Returns the content of the "
"file."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:44
msgid ""
"from conan.tools.files import load\n"
"\n"
"content = load(self, \"myfile.txt\")"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:52
#: ../../../reference/conanfile/tools/files/basic.rst:75
msgid "**path** (Required): Path to the file."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:53
msgid ""
"**encoding** (Optional, Defaulted to ``utf-8``): Specifies the input file "
"text encoding."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:57
msgid "conan.tools.files.save()"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:59
msgid "def save(conanfile, path, content, append=False, encoding=\"utf-8\"):"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:64
msgid ""
"Utility function to save files in one line. It will manage the open and "
"close of the file and creating directories if necessary."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:66
msgid ""
"from conan.tools.files import save\n"
"\n"
"save(self, \"path/to/otherfile.txt\", \"contents of the file\")"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:76
msgid "**content** (Required): Content that should be saved into the file."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:77
msgid ""
"**append** (Optional, Defaulted to ``False``): If ``True``, it will append "
"the content."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:78
msgid ""
"**encoding** (Optional, Defaulted to ``utf-8``): Specifies the output file "
"text encoding."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:83
msgid "conan.tools.files.rename()"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:85
msgid "def rename(conanfile, src, dst)"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:89
msgid ""
"Utility function to rename a file or folder *src* to *dst*. On Windows, it "
"is very common that ``os.rename()`` raises an \"Access is denied\" "
"exception, so this tool uses:command:`robocopy` if available. If that is not "
"the case, or the rename is done in a non-Windows machine, it falls back to "
"the ``os.rename()`` implementation."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:91
msgid ""
"from conan.tools.files import rename\n"
"\n"
"def source(self):\n"
"    rename(self, \"lib-sources-abe2h9fe\", \"sources\")  # renaming a folder"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:100
msgid "**src** (Required): Path to be renamed."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:101
msgid "**dst** (Required): Path to be renamed to."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:105
msgid "conan.tools.files.replace_in_file()"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:107
msgid ""
"def replace_in_file(conanfile, file_path, search, replace, strict=True, "
"encoding=\"utf-8\")"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:112
msgid ""
"Replace a string ``search`` in the contents of the file ``file_path`` with "
"the string ``replace``."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:114
msgid ""
"from conan.tools.files import replace_in_file\n"
"\n"
"replace_in_file(self, os.path.join(self.source_folder, \"folder\", \"file."
"txt\"), \"foo\", \"bar\")"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:123
msgid ""
"**file_path** (Required): File path of the file to perform the replace in."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:124
msgid "**search** (Required): String you want to be replaced."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:125
msgid "**replace** (Required): String to replace the searched string."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:126
msgid ""
"**strict** (Optional, Defaulted to ``True``): If ``True``, it raises an "
"error if the searched string is not found, so nothing is actually replaced."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:128
msgid ""
"**encoding** (Optional, Defaulted to ``utf-8``): Specifies the input and "
"output files text encoding."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:132
msgid "conan.tools.files.mkdir()"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:134
msgid "def mkdir(path)"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:138
msgid ""
"Utility functions to create a directory. The existence of the specified "
"directory is checked, so ``mkdir()`` will do nothing if the directory "
"already exists."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:141
msgid ""
"from conan.tools.files import mkdir\n"
"\n"
"mkdir(self, \"mydir\") # Creates mydir if it does not already exist\n"
"mkdir(self, \"mydir\") # Does nothing"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:151
#: ../../../reference/conanfile/tools/files/basic.rst:174
msgid "**path** (Required): Path to the directory."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:155
msgid "conan.tools.files.rmdir()"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:157
msgid "def rmdir(path)"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:161
msgid ""
"Utility functions to remove a directory. The existence of the specified "
"directory is checked, so ``rmdir()`` will do nothing if the directory "
"doesn't exists."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:164
msgid ""
"from conan.tools.files import rmdir\n"
"\n"
"rmdir(self, \"mydir\") # Remove mydir if it exist\n"
"rmdir(self, \"mydir\") # Does nothing"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:178
msgid "conan.tools.files.chdir()"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:180
msgid "def chdir(conanfile, newdir):"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:184
msgid ""
"This is a context manager that allows to temporary change the current "
"directory in your conanfile:"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:186
msgid ""
"from conan.tools.files import chdir\n"
"\n"
"def build(self):\n"
"    with chdir(self, \"./subdir\"):\n"
"        do_something()"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:196
msgid ""
"**newdir** (Required): Directory path name to change the current directory."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:200
msgid "conan.tools.files.unzip()"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:202
msgid ""
"def unzip(conanfile, filename, destination=\".\", keep_permissions=False, "
"pattern=None,\n"
"          strip_root=False):"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:208
msgid ""
"This function extract different compressed formats (``.tar.gz``, ``.tar``, "
"``.tzb2``, ``.tar.bz2``, ``.tgz``, ``.txz``, ``tar.xz``, and ``.zip``) into "
"the given destination folder."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:211
msgid ""
"It also accepts gzipped files, with extension ``.gz`` (not matching any of "
"the above), and it will unzip them into a file with the same name but "
"without the extension, or to a filename defined by the ``destination`` "
"argument."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:214
msgid ""
"from conan.tools.files import unzip\n"
"\n"
"tools.unzip(\"myfile.zip\")\n"
"# or to extract in \"myfolder\" sub-folder\n"
"tools.unzip(\"myfile.zip\", \"myfolder\")"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:222
msgid ""
"You can keep the permissions of the files using the "
"``keep_permissions=True`` parameter."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:224
msgid ""
"from conan.tools.files import unzip\n"
"\n"
"unzip(self, \"myfile.zip\", \"myfolder\", keep_permissions=True)"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:230
msgid ""
"Use the ``pattern`` argument if you want to filter specific files and paths "
"to decompress from the archive."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:232
msgid ""
"from conan.tools.files import unzip\n"
"\n"
"# Extract only files inside relative folder \"small\"\n"
"unzip(self, \"bigfile.zip\", pattern=\"small/*\")\n"
"# Extract only txt files\n"
"unzip(self, \"bigfile.zip\", pattern=\"*.txt\")"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:243
msgid "**filename** (Required): File to be unzipped."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:244
msgid ""
"**destination** (Optional, Defaulted to ``\".\"``): Destination folder for "
"unzipped files."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:245
msgid ""
"**keep_permissions** (Optional, Defaulted to ``False``): Keep permissions of "
"files. **WARNING:** Can be dangerous if the zip was not created in a NIX "
"system, the bits could produce undefined permission schema. Use only this "
"option if you are sure that the zip was created correctly."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:248
msgid ""
"**pattern** (Optional, Defaulted to ``None``): Extract from the archive only "
"paths matching the pattern. This should be a Unix shell-style wildcard. See "
"`fnmatch <https://docs.python.org/3/library/fnmatch.html>`_ documentation "
"for more details."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:250
msgid ""
"**strip_root** (Optional, Defaulted to ``False``): When ``True`` and the ZIP "
"file contains one folder containing all the contents, it will strip the root "
"folder moving all its contents to the root. E.g: *mylib-1.2.8/main.c* will "
"be extracted as *main.c*. If the compressed file contains more than one "
"folder or only a file it will raise a ``ConanException``."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:256
msgid "conan.tools.files.update_conandata()"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:258
msgid "def update_conandata(conanfile, data)"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:265
msgid "**data** (Required): A dictionary (can be nested), of values to update"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:268
msgid ""
"This function reads the ``conandata.yml`` inside the exported folder in the "
"conan cache, if it exists. If the ``conandata.yml`` does not exist, it will "
"create it. Then, it updates the conandata dictionary with the provided "
"``data`` one, which is updated recursively, prioritizing the ``data`` "
"values, but keeping other existing ones. Finally the ``conandata.yml`` is "
"saved in the same place."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:274
msgid ""
"This helper can only be used within the ``export()`` method, it can raise "
"otherwise. One application is to capture in the ``conandata.yml`` the scm "
"coordinates (like Git remote url and commit), to be able to recover it later "
"in the ``source()`` method and have reproducible recipes that can build from "
"sources without actually storing the sources in the recipe."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:279
msgid "Example:"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:281
msgid ""
"from conan import ConanFile\n"
"from conan.tools.files import update_conandata\n"
"\n"
"class Pkg(ConanFile):\n"
"    name = \"pkg\"\n"
"    version = \"0.1\"\n"
"\n"
"    def export(self):\n"
"        # This is an example, doesn't make sense to have static data, "
"instead you\n"
"        # could put the data directly in a conandata.yml file.\n"
"        # This would be useful for storing dynamic data, obtained at "
"export() time from elsewhere\n"
"        update_conandata(self, {\"mydata\": {\"value\": {\"nested1\": 123, "
"\"nested2\": \"some-string\"}}})\n"
"\n"
"    def source(self):\n"
"        data = self.conan_data[\"sources\"][\"mydata\"]"
msgstr ""
