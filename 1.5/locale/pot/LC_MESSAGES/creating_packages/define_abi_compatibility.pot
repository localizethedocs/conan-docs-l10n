# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2018, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../creating_packages/define_abi_compatibility.rst:4
msgid "Define package ABI compatibility"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:6
msgid ""
"Each package recipe can generate *N* binary packages from it, depending on "
"three things: ``settings``, ``options`` and ``requires``."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:9
msgid ""
"When any of the :ref:`settings_property` of a package recipe changes, it "
"will reference a different binary:"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:12
msgid ""
"class MyLibConanPackage(ConanFile):\n"
"    name = \"MyLib\"\n"
"    version = \"1.0\"\n"
"    settings = \"os\", \"arch\", \"compiler\", \"build_type\""
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:19
msgid ""
"When this package is installed by a *conanfile.txt*, another package "
"*conanfile.py*, or directly:"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:21
msgid "$ conan install MyLib/1.0@user/channel -s arch=x86_64 -s ..."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:25
msgid "The process will be:"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:27
msgid ""
"Conan will get the user input settings and options. Those settings and "
"options can come from command line, profiles or from the values cached in "
"the latest :command:`conan install` execution."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:29
msgid ""
"Conan will retrieve the ``MyLib/1.0@user/channel`` recipe, read the "
"``settings`` attribute, and assign the necessary values."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:30
msgid ""
"With the current package values for ``settings`` (also ``options`` and "
"``requires``), it will compute a SHA1 hash that will be the binary package "
"ID, e.g. ``c6d75a933080ca17eb7f076813e7fb21aaa740f2``."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:32
msgid ""
"Conan will try to find the ``c6d75...`` binary package. If it's present it "
"will retrieve it, if not, it will fail and indicate that it can be built "
"from sources using :command:`conan install --build`."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:35
msgid ""
"If the package is installed again with different settings, for example, for "
"32 bits architecture:"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:37
msgid "$ conan install MyLib/1.0@user/channel -s arch=x86 -s ..."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:41
msgid ""
"The process will be repeated but generating a different package ID, because "
"the ``arch`` setting will have a different value. The same applies for "
"different compilers, compiler versions, build type, etc., generating "
"multiple binaries, one for each configuration."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:45
msgid ""
"When users of the package define the same settings as one of those binaries "
"that have been uploaded, the computed package ID will be the same and such "
"binary will be retrieved and reused without building it from sources."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:48
msgid ""
"The ``options`` behavior is very similar. The main difference is that "
"options can be more easily defined at the package level and they can be "
"defaulted. Check the :ref:`conanfile_options` reference."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:51
msgid ""
"Note the simple scenario of a **header-only** library. Such package does not "
"need to be built, and it will not have any ABI issues at all. The recipe of "
"such package will have to generate exactly 1 binary package, no more. This "
"is easily achieved, just by not declaring ``settings`` nor ``options`` in "
"the recipe:"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:55
msgid ""
"class MyLibConanPackage(ConanFile):\n"
"    name = \"MyLib\"\n"
"    version = \"1.0\"\n"
"    # no settings defined!"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:62
msgid ""
"No matter what are the settings defined by the users, which compiler or "
"version: the package settings and options will always be the same (empty) "
"and they will hash to the same binary package ID. That package will "
"typically contain just the header files."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:65
msgid ""
"What happens if we have a library that we know it can be built with GCC 4.8 "
"and we know it will keep the ABI compatibility with GCC 4.9? (This kind of "
"compatibility is easier to achieve for example for pure C libraries)."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:68
msgid ""
"Although it could be argued that it is worth rebuilding with 4.9 too -to get "
"fixes and performance improvements for example-, let's suppose that we don't "
"want to create 2 different binaries, just one built with GCC 4.8 and we want "
"it to be compatible for GCC 4.9 installs."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:74
msgid "Defining a custom package_id()"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:76
msgid ""
"The default ``package_id()`` uses the ``settings`` and ``options`` directly "
"as defined, and assumes `semantic versioning <https://semver.org/>`_ for "
"dependencies defined in ``requires``."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:79
msgid ""
"This ``package_id()`` method can be overridden to control the package ID "
"generation. Within the ``package_id()`` we have access to the ``self.info`` "
"object, which is the one that is hashed to compute the binary ID and "
"contains:"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:82
msgid ""
"**self.info.settings**: Contains all the declared settings, always as string "
"values. We can access/alter the settings. e.g: ``self.info.settings.compiler."
"version``."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:85
msgid ""
"**self.info.options**: Contains all the declared options, always as string "
"values too. e.g: ``self.info.options.shared``."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:87
msgid ""
"Initially this ``info`` object will contain the original settings and "
"options, but they can be changed without constraints to any other string "
"value."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:90
msgid ""
"For example, if you are sure your package ABI compatibility is fine for GCC "
"versions > 4.5 and < 5.0 you could do this:"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:92
msgid ""
"from conans import ConanFile, CMake, tools\n"
"from conans.model.version import Version\n"
"\n"
"class PkgConan(ConanFile):\n"
"    name = \"Pkg\"\n"
"    version = \"1.0\"\n"
"    settings = \"compiler\", \"build_type\"\n"
"\n"
"    def package_id(self):\n"
"        v = Version(str(self.settings.compiler.version))\n"
"        if self.settings.compiler == \"gcc\" and (v >= \"4.5\" and v < "
"\"5.0\"):\n"
"            self.info.settings.compiler.version = \"GCC version between 4.5 "
"and 5.0\""
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:107
msgid ""
"We have set the ``self.info.settings.compiler.version`` with an arbitrary "
"string, the value it's not important (could be any string). The only "
"important thing is that it is the same for any GCC version between 4.5 and "
"5.0. For all those versions, the compiler version will always be hashed to "
"the same ID."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:111
msgid ""
"Let's try and check that it works properly installing the package for GCC "
"4.5:"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:113
msgid ""
"$ conan export myuser/mychannel\n"
"$ conan install Pkg/1.0@myuser/mychannel -s compiler=gcc -s compiler."
"version=4.5 ...\n"
"\n"
"Requirements\n"
"    Pkg/1.0@myuser/mychannel from local\n"
"Packages\n"
"    Pkg/1.0@myuser/mychannel:mychannel:"
"af044f9619574eceb8e1cca737a64bdad88246ad\n"
"..."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:124
msgid ""
"We can see that the computed package ID is ``af04...46ad`` (not real). What "
"would happen if we specify GCC 4.6?"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:126
msgid ""
"$ conan install Pkg/1.0@myuser/mychannel -s compiler=gcc -s compiler."
"version=4.6 ...\n"
"\n"
"Requirements\n"
"    Pkg/1.0@myuser/mychannel from local\n"
"Packages\n"
"    Pkg/1.0@myuser/mychannel:mychannel:"
"af044f9619574eceb8e1cca737a64bdad88246ad"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:135
msgid ""
"Same result: the required package is again ``af04...46ad``. Now we can try "
"with GCC 4.4 (< 4.5):"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:137
msgid ""
"$ conan install Pkg/1.0@myuser/mychannel -s compiler=gcc -s compiler."
"version=4.4 ...\n"
"\n"
"Requirements\n"
"    Pkg/1.0@myuser/mychannel from local\n"
"Packages\n"
"    Pkg/1.0@myuser/mychannel:"
"mychannel:7d02dc01581029782b59dcc8c9783a73ab3c22dd"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:146
msgid ""
"Now the computed package ID is different: that means that we need a "
"different binary package for GCC 4.4."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:148
msgid ""
"The same way we have adjusted the ``self.info.settings`` we could set the "
"``self.info.options`` values if needed."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:152
msgid ""
"Check :ref:`method_package_id` to see the available helper methods and "
"change its behavior for things like:"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:154
msgid "Recipes packaging **header only** libraries."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:155
msgid "Adjusting **Visual Studio toolsets** compatibility."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:160
msgid "The problem of dependencies"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:162
msgid ""
"Let's define a simple scenario where there are two packages: one for "
"``MyOtherLib/2.0`` and another one ``MyLib/1.0`` which depends on (requires) "
"``MyOtherLib/2.0``. Let's assume that their recipes and binaries have "
"already been created and uploaded to a Conan remote."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:165
msgid ""
"Now, a new release for ``MyOtherLib/2.1`` comes out with improved recipe and "
"new binaries. The ``MyLib/1.0`` is modified to upgrade the requires to "
"``MyOtherLib/2.1``."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:170
msgid ""
"This scenario will be the same in the case that a consuming project of "
"``MyLib/1.0`` defines a dependency to ``MyOtherLib/2.1``, which would have "
"precedence over the existing one in ``MyLib/1.0``."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:173
msgid ""
"The question is: **Is it necessary to build new MyLib/1.0 binary packages?** "
"Or are the existing packages still valid?"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:175
msgid "The answer: **It depends**."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:177
msgid ""
"Let's suppose that both are being compiled as static libraries and that the "
"API exposed by ``MyOtherLib`` to ``MyLib/1.0`` through the public headers "
"has not changed at all. Then, it is not necessary to build new binaries for "
"``MyLib/1.0`` because the final consumer will link against both "
"``Mylib/1.0`` and ``MyOtherLib/2.1``."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:181
msgid ""
"On the other hand, it could happen that the API exposed by **MyOtherLib** in "
"public headers has changed, but without affecting the ``MyLib/1.0`` binary "
"for any reason (like changes consisting on new functions not used by "
"**MyLib**). The same reasoning would still be valid if **MyOtherLib** was "
"header only."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:185
msgid ""
"But what if one header file of ``MyOtherLib`` -named *myadd.h*- has changed "
"from ``2.0`` to ``2.1``:"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:187
msgid "*myadd.h* header file in version 2.0"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:187
msgid " int addition (int a, int b) { return a - b; }"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:192
msgid "*myadd.h* header file in version 2.1"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:192
msgid " int addition (int a, int b) { return a + b; }"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:197
msgid ""
"And the ``addition()`` function is being called from compiled *.cpp* files "
"of ``MyLib/1.0``?"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:199
msgid ""
"Then, **a new binary for MyLib/1.0 has to be built for the new dependency "
"version**. Otherwise it will maintain the old, buggy ``addition()`` version. "
"Even in the case that ``MyLib/1.0`` doesn't have any change in its code "
"lines neither in the recipe, the resulting binary rebuilding ``MyLib`` "
"requiring `MyOtherLib/2.1`` will be different and the package needs to be "
"different."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:204
msgid "Using package_id() for package dependencies"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:206
msgid ""
"The ``self.info`` object has also a ``requires`` object. It is a dictionary "
"with the necessary information for each requirement, all direct and "
"transitive dependencies. e.g. ``self.info.requires[\"MyOtherLib\"]`` is a "
"``RequirementInfo`` object."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:209
msgid ""
"Each ``RequirementInfo`` has the following `read only` reference fields:"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:211
msgid "``full_name``: Full require's name. E.g **MyOtherLib**"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:212
msgid "``full_version``: Full require's version. E.g **1.2**"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:213
msgid "``full_user``: Full require's user. E.g **my_user**"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:214
msgid "``full_channel``: Full require's channel. E.g **stable**"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:215
msgid "``full_package_id``: Full require's package ID. E.g **c6d75a...**"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:217
msgid ""
"The following fields are the ones used in the ``package_id()`` evaluation:"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:219
msgid "``name``: By default same value as full_name. E.g **MyOtherLib**."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:220
msgid ""
"``version``: By default the major version representation of the "
"``full_version``. E.g **1.Y** for a **1.2** ``full_version`` field and **1.Y."
"Z** for a **1.2.3** ``full_version`` field."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:223
msgid "``user``: By default ``None`` (doesn't affect the package ID)."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:224
msgid "``channel``: By default ``None`` (doesn't affect the package ID)."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:225
msgid "``package_id``: By default ``None`` (doesn't affect the package ID)."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:227
msgid ""
"When defining a package ID to model dependencies, it is necessary to take "
"into account two factors:"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:229
msgid "The versioning schema followed by our requirements (semver?, custom?)."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:230
msgid ""
"Type of library being built and type of library being reused (shared (*.so*, "
"*.dll*, *.dylib*), static)."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:233
msgid "Versioning schema"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:235
msgid ""
"By default Conan assumes `semver <https://semver.org/>`_ compatibility. e."
"g., if a version changes from minor **2.0** to **2.1** Conan will assume "
"that the API is compatible (headers not changing), and that it is not "
"necessary to build a new binary for it. Exactly the same for patches, "
"changing from **2.1.10** to **2.1.11** doesn't require a re-build."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:239
msgid ""
"If it is necessary to change the default behavior, the applied versioning "
"schema can be customized within the ``package_id()`` method:"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:241
msgid ""
"from conans import ConanFile, CMake, tools\n"
"from conans.model.version import Version\n"
"\n"
"class PkgConan(ConanFile):\n"
"    name = \"Mylib\"\n"
"    version = \"1.0\"\n"
"    settings = \"os\", \"compiler\", \"build_type\", \"arch\"\n"
"    requires = \"MyOtherLib/2.0@lasote/stable\"\n"
"\n"
"    def package_id(self):\n"
"        myotherlib = self.info.requires[\"MyOtherLib\"]\n"
"\n"
"        # Any change in the MyOtherLib version will change current Package "
"ID\n"
"        myotherlib.version = myotherlib.full_version\n"
"\n"
"        # Changes in major and minor versions will change the Package ID "
"but\n"
"        # only a MyOtherLib patch won't. E.j: From 1.2.3 to 1.2.89 won't "
"change.\n"
"        myotherlib.version = myotherlib.full_version.minor()"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:262
msgid ""
"Besides the ``version``, there are some other helpers that can be used to "
"decide whether the **channel** and **user** of one dependency also affects "
"the binary package, or even the required package ID can change your own "
"package ID."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:265
msgid ""
"You can decide if those variables of any requirement will change the ID of "
"your binary package using the following modes:"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:268
msgid "**Modes / Variables**"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:268
msgid "``name``"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:268
msgid "``version``"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:268
msgid "``user``"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:268
msgid "``channel``"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:268
msgid "``package_id``"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:270
msgid "``semver_mode()``"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:270
#: ../../../creating_packages/define_abi_compatibility.rst:272
#: ../../../creating_packages/define_abi_compatibility.rst:274
#: ../../../creating_packages/define_abi_compatibility.rst:276
#: ../../../creating_packages/define_abi_compatibility.rst:278
#: ../../../creating_packages/define_abi_compatibility.rst:280
#: ../../../creating_packages/define_abi_compatibility.rst:282
#: ../../../creating_packages/define_abi_compatibility.rst:284
msgid "Yes"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:270
msgid "Yes, only > 1.0.0 (e.g. **1**.2.Z+b102)"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:270
#: ../../../creating_packages/define_abi_compatibility.rst:272
#: ../../../creating_packages/define_abi_compatibility.rst:274
#: ../../../creating_packages/define_abi_compatibility.rst:276
#: ../../../creating_packages/define_abi_compatibility.rst:278
#: ../../../creating_packages/define_abi_compatibility.rst:280
#: ../../../creating_packages/define_abi_compatibility.rst:282
#: ../../../creating_packages/define_abi_compatibility.rst:286
msgid "No"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:272
msgid "``major_mode()``"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:272
msgid "Yes (e.g. **1**.2.Z+b102)"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:274
msgid "``minor_mode()``"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:274
msgid "Yes (e.g. **1.2**.Z+b102)"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:276
msgid "``patch_mode()``"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:276
msgid "Yes (e.g. **1.2.3**\\+b102)"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:278
msgid "``base_mode()``"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:278
msgid "Yes (e.g. **1.7**\\+b102)"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:280
msgid "``full_version_mode()``"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:280
#: ../../../creating_packages/define_abi_compatibility.rst:282
#: ../../../creating_packages/define_abi_compatibility.rst:284
msgid "Yes (e.g. **1.2.3+b102**)"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:282
msgid "``full_recipe_mode()``"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:284
msgid "``full_package_mode()``"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:286
msgid "``unrelated_mode()``"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:289
msgid ""
"``semver_mode()``: This is the default mode. In this mode only major release "
"version (starting from **1.0.0**) changes the package ID. Every version "
"change before 1.0.0 will change the package ID, but only major changes after "
"1.0.0 will do."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:292
msgid ""
"def package_id(self):\n"
"    self.info.requires[\"MyOtherLib\"].semver_mode()"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:297
msgid ""
"``major_mode()``: Any change in the major release version (starting from "
"**0.0.0**) changes the package ID."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:299
msgid ""
"def package_id(self):\n"
"    self.info.requires[\"MyOtherLib\"].major_mode()"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:304
msgid ""
"``minor_mode()``: Any change in major or minor (not patch nor build) version "
"of the required dependency changes the package ID."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:306
#: ../../../creating_packages/define_abi_compatibility.rst:313
msgid ""
"def package_id(self):\n"
"    self.info.requires[\"MyOtherLib\"].patch_mode()"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:311
msgid ""
"``patch_mode()``: Any change in major, minor or patch (not build) version of "
"the required dependency changes the package ID."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:318
msgid ""
"``base_mode()``: Any change in the base of the version (not build) of the "
"required dependency changes the package ID. Note that in the case of semver "
"notation this may produce same result as ``patch_mode()``, but it is "
"actually intended to dismiss the build part of the version even without "
"strict semver."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:322
msgid ""
"def package_id(self):\n"
"    self.info.requires[\"MyOtherLib\"].base_mode()"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:327
msgid ""
"``full_version_mode()``: Any change in the version of the required "
"dependency changes the package ID."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:329
msgid ""
"def package_id(self):\n"
"    self.info.requires[\"MyOtherLib\"].full_version_mode()"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:334
msgid ""
"``full_recipe_mode()``: Any change in the reference of the requirement (user "
"& channel too) changes the package ID."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:336
msgid ""
"def package_id(self):\n"
"    self.info.requires[\"MyOtherLib\"].full_recipe_mode()"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:341
msgid ""
"``full_package_mode()``: Any change in the required version, user, channel "
"or package ID changes the package ID."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:343
msgid ""
"def package_id(self):\n"
"    self.info.requires[\"MyOtherLib\"].full_package_mode()"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:348
msgid "``unrelated_mode()``: Requirements do not change the package ID."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:350
msgid ""
"def package_id(self):\n"
"    self.info.requires[\"MyOtherLib\"].unrelated_mode()"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:355
msgid "You can also adjust the individual properties manually:"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:357
msgid ""
"def package_id(self):\n"
"    myotherlib = self.info.requires[\"MyOtherLib\"]\n"
"\n"
"    # Same as myotherlib.semver_mode()\n"
"    myotherlib.name = myotherlib.full_name\n"
"    myotherlib.version = myotherlib.full_version.stable()  # major(), "
"minor(), patch(), base, build\n"
"    myotherlib.user = myotherlib.channel = myotherlib.package_id = None\n"
"\n"
"    # Only the channel (and the name) matters\n"
"    myotherlib.name = myotherlib.full_name\n"
"    myotherlib.user = myotherlib.package_id = myotherlib.version = None\n"
"    myotherlib.channel = myotherlib.full_channel"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:372
msgid ""
"The result of the ``package_id()`` is the package ID hash, but the details "
"can be checked in the generated *conaninfo.txt* file. The ``[requires]``, "
"``[options]`` and ``[settings]`` are those taken into account to generate "
"the SHA1 hash for the package ID, while the ``[full_xxxx]`` fields show the "
"complete reference information."
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:377
msgid "The default behavior produces a *conaninfo.txt* that looks like:"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:379
msgid ""
"[requires]\n"
"  MyOtherLib/2.Y.Z\n"
"\n"
"[full_requires]\n"
"  MyOtherLib/2.2@demo/testing:73bce3fd7eb82b2eabc19fe11317d37da81afa56"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:388
msgid "Library types: Shared, static, header only"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:390
msgid "Let's see some examples, corresponding to common scenarios:"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:392
msgid ""
"``MyLib/1.0`` is a shared library that links with a static library "
"``MyOtherLib/2.0`` package. When a new ``MyOtherLib/2.1`` version is "
"released: Do I need to create a new binary for ``MyLib/1.0`` to link with it?"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:396
msgid ""
"Yes, always, as the implementation is embedded in the ``MyLib/1.0`` shared "
"library. If we always want to rebuild our library, even if the channel "
"changes (we assume a channel change could mean a source code change):"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:400
msgid ""
"def package_id(self):\n"
"    # Any change in the MyOtherLib version, user or\n"
"    # channel or Package ID will affect our package ID\n"
"    self.info.requires[\"MyOtherLib\"].full_package_mode()"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:407
msgid ""
"``MyLib/1.0`` is a shared library, requiring another shared library "
"``MyOtherLib/2.0`` package. When a new ``MyOtherLib/2.1`` version is "
"released: Do I need to create a new binary for ``MyLib/1.0`` to link with it?"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:411
msgid ""
"It depends. If the public headers have not changed at all, it is not "
"necessary. Actually it might be necessary to consider transitive "
"dependencies that are shared among the public headers, how they are linked "
"and if they cross the frontiers of the API, it might also lead to "
"incompatibilities. If public headers have changed, it would depend on what "
"changes and how are they used in ``MyLib/1.0``. Adding new methods to the "
"public headers will have no impact, but changing the implementation of some "
"functions that will be inlined when compiled from ``MyLib/1.0`` will "
"definitely require re-building. For this case, it could make sense to have "
"this configuration:"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:419
msgid ""
"def package_id(self):\n"
"    # Any change in the MyOtherLib version, user or channel\n"
"    # or Package ID will affect our package ID\n"
"    self.info.requires[\"MyOtherLib\"].full_package_mode()\n"
"\n"
"    # Or any change in the MyOtherLib version, user or\n"
"    # channel will affect our package ID\n"
"    self.info.requires[\"MyOtherLib\"].full_recipe_mode()"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:430
msgid ""
"``MyLib/1.0`` is a header-only library, linking with any kind (header, "
"static, shared) of library in ``MyOtherLib/2.0`` package. When a new "
"``MyOtherLib/2.1`` version is released: Do I need to create a new binary for "
"``MyLib/1.0`` to link with it?"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:434
msgid ""
"Never. The package should always be the same as there are no settings, no "
"options, and in any way a dependency can affect a binary, because there is "
"no such binary. The default behavior should be changed to:"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:438
msgid ""
"def package_id(self):\n"
"    self.info.requires.clear()"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:443
msgid ""
"``MyLib/1.0`` is a static library, linking with a header only library in "
"``MyOtherLib/2.0`` package. When a new ``MyOtherLib/2.1`` version is "
"released: Do I need to create a new binary for ``MyLib/1.0`` to link with "
"it? It could happen that the ``MyOtherLib`` headers are strictly used in "
"some ``MyLib`` headers, which are not compiled, but transitively included. "
"But in the general case it is likely that ``MyOtherLib`` headers are used in "
"``MyLib`` implementation files, so every change in them should imply a new "
"binary to be built. If we know that changes in the channel never imply a "
"source code change, because it is the way we have defined our workflow/"
"lifecycle, we could write:"
msgstr ""

#: ../../../creating_packages/define_abi_compatibility.rst:452
msgid ""
"def package_id(self):\n"
"    self.info.requires[\"MyOtherLib\"].full_package()\n"
"    self.info.requires[\"MyOtherLib\"].channel = None # Channel doesn't "
"change out package ID"
msgstr ""
