# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2022, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.51\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../integrations/build_system/cmake/cmake_find_package_generator.rst:6
msgid "``cmake_find_package`` generator"
msgstr ""

#: ../../../integrations/build_system/cmake/cmake_find_package_generator.rst:8
msgid ""
"This generator is especially useful if you are using ``CMake`` using the "
"``find_package`` feature to locate the dependencies."
msgstr ""

#: ../../../integrations/build_system/cmake/cmake_find_package_generator.rst:11
msgid ""
"The ``cmake_find_package`` generator creates a file for each requirement "
"specified in a conanfile."
msgstr ""

#: ../../../integrations/build_system/cmake/cmake_find_package_generator.rst:13
msgid ""
"The name of the files follows the pattern ``Find<package_name>.cmake``. So "
"for the ``zlib/1.2.11`` package, a ``FindZLIB.cmake`` file will be generated."
msgstr ""

#: ../../../integrations/build_system/cmake/cmake_find_package_generator.rst:17
msgid "In a conanfile.py"
msgstr ""

#: ../../../integrations/build_system/cmake/cmake_find_package_generator.rst:19
msgid "conanfile.py"
msgstr ""

#: ../../../integrations/build_system/cmake/cmake_find_package_generator.rst:19
msgid ""
"from conans import ConanFile, CMake, tools\n"
"\n"
"\n"
"class LibConan(ConanFile):\n"
"    ...\n"
"    requires = \"zlib/1.2.11\"\n"
"    generators = \"cmake_find_package\"\n"
"\n"
"    def build(self):\n"
"        cmake = CMake(self) # it will find the packages by using our auto-"
"generated FindXXX.cmake files\n"
"        cmake.configure()\n"
"        cmake.build()"
msgstr ""

#: ../../../integrations/build_system/cmake/cmake_find_package_generator.rst:36
msgid ""
"In the previous example, the ``CMake`` build helper will automatically "
"adjust the ``CMAKE_MODULE_PATH`` to the ``conanfile.install_folder``, where "
"the generated ``Find<package_name>.cmake`` is."
msgstr ""

#: ../../../integrations/build_system/cmake/cmake_find_package_generator.rst:39
msgid ""
"In the ``CMakeList.txt`` you do not need to specify or include anything "
"related with Conan at all; just rely on the ``find_package`` feature:"
msgstr ""

#: ../../../integrations/build_system/cmake/cmake_find_package_generator.rst:42
#: ../../../integrations/build_system/cmake/cmake_find_package_generator.rst:94
#: ../../../integrations/build_system/cmake/cmake_find_package_generator.rst:141
msgid "CMakeList.txt"
msgstr ""

#: ../../../integrations/build_system/cmake/cmake_find_package_generator.rst:42
msgid ""
"cmake_minimum_required(VERSION 3.0)\n"
"project(helloworld)\n"
"add_executable(helloworld hello.c)\n"
"find_package(ZLIB)\n"
"\n"
"# Global approach\n"
"if(ZLIB_FOUND)\n"
"   include_directories(${ZLIB_INCLUDE_DIRS})\n"
"   target_link_libraries (helloworld ${ZLIB_LIBRARIES})\n"
"endif()\n"
"\n"
"# Modern CMake targets approach\n"
"if(TARGET ZLIB::ZLIB)\n"
"   target_link_libraries(helloworld ZLIB::ZLIB)\n"
"endif()"
msgstr ""

#: ../../../integrations/build_system/cmake/cmake_find_package_generator.rst:61
msgid ""
"$ conan create . user/channel\n"
"\n"
"lib/1.0@user/channel: Calling build()\n"
"-- The C compiler identification is AppleClang 9.1.0.9020039\n"
"...\n"
"-- Conan: Using autogenerated FindZLIB.cmake\n"
"-- Found: /Users/user/.conan/data/zlib/1.2.11/_/_/"
"package/0eaf3bfbc94fb6d2c8f230d052d75c6c1a57a4ce/lib/libz.a\n"
"lib/1.0@user/channel: Package '72bce3af445a371b892525bc8701d96c568ead8b' "
"created"
msgstr ""

#: ../../../integrations/build_system/cmake/cmake_find_package_generator.rst:74
msgid "In a *conanfile.txt*"
msgstr ""

#: ../../../integrations/build_system/cmake/cmake_find_package_generator.rst:76
msgid ""
"If you are using a ``conanfile.txt`` file in your project, instead of a "
"``conanfile.py``, this generator can be used together with the :ref:"
"`cmake_paths <cmake_paths_generator>` generator to adjust the "
"``CMAKE_MODULE_PATH`` and ``CMAKE_PREFIX_PATH`` variables automatically and "
"let CMake locate the generated ``Find<package_name>.cmake`` files."
msgstr ""

#: ../../../integrations/build_system/cmake/cmake_find_package_generator.rst:80
msgid "With ``cmake_paths``:"
msgstr ""

#: ../../../integrations/build_system/cmake/cmake_find_package_generator.rst:82
#: ../../../integrations/build_system/cmake/cmake_find_package_generator.rst:131
msgid "conanfile.txt"
msgstr ""

#: ../../../integrations/build_system/cmake/cmake_find_package_generator.rst:82
msgid ""
"[requires]\n"
"zlib/1.2.11\n"
"...\n"
"\n"
"[generators]\n"
"cmake_find_package\n"
"cmake_paths"
msgstr ""

#: ../../../integrations/build_system/cmake/cmake_find_package_generator.rst:94
msgid ""
"cmake_minimum_required(VERSION 3.0)\n"
"project(helloworld)\n"
"include(${CMAKE_BINARY_DIR}/conan_paths.cmake)\n"
"add_executable(helloworld hello.c)\n"
"find_package(ZLIB)\n"
"\n"
"# Global approach\n"
"if(ZLIB_FOUND)\n"
"   include_directories(${ZLIB_INCLUDE_DIRS})\n"
"   target_link_libraries (helloworld ${ZLIB_LIBRARIES})\n"
"endif()\n"
"\n"
"# Modern CMake targets approach\n"
"if(TARGET ZLIB::ZLIB)\n"
"   target_link_libraries(helloworld ZLIB::ZLIB)\n"
"endif()"
msgstr ""

#: ../../../integrations/build_system/cmake/cmake_find_package_generator.rst:115
msgid ""
"$ mkdir build && cd build\n"
"$ conan install ..\n"
"$ cmake .. -G \"Unix Makefiles\" -DCMAKE_BUILD_TYPE=Release\n"
"  -- Conan: Using autogenerated FindZLIB.cmake\n"
"  -- Found: /Users/user/.conan/data/zlib/1.2.11/_/_/"
"package/0eaf3bfbc94fb6d2c8f230d052d75c6c1a57a4ce/lib/libz.a\n"
"  ...\n"
"\n"
"$ cmake --build ."
msgstr ""

#: ../../../integrations/build_system/cmake/cmake_find_package_generator.rst:127
msgid ""
"Or you can also adjust ``CMAKE_MODULE_PATH`` and ``CMAKE_PREFIX_PATH`` "
"manually."
msgstr ""

#: ../../../integrations/build_system/cmake/cmake_find_package_generator.rst:129
msgid "Without **cmake_paths**, adjusting the variables manually:"
msgstr ""

#: ../../../integrations/build_system/cmake/cmake_find_package_generator.rst:131
msgid ""
" [requires]\n"
" zlib/1.2.11\n"
" ...\n"
"\n"
" [generators]\n"
" cmake_find_package"
msgstr ""

#: ../../../integrations/build_system/cmake/cmake_find_package_generator.rst:141
msgid ""
" cmake_minimum_required(VERSION 3.0)\n"
" project(helloworld)\n"
" list(APPEND CMAKE_MODULE_PATH ${CMAKE_BINARY_DIR})\n"
" list(APPEND CMAKE_PREFIX_PATH ${CMAKE_BINARY_DIR})\n"
"\n"
" add_executable(helloworld hello.c)\n"
" find_package(ZLIB)\n"
"\n"
" # Global approach\n"
" if(ZLIB_FOUND)\n"
"    include_directories(${ZLIB_INCLUDE_DIRS})\n"
"    target_link_libraries (helloworld ${ZLIB_LIBRARIES})\n"
" endif()\n"
"\n"
" # Modern CMake targets approach\n"
" if(TARGET ZLIB::ZLIB)\n"
"    target_link_libraries(helloworld ZLIB::ZLIB)\n"
" endif()"
msgstr ""

#: ../../../integrations/build_system/cmake/cmake_find_package_generator.rst:166
msgid ""
"Check the section :ref:`cmake_cmake_find_package_generator_reference` to "
"read more about this generator and the adjusted CMake variables/targets."
msgstr ""
