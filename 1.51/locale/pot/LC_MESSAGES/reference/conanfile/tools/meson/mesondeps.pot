# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2022, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.51\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/conanfile/tools/meson/mesondeps.rst:4
msgid "MesonDeps"
msgstr ""

#: ../../../reference/conanfile/tools/meson/mesondeps.rst:8
msgid ""
"These tools are still **experimental** (so subject to breaking changes) but "
"with very stable syntax. We encourage the usage of it to be prepared for "
"Conan 2.0."
msgstr ""

#: ../../../reference/conanfile/tools/meson/mesondeps.rst:11
msgid ""
":ref:`MesonToolchain<conan-meson-toolchain>` normally works together with :"
"ref:`PkgConfigDeps<PkgConfigDeps>` to manage all the dependencies, but "
"sometimes we need to gather some flags coming from ``Autotools`` tool so "
"that's what ``MesonDeps`` is meant for. In other words, it is typically used "
"when Meson cannot find a dependency using the already known `detection "
"mechanisms <https://mesonbuild.com/Dependencies.html>`__ like: `pkg-config`, "
"`cmake`, `config-tool`, etc. For instance, if we'd have these lines in your "
"`meson.build` file, you might need ``MesonDeps`` to find that dependency and "
"inject the correct flags to the compiler:"
msgstr ""

#: ../../../reference/conanfile/tools/meson/mesondeps.rst:16
msgid "**meson.build**"
msgstr ""

#: ../../../reference/conanfile/tools/meson/mesondeps.rst:16
msgid ""
"project('tutorial', 'cpp')\n"
"cxx = meson.get_compiler('cpp')\n"
"mylib = cxx.find_library('mylib', required: true)\n"
"executable('app', 'main.cpp', dependencies: mylib)"
msgstr ""

#: ../../../reference/conanfile/tools/meson/mesondeps.rst:25
msgid ""
"In a nutshell, the ``MesonDeps`` generator is the dependencies generator for "
"Meson and GNU flags. It creates a `conan_meson_deps_flags.ini` file with all "
"those flags collected by each dependency."
msgstr ""

#: ../../../reference/conanfile/tools/meson/mesondeps.rst:31
msgid ""
"At this moment, this generator must be used along with ``MesonToolchain`` "
"one to make it work correctly."
msgstr ""

#: ../../../reference/conanfile/tools/meson/mesondeps.rst:36
msgid ""
"This class will require very soon to define both the \"host\" and \"build\" "
"profiles. It is very recommended to start defining both profiles immediately "
"to avoid future breaking. Furthermore, some features, like trying to cross-"
"compile might not work at all if the \"build\" profile is not provided."
msgstr ""

#: ../../../reference/conanfile/tools/meson/mesondeps.rst:41
msgid "The ``MesonDeps`` generator can be used by name in conanfiles:"
msgstr ""

#: ../../../reference/conanfile/tools/meson/mesondeps.rst:43
msgid "conanfile.py"
msgstr ""

#: ../../../reference/conanfile/tools/meson/mesondeps.rst:43
msgid ""
"class Pkg(ConanFile):\n"
"    generators = \"MesonDeps\""
msgstr ""

#: ../../../reference/conanfile/tools/meson/mesondeps.rst:49
msgid "conanfile.txt"
msgstr ""

#: ../../../reference/conanfile/tools/meson/mesondeps.rst:49
msgid ""
"[generators]\n"
"MesonDeps"
msgstr ""

#: ../../../reference/conanfile/tools/meson/mesondeps.rst:55
msgid ""
"And it can also be fully instantiated in the conanfile ``generate()`` method:"
msgstr ""

#: ../../../reference/conanfile/tools/meson/mesondeps.rst:68
msgid ""
"from conan import ConanFile\n"
"from conan.tools.meson import MesonDeps\n"
"\n"
"class App(ConanFile):\n"
"    settings = \"os\", \"arch\", \"compiler\", \"build_type\"\n"
"\n"
"    def generate(self):\n"
"        tc = MesonDeps(self)\n"
"        tc.generate()"
msgstr ""

#: ../../../reference/conanfile/tools/meson/mesondeps.rst:69
msgid ""
"The ``MesonDeps`` generates after a ``conan install`` command a "
"`conan_meson_deps_flags.ini` file:"
msgstr ""

#: ../../../reference/conanfile/tools/meson/mesondeps.rst:71
msgid ""
"[constants]\n"
"deps_c_args = []\n"
"deps_c_link_args = []\n"
"deps_cpp_args = []\n"
"deps_cpp_link_args = []"
msgstr ""

#: ../../../reference/conanfile/tools/meson/mesondeps.rst:80
msgid ""
"This generator defines a Meson constants: ``deps_c_args``, "
"``deps_c_link_args``, ``deps_cpp_args``, ``deps_cpp_link_args``, that "
"accumulate all dependencies information, including transitive dependencies, "
"with flags like ``-I<path>``, ``-L<path>``, etc."
msgstr ""

#: ../../../reference/conanfile/tools/meson/mesondeps.rst:85
msgid ""
"Those variables are added automatically as part of the built-in options "
"declared by ``MesonToolchain`` generator: ``c_args``, ``c_link_args``, "
"``cpp_args``, ``cpp_link_args``."
msgstr ""

#: ../../../reference/conanfile/tools/meson/mesondeps.rst:91
msgid ""
"For now, only the ``requires`` information is generated, the "
"``tool_requires`` one is not managed by this generator yet."
msgstr ""

#: ../../../reference/conanfile/tools/meson/mesondeps.rst:95
msgid "Attributes"
msgstr ""

#: ../../../reference/conanfile/tools/meson/mesondeps.rst:97
msgid ""
"``c_args``, ``c_link_args``, ``cpp_args``, ``cpp_link_args``: list of flags "
"that accumulate all dependencies information. Each one is saved as "
"``deps_c_args``, ``deps_c_link_args``, ``deps_cpp_args``, and "
"``deps_cpp_link_args``, respectively in the `conan_meson_deps_flags.ini` "
"file."
msgstr ""

#: ../../../reference/conanfile/tools/meson/mesondeps.rst:115
msgid ""
"from conan import ConanFile\n"
"from conan.tools.meson import MesonDeps\n"
"\n"
"class App(ConanFile):\n"
"    settings = \"os\", \"arch\", \"compiler\", \"build_type\"\n"
"\n"
"    def generate(self):\n"
"        tc = MesonDeps(self)\n"
"        tc.c_args.append(\"-val1\")\n"
"        tc.c_link_args.append(\"-val2\")\n"
"        tc.cpp_args.append(\"-val3\")\n"
"        tc.cpp_link_args.append(\"-val4\")\n"
"        tc.generate()"
msgstr ""
