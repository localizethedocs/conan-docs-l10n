# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2022, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.52\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:21+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../integrations/ci/gitlab.rst:7
msgid "|gitlab_logo| Gitlab"
msgstr ""

#: ../../../integrations/ci/gitlab.rst:9
msgid ""
"You can use the `Gitlab CI`_ cloud or local service to automatically build "
"and test your project in Linux/MacOS/Windows environments. It is free for "
"OSS projects, and offers an easy integration with Gitlab, so builds can be "
"automatically fired in Gitlab CI after a :command:`git push` to Gitlab."
msgstr ""

#: ../../../integrations/ci/gitlab.rst:13
msgid "You can use Gitlab CI both for:"
msgstr ""

#: ../../../integrations/ci/gitlab.rst:15
msgid ""
"Building and testing your project, which manages dependencies with Conan, "
"and probably a conanfile.txt file"
msgstr ""

#: ../../../integrations/ci/gitlab.rst:16
msgid ""
"Building and testing Conan binary packages for a given Conan package recipe "
"(with a conanfile.py)"
msgstr ""

#: ../../../integrations/ci/gitlab.rst:20
msgid "Building and testing your project"
msgstr ""

#: ../../../integrations/ci/gitlab.rst:22
msgid ""
"We are going to use an example with GTest package, with **Gitlab CI** "
"support to run the tests."
msgstr ""

#: ../../../integrations/ci/gitlab.rst:25
msgid "Clone the project from github:"
msgstr ""

#: ../../../integrations/ci/gitlab.rst:28
msgid "$ git clone https://github.com/lasote/conan-gtest-example"
msgstr ""

#: ../../../integrations/ci/gitlab.rst:33
msgid "Create a ``.gitlab-ci.yml`` file and paste this code in it:"
msgstr ""

#: ../../../integrations/ci/gitlab.rst:36
msgid ""
"image: conanio/gcc63\n"
"\n"
"build:\n"
"  before_script:\n"
"    # Upgrade Conan version\n"
"    - sudo pip install --upgrade conan\n"
"    # Automatic detection of your arch, compiler, etc.\n"
"    - conan user\n"
"\n"
"  script:\n"
"    # Download dependencies, build, test and create package\n"
"    - conan create . user/channel"
msgstr ""

#: ../../../integrations/ci/gitlab.rst:52
msgid ""
"Gitlab CI will install the **conan** tool and will execute the **conan "
"install** command. Then, the **script** section creates the build folder, "
"compiles the project with **cmake** and runs the **tests**."
msgstr ""

#: ../../../integrations/ci/gitlab.rst:57
msgid ""
"On Windows the Gitlab runner may be running as a service and not have a home "
"directory, in which case you need to set a custom value for "
"``CONAN_USER_HOME``."
msgstr ""

#: ../../../integrations/ci/gitlab.rst:60
msgid "Creating, testing and uploading Conan binary packages"
msgstr ""

#: ../../../integrations/ci/gitlab.rst:61
msgid ""
"You can use Gitlab CI to automate the building of binary packages, which "
"will be created in the cloud after pushing to Gitlab. You can probably setup "
"your own way, but Conan has some utilities to help in the process. The "
"command :command:`conan new` has arguments to create a default working ``."
"gitlab-ci.yml`` file. Other setups might be possible, but for this example "
"we are assuming that you are using github and also uploading your final "
"packages to your own Artifactory CE server. You could follow these steps:"
msgstr ""

#: ../../../integrations/ci/gitlab.rst:67
msgid ""
"First, create an empty gitlab repository, let's call it \"hello\", for "
"creating a \"hello world\" package. Gitlab allows to create it with a "
"Readme, license and .gitignore."
msgstr ""

#: ../../../integrations/ci/gitlab.rst:68
msgid ""
"Create a Conan repository in Artifactory CE, and get its URL (\"Set me "
"up\"). We will call it ``UPLOAD_URL``"
msgstr ""

#: ../../../integrations/ci/gitlab.rst:69
msgid ""
"Under your project page, *Settings -> Pipelines -> Add a variable*, add the "
"``CONAN_LOGIN_USERNAME`` and ``CONAN_PASSWORD`` environment variables with "
"the Artifactory CE user and password."
msgstr ""

#: ../../../integrations/ci/gitlab.rst:70
msgid "Clone the repo: :command:`git clone <your_repo/hello> && cd hello`."
msgstr ""

#: ../../../integrations/ci/gitlab.rst:71
msgid ""
"Create the package: :command:`conan new hello/0.1@myteam/testing -t -s -"
"ciglg -ciglc -cis -ciu=UPLOAD_URL`"
msgstr ""

#: ../../../integrations/ci/gitlab.rst:72
msgid ""
"You can inspect the created files: both *.gitlab-ci.yml* and the *build.py* "
"script, that is used by **conan-package-tools** utility to split different "
"builds with different configurations in different GitLab CI jobs."
msgstr ""

#: ../../../integrations/ci/gitlab.rst:74
msgid ""
"You can test locally, before pushing, with :command:`conan create` or by "
"GitLab Runner."
msgstr ""

#: ../../../integrations/ci/gitlab.rst:75
msgid ""
"Add the changes, commit and push: :command:`git add . && git commit -m "
"\"first commit\" && git push`."
msgstr ""

#: ../../../integrations/ci/gitlab.rst:76
msgid "Go to Pipelines page and see the pipeline, with the different jobs."
msgstr ""

#: ../../../integrations/ci/gitlab.rst:77
msgid ""
"When it has finished, go to your Artifactory CE repository, you should see "
"there the uploaded packages for different configurations."
msgstr ""

#: ../../../integrations/ci/gitlab.rst:78
msgid ""
"Check locally, searching in Artifactory CE: :command:`conan search "
"hello/0.1@myteam/testing -r=myremote`."
msgstr ""

#: ../../../integrations/ci/gitlab.rst:80
msgid ""
"If something fails, please report an issue in the **conan-package-tools** "
"github repository: https://github.com/conan-io/conan-package-tools"
msgstr ""
