# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2022, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.52\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:21+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/config_files/settings.yml.rst:4
msgid "settings.yml"
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:6
msgid ""
"The input ``settings`` for packages in Conan are predefined in ``~/.conan/"
"settings.yml`` file, so only a few like ``os`` or ``compiler`` are possible. "
"These are the **default** values, but it is possible to customize them, see :"
"ref:`custom_settings`."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:9
msgid ""
"# Only for cross building, 'os_build/arch_build' is the system that runs "
"Conan\n"
"os_build: [Windows, WindowsStore, Linux, Macos, FreeBSD, SunOS, AIX, "
"VxWorks]\n"
"arch_build: [x86, x86_64, ppc32be, ppc32, ppc64le, ppc64, armv5el, armv5hf, "
"armv6, armv7, armv7hf, armv7s, armv7k, armv8, armv8_32, armv8.3, sparc, "
"sparcv9, mips, mips64, avr, s390, s390x, sh4le, e2k-v2, e2k-v3, e2k-v4, e2k-"
"v5, e2k-v6, e2k-v7]\n"
"\n"
"# Only for building cross compilation tools, 'os_target/arch_target' is the "
"system for\n"
"# which the tools generate code\n"
"os_target: [Windows, Linux, Macos, Android, iOS, watchOS, tvOS, FreeBSD, "
"SunOS, AIX, Arduino, Neutrino]\n"
"arch_target: [x86, x86_64, ppc32be, ppc32, ppc64le, ppc64, armv5el, armv5hf, "
"armv6, armv7, armv7hf, armv7s, armv7k, armv8, armv8_32, armv8.3, sparc, "
"sparcv9, mips, mips64, avr, s390, s390x, asm.js, wasm, sh4le, e2k-v2, e2k-"
"v3, e2k-v4, e2k-v5, e2k-v6, e2k-v7, xtensalx6, xtensalx106]\n"
"\n"
"# Rest of the settings are \"host\" settings:\n"
"# - For native building/cross building: Where the library/program will run.\n"
"# - For building cross compilation tools: Where the cross compiler will "
"run.\n"
"os:\n"
"    Windows:\n"
"        subsystem: [None, cygwin, msys, msys2, wsl]\n"
"    WindowsStore:\n"
"        version: [\"8.1\", \"10.0\"]\n"
"    WindowsCE:\n"
"        platform: ANY\n"
"        version: [\"5.0\", \"6.0\", \"7.0\", \"8.0\"]\n"
"    Linux:\n"
"    Macos:\n"
"        version: [None, \"10.6\", \"10.7\", \"10.8\", \"10.9\", \"10.10\", "
"\"10.11\", \"10.12\", \"10.13\", \"10.14\", \"10.15\", \"11.0\", \"12.0\", "
"\"13.0\"]\n"
"        sdk: [None, \"macosx\"]\n"
"        sdk_version: [None, \"10.13\", \"10.14\", \"10.15\", \"11.0\", "
"\"11.1\", \"11.3\", \"12.0\", \"12.1\"]\n"
"        subsystem: [None, catalyst]\n"
"    Android:\n"
"        api_level: ANY\n"
"    iOS:\n"
"        version: [\"7.0\", \"7.1\", \"8.0\", \"8.1\", \"8.2\", \"8.3\", "
"\"9.0\", \"9.1\", \"9.2\", \"9.3\", \"10.0\", \"10.1\", \"10.2\", \"10.3\",\n"
"                \"11.0\", \"11.1\", \"11.2\", \"11.3\", \"11.4\", \"12.0\", "
"\"12.1\", \"12.2\", \"12.3\", \"12.4\",\n"
"                \"13.0\", \"13.1\", \"13.2\", \"13.3\", \"13.4\", \"13.5\", "
"\"13.6\", \"13.7\",\n"
"                \"14.0\", \"14.1\", \"14.2\", \"14.3\", \"14.4\", \"14.5\", "
"\"14.6\", \"14.7\", \"14.8\", \"15.0\", \"15.1\"]\n"
"        sdk: [None, \"iphoneos\", \"iphonesimulator\"]\n"
"        sdk_version: [None, \"11.3\", \"11.4\", \"12.0\", \"12.1\", "
"\"12.2\", \"12.4\",\n"
"                    \"13.0\", \"13.1\", \"13.2\", \"13.4\", \"13.5\", "
"\"13.6\", \"13.7\",\n"
"                    \"14.0\", \"14.1\", \"14.2\", \"14.3\", \"14.4\", "
"\"14.5\", \"15.0\", \"15.2\"]\n"
"    watchOS:\n"
"        version: [\"4.0\", \"4.1\", \"4.2\", \"4.3\", \"5.0\", \"5.1\", "
"\"5.2\", \"5.3\", \"6.0\", \"6.1\", \"6.2\",\n"
"                \"7.0\", \"7.1\", \"7.2\", \"7.3\", \"7.4\", \"7.5\", "
"\"7.6\", \"8.0\", \"8.1\"]\n"
"        sdk: [None, \"watchos\", \"watchsimulator\"]\n"
"        sdk_version: [None, \"4.3\", \"5.0\", \"5.1\", \"5.2\", \"5.3\", "
"\"6.0\", \"6.1\", \"6.2\",\n"
"                    \"7.0\", \"7.1\", \"7.2\", \"7.4\", \"8.0\", \"8.0.1\", "
"\"8.3\"]\n"
"    tvOS:\n"
"        version: [\"11.0\", \"11.1\", \"11.2\", \"11.3\", \"11.4\", "
"\"12.0\", \"12.1\", \"12.2\", \"12.3\", \"12.4\",\n"
"                \"13.0\", \"13.2\", \"13.3\", \"13.4\", \"14.0\", \"14.2\", "
"\"14.3\", \"14.4\", \"14.5\", \"14.6\", \"14.7\",\n"
"                \"15.0\", \"15.1\"]\n"
"        sdk: [None, \"appletvos\", \"appletvsimulator\"]\n"
"        sdk_version: [None, \"11.3\", \"11.4\", \"12.0\", \"12.1\", "
"\"12.2\", \"12.4\",\n"
"                    \"13.0\", \"13.1\", \"13.2\", \"13.4\", \"14.0\", "
"\"14.2\", \"14.3\", \"14.5\", \"15.0\", \"15.2\"]\n"
"    FreeBSD:\n"
"    SunOS:\n"
"    AIX:\n"
"    Arduino:\n"
"        board: ANY\n"
"    Emscripten:\n"
"    Neutrino:\n"
"        version: [\"6.4\", \"6.5\", \"6.6\", \"7.0\", \"7.1\"]\n"
"    baremetal:\n"
"    VxWorks:\n"
"        version: [\"7\"]\n"
"arch: [x86, x86_64, ppc32be, ppc32, ppc64le, ppc64, armv4, armv4i, armv5el, "
"armv5hf, armv6, armv7, armv7hf, armv7s, armv7k, armv8, armv8_32, armv8.3, "
"sparc, sparcv9, mips, mips64, avr, s390, s390x, asm.js, wasm, sh4le, e2k-v2, "
"e2k-v3, e2k-v4, e2k-v5, e2k-v6, e2k-v7, xtensalx6, xtensalx106]\n"
"compiler:\n"
"    sun-cc:\n"
"        version: [\"5.10\", \"5.11\", \"5.12\", \"5.13\", \"5.14\", "
"\"5.15\"]\n"
"        threads: [None, posix]\n"
"        libcxx: [libCstd, libstdcxx, libstlport, libstdc++]\n"
"    gcc: &gcc\n"
"        version: [\"4.1\", \"4.4\", \"4.5\", \"4.6\", \"4.7\", \"4.8\", "
"\"4.9\",\n"
"                \"5\", \"5.1\", \"5.2\", \"5.3\", \"5.4\", \"5.5\",\n"
"                \"6\", \"6.1\", \"6.2\", \"6.3\", \"6.4\", \"6.5\",\n"
"                \"7\", \"7.1\", \"7.2\", \"7.3\", \"7.4\", \"7.5\",\n"
"                \"8\", \"8.1\", \"8.2\", \"8.3\", \"8.4\",\n"
"                \"9\", \"9.1\", \"9.2\", \"9.3\",\n"
"                \"10\", \"10.1\", \"10.2\", \"10.3\",\n"
"                \"11\", \"11.1\", \"11.2\",\n"
"                \"12\"]\n"
"        libcxx: [libstdc++, libstdc++11]\n"
"        threads: [None, posix, win32]  # Windows MinGW\n"
"        exception: [None, dwarf2, sjlj, seh]  # Windows MinGW\n"
"        cppstd: [None, 98, gnu98, 11, gnu11, 14, gnu14, 17, gnu17, 20, "
"gnu20, 23, gnu23]\n"
"    Visual Studio: &visual_studio\n"
"        runtime: [MD, MT, MTd, MDd]\n"
"        version: [\"8\", \"9\", \"10\", \"11\", \"12\", \"14\", \"15\", "
"\"16\", \"17\"]\n"
"        toolset: [None, v90, v100, v110, v110_xp, v120, v120_xp,\n"
"                v140, v140_xp, v140_clang_c2, LLVM-vs2012, LLVM-vs2012_xp,\n"
"                LLVM-vs2013, LLVM-vs2013_xp, LLVM-vs2014, LLVM-vs2014_xp,\n"
"                LLVM-vs2017, LLVM-vs2017_xp, v141, v141_xp, v141_clang_c2, "
"v142,\n"
"                llvm, ClangCL, v143]\n"
"        cppstd: [None, 14, 17, 20, 23]\n"
"    msvc:\n"
"        version: [190, 191, 192, 193]\n"
"        update: [None, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
"        runtime: [static, dynamic]\n"
"        runtime_type: [Debug, Release]\n"
"        cppstd: [14, 17, 20, 23]\n"
"    clang:\n"
"        version: [\"3.3\", \"3.4\", \"3.5\", \"3.6\", \"3.7\", \"3.8\", "
"\"3.9\", \"4.0\",\n"
"                \"5.0\", \"6.0\", \"7.0\", \"7.1\",\n"
"                \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"]\n"
"        libcxx: [None, libstdc++, libstdc++11, libc++, c++_shared, c+"
"+_static]\n"
"        cppstd: [None, 98, gnu98, 11, gnu11, 14, gnu14, 17, gnu17, 20, "
"gnu20, 23, gnu23]\n"
"        runtime: [None, MD, MT, MTd, MDd]\n"
"    apple-clang: &apple_clang\n"
"        version: [\"5.0\", \"5.1\", \"6.0\", \"6.1\", \"7.0\", \"7.3\", "
"\"8.0\", \"8.1\", \"9.0\", \"9.1\", \"10.0\", \"11.0\", \"12.0\", \"13.0\"]\n"
"        libcxx: [libstdc++, libc++]\n"
"        cppstd: [None, 98, gnu98, 11, gnu11, 14, gnu14, 17, gnu17, 20, "
"gnu20]\n"
"    intel:\n"
"        version: [\"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", "
"\"18\", \"19\", \"19.1\"]\n"
"        update: [None, ANY]\n"
"        base:\n"
"            gcc:\n"
"                <<: *gcc\n"
"                threads: [None]\n"
"                exception: [None]\n"
"            Visual Studio:\n"
"                <<: *visual_studio\n"
"            apple-clang:\n"
"                <<: *apple_clang\n"
"    intel-cc:\n"
"        version: [\"2021.1\", \"2021.2\", \"2021.3\"]\n"
"        update: [None, ANY]\n"
"        mode: [\"icx\", \"classic\", \"dpcpp\"]\n"
"        libcxx: [None, libstdc++, libstdc++11, libc++]\n"
"        cppstd: [None, 98, gnu98, 03, gnu03, 11, gnu11, 14, gnu14, 17, "
"gnu17, 20, gnu20, 23, gnu23]\n"
"        runtime: [None, static, dynamic]\n"
"        runtime_type: [None, Debug, Release]\n"
"    qcc:\n"
"        version: [\"4.4\", \"5.4\", \"8.3\"]\n"
"        libcxx: [cxx, gpp, cpp, cpp-ne, accp, acpp-ne, ecpp, ecpp-ne]\n"
"        cppstd: [None, 98, gnu98, 11, gnu11, 14, gnu14, 17, gnu17]\n"
"    mcst-lcc:\n"
"        version: [\"1.19\", \"1.20\", \"1.21\", \"1.22\", \"1.23\", "
"\"1.24\", \"1.25\"]\n"
"        base:\n"
"            gcc:\n"
"                <<: *gcc\n"
"                threads: [None]\n"
"                exceptions: [None]\n"
"\n"
"build_type: [None, Debug, Release, RelWithDebInfo, MinSizeRel]\n"
"\n"
"\n"
"cppstd: [None, 98, gnu98, 11, gnu11, 14, gnu14, 17, gnu17, 20, gnu20, 23, "
"gnu23]  # Deprecated, use compiler.cppstd"
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:156
msgid ""
"As you can see, the possible values ``settings`` can take are restricted in "
"the same file. This is done to ensure matching naming and spelling as well "
"as defining a common settings model among users and the OSS community. If a "
"setting is allowed to be set to any value, you can use ``ANY``. If a setting "
"is allowed to be set to any value or it can also be unset, you can use "
"``[None, ANY]``."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:161
msgid ""
"However, this configuration file can be modified to any needs, including new "
"settings or subsettings and their values. If you want to distribute a "
"unified *settings.yml* file you can use the :ref:`conan config install "
"command<conan_config_install>`."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:166
msgid ""
"The *settings.yml* file is not perfect nor definitive and surely incomplete. "
"Please share any suggestion in the Conan issue tracker with any missing "
"settings and values that could make sense for other users."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:169
msgid ""
"To force the creation of the *settings.yml* the command ``conan config "
"init`` is available."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:172
msgid "Operating systems"
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:174
msgid ""
"``baremetal`` operating system (introduced in Conan 1.43) is a convention "
"meaning that the binaries run directly on the hardware, without a operating "
"system or equivalent layer. This is to differentiate to the ``None`` value, "
"which is associated to the \"this value is not defined\" semantics. The "
"``baremetal`` is a common name convention for embedded microprocessors and "
"microcontrollers code. It is expected that users might customize the space "
"inside the ``baremetal`` setting with further subsettings to specify their "
"specific hardware platforms, boards, families, etc. At the moment (Conan "
"1.43) the ``os=baremetal`` value is still not used by Conan builtin "
"toolchains and helpers, but it is expected that they can evolve and start "
"using it."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:183
msgid "Compilers"
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:185
msgid "Some notes about different compilers:"
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:188
msgid "msvc"
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:190
msgid ""
"The new ``msvc`` compiler is a new, **experimental** one, that is intended "
"to deprecate the ``Visual Studio`` one in Conan 2.0:"
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:192
msgid ""
"It uses the compiler version, that is 190 (19.0), 191 (19.1), etc, instead "
"of the Visual Studio IDE (15, 16, etc)."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:193
msgid ""
"It is only used by the new build integrations in :ref:`conan_tools_cmake` "
"and :ref:`conan_tools_microsoft`, but not the previous ones."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:194
msgid ""
"At the moment it implements a ``compatible_packages`` fallback to Visual "
"Studio compiled packages, that is, previous existing binaries compiled with "
"``settings.compiler=\"Visual Studio\"`` can be used for the ``msvc`` "
"compiler if no binaries exist for it yet. This behavior can be opted-out "
"with ``core.package_id:msvc_visual_incompatible`` :ref:`global_conf` "
"configuration."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:198
msgid ""
"When using the ``msvc`` compiler, the Visual Studio toolset version (the "
"actual ``vcvars`` activation and ``MSBuild`` location) will be defined by "
"the default provide of that compiler version:"
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:201
msgid "``msvc`` compiler version '190': Visual Studio 14 2015"
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:202
msgid "``msvc`` compiler version '191': Visual Studio 15 2017"
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:203
msgid "``msvc`` compiler version '192': Visual Studio 16 2019"
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:205
msgid ""
"This can be configured in your profiles with the ``tools.microsoft.msbuild:"
"vs_version`` configuration:"
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:207
msgid ""
"[settings]\n"
"compiler=msvc\n"
"compiler.version=190\n"
"\n"
"[conf]\n"
"tools.microsoft.msbuild:vs_version = 16"
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:217
msgid ""
"In this case, the ``vcvars`` will activate the Visual Studio 16 "
"installation, but the ``190`` compiler version will still be used because "
"the necessary ``toolset=v140`` will be set."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:220
msgid ""
"The settings define the last digit ``update: [None, 0, 1, 2, 3, 4, 5, 6, 7, "
"8, 9]``, which by default is ``None``, means that Conan assumes binary "
"compatibility for the compiler patches, which works in general for the "
"Microsoft compilers. For cases where finer control is desired, you can just "
"add the ``update`` part to your profiles:"
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:224
msgid ""
"[settings]\n"
"compiler=msvc\n"
"compiler.version=191\n"
"compiler.version.update=3"
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:232
msgid ""
"This will be equivalent to the full version ``1913 (19.13)``. If even "
"further details is desired, you could even add your own digits to the "
"``update`` subsetting in ``settings.yml``."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:237
msgid "clang"
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:239
msgid ""
"The release 13.0.0 will be released officially on September 21, 2021. "
"However, Conan 1.40 will support it in settings.yml before the final "
"release. It will be considered as **experimental** in case of "
"incompatibility until the release."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:244
msgid "intel-cc"
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:246
msgid ""
"Available since: `1.41.0 <https://github.com/conan-io/conan/releases/"
"tag/1.41.0>`_"
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:248
msgid ""
"This compiler is a new, **experimental** one, aimed to handle the new Intel "
"oneAPI DPC++/C++/Classic compilers. Instead of having *n* different "
"compilers, you have 3 different **modes** of working:"
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:250
msgid "``icx`` for Intel oneAPI C++."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:251
msgid "``dpcpp`` for Intel oneAPI DPC++."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:252
msgid "``classic`` for Intel C++ Classic ones."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:254
msgid ""
"Besides that, Intel releases some versions with revisions numbers so the "
"``update`` field it's supposed to be any possible minor number for the Intel "
"compiler version used, e.g, ``compiler.version=2021.1`` and ``compiler."
"update=311`` mean Intel version is ``2021.1.311``."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:258
msgid ""
"For more information, you can check the :ref:`IntelCC section "
"<conan_tools_intel>`."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:261
msgid "Architectures"
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:263
msgid ""
"Here you can find a brief explanation of each of the architectures defined "
"as ``arch``, ``arch_build`` and ``arch_target`` settings."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:265
msgid "**x86**: The popular 32 bit x86 architecture."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:267
msgid "**x86_64**: The popular 64 bit x64 architecture."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:269
msgid "**ppc64le**: The PowerPC 64 bit Big Endian architecture."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:271
msgid "**ppc32**: The PowerPC 32 bit architecture."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:273
msgid "**ppc64le**: The PowerPC 64 bit Little Endian architecture."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:275
msgid "**ppc64**: The PowerPC 64 bit Big Endian architecture."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:277
msgid "**armv5el**: The ARM 32 bit version 5 architecture, soft-float."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:279
msgid "**armv5hf**: The ARM 32 bit version 5 architecture, hard-float."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:281
msgid "**armv6**: The ARM 32 bit version 6 architecture."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:283
msgid "**armv7**: The ARM 32 bit version 7 architecture."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:285
msgid "**armv7hf**: The ARM 32 bit version 7 hard-float architecture."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:287
msgid ""
"**armv7s**: The ARM 32 bit version 7 *swift* architecture mostly used in "
"Apple's A6 and A6X chips on iPhone 5, iPhone 5C and iPad 4."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:289
msgid ""
"**armv7k**: The ARM 32 bit version 7 *k* architecture mostly used in Apple's "
"WatchOS."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:291
msgid ""
"**armv8**: The ARM 64 bit and 32 bit compatible version 8 architecture. It "
"covers only the ``aarch64`` instruction set."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:293
msgid ""
"**armv8_32**: The ARM 32 bit version 8 architecture. It covers only the "
"``aarch32`` instruction set (a.k.a. ``ILP32``)."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:295
msgid ""
"**armv8.3**: The ARM 64 bit and 32 bit compatible version 8.3 architecture. "
"Also known as ``arm64e``, it is used on the A12 chipset added in the latest "
"iPhone models (XS/XS Max/XR)."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:298
msgid ""
"**sparc**: The SPARC (Scalable Processor Architecture) originally developed "
"by Sun Microsystems."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:300
msgid "**sparcv9**: The SPARC version 9 architecture."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:302
msgid ""
"**mips**: The 32 bit MIPS (Microprocessor without Interlocked Pipelined "
"Stages) developed by MIPS Technologies (formerly MIPS Computer Systems)."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:305
msgid ""
"**mips64**: The 64 bit MIPS (Microprocessor without Interlocked Pipelined "
"Stages) developed by MIPS Technologies (formerly MIPS Computer Systems)."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:308
msgid ""
"**avr**: The 8 bit AVR microcontroller architecture developed by Atmel "
"(Microchip Technology)."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:310
msgid ""
"**s390**: The 32 bit address Enterprise Systems Architecture 390 from IBM."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:312
msgid ""
"**s390x**: The 64 bit address Enterprise Systems Architecture 390 from IBM."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:314
msgid ""
"**asm.js**: The subset of JavaScript that can be used as low-level target "
"for compilers, not really a processor architecture, it's produced by "
"Emscripten. Conan treats it as an architecture to align with build systems "
"design (e.g. GNU auto tools and CMake)."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:317
msgid ""
"**wasm**: The Web Assembly, not really a processor architecture, but byte-"
"code format for Web, it's produced by Emscripten. Conan treats it as an "
"architecture to align with build systems design (e.g. GNU auto tools and "
"CMake)."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:320
msgid "**sh4le**: The Hitachi SH-4 SuperH architecture."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:322
msgid ""
"**e2k-v2**: The Elbrus 2000 v2 512 bit VLIW (Very Long Instruction Word) "
"architecture (Elbrus 2CM, Elbrus 2C+ CPUs) originally developed by MCST "
"(Moscow Center of SPARC Technologies)."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:324
msgid ""
"**e2k-v3**: The Elbrus 2000 v3 512 bit VLIW (Very Long Instruction Word) "
"architecture (Elbrus 2S, aka Elbrus 4C, CPU) originally developed by MCST "
"(Moscow Center of SPARC Technologies)."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:326
msgid ""
"**e2k-v4**: The Elbrus 2000 v4 512 bit VLIW (Very Long Instruction Word) "
"architecture (Elbrus 8C, Elbrus 8C1, Elbrus 1C+ and Elbrus 1CK CPUs) "
"originally developed by MCST (Moscow Center of SPARC Technologies)."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:328
msgid ""
"**e2k-v5**: The Elbrus 2000 v5 512 bit VLIW (Very Long Instruction Word) "
"architecture (Elbrus 8C2 ,aka Elbrus 8CB, CPU) originally developed by MCST "
"(Moscow Center of SPARC Technologies)."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:330
msgid ""
"**e2k-v6**: The Elbrus 2000 v6 512 bit VLIW (Very Long Instruction Word) "
"architecture (Elbrus 2C3, Elbrus 12C and Elbrus 16C CPUs) originally "
"developed by MCST (Moscow Center of SPARC Technologies)."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:332
msgid ""
"**e2k-v7**: The Elbrus 2000 v7 512 bit VLIW (Very Long Instruction Word) "
"architecture (Elbrus 32C CPU) originally developed by MCST (Moscow Center of "
"SPARC Technologies)."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:336
msgid "C++ standard libraries (aka compiler.libcxx)"
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:338
msgid ""
"``compiler.libcxx`` sub-setting defines C++ standard libraries "
"implementation to be used. The sub-setting applies only to certain "
"compilers, e.g. it applies to *clang*, *apple-clang* and *gcc*, but doesn't "
"apply to *Visual Studio*."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:341
msgid ""
"**libstdc++** (gcc, clang, apple-clang, sun-cc): `The GNU C++ Library "
"<https://gcc.gnu.org/onlinedocs/libstdc++/>`__. NOTE that this implicitly "
"defines **_GLIBCXX_USE_CXX11_ABI=0** to use old ABI. See :ref:`How to manage "
"the GCC >= 5 ABI <manage_gcc_abi>` for the additional details. Might be a "
"wise choice for old systems, such as CentOS 6. On Linux systems, you may "
"need to install `libstdc++-dev <https://packages.debian.org/sid/libstdc++-"
"dev>`_ (package name could be different in various distros) in order to use "
"the standard library. NOTE that on Apple systems usage of **libstdc++** has "
"been deprecated."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:346
msgid ""
"**libstdc++11** (gcc, clang, apple-clang): `The GNU C++ Library <https://gcc."
"gnu.org/onlinedocs/libstdc++/>`__. NOTE that this implicitly defines "
"**_GLIBCXX_USE_CXX11_ABI=1** to use new ABI. See :ref:`How to manage the GCC "
">= 5 ABI <manage_gcc_abi>` for the additional details. Might be a wise "
"choice for newer systems, such as Ubuntu 20. On Linux systems, you may need "
"to install `libstdc++-dev <https://packages.debian.org/sid/libstdc++-dev>`_ "
"(package name could be different in various distros) in order to use the "
"standard library. NOTE that on Apple systems usage of **libstdc++** has been "
"deprecated."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:351
msgid ""
"**libc++** (clang, apple-clang): `LLVM libc++ <https://libcxx.llvm.org/>`__. "
"On Linux systems, you may need to install `libc++-dev <https://packages."
"debian.org/sid/libc++-dev>`_ (package name could be different in various "
"distros) in order to use the standard library."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:354
msgid ""
"**c++_shared** (clang, Android only): use `LLVM libc++ <https://libcxx.llvm."
"org/>`__ as a shared library. Refer to the `C++ Library Support <https://"
"developer.android.com/ndk/guides/cpp-support>`__ for the additiona details."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:357
msgid ""
"**c++_static** (clang, Android only): use `LLVM libc++ <https://libcxx.llvm."
"org/>`__ as a static library. Refer to the `C++ Library Support <https://"
"developer.android.com/ndk/guides/cpp-support>`__ for the additiona details."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:360
msgid ""
"**libCstd** (sun-cc): Rogue Wave's stdlib. See `Comparing C++ Standard "
"Libraries libCstd, libstlport, and libstdcxx <https://www.oracle.com/solaris/"
"technologies/cmp-stlport-libcstd.html>`__."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:362
msgid ""
"**libstlport** (sun-cc): `STLport <http://www.stlport.org/>`__. See "
"`Comparing C++ Standard Libraries libCstd, libstlport, and libstdcxx "
"<https://www.oracle.com/solaris/technologies/cmp-stlport-libcstd.html>`__."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:364
msgid ""
"**libstdcxx** (sun-cc): `Apache C++ Standard Library <http://people.apache."
"org/~gmcdonald/stdcxx/index.html>`__. See `Comparing C++ Standard Libraries "
"libCstd, libstlport, and libstdcxx <https://www.oracle.com/solaris/"
"technologies/cmp-stlport-libcstd.html>`__."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:366
msgid ""
"**gpp** (qcc): GNU C++ lib. See `QCC documentation <https://www.qnx.com/"
"developers/docs/6.5.0SP1.update/com.qnx.doc.neutrino_utilities/q/qcc."
"html>`__."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:368
msgid ""
"**cpp** (qcc): Dinkum C++ lib. See `QCC documentation <https://www.qnx.com/"
"developers/docs/6.5.0SP1.update/com.qnx.doc.neutrino_utilities/q/qcc."
"html>`__."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:370
msgid ""
"**cpp-ne** (qcc): Dinkum C++ lib (no exceptions). See `QCC documentation "
"<https://www.qnx.com/developers/docs/6.5.0SP1.update/com.qnx.doc."
"neutrino_utilities/q/qcc.html>`__."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:372
msgid ""
"**acpp** (qcc): Dinkum Abridged C++ lib. See `QCC documentation <https://www."
"qnx.com/developers/docs/6.5.0SP1.update/com.qnx.doc.neutrino_utilities/q/qcc."
"html>`__."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:374
msgid ""
"**acpp-ne** (qcc): Dinkum Abridged C++ lib (no exceptions). See `QCC "
"documentation <https://www.qnx.com/developers/docs/6.5.0SP1.update/com.qnx."
"doc.neutrino_utilities/q/qcc.html>`__."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:376
msgid ""
"**ecpp** (qcc): Embedded Dinkum C++ lib. See `QCC documentation <https://www."
"qnx.com/developers/docs/6.5.0SP1.update/com.qnx.doc.neutrino_utilities/q/qcc."
"html>`__."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:378
msgid ""
"**ecpp-ne** (qcc): Embedded Dinkum C++ lib (no exceptions). See `QCC "
"documentation <https://www.qnx.com/developers/docs/6.5.0SP1.update/com.qnx."
"doc.neutrino_utilities/q/qcc.html>`__."
msgstr ""

#: ../../../reference/config_files/settings.yml.rst:380
msgid ""
"**cxx** (qcc): LLVM C++. See `QCC documentation <https://www.qnx.com/"
"developers/docs/6.5.0SP1.update/com.qnx.doc.neutrino_utilities/q/qcc."
"html>`__."
msgstr ""
