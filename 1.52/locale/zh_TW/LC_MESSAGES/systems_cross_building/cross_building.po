# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2022, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.52\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:21+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../systems_cross_building/cross_building.rst:4
msgid "Cross building"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:6
msgid ""
"Cross building (or cross compilation) is the process of generating binaries "
"for a platform that is not the one where the compiling process is running."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:9
msgid ""
"Cross compilation is mostly used to build software for an alien device, such "
"as an embedded device where you don't have an operating system nor a "
"compiler available. It's also used to build software for slower devices, "
"like an Android machine or a Raspberry Pi where running the native "
"compilation will take too much time."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:13
msgid ""
"In order to cross build a codebase the right toolchain is needed, with a "
"proper compiler (cross compiler), a linker and the set of libraries matching "
"the ``host`` platform."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:18
msgid "GNU triplet convention"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:20
msgid ""
"According to the GNU convention, there are three platforms involved in the "
"software building:"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:22
msgid ""
"**Build platform:** The platform on which the compilation tools are being "
"executed."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:23
msgid ""
"**Host platform:** The platform on which the generated binaries will run."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:24
msgid ""
"**Target platform:** Only when building a cross compiler, it is the platform "
"it will generate binaries for."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:27
msgid ""
"Depending on the values of these platforms, there are different scenarios:"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:29
msgid ""
"**Native building**: when the ``build`` and the ``host`` platforms are the "
"same, it means that the platform where the compiler is running is the same "
"one where the generated binaries will run. This is the most common scenario."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:32
msgid ""
"**Cross building**: when the ``build`` and the ``host`` platform are "
"different, it requires a cross compiler running in the build platform that "
"generates binaries for the host platform."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:36
msgid ""
"The ``target`` platform plays an important role when compiling a cross "
"compiler, in that scenario the ``target`` is the platform the compiler will "
"generate binaries for: in order to be a cross compiler the ``host`` platform "
"(where the cross compiler will run) has to be different from the ``target`` "
"platform. If the ``build`` platform is also different, it is called "
"**Canadian Cross**."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:41
msgid "Let's illustrate these scenarios with some examples:"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:43
msgid ""
"The Android NDK is a cross compiler to Android: it can be executed in Linux "
"(the ``build`` platform) to generate binaries for Android (the ``host`` "
"platform)."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:45
msgid ""
"The Android NDK was once compiled, during that compilation a different "
"compiler was used running in a ``build`` platform (maybe Windows) to "
"generate the actual Android NDK that will run in the ``host`` platform "
"Linux, and as we saw before, that Android NDK cross compiler will generate "
"binaries for a ``target`` platform which is Android."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:50
msgid ""
"**The values of the** ``build`` **,** ``host`` **and** ``target`` "
"**platforms are not absolute, and they depend on the process we are talking "
"about**: the ``host`` when compiling a cross compiler turns into the "
"``build`` when using that same cross compiler, or the ``target`` of the "
"cross compiler is the ``host`` platform when we are using it to build "
"binaries."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:58
msgid ""
"One way to avoid this complexity is to run the compilation in the host "
"platform, so both ``build`` and ``host`` will take the same value and it "
"will be a *native compilation*."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:63
msgid "Cross building with Conan"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:65
msgid ""
"If you want to cross build a Conan package (for example using your Linux "
"machine) to build the ``zlib`` Conan package for Windows, you need to tell "
"Conan where to find your toolchain/cross compiler."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:68
msgid "There are two approaches:"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:70
msgid ""
"Using a profile: install the toolchain in your computer and use a "
"``profile`` to declare the settings and point to the needed tools/libraries "
"in the toolchain using the ``[env]`` section to declare, at least, the "
"``CC`` and ``CXX`` environment variables."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:74
msgid ""
"Using tool requires: package the toolchain as a Conan package and include it "
"as a ``tool_requires``."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:78
msgid "Using a profile"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:80
msgid ""
"Using a Conan profile we can declare not only the ``settings`` that will "
"identify our binary (``host`` settings), but also all the environment "
"variables needed to use a toolchain or cross compiler. The profile needs the "
"following sections:"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:84
msgid ""
"A **[settings]** section containing the regular settings: ``os``, ``arch``, "
"``compiler`` and ``build_type`` depending on your library. These settings "
"will identify your binary."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:87
msgid ""
"An **[env]** section with a PATH variable pointing to your installed "
"toolchain. Also any other variable that the toolchain expects (read the docs "
"of your compiler). Some build systems need a variable ``SYSROOT`` to locate "
"where the host system libraries and tools are."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:91
msgid ""
"For example, in the following profile we declare the ``host`` platform to be "
"Windows x86_64 with the compiler, version and other settings we are using. "
"And we add the **[env]** section with all the variables needed to use an "
"installed toolchain:"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:95
#: ../../../systems_cross_building/cross_building.rst:389
msgid ""
"toolchain=/usr/x86_64-w64-mingw32 # Adjust this path\n"
"target_host=x86_64-w64-mingw32\n"
"cc_compiler=gcc\n"
"cxx_compiler=g++\n"
"\n"
"[env]\n"
"CONAN_CMAKE_FIND_ROOT_PATH=$toolchain  # Optional, for CMake to find things "
"in that folder\n"
"CONAN_CMAKE_SYSROOT=$toolchain  # Optional, if we want to define sysroot\n"
"CHOST=$target_host\n"
"AR=$target_host-ar\n"
"AS=$target_host-as\n"
"RANLIB=$target_host-ranlib\n"
"CC=$target_host-$cc_compiler\n"
"CXX=$target_host-$cxx_compiler\n"
"STRIP=$target_host-strip\n"
"RC=$target_host-windres\n"
"\n"
"[settings]\n"
"# We are cross-building to Windows\n"
"os=Windows\n"
"arch=x86_64\n"
"compiler=gcc\n"
"\n"
"# Adjust to the gcc version of your MinGW package\n"
"compiler.version=7.3\n"
"compiler.libcxx=libstdc++11\n"
"build_type=Release"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:125
msgid ""
"You can find working examples at the :ref:`bottom of this section "
"<cross_building_examples_profiles>`."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:131
msgid "Using tool requires"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:135
msgid ""
"The tool requirement was formerly named \"build requirement\" and has been "
"renamed to highlight that the usage of this kind of requirement must be for "
"\"tools\" exclusively, not being valid for libraries to express a "
"\"private\" require or other meanings."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:141
msgid ""
"This section refers to the **experimental feature** that is activated when "
"using ``--profile:build`` and ``--profile:host`` in the command-line. It is "
"currently under development, features can be added or removed in the "
"following versions."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:145
msgid ""
"Instead of manually downloading the toolchain and creating a profile, you "
"can create a Conan package with it. Starting with Conan v1.24 and the "
"command line arguments ``--profile:host`` and ``--profile:build`` this "
"should be a regular recipe, for older versions some more work is needed."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:151
msgid "Conan v1.24 and newer"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:153
msgid ""
"A recipe with a toolchain is like any other recipe with a binary executable:"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:155
msgid ""
"import os\n"
"from conans import ConanFile\n"
"\n"
"class MyToolchainXXXConan(ConanFile):\n"
"    name = \"my_toolchain\"\n"
"    version = \"0.1\"\n"
"    settings = \"os\", \"arch\", \"compiler\", \"build_type\"\n"
"\n"
"    # Implement source() and build() as usual\n"
"\n"
"    def package(self):\n"
"        # Copy all the required files for your toolchain\n"
"        self.copy(\"*\", dst=\"\", src=\"toolchain\")\n"
"\n"
"    def package_info(self):\n"
"        bin_folder = os.path.join(self.package_folder, \"bin\")\n"
"        self.env_info.CC = os.path.join(bin_folder, \"mycompiler-cc\")\n"
"        self.env_info.CXX = os.path.join(bin_folder, \"mycompiler-cxx\")\n"
"        self.env_info.SYSROOT = self.package_folder"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:178
msgid ""
"The Conan package with the toolchain needs to fill the ``env_info`` object "
"in the :ref:`package_info()<method_package_info>` method with the same "
"variables we've specified in the examples above in the ``[env]`` section of "
"profiles."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:182
msgid ""
"Then you will need to consume this recipe as any regular :ref:`tool requires "
"<build_requires>` that belongs to the ``build`` context: you need to use the "
"``--profile:build`` argument in the command line while creating your library:"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:185
msgid ""
"conan create path/to/conanfile.py --profile:build=profile_build --profile:"
"host=profile_host"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:195
msgid ""
"The profile ``profile_build`` will contain just the settings related to your "
"``build`` platform, where you are running the command, and the "
"``profile_host`` will list the settings for the ``host`` platform (and "
"eventually the ``my_toolchain/0.1`` as ``tool_requires`` if it is not listed "
"in the recipe itself)."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:199
msgid ""
"Conan will apply the appropiate profile to each recipe, and will inject the "
"environment of all the tool requirements that belong to the ``build`` "
"context before running the ``build()`` method of the libraries being "
"compiled. That way, the environment variables ``CC``, ``CXX`` and "
"``SYSROOT`` from ``my_toolchain/0.1`` will be available and also the path to "
"the ``bindirs`` directory from that package."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:204
msgid ""
"The above means that **Conan is able to compile the full graph in a single "
"execution**, it will compile the tool requires using the ``profile_build`` "
"and then it will compile the libraries using the ``host_profile`` settings "
"applying the environment of the former ones."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:208
msgid ""
"Starting with Conan v1.25 (if the user provides the ``--profile:build``) it "
"is possible to get the relative context where a recipe is running during a "
"Conan invocation. The object instantiated from the recipe contains the "
"following attributes:"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:212
msgid ""
"``self.settings`` will always contain the settings corresponding to the "
"binary to build/retrieve. It will contain the settings from the profile "
"``profile_host`` when this recipe appears in the ``host`` context and the "
"settings from the profile ``profile:build`` if this object belongs to the "
"``build`` context."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:215
msgid ""
"``self.settings_build`` will always contain the settings provided in the "
"profile ``profile_build``, even if the recipe appears in the ``build`` "
"context, the tool requirements of the tool requirements are expected to run "
"in the ``build`` machine too."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:218
msgid ""
"``self.settings_target``: for recipes in the ``host`` context this attribute "
"will be equal to ``None``, for those in the ``build`` context, if will "
"depend on the level of validation:"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:221
msgid ""
"for recipes that are tool requirements of packages in the ``host`` context, "
"this attribute will contain the settings from the profile ``profile_host``, "
"while"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:223
msgid ""
"for recipes that are tool requirements of other tool requirements the ``self."
"settings_target`` will contain the values of the ``profile_build``."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:226
msgid ""
"With previous attributes, a draft for a recipe that packages a cross "
"compiler could follow this pattern:"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:228
msgid ""
"class CrossCompiler(ConanFile):\n"
"    name = \"my_compiler\"\n"
"\n"
"    settings = \"os\", \"arch\", \"compiler\", \"build_type\"\n"
"    options = {\"target\": [\"ANY\"]}\n"
"    default_options = {\"shared\": False, \"target\": None}\n"
"\n"
"    def validate(self):\n"
"        settings_target = getattr(self, 'settings_target', None)\n"
"        if settings_target is None:\n"
"            # It is running in 'host', so Conan is compiling this package\n"
"            if not self.options.target:\n"
"                raise ConanInvalidConfiguration(\"A value for option "
"'target' has to be provided\")\n"
"        else:\n"
"            # It is running in 'build' and it is being used as a BR, "
"'target' can be inferred from settings\n"
"            if self.options.target:\n"
"                raise ConanInvalidConfiguration(\"Value for the option "
"'target' will be computed from settings_target\")\n"
"            self.options.target = \"<target-value>\"  # Use 'self."
"settings_target' to get this value"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:252
msgid "Conan older than v1.24"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:256
msgid ""
"We ask you to use the previous approach for Conan 1.24 and newer, and avoid "
"any specific modification of your recipes to make them work as tool "
"requirements in a cross building scenario."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:260
msgid ""
"With this approach, only one profile is provided in the command line (the "
"``--profile:host`` or just ``--profile``) and it has to define the "
"``os_build`` and ``arch_build`` settings too. The recipe of this tool "
"requires has to be modified to take into account these settings and the "
"``compiler`` and ``build_type`` settings have to be removed because their "
"values for the ``build`` platform are not defined in the profile:"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:267
msgid ""
"from conans import ConanFile\n"
"import os\n"
"\n"
"\n"
"class MyToolchainXXXConan(ConanFile):\n"
"    name = \"my_toolchain\"\n"
"    version = \"0.1\"\n"
"    settings = \"os_build\", \"arch_build\"\n"
"\n"
"    # As typically, this recipe doesn't declare 'compiler' and "
"'build_type',\n"
"    #   the source() and build() methods need a custom implementation\n"
"    def build(self):\n"
"        # Typically download the toolchain for the 'build' platform\n"
"        url = \"http://fake_url.com/installers/%s/%s/toolchain.tgz\" % "
"(os_build, os_arch)\n"
"        tools.download(url, \"toolchain.tgz\")\n"
"        tools.unzip(\"toolchain.tgz\")\n"
"\n"
"    def package(self):\n"
"        # Copy all the required files for your toolchain\n"
"        self.copy(\"*\", dst=\"\", src=\"toolchain\")\n"
"\n"
"    def package_info(self):\n"
"        bin_folder = os.path.join(self.package_folder, \"bin\")\n"
"        self.env_info.PATH.append(bin_folder)\n"
"        self.env_info.CC = os.path.join(bin_folder, \"mycompiler-cc\")\n"
"        self.env_info.CXX = os.path.join(bin_folder, \"mycompiler-cxx\")\n"
"        self.env_info.SYSROOT = self.package_folder"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:298
msgid ""
"With this approach we also need to add the path to the binaries to the "
"``PATH`` environment variable. The one and only profile has to include a "
"``[tool_requires]`` section with the reference to our new packaged toolchain "
"and it will also contain a ``[settings]`` section with the regular settings "
"plus the ``os_build`` and ``arch_build`` ones."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:302
msgid ""
"This approach requires a special profile, and it needs a modified recipe "
"without the ``compiler`` and ``build_type`` settings, Conan can still "
"compile it from sources but it won't be able to identify the binary properly "
"and it can be really to tackle if the tool requirements has other Conan "
"dependencies."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:308
msgid ""
"Host settings ``os_build``, ``arch_build``, ``os_target`` and ``arch_target``"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:312
msgid ""
"**These settings are being reviewed and might be deprecated in the future**, "
"we encourage you to try not to use them. If you need help with your use "
"case, please `open an issue in the Conan repository <https://github.com/"
"conan-io/conan/issues>`_ and we will help you."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:317
msgid ""
"Before Conan v1.24 the recommended way to deal with cross building was to "
"use some extra settings like ``os_build``, ``arch_build`` and ``os_target`` "
"and ``arch_target``. These settings have a special meaning for some Conan "
"tools and build helpers, but they also need to be listed in the recipes "
"themselves creating a dedicated set of recipes for *installers* and *tools* "
"in general. This approach should be superseeded with the introduction in "
"Conan 1.24 of the command line arguments ``--profile:host`` and ``--profile:"
"build`` that allow to declare two different profiles with all the "
"information needed for the corresponding platforms (see section above this "
"one)."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:325
msgid "The meaning of those settings is the following:"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:327
msgid ""
"The settings ``os_build`` and ``arch_build`` identify the ``build`` platform "
"according to the GNU convention triplet. These settings are detected the "
"first time you run Conan with the same values than the ``host`` settings, so "
"by default, we are doing **native building**. You will probably never need "
"to change the value of this setting because they describe where are you "
"running Conan."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:331
msgid ""
"The settings ``os_target`` and ``arch_target`` identify the ``target`` "
"platform. If you are building a cross compiler, these settings specify where "
"the compiled code will run."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:334
msgid ""
"The rest of settings, as we already know, identify the ``host`` platform."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:338
msgid "ARM architecture reference"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:340
msgid ""
"Remember that the Conan settings are intended to unify the different names "
"for operating systems, compilers, architectures etc."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:343
msgid ""
"Conan has different architecture settings for ARM: ``armv6``, ``armv7``, "
"``armv7hf``, ``armv8``. The \"problem\" with ARM architecture is that it's "
"frequently named in different ways, so maybe you are wondering what setting "
"do you need to specify in your case."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:347
msgid "Here is a table with some typical ARM platforms:"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:350
msgid "Platform"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:350
msgid "Conan setting"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:352
msgid "Raspberry PI 1"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:352
msgid "``armv6``"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:354
msgid "Raspberry PI 2"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:354
msgid "``armv7`` or ``armv7hf`` if we want to use the float point hard support"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:356
msgid "Raspberry PI 3"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:356
msgid "``armv8`` also known as armv64-v8a"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:358
msgid "Visual Studio"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:358
msgid ""
"``armv7`` currently Visual Studio builds ``armv7`` binaries when you select "
"ARM."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:360
msgid "Android armbeabi-v7a"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:360
msgid "``armv7``"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:362
msgid "Android armv64-v8a"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:362
msgid "``armv8``"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:364
msgid "Android armeabi"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:364
msgid "``armv6`` (as a minimal compatible, will be compatible with v7 too)"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:369
msgid "Examples"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:375
msgid "Examples using profiles"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:378
msgid "Linux to Windows"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:380
msgid "Install the needed toolchain, in Ubuntu:"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:382
msgid "sudo apt-get install g++-mingw-w64 gcc-mingw-w64"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:387
msgid "Create a file named **linux_to_win64** with the contents:"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:419
#: ../../../systems_cross_building/cross_building.rst:483
msgid "Clone an example recipe or use your own recipe:"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:421
#: ../../../systems_cross_building/cross_building.rst:485
msgid "git clone https://github.com/memsharded/conan-hello.git"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:425
msgid "Call :command:`conan create` using the created **linux_to_win64**"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:427
msgid ""
"$ cd conan-hello && conan create . conan/testing --profile ../"
"linux_to_win64\n"
"...\n"
"[ 50%] Building CXX object CMakeFiles/example.dir/example.cpp.obj\n"
"[100%] Linking CXX executable bin/example.exe\n"
"[100%] Built target example"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:435
msgid "A *bin/example.exe* for Win64 platform has been built."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:438
msgid "Windows to Raspberry Pi (Linux/ARM)"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:440
msgid ""
"Install the toolchain: https://gnutoolchains.com/raspberry/ You can choose "
"different versions of the GCC cross compiler. Choose one and adjust the "
"following settings in the profile accordingly."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:444
msgid "Create a file named **win_to_rpi** with the contents:"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:446
msgid ""
"target_host=arm-linux-gnueabihf\n"
"standalone_toolchain=C:/sysgcc/raspberry\n"
"cc_compiler=gcc\n"
"cxx_compiler=g++\n"
"\n"
"[settings]\n"
"os=Linux\n"
"arch=armv7 # Change to armv6 if you are using Raspberry 1\n"
"compiler=gcc\n"
"compiler.version=6\n"
"compiler.libcxx=libstdc++11\n"
"build_type=Release\n"
"\n"
"[env]\n"
"CONAN_CMAKE_FIND_ROOT_PATH=$standalone_toolchain/$target_host\n"
"CONAN_CMAKE_SYSROOT=$standalone_toolchain/$target_host/sysroot\n"
"PATH=[$standalone_toolchain/bin]\n"
"CHOST=$target_host\n"
"AR=$target_host-ar\n"
"AS=$target_host-as\n"
"RANLIB=$target_host-ranlib\n"
"LD=$target_host-ld\n"
"STRIP=$target_host-strip\n"
"CC=$target_host-$cc_compiler\n"
"CXX=$target_host-$cxx_compiler\n"
"CXXFLAGS=-I\"$standalone_toolchain/$target_host/lib/include\""
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:475
msgid ""
"The profiles to target Linux are all very similar. You probably just need to "
"adjust the variables declared at the top of the profile:"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:478
msgid ""
"**target_host**: All the executables in the toolchain starts with this "
"prefix."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:479
msgid "**standalone_toolchain**: Path to the toolchain installation."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:480
msgid ""
"**cc_compiler/cxx_compiler**: In this case ``gcc``/``g++``, but could be "
"``clang``/``clang++``."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:489
#: ../../../systems_cross_building/cross_building.rst:601
msgid "Call :command:`conan create` using the created profile."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:491
msgid ""
"$ cd conan-hello && conan create . conan/testing --profile=../win_to_rpi\n"
"...\n"
"[ 50%] Building CXX object CMakeFiles/example.dir/example.cpp.obj\n"
"[100%] Linking CXX executable bin/example\n"
"[100%] Built target example"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:499
msgid ""
"A *bin/example* for Raspberry PI (Linux/armv7hf) platform has been built."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:504
msgid "Windows to Windows CE"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:505
msgid ""
"The Windows CE (WinCE) operating system is supported for CMake and MSBuild. "
"Since WinCE depends on the MSVC compiler, Visual Studio and the according "
"Windows CE platform SDK for the WinCE device have to be installed on the "
"build host."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:509
msgid ""
"The ``os.platform`` defines the WinCE Platform SDK and is equal to the "
"``Platform`` in Visual Studio."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:511
msgid "Some examples for Windows CE platforms:"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:513
msgid "``SDK_AM335X_SK_WEC2013_V310``"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:514
msgid "``STANDARDSDK_500 (ARMV4I)``"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:515
msgid "``Windows Mobile 5.0 Pocket PC SDK (ARMV4I)``"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:516
msgid "``Toradex_CE800 (ARMV7)``"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:518
msgid ""
"The ``os.version`` defines the WinCE version and must be ``\"5.0\"``, "
"``\"6.0\"`` or ``\"7.0\"``."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:520
msgid ""
"CMake supports Visual Studio 2008 (``compiler.version=9``) and Visual Studio "
"2012 (``compiler.version=11``)."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:522
msgid "Example of an Windows CE conan profile:"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:524
msgid ""
"[settings]\n"
"os=WindowsCE\n"
"os.version=8.0\n"
"os.platform=Toradex_CE800 (ARMV7)\n"
"arch=armv7\n"
"compiler=Visual Studio\n"
"compiler.version=11\n"
"\n"
"# Release configuration\n"
"build_type=Release\n"
"compiler.runtime=MD"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:540
msgid ""
"Further information about CMake and WinCE can be found in the CMake "
"documentation:"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:542
msgid ""
"`CMake - Cross Compiling for Windows CE <https://cmake.org/cmake/help/latest/"
"manual/cmake-toolchains.7.html#cross-compiling-for-windows-ce>`_"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:548
msgid "Linux/Windows/macOS to Android"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:550
msgid ""
"Cross-building a library for Android is very similar to the previous "
"examples, except the complexity of managing different architectures "
"(armeabi, armeabi-v7a, x86, arm64-v8a) and the Android API levels."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:553
msgid ""
"Download the Android NDK `here <https://developer.android.com/ndk/"
"downloads>`_ and unzip it."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:557
msgid ""
"If you are in Windows the process will be almost the same, but unzip the "
"file in the root folder of your hard disk (``C:\\``) to avoid issues with "
"path lengths."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:561
msgid ""
"If you are using `Android Studio <https://developer.android.com/studio>`_, "
"you may use already available Android NDK"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:563
msgid ""
"To use the ``clang`` compiler, create a profile ``android_21_arm_clang``. "
"Once again, the profile is very similar to the RPI one:"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:566
msgid ""
"include(default)\n"
"target_host=aarch64-linux-android\n"
"android_ndk=/Users/sse4/Library/Android/sdk/ndk-bundle  # Adjust this path\n"
"api_level=21\n"
"[settings]\n"
"arch=armv8\n"
"build_type=Release\n"
"compiler=clang\n"
"compiler.libcxx=libc++\n"
"compiler.version=9\n"
"os=Android\n"
"os.api_level=$api_level\n"
"[tool_requires]\n"
"[options]\n"
"[env]\n"
"PATH=[$android_ndk/toolchains/llvm/prebuilt/darwin-x86_64/bin]  # Adjust "
"this path\n"
"CHOST=$target_host\n"
"AR=$target_host-ar\n"
"AS=$target_host-as\n"
"RANLIB=$target_host-ranlib\n"
"CC=$target_host$api_level-clang\n"
"CXX=$target_host$api_level-clang++\n"
"LD=$target_host-ld\n"
"STRIP=$target_host-strip\n"
"CONAN_CMAKE_TOOLCHAIN_FILE=$android_ndk/build/cmake/android.toolchain.cmake"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:595
msgid "Clone, for example, the zlib library to try to build it to Android"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:597
msgid "git clone https://github.com/conan-io/conan-center-index.git"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:603
msgid ""
"$ cd conan-center-index/recipes/zlib/1.2.11 && conan create . 1.2.11@ -pr:"
"h ../android_21_arm_clang -pr:b default\n"
"\n"
"...\n"
"-- Build files have been written to: /tmp/conan-zlib/test_package/build/"
"ba0b9dbae0576b9a23ce7005180b00e4fdef1198\n"
"Scanning dependencies of target enough\n"
"[ 50%] Building C object CMakeFiles/enough.dir/enough.c.o\n"
"[100%] Linking C executable bin/enough\n"
"[100%] Built target enough\n"
"zlib/1.2.11 (test package): Running test()"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:615
msgid "A **bin/enough** for Android ARM platform has been built."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:621
msgid "Examples using tool requires"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:623
msgid ""
"You can find one example on how to use tool requires for cross-compiling to "
"iOS in the :ref:`iOS integration section<darwin_toolchain>` in the "
"documentation."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:628
msgid ""
"Check the :ref:`Creating conan packages to install dev "
"tools<create_installer_packages>` to learn more about how to create Conan "
"packages for tools."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:631
msgid ""
"Check the `msys2 <https://github.com/conan-io/conan-center-index/blob/master/"
"recipes/msys2/all/conanfile.py>`_ tool require recipe as an example of "
"packaging a compiler."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:636
msgid "---"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:639
msgid "Reference links"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:641
msgid "**ARM**"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:643
msgid ""
"https://developer.arm.com/documentation/dui0773/j/compiling-c-and-c---code/"
"specifying-a-target-architecture--processor--and-instruction-set"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:644
msgid ""
"https://developer.arm.com/documentation/dui0472/latest/compiler-command-line-"
"options"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:646
msgid "**ANDROID**"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:648
msgid "https://developer.android.com/ndk/guides/standalone_toolchain"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:650
msgid "**VISUAL STUDIO**"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:652
msgid ""
"https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-command-line-"
"reference?view=vs-2017"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:657
msgid ""
"See :ref:`conan.conf file<conan_conf>` and :ref:`Environment variables "
"<env_vars>` sections to know more."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:658
msgid ""
"See :ref:`AutoToolsBuildEnvironment build helper<autotools_reference>` "
"reference."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:659
msgid "See :ref:`CMake build helper<cmake_reference>` reference."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:660
msgid ""
"See `CMake cross-building wiki <https://vtk.org/Wiki/"
"CMake_Cross_Compiling>`_ to know more about cross-building with CMake."
msgstr ""
