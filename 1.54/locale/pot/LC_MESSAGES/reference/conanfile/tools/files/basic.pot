# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2022, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.54\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/conanfile/tools/files/basic.rst:2
msgid "conan.tools.files basic operations"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:7
msgid "These tools are **experimental** and subject to breaking changes."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:12
msgid "conan.tools.files.copy()"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:14
#: ../../../reference/conanfile/tools/files/basic.rst:125
#: ../../../reference/conanfile/tools/files/basic.rst:259
#: ../../../reference/conanfile/tools/files/basic.rst:317
#: ../../../reference/conanfile/tools/files/basic.rst:364
msgid ""
"Available since: `1.46.0 <https://github.com/conan-io/conan/releases/"
"tag/1.46.0>`_"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:16
msgid ""
"def copy(conanfile, pattern, src, dst, keep_path=True, excludes=None, "
"ignore_case=True)"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:21
msgid ""
"Copy the files matching the ``pattern`` (fnmatch) at the ``src`` folder to a "
"``dst`` folder."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:32
#: ../../../reference/conanfile/tools/files/basic.rst:68
#: ../../../reference/conanfile/tools/files/basic.rst:96
#: ../../../reference/conanfile/tools/files/basic.rst:120
#: ../../../reference/conanfile/tools/files/basic.rst:149
#: ../../../reference/conanfile/tools/files/basic.rst:176
#: ../../../reference/conanfile/tools/files/basic.rst:201
#: ../../../reference/conanfile/tools/files/basic.rst:225
#: ../../../reference/conanfile/tools/files/basic.rst:254
#: ../../../reference/conanfile/tools/files/basic.rst:312
#: ../../../reference/conanfile/tools/files/basic.rst:323
msgid "Parameters:"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:24
#: ../../../reference/conanfile/tools/files/basic.rst:65
#: ../../../reference/conanfile/tools/files/basic.rst:90
#: ../../../reference/conanfile/tools/files/basic.rst:117
#: ../../../reference/conanfile/tools/files/basic.rst:142
#: ../../../reference/conanfile/tools/files/basic.rst:171
#: ../../../reference/conanfile/tools/files/basic.rst:199
#: ../../../reference/conanfile/tools/files/basic.rst:224
#: ../../../reference/conanfile/tools/files/basic.rst:252
#: ../../../reference/conanfile/tools/files/basic.rst:301
#: ../../../reference/conanfile/tools/files/basic.rst:325
msgid "**conanfile**: Conanfile object."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:25
msgid ""
"**pattern**: An fnmatch file pattern of the files that should be copied. It "
"must not start with ``..`` relative path or an exception will be raised."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:26
msgid ""
"**src**: Source folder in which those files will be searched. This folder "
"will be stripped from the dst parameter. E.g., `lib/Debug/x86`."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:28
msgid ""
"**dst**: Destination local folder. It must be different from ``src`` value "
"or an exception will be raised."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:29
msgid ""
"**keep_path**: Means if you want to keep the relative path when you copy the "
"files from the **src** folder to the **dst** one."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:31
msgid ""
"**excludes**: A tuple/list of fnmatch patterns or even a single one to be "
"excluded from the copy."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:32
msgid ""
"**ignore_case**: If enabled, it will do a case-insensitive pattern matching."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:36
msgid ""
"The files that are **symlinks to files** or **symlinks to folders** with be "
"treated like any other file, so they will only be copied if the specified "
"pattern matches with the file."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:39
msgid ""
"At the destination folder, the symlinks will be created pointing to the "
"exact same file or folder, absolute or relative, being the responsibility of "
"the user to manipulate the symlink to, for example, transform the symlink "
"into a relative path before copying it so it points to the destination "
"folder."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:43
msgid ""
"Check :ref:`here<conan_tools_files_symlinks>` the reference of tools to "
"manage symlinks."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:47
msgid "conan.tools.files.load()"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:49
#: ../../../reference/conanfile/tools/files/basic.rst:73
#: ../../../reference/conanfile/tools/files/basic.rst:181
msgid ""
"Available since: `1.35.0 <https://github.com/conan-io/conan/releases/"
"tag/1.35.0>`_"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:51
msgid "def load(conanfile, path, encoding=\"utf-8\")"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:55
msgid ""
"Utility function to load files in one line. It will manage the open and "
"close of the file, and load binary encodings. Returns the content of the "
"file."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:58
msgid ""
"from conan.tools.files import load\n"
"\n"
"content = load(self, \"myfile.txt\")"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:66
#: ../../../reference/conanfile/tools/files/basic.rst:91
msgid "**path**: Path to the file."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:67
msgid "**encoding**: Specifies the input file text encoding."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:71
msgid "conan.tools.files.save()"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:75
msgid "def save(conanfile, path, content, append=False, encoding=\"utf-8\"):"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:80
msgid ""
"Utility function to save files in one line. It will manage the open and "
"close of the file and creating directories if necessary."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:82
msgid ""
"from conan.tools.files import save\n"
"\n"
"save(self, \"path/to/otherfile.txt\", \"contents of the file\")"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:92
msgid "**content**: Content that should be saved into the file."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:93
msgid "**append**: If ``True``, it will append the content."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:94
msgid "**encoding**: Specifies the output file text encoding."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:99
msgid "conan.tools.files.rename()"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:101
msgid ""
"Available since: `1.37.0 <https://github.com/conan-io/conan/releases/"
"tag/1.37.0>`_"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:103
msgid "def rename(conanfile, src, dst)"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:107
msgid ""
"Utility function to rename a file or folder *src* to *dst*. On Windows, it "
"is very common that ``os.rename()`` raises an \"Access is denied\" "
"exception, so this tool uses:command:`robocopy` if available. If that is not "
"the case, or the rename is done in a non-Windows machine, it falls back to "
"the ``os.rename()`` implementation."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:109
msgid ""
"from conan.tools.files import rename\n"
"\n"
"def source(self):\n"
"    rename(self, \"lib-sources-abe2h9fe\", \"sources\")  # renaming a folder"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:118
msgid "**src**: Path to be renamed."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:119
msgid "**dst**: Path to be renamed to."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:123
msgid "conan.tools.files.replace_in_file()"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:127
msgid ""
"def replace_in_file(conanfile, file_path, search, replace, strict=True, "
"encoding=\"utf-8\")"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:132
msgid ""
"Replace a string ``search`` in the contents of the file ``file_path`` with "
"the string ``replace``."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:134
msgid ""
"from conan.tools.files import replace_in_file\n"
"\n"
"replace_in_file(self, os.path.join(self.source_folder, \"folder\", \"file."
"txt\"), \"foo\", \"bar\")"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:143
msgid "**file_path**: File path of the file to perform the replace in."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:144
msgid "**search**: String you want to be replaced."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:145
msgid "**replace**: String to replace the searched string."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:146
msgid ""
"**strict**: If ``True``, it raises an error if the searched string is not "
"found, so nothing is actually replaced."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:148
msgid "**encoding**: Specifies the input and output files text encoding."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:152
msgid "conan.tools.files.rm()"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:154
msgid ""
"Available since: `1.50.0 <https://github.com/conan-io/conan/releases/"
"tag/1.50.0>`_"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:156
msgid "def rm(conanfile, pattern, folder, recursive=False)"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:161
msgid ""
"Remove the files following the ``pattern`` (fnmatch) from the specified "
"``folder``."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:163
msgid ""
"from conan.tools.files import rm\n"
"\n"
"rm(self, \"*.tmp\", self.build_folder, recursive=True)"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:172
msgid ""
"**pattern**: Pattern that the files to be removed have to match (fnmatch)."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:173
msgid "**folder**: Folder to search/remove the files."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:174
msgid ""
"**recursive**: If ``recursive`` is specified it will search in the "
"subfolders."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:179
msgid "conan.tools.files.mkdir()"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:183
msgid "def mkdir(conanfile, path)"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:187
msgid ""
"Utility functions to create a directory. The existence of the specified "
"directory is checked, so ``mkdir()`` will do nothing if the directory "
"already exists."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:190
msgid ""
"from conan.tools.files import mkdir\n"
"\n"
"mkdir(self, \"mydir\") # Creates mydir if it does not already exist\n"
"mkdir(self, \"mydir\") # Does nothing"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:200
#: ../../../reference/conanfile/tools/files/basic.rst:225
msgid "**path**: Path to the directory."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:204
msgid "conan.tools.files.rmdir()"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:206
msgid ""
"Available since: `1.47.0 <https://github.com/conan-io/conan/releases/"
"tag/1.47.0>`_"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:208
msgid "def rmdir(conanfile, path)"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:212
msgid ""
"Utility functions to remove a directory. The existence of the specified "
"directory is checked, so ``rmdir()`` will do nothing if the directory "
"doesn't exists."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:215
msgid ""
"from conan.tools.files import rmdir\n"
"\n"
"rmdir(self, \"mydir\") # Remove mydir if it exist\n"
"rmdir(self, \"mydir\") # Does nothing"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:227
msgid ""
"The behavior regarding the path is the same as Python ``shutil.rmtree``. The "
"provided path can be relative to the current folder (the current folder "
"depends in which method this tool is used), or it can be an absolute path."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:233
msgid "conan.tools.files.chdir()"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:235
msgid ""
"Available since: `1.40.0 <https://github.com/conan-io/conan/releases/"
"tag/1.40.0>`_"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:237
msgid "def chdir(conanfile, newdir):"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:241
msgid ""
"This is a context manager that allows to temporary change the current "
"directory in your conanfile:"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:243
msgid ""
"from conan.tools.files import chdir\n"
"\n"
"def build(self):\n"
"    with chdir(self, \"./subdir\"):\n"
"        do_something()"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:253
msgid "**newdir**: Directory path name to change the current directory."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:257
msgid "conan.tools.files.unzip()"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:261
msgid ""
"def unzip(conanfile, filename, destination=\".\", keep_permissions=False, "
"pattern=None,\n"
"          strip_root=False):"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:267
msgid ""
"This function extract different compressed formats (``.tar.gz``, ``.tar``, "
"``.tzb2``, ``.tar.bz2``, ``.tgz``, ``.txz``, ``tar.xz``, and ``.zip``) into "
"the given destination folder."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:270
msgid ""
"It also accepts gzipped files, with extension ``.gz`` (not matching any of "
"the above), and it will unzip them into a file with the same name but "
"without the extension, or to a filename defined by the ``destination`` "
"argument."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:273
msgid ""
"from conan.tools.files import unzip\n"
"\n"
"tools.unzip(\"myfile.zip\")\n"
"# or to extract in \"myfolder\" sub-folder\n"
"tools.unzip(\"myfile.zip\", \"myfolder\")"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:281
msgid ""
"You can keep the permissions of the files using the "
"``keep_permissions=True`` parameter."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:283
msgid ""
"from conan.tools.files import unzip\n"
"\n"
"unzip(self, \"myfile.zip\", \"myfolder\", keep_permissions=True)"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:289
msgid ""
"Use the ``pattern`` argument if you want to filter specific files and paths "
"to decompress from the archive."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:291
msgid ""
"from conan.tools.files import unzip\n"
"\n"
"# Extract only files inside relative folder \"small\"\n"
"unzip(self, \"bigfile.zip\", pattern=\"small/*\")\n"
"# Extract only txt files\n"
"unzip(self, \"bigfile.zip\", pattern=\"*.txt\")"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:302
msgid "**filename**: File to be unzipped."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:303
msgid "**destination**: Destination folder for unzipped files."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:304
msgid ""
"**keep_permissions**: Keep permissions of files. **WARNING:** Can be "
"dangerous if the zip was not created in a NIX system, the bits could produce "
"undefined permission schema. Use only this option if you are sure that the "
"zip was created correctly."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:307
msgid ""
"**pattern**: Extract from the archive only paths matching the pattern. This "
"should be a Unix shell-style wildcard. See `fnmatch <https://docs.python."
"org/3/library/fnmatch.html>`_ documentation for more details."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:309
msgid ""
"**strip_root**: When ``True`` and the ZIP file contains one folder "
"containing all the contents, it will strip the root folder moving all its "
"contents to the root. E.g: *mylib-1.2.8/main.c* will be extracted as *main."
"c*. If the compressed file contains more than one folder or only a file it "
"will raise a ``ConanException``."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:315
msgid "conan.tools.files.update_conandata()"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:319
msgid "def update_conandata(conanfile, data)"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:326
msgid "**data**: A dictionary (can be nested), of values to update"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:329
msgid ""
"This function reads the ``conandata.yml`` inside the exported folder in the "
"conan cache, if it exists. If the ``conandata.yml`` does not exist, it will "
"create it. Then, it updates the conandata dictionary with the provided "
"``data`` one, which is updated recursively, prioritizing the ``data`` "
"values, but keeping other existing ones. Finally the ``conandata.yml`` is "
"saved in the same place."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:335
msgid ""
"This helper can only be used within the ``export()`` method, it can raise "
"otherwise. One application is to capture in the ``conandata.yml`` the scm "
"coordinates (like Git remote url and commit), to be able to recover it later "
"in the ``source()`` method and have reproducible recipes that can build from "
"sources without actually storing the sources in the recipe."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:340
msgid "Example:"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:342
msgid ""
"from conan import ConanFile\n"
"from conan.tools.files import update_conandata\n"
"\n"
"class Pkg(ConanFile):\n"
"    name = \"pkg\"\n"
"    version = \"0.1\"\n"
"\n"
"    def export(self):\n"
"        # This is an example, doesn't make sense to have static data, "
"instead you\n"
"        # could put the data directly in a conandata.yml file.\n"
"        # This would be useful for storing dynamic data, obtained at "
"export() time from elsewhere\n"
"        update_conandata(self, {\"mydata\": {\"value\": {\"nested1\": 123, "
"\"nested2\": \"some-string\"}}})\n"
"\n"
"    def source(self):\n"
"        data = self.conan_data[\"sources\"][\"mydata\"]"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:362
msgid "conan.tools.files.collect_libs()"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:366
msgid "def collect_libs(conanfile, folder=None)"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:370
msgid ""
"Returns a sorted list of library names from the libraries (files with "
"extensions *.so*, *.lib*, *.a* and *.dylib*) located inside the ``conanfile."
"cpp_info.libdirs`` (by default) or the **folder** argument (see below) "
"relative to the package folder. Useful to collect not inter-dependent "
"libraries or with complex names like ``libmylib-x86-debug-en.lib``."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:374
msgid ""
"from conan.tools.files import collect_libs\n"
"\n"
"def package_info(self):\n"
"    self.cpp_info.libdirs = [\"lib\", \"other_libdir\"]  # Default value is "
"'lib'\n"
"    self.cpp_info.libs = collect_libs(self)"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:382
msgid ""
"For UNIX libraries starting with **lib**, like *libmath.a*, this tool will "
"collect the library name **math**."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:384
msgid ""
"Regarding symlinks, this tool will keep only the \"most generic\" file among "
"the resolved real file and all symlinks pointing to this real file. For "
"example among files below, this tool will select *libmath.dylib* file and "
"therefore only append *math* in the returned list:"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:387
msgid ""
"-rwxr-xr-x libmath.1.0.0.dylib\n"
"lrwxr-xr-x libmath.1.dylib -> libmath.1.0.0.dylib\n"
"lrwxr-xr-x libmath.dylib -> libmath.1.dylib"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:396
msgid "**Parameters:**"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:394
msgid ""
"**conanfile** (Required): A ``ConanFile`` object to get the "
"``package_folder`` and ``cpp_info``."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:395
msgid ""
"**folder** (Optional, Defaulted to ``None``): String indicating the "
"subfolder name inside ``conanfile.package_folder`` where the library files "
"are."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:400
msgid ""
"This tool collects the libraries searching directly inside the package "
"folder and returns them in no specific order. If libraries are inter-"
"dependent, then ``package_info()`` method should order them to achieve "
"correct linking order."
msgstr ""
