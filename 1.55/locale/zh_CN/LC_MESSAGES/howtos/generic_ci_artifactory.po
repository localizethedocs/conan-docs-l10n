# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2022, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.55\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:10+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../howtos/generic_ci_artifactory.rst:4
msgid "Use a generic CI with Conan and Artifactory"
msgstr ""

#: ../../../howtos/generic_ci_artifactory.rst:8
msgid ""
"Some problems regarding the use of BuildInfo with Conan packages `have been "
"reported <https://www.jfrog.com/jira/browse/RTFACT-9343>`_. If the BuildInfo "
"contains artifacts that have the same checksum as other artifacts, this may "
"result in losing the path of the artifact in the BuildInfo in Artifactory "
"and also fail in the promotion process."
msgstr ""

#: ../../../howtos/generic_ci_artifactory.rst:13
msgid ""
"We are currently working along with the Artifactory team to solve those "
"problems. Until this issue gets fixed, we do not recommend using BuildInfo's "
"for Conan."
msgstr ""

#: ../../../howtos/generic_ci_artifactory.rst:17
msgid "Uploading the BuildInfo"
msgstr ""

#: ../../../howtos/generic_ci_artifactory.rst:19
msgid ""
"If you are using :ref:`Jenkins with Conan and "
"Artifactory<jenkins_integration>`, along with the `Jenkins Artifactory "
"Plugin <https://www.jfrog.com/confluence/display/JFROG/"
"Jenkins+Artifactory+Plug-in>`_, any Conan package downloaded or uploaded "
"during your build will be automatically recorded in the BuildInfo json file, "
"that will be automatically uploaded to the specified Artifactory instance."
msgstr ""

#: ../../../howtos/generic_ci_artifactory.rst:24
msgid ""
"However, using the `conan_build_info` command, you can gather and upload "
"that information using other CI infrastructure. There are two possible ways "
"of using this command:"
msgstr ""

#: ../../../howtos/generic_ci_artifactory.rst:28
msgid "Extracting build-info from the Conan trace log"
msgstr ""

#: ../../../howtos/generic_ci_artifactory.rst:30
msgid ""
"Before calling Conan the first time in your build, set the environment "
"variable `CONAN_TRACE_FILE` to a file path. The generated file will contain "
"the `BuildInfo json <https://www.jfrog.com/confluence/display/JFROG/"
"Build+Integration#BuildIntegration-BuildInfoJSON>`_."
msgstr ""

#: ../../../howtos/generic_ci_artifactory.rst:33
msgid ""
"You also need to create the :ref:`artifacts.properties<artifacts."
"properties>` file in your Conan home containing the build information. All "
"this properties will be automatically associated to all the published "
"artifacts."
msgstr ""

#: ../../../howtos/generic_ci_artifactory.rst:36
msgid ""
"artifact_property_build.name=MyBuild\n"
"artifact_property_build.number=23\n"
"artifact_property_build.timestamp=1487676992"
msgstr ""

#: ../../../howtos/generic_ci_artifactory.rst:43
msgid ""
"Call Conan as many times as you need.  For example, if you are testing a "
"Conan package and uploading it at the end, you will run something similar to:"
msgstr ""

#: ../../../howtos/generic_ci_artifactory.rst:47
msgid ""
"$ conan create . user/stable # Will retrieve the dependencies and create the "
"package\n"
"$ conan upload mypackage/1.0@user/stable -r artifactory"
msgstr ""

#: ../../../howtos/generic_ci_artifactory.rst:52
msgid ""
"Call the command `conan_build_info` passing the path to the generated Conan "
"traces file and a parameter ``--output`` to indicate the output file. You "
"can also, delete the traces.log` file` otherwise while the "
"`CONAN_TRACE_FILE` is present, any Conan command will keep appending actions."
msgstr ""

#: ../../../howtos/generic_ci_artifactory.rst:56
msgid ""
"$ conan_build_info /tmp/traces.log --output /tmp/build_info.json\n"
"$ rm /tmp/traces.log"
msgstr ""

#: ../../../howtos/generic_ci_artifactory.rst:61
msgid ""
"Edit the `build_info.json` file to append ``name`` (build name), ``number`` "
"(build number) and the ``started`` (started date) and any other field that "
"you need according to the `Build Info json format <https://github.com/jfrog/"
"build-info>`_."
msgstr ""

#: ../../../howtos/generic_ci_artifactory.rst:64
msgid ""
"The ``started`` field has to be in the format: ``yyyy-MM-dd'T'HH:mm:ss.SSSZ``"
msgstr ""

#: ../../../howtos/generic_ci_artifactory.rst:66
msgid ""
"To edit the file you can import the json file using the programming language "
"you are using in your framework, groovy, java, python..."
msgstr ""

#: ../../../howtos/generic_ci_artifactory.rst:69
msgid "Push the json file to Artifactory, using the REST-API:"
msgstr ""

#: ../../../howtos/generic_ci_artifactory.rst:71
msgid ""
"curl -X PUT -u<username>:<password> -H \"Content-type: application/json\" -"
"T /tmp/build_info.json \"http://host:8081/artifactory/api/build\""
msgstr ""

#: ../../../howtos/generic_ci_artifactory.rst:76
msgid "Generating build info from lockfiles information"
msgstr ""

#: ../../../howtos/generic_ci_artifactory.rst:80
msgid ""
"This is an **experimental** feature subject to breaking changes in future "
"releases."
msgstr ""

#: ../../../howtos/generic_ci_artifactory.rst:82
msgid ""
"To maintain compatibility with the current implementation of the "
"``conan_build_info`` command, this version must be invoked using the "
"argument ``--v2`` before any subcommand."
msgstr ""

#: ../../../howtos/generic_ci_artifactory.rst:85
msgid ""
"1. To begin associating the build information to the uploaded packages the "
"first thing is calling to the ``start`` subcommand of ``conan_build_info``. "
"This will set the `artifact_property_build.name` and "
"`artifact_property_build.name` properties in the :ref:`artifacts."
"properties<artifacts.properties>`."
msgstr ""

#: ../../../howtos/generic_ci_artifactory.rst:90
msgid "$ conan_build_info --v2 start MyBuildName 42"
msgstr ""

#: ../../../howtos/generic_ci_artifactory.rst:94
msgid ""
"2. Call Conan using :ref:`lockfiles<versioning_lockfiles>` to create "
"information for the `Build Info json format <https://github.com/jfrog/build-"
"info>`_."
msgstr ""

#: ../../../howtos/generic_ci_artifactory.rst:97
msgid ""
"$ cd mypackage\n"
"$ conan create . mypackage/1.0@user/stable # We create one package\n"
"$ cd .. && cd consumer\n"
"$ conan install . # Consumes mypackage, generates a lockfile\n"
"$ conan create . consumer/1.0@user/stable --lockfile conan.lock\n"
"$ conan upload \"*\" -c -r local # Upload all packages to local remotes"
msgstr ""

#: ../../../howtos/generic_ci_artifactory.rst:106
msgid ""
"3. Create build information based on the contents of the generated `conan."
"lock` lockfile and the information retrieved from the remote (the "
"authentication is for the remote where you uploaded the packages)."
msgstr ""

#: ../../../howtos/generic_ci_artifactory.rst:110
msgid ""
"$ conan_build_info --v2 create buildinfo.json --lockfile conan.lock --user "
"admin --password password"
msgstr ""

#: ../../../howtos/generic_ci_artifactory.rst:115
msgid ""
"Publish the build information to Artifactory with the ``publish`` subcommand:"
msgstr ""

#: ../../../howtos/generic_ci_artifactory.rst:117
msgid "Using user and password"
msgstr ""

#: ../../../howtos/generic_ci_artifactory.rst:119
msgid ""
"$ conan_build_info --v2 publish buildinfo.json --url http://localhost:8081/"
"artifactory --user admin --password password"
msgstr ""

#: ../../../howtos/generic_ci_artifactory.rst:123
msgid "or an API key:"
msgstr ""

#: ../../../howtos/generic_ci_artifactory.rst:125
msgid ""
"$ conan_build_info --v2 publish buildinfo.json --url http://localhost:8081/"
"artifactory --apikey apikey"
msgstr ""

#: ../../../howtos/generic_ci_artifactory.rst:129
msgid ""
"5. If the whole process has finished and you don't want to continue "
"associating the build number and build name to the files uploaded to "
"Artifactory then you can use the ``stop`` subcommand:"
msgstr ""

#: ../../../howtos/generic_ci_artifactory.rst:132
msgid "$ conan_build_info --v2 stop"
msgstr ""

#: ../../../howtos/generic_ci_artifactory.rst:136
msgid ""
"It is also possible to merge different build info files using the ``update`` "
"subcommand. This is useful in CI when `many slaves <https://github.com/conan-"
"io/examples/tree/master/features/lockfiles/ci>`_ are generating different "
"build info files."
msgstr ""

#: ../../../howtos/generic_ci_artifactory.rst:140
msgid ""
"$ conan_build_info --v2 update buildinfo1.json buildinfo2.json --output-file "
"mergedbuildinfo.json"
msgstr ""

#: ../../../howtos/generic_ci_artifactory.rst:144
msgid ""
"You can check the complete :ref:`conan_build_info "
"reference<conan_build_info>`."
msgstr ""
