# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2022, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.55\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:10+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/commands/development/build.rst:5
msgid "conan build"
msgstr ""

#: ../../../reference/commands/development/build.rst:7
msgid ""
"$ conan build [-h] [-b] [-bf BUILD_FOLDER] [-c] [-i] [-t]\n"
"              [-if INSTALL_FOLDER] [-pf PACKAGE_FOLDER]\n"
"              [-sf SOURCE_FOLDER]\n"
"              path"
msgstr ""

#: ../../../reference/commands/development/build.rst:14
msgid "Calls your local conanfile.py 'build()' method."
msgstr ""

#: ../../../reference/commands/development/build.rst:16
msgid ""
"The recipe will be built in the local directory specified by --build-folder, "
"reading the sources from --source-folder. If you are using a build helper, "
"like CMake(), the --package-folder will be configured as the destination "
"folder for the install step."
msgstr ""

#: ../../../reference/commands/development/build.rst:21
msgid ""
"positional arguments:\n"
"  path                  Path to a folder containing a conanfile.py or to a\n"
"                        recipe file e.g., my_folder/conanfile.py\n"
"\n"
"optional arguments:\n"
"  -h, --help            show this help message and exit\n"
"  -b, --build           Execute the build step (variable "
"should_build=True).\n"
"                        When specified, configure/install/test won't run\n"
"                        unless --configure/--install/--test specified\n"
"  -bf BUILD_FOLDER, --build-folder BUILD_FOLDER\n"
"                        Directory for the build process. Defaulted to the\n"
"                        current directory. A relative path to the current\n"
"                        directory can also be specified\n"
"  -c, --configure       Execute the configuration step (variable\n"
"                        should_configure=True). When specified,\n"
"                        build/install/test won't run unless\n"
"                        --build/--install/--test specified\n"
"  -i, --install         Execute the install step (variable\n"
"                        should_install=True). When specified,\n"
"                        configure/build/test won't run unless\n"
"                        --configure/--build/--test specified\n"
"  -t, --test            Execute the test step (variable should_test=True).\n"
"                        When specified, configure/build/install won't run\n"
"                        unless --configure/--build/--install specified\n"
"  -if INSTALL_FOLDER, --install-folder INSTALL_FOLDER\n"
"                        Directory containing the conaninfo.txt and\n"
"                        conanbuildinfo.txt files (from previous 'conan\n"
"                        install'). Defaulted to --build-folder\n"
"  -pf PACKAGE_FOLDER, --package-folder PACKAGE_FOLDER\n"
"                        Directory to install the package (when the build\n"
"                        system or build() method does it). Defaulted to the\n"
"                        '{build_folder}/package' folder. A relative path "
"can\n"
"                        be specified, relative to the current folder. Also "
"an\n"
"                        absolute path is allowed.\n"
"  -sf SOURCE_FOLDER, --source-folder SOURCE_FOLDER\n"
"                        Directory containing the sources. Defaulted to the\n"
"                        conanfile's directory. A relative path to the "
"current\n"
"                        directory can also be specified"
msgstr ""

#: ../../../reference/commands/development/build.rst:63
msgid ""
"The ``build()`` method might use `settings`, `options` and `environment "
"variables` from the specified profile and dependencies information from the "
"declared ``deps_XXX_info`` objects in the conanfile requirements. All that "
"information is saved automatically in the *conaninfo.txt* and "
"*conanbuildinfo.txt* files respectively, when you run the :command:`conan "
"install` command. Those files have to be located in the specified :command:"
"`--build-folder` or in the :command:`--install-folder` if specified."
msgstr ""

#: ../../../reference/commands/development/build.rst:69
msgid ""
"The :command:`--configure, --build, --install` arguments control which parts "
"of the ``build()`` are actually executed. They have related conanfile "
"boolean variables ``should_configure, should_build, should_install``, which "
"are ``True`` by default, but that will change if some of these arguments are "
"used in the command line. The ``CMake`` and ``Meson`` and "
"``AutotoolsBuildEnvironment`` helpers already use these variables."
msgstr ""

#: ../../../reference/commands/development/build.rst:76
msgid ""
"**Example**: Building a conan package (for architecture x86) in a local "
"directory."
msgstr ""

#: ../../../reference/commands/development/build.rst:78
msgid "conanfile.py"
msgstr ""

#: ../../../reference/commands/development/build.rst:78
msgid ""
" from conans import ConanFile, CMake, tools\n"
"\n"
" class LibConan(ConanFile):\n"
"     ...\n"
"\n"
"     def source(self):\n"
"         self.run(\"git clone https://github.com/conan-io/hello.git\")\n"
"\n"
"     def build(self):\n"
"         cmake = CMake(self)\n"
"         cmake.configure(source_folder=\"hello\")\n"
"         cmake.build()"
msgstr ""

#: ../../../reference/commands/development/build.rst:94
msgid ""
"First we will call :command:`conan source` to get our source code in the "
"*src* directory, then :command:`conan install` to install the requirements "
"and generate the info files, and finally :command:`conan build` to build the "
"package:"
msgstr ""

#: ../../../reference/commands/development/build.rst:97
msgid ""
" $ conan source . --source-folder src\n"
" $ conan install . --install-folder build_x86 -s arch=x86\n"
" $ conan build . --build-folder build_x86 --source-folder src"
msgstr ""

#: ../../../reference/commands/development/build.rst:104
msgid ""
"Or if we want to create the ``conaninfo.txt`` and ``conanbuildinfo.txt`` "
"files in a different folder:"
msgstr ""

#: ../../../reference/commands/development/build.rst:106
msgid ""
" $ conan source . --source-folder src\n"
" $ conan install . --install-folder install_x86 -s arch=x86\n"
" $ conan build . --build-folder build_x86 --install-folder install_x86 --"
"source-folder src"
msgstr ""

#: ../../../reference/commands/development/build.rst:113
msgid ""
"However, we recommend the ``conaninfo.txt`` and ``conanbuildinfo.txt`` to be "
"generated in the same --build-folder, otherwise, you will need to specify a "
"different folder in your build system to include the files generators file. "
"E.g., ``conanbuildinfo.cmake``"
msgstr ""

#: ../../../reference/commands/development/build.rst:118
msgid "**Example**: Control the build stages"
msgstr ""

#: ../../../reference/commands/development/build.rst:120
msgid ""
"You can control the build stages using :command:`--configure`/:command:`--"
"build`/:command:`--install`/:command:`--test` arguments. Here is an example "
"using the CMake build helper:"
msgstr ""

#: ../../../reference/commands/development/build.rst:123
msgid ""
"$ conan build . --configure # only run cmake.configure(). Other methods will "
"do nothing\n"
"$ conan build . --build     # only run cmake.build(). Other methods will do "
"nothing\n"
"$ conan build . --install   # only run cmake.install(). Other methods will "
"do nothing\n"
"$ conan build . --test      # only run cmake.test(). Other methods will do "
"nothing\n"
"# They can be combined\n"
"$ conan build . -c -b # run cmake.configure() + cmake.build(), but not cmake."
"install() nor cmake.test"
msgstr ""

#: ../../../reference/commands/development/build.rst:132
msgid "If nothing is specified, all the methods will be called."
msgstr ""

#: ../../../reference/commands/development/build.rst:136
msgid "Read more about :ref:`attribute_build_stages`."
msgstr ""
