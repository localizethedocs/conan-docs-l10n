# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2022, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.55\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:10+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/conanfile/tools/google.rst:4
msgid "conan.tools.google"
msgstr ""

#: ../../../reference/conanfile/tools/google.rst:8
msgid "These tools are **experimental** and subject to breaking changes."
msgstr ""

#: ../../../reference/conanfile/tools/google.rst:12
msgid "BazelDeps"
msgstr ""

#: ../../../reference/conanfile/tools/google.rst:14
#: ../../../reference/conanfile/tools/google.rst:40
#: ../../../reference/conanfile/tools/google.rst:95
msgid ""
"Available since: `1.37.0 <https://github.com/conan-io/conan/releases/"
"tag/1.37.0>`_"
msgstr ""

#: ../../../reference/conanfile/tools/google.rst:16
msgid ""
"The ``BazelDeps`` helper will generate one **conandeps/xxxx/BUILD** file per "
"dependency. This dependencies will be automatically added to the project if "
"you add the following lines to the project's **WORKSPACE** file:"
msgstr ""

#: ../../../reference/conanfile/tools/google.rst:20
msgid ""
"load(\"@//conandeps:dependencies.bzl\", \"load_conan_dependencies\")\n"
"load_conan_dependencies()"
msgstr ""

#: ../../../reference/conanfile/tools/google.rst:26
msgid "The dependencies should be added to the **conanfile.py** file as usual:"
msgstr ""

#: ../../../reference/conanfile/tools/google.rst:28
msgid ""
"class BazelExampleConan(ConanFile):\n"
"    name = \"bazel-example\"\n"
"    ...\n"
"    generators = \"BazelDeps\", \"BazelToolchain\"\n"
"    requires = \"boost/1.76.0\""
msgstr ""

#: ../../../reference/conanfile/tools/google.rst:38
msgid "BazelToolchain"
msgstr ""

#: ../../../reference/conanfile/tools/google.rst:42
msgid ""
"The ``BazelToolchain`` is the toolchain generator for Bazel. It will "
"generate a file called ``conanbuild.conf`` containing two keys:"
msgstr ""

#: ../../../reference/conanfile/tools/google.rst:45
msgid ""
"**bazelrc_path**: defining Bazel rc-path. Can be set using the conf ``tools."
"google.bazel:bazelrc_path``."
msgstr ""

#: ../../../reference/conanfile/tools/google.rst:46
msgid ""
"**bazel_configs**: defining the configs to be activated in the "
"``bazelrc_path``. Can be set with the conf ``tools.google.bazel:configs``."
msgstr ""

#: ../../../reference/conanfile/tools/google.rst:49
msgid "**Example of a custom bazelrc file at '/path/to/mybazelrc':**"
msgstr ""

#: ../../../reference/conanfile/tools/google.rst:49
msgid ""
"build:Release -c opt\n"
"build:RelWithDebInfo -c opt --copt=-O3 --copt=-DNDEBUG\n"
"build:MinSizeRel  -c opt --copt=-Os --copt=-DNDEBUG\n"
"build --color=yes\n"
"build:withTimeStamps --show_timestamps"
msgstr ""

#: ../../../reference/conanfile/tools/google.rst:58
msgid "**Example of a Release profile:**"
msgstr ""

#: ../../../reference/conanfile/tools/google.rst:58
msgid ""
"[settings]\n"
"...\n"
"build_type=Release\n"
"\n"
"[conf]\n"
"tools.google.bazel:bazelrc_path=/path/to/mybazelrc\n"
"tools.google.bazel:configs=[\"Release\"]"
msgstr ""

#: ../../../reference/conanfile/tools/google.rst:70
msgid ""
"The Bazel build helper will use that ``conanbuild.conf`` file to seamlessly "
"call the configure and make script using these precalculated arguments. Note "
"that the file can have a different name if you set the namespace argument in "
"the constructor as explained below."
msgstr ""

#: ../../../reference/conanfile/tools/google.rst:74
msgid "It supports the following methods and attributes:"
msgstr ""

#: ../../../reference/conanfile/tools/google.rst:77
#: ../../../reference/conanfile/tools/google.rst:120
msgid "constructor"
msgstr ""

#: ../../../reference/conanfile/tools/google.rst:82
#: ../../../reference/conanfile/tools/google.rst:125
msgid "def __init__(self, conanfile, namespace=None):"
msgstr ""

#: ../../../reference/conanfile/tools/google.rst:83
#: ../../../reference/conanfile/tools/google.rst:126
msgid "``conanfile``: the current recipe object. Always use ``self``."
msgstr ""

#: ../../../reference/conanfile/tools/google.rst:84
msgid ""
"``namespace``: this argument avoids collisions when you have multiple "
"toolchain calls in the same recipe. By setting this argument, the "
"*conanbuild.conf* file used to pass information to the build helper will be "
"named as: *<namespace>_conanbuild.conf*. The default value is ``None`` "
"meaning that the name of the generated file is *conanbuild.conf*. This "
"namespace must be also set with the same value in the constructor of the "
"``Bazel`` build helper so that it reads the information from the proper file."
msgstr ""

#: ../../../reference/conanfile/tools/google.rst:93
msgid "Bazel"
msgstr ""

#: ../../../reference/conanfile/tools/google.rst:97
msgid ""
"The ``Bazel`` build helper is a wrapper around the command line invocation "
"of bazel. It will abstract the calls like ``bazel build //main:hello-world`` "
"into Python method calls."
msgstr ""

#: ../../../reference/conanfile/tools/google.rst:100
msgid ""
"The helper is intended to be used in the ``build()`` method, to call Bazel "
"commands automatically when a package is being built directly by Conan "
"(create, install)"
msgstr ""

#: ../../../reference/conanfile/tools/google.rst:104
msgid ""
"from conan import ConanFile\n"
"from conan.tools.google import Bazel\n"
"\n"
"class App(ConanFile):\n"
"    settings = \"os\", \"arch\", \"compiler\", \"build_type\"\n"
"\n"
"    def build(self):\n"
"        bazel = Bazel(self)\n"
"        bazel.configure()\n"
"        bazel.build(label=\"//main:hello-world\")"
msgstr ""

#: ../../../reference/conanfile/tools/google.rst:117
msgid "It supports the following methods:"
msgstr ""

#: ../../../reference/conanfile/tools/google.rst:127
msgid ""
"``namespace``: this argument avoids collisions when you have multiple "
"toolchain calls in the same recipe. By setting this argument, the "
"*conanbuild.conf* file used to pass information to the toolchain will be "
"named as: *<namespace>_conanbuild.conf*. The default value is ``None`` "
"meaning that the name of the generated file is *conanbuild.conf*. This "
"namespace must be also set with the same value in the constructor of "
"``BazelToolchain`` so that it reads the information from the proper file."
msgstr ""

#: ../../../reference/conanfile/tools/google.rst:135
msgid "build()"
msgstr ""

#: ../../../reference/conanfile/tools/google.rst:141
msgid "def build(self, args=None, label=None):"
msgstr ""

#: ../../../reference/conanfile/tools/google.rst:142
msgid ""
"Calls the build system. Equivalent to :command:`bazel build {label}` in the "
"build folder."
msgstr ""
