# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2022, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.57\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:4
msgid "CMakeDeps"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:8
msgid ""
"Some of the features used in this section are still **under development**, "
"while they are recommended and usable and we will try not to break them in "
"future releases, some breaking changes might still happen if necessary to "
"prepare for the *Conan 2.0 release*."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:13
msgid ""
"Available since: `1.33.0 <https://github.com/conan-io/conan/releases/"
"tag/1.33.0>`_"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:15
msgid ""
"The ``CMakeDeps`` helper will generate one **xxxx-config.cmake** file per "
"dependency, together with other necessary *.cmake* files like version, flags "
"and directory data or configuration. It can be used like:"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:19
msgid ""
"from conan import ConanFile\n"
"\n"
"class App(ConanFile):\n"
"    settings = \"os\", \"arch\", \"compiler\", \"build_type\"\n"
"    requires = \"hello/0.1\"\n"
"    generators = \"CMakeDeps\""
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:29
msgid ""
"The full instantiation, that allows custom configuration can be done in the "
"``generate()`` method:"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:32
msgid ""
"from conan import ConanFile\n"
"from conan.tools.cmake import CMakeDeps\n"
"\n"
"class App(ConanFile):\n"
"    settings = \"os\", \"arch\", \"compiler\", \"build_type\"\n"
"    requires = \"hello/0.1\"\n"
"\n"
"    def generate(self):\n"
"        cmake = CMakeDeps(self)\n"
"        cmake.generate()"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:48
msgid ""
"This class will require very soon to define both the \"host\" and \"build\" "
"profiles. It is very recommended to start defining both profiles immediately "
"to avoid future breaking. Furthermore, some features, like trying to cross-"
"compile might not work at all if the \"build\" profile is not provided."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:53
msgid ""
"The ``CMakeDeps`` is a *multi-configuration* generator, it can correctly "
"create files for Release/Debug configurations to be simultaneously used by "
"IDEs like Visual Studio. In single configuration environments, it is "
"necessary to have a configuration defined, which must be provided via the "
"``cmake ... -DCMAKE_BUILD_TYPE=<build-type>`` argument in command line "
"(Conan will do it automatically when necessary, in the ``CMake.configure()`` "
"helper)."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:59
msgid ""
"There are some attributes you can adjust in the created ``CMakeDeps`` object "
"to change the default behavior:"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:62
msgid "configuration"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:64
msgid ""
"Allows to define custom user CMake configuration besides the standard "
"Release, Debug, etc ones."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:66
msgid ""
"def generate(self):\n"
"    deps = CMakeDeps(self)\n"
"    # By default, ``deps.configuration`` will be ``self.settings."
"build_type``\n"
"    if self.options[\"hello\"].shared:\n"
"        # Assuming the current project ``CMakeLists.txt`` defines the "
"ReleasedShared configuration.\n"
"        deps.configuration = \"ReleaseShared\"\n"
"    deps.generate()"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:78
msgid "build_context_activated"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:80
msgid ""
"When you have a **build-require**, by default, the config files (`xxx-config."
"cmake`) files are not generated. But you can activate it using the "
"**build_context_activated** attribute:"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:83
msgid ""
"tool_requires = [\"my_tool/0.0.1\"]\n"
"\n"
"def generate(self):\n"
"    cmake = CMakeDeps(self)\n"
"    # generate the config files for the tool require\n"
"    cmake.build_context_activated = [\"my_tool\"]\n"
"    cmake.generate()"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:95
msgid ""
"The ``build_context_activated`` feature will fail if no \"build\" profile is "
"used. This feature only work when using the two host and build profiles."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:100
msgid "build_context_suffix"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:102
msgid ""
"When you have the same package as a **build-require** and as a **regular "
"require** it will cause a conflict in the generator because the file names "
"of the config files will collide as well as the targets names, variables "
"names etc."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:105
msgid ""
"For example, this is a typical situation with some requirements (capnproto, "
"protobuf...) that contain a tool used to generate source code at build time "
"(so it is a **build_require**), but also providing a library to link to the "
"final application, so you also have a **regular require**. Solving this "
"conflict is specially important when we are cross-building because the tool "
"(that will run in the building machine) belongs to a different binary "
"package than the library, that will \"run\" in the host machine."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:112
msgid ""
"You can use the **build_context_suffix** attribute to specify a suffix for a "
"requirement, so the files/targets/variables of the requirement in the build "
"context (tool require) will be renamed:"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:115
msgid ""
"tool_requires = [\"my_tool/0.0.1\"]\n"
"requires = [\"my_tool/0.0.1\"]\n"
"\n"
"def generate(self):\n"
"    cmake = CMakeDeps(self)\n"
"    # generate the config files for the tool require\n"
"    cmake.build_context_activated = [\"my_tool\"]\n"
"    # disambiguate the files, targets, etc\n"
"    cmake.build_context_suffix = {\"my_tool\": \"_BUILD\"}\n"
"    cmake.generate()"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:131
msgid ""
"The ``build_context_suffix`` feature will fail if no \"build\" profile is "
"used. This feature only work when using the two host and build profiles."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:136
msgid "build_context_build_modules"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:138
msgid ""
"Also there is another issue with the **build_modules**. As you may know, the "
"recipes of the requirements can declare a `cppinfo.build_modules` entry "
"containing one or more **.cmake** files. When the requirement is found by "
"the cmake ``find_package()`` function, Conan will include automatically "
"these files."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:143
msgid ""
"By default, Conan will include only the build modules from the ``host`` "
"context (regular requires) to avoid the collision, but you can change the "
"default behavior."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:146
msgid ""
"Use the **build_context_build_modules** attribute to specify require names "
"to include the **build_modules** from **tool_requires**:"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:149
msgid ""
"tool_requires = [\"my_tool/0.0.1\"]\n"
"\n"
"def generate(self):\n"
"    cmake = CMakeDeps(self)\n"
"    # generate the config files for the tool require\n"
"    cmake.build_context_activated = [\"my_tool\"]\n"
"    # Choose the build modules from \"build\" context\n"
"    cmake.build_context_build_modules = [\"my_tool\"]\n"
"    cmake.generate()"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:164
msgid ""
"The ``build_context_build_modules`` feature will fail if no \"build\" "
"profile is used. This feature only work when using the two host and build "
"profiles."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:169
msgid "set_property()"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:171
msgid "Since `Conan 1.55.0 <https://github.com/conan-io/conan/releases>`_ ."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:176
msgid "def set_property(self, dep, prop, value, build_context=False):"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:177
msgid ""
"``dep``: Name of the dependency to set the :ref:`property<CMakeDeps "
"Properties>`. For components use the syntax: ``dep_name::component_name``."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:179
msgid "``prop``: Name of the :ref:`property<CMakeDeps Properties>`."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:180
msgid ""
"``value``: Value of the property. Use ``None`` to invalidate any value set "
"by the upstream recipe."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:182
msgid ""
"``build_context``: Set to ``True`` if you want to set the property for a "
"dependency that belongs to the build context (``False`` by default)."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:185
msgid ""
"Using this method you can overwrite the property values set by the Conan "
"recipes from the consumer. This can be done for `cmake_file_name`, "
"`cmake_target_name`, `cmake_find_mode`, `cmake_module_file_name` and "
"`cmake_module_target_name` properties. Let's see an example of how this "
"works:"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:190
msgid ""
"Imagine we have a *compressor/1.0* package that depends on *zlib/1.2.11*. "
"The *zlib* recipe defines some properties:"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:194
msgid "Zlib conanfile.py"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:194
msgid ""
"class ZlibConan(ConanFile):\n"
"    name = \"zlib\"\n"
"\n"
"    ...\n"
"\n"
"    def package_info(self):\n"
"        self.cpp_info.set_property(\"cmake_find_mode\", \"both\")\n"
"        self.cpp_info.set_property(\"cmake_file_name\", \"ZLIB\")\n"
"        self.cpp_info.set_property(\"cmake_target_name\", \"ZLIB::ZLIB\")\n"
"        ..."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:208
msgid ""
"This recipe defines several properties. For example the ``cmake_find_mode`` "
"property is set to ``both``. That means that module and config files are "
"generated for Zlib. Maybe we need to alter this behaviour and just generate "
"config files. You could do that in the compressor recipe using the "
"``CMakeDeps.set_property()`` method:"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:214
#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:233
msgid "compressor conanfile.py"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:214
msgid ""
"class Compressor(ConanFile):\n"
"    name = \"compressor\"\n"
"\n"
"    requires = \"zlib/1.2.11\"\n"
"    ...\n"
"\n"
"    def generate(self):\n"
"        deps = CMakeDeps(self)\n"
"        deps.set_property(\"zlib\", \"cmake_find_mode\", \"config\")\n"
"        deps.generate()\n"
"        ..."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:229
msgid ""
"You can also use the ``set_property()`` method to invalidate the property "
"values set by the upstream recipe and use the values that Conan assigns by "
"default. To do so, set the value ``None`` to the property like this:"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:233
msgid ""
"class Compressor(ConanFile):\n"
"    name = \"compressor\"\n"
"\n"
"    requires = \"zlib/1.2.11\"\n"
"    ...\n"
"\n"
"    def generate(self):\n"
"        deps = CMakeDeps(self)\n"
"        deps.set_property(\"zlib\", \"cmake_target_name\", None)\n"
"        deps.generate()\n"
"        ..."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:248
msgid ""
"After doing this the generated target name for the Zlib library will be "
"``zlib::zlib`` instead of ``ZLIB::ZLIB``"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:254
msgid "Properties"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:256
msgid "The following properties affect the CMakeDeps generator:"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:258
msgid ""
"**cmake_file_name**: The config file generated for the current package will "
"follow the ``<VALUE>-config.cmake`` pattern, so to find the package you "
"write ``find_package(<VALUE>)``."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:260
msgid "**cmake_target_name**: Name of the target to be consumed."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:261
msgid ""
"**cmake_target_aliases**: List of aliases that Conan will create for an "
"already existing target."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:262
msgid "**cmake_find_mode**: Defaulted to ``config``. Possible values are:"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:264
msgid ""
"``config``: The CMakeDeps generator will create config scripts for the "
"dependency."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:265
msgid ""
"``module``: Will create module config (FindXXX.cmake) scripts for the "
"dependency."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:266
msgid "``both``: Will generate both config and modules."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:267
msgid ""
"``none``: Won't generate any file. It can be used, for instance, to create a "
"system wrapper package so the consumers find the config files in the CMake "
"installation config path and not in the generated by Conan (because it has "
"been skipped)."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:269
msgid ""
"**cmake_module_file_name**: Same as **cmake_file_name** but when generating "
"modules with ``cmake_find_mode=module/both``. If not specified it will "
"default to **cmake_file_name**."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:270
msgid ""
"**cmake_module_target_name**: Same as **cmake_target_name**  but when "
"generating modules with ``cmake_find_mode=module/both``.  If not specified "
"it will default to **cmake_target_name**."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:271
msgid ""
"**cmake_build_modules**: List of ``.cmake`` files (route relative to root "
"package folder) that are automatically included when the consumer run the "
"``find_package()``. This property can't be declared in a component, do it in "
"the global ``self.cpp_info``."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:273
msgid ""
"**cmake_set_interface_link_directories**: boolean value that should be only "
"used by dependencies that don't declare `self.cpp_info.libs` but have "
"``#pragma comment(lib, \"foo\")`` (automatic link) declared at the public "
"headers. Those dependencies should add this property to their *conanfile.py* "
"files at root ``cpp_info`` level (components not supported for now)."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:276
#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:315
msgid "Example:"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:278
msgid ""
"def package_info(self):\n"
"    ...\n"
"    # MyFileName-config.cmake\n"
"    self.cpp_info.set_property(\"cmake_file_name\", \"MyFileName\")\n"
"    # Names for targets are absolute, Conan won't add any namespace to the "
"target names automatically\n"
"    self.cpp_info.set_property(\"cmake_target_name\", \"Foo::Foo\")\n"
"\n"
"    # Create a new target \"MyFooAlias\" that is an alias to the \"Foo::"
"Foo\" target\n"
"    self.cpp_info.set_property(\"cmake_target_aliases\", [\"MyFooAlias\"])\n"
"    # The property \"cmake_build_modules\" can't be declared in a component, "
"do it in self.cpp_info\n"
"    self.cpp_info.set_property(\"cmake_build_modules\", [os.path."
"join(\"lib\", \"mypkg.cmake\")])\n"
"\n"
"    self.cpp_info.components[\"mycomponent\"]."
"set_property(\"cmake_target_name\", \"Foo::Var\")\n"
"\n"
"    # Create a new target \"VarComponent\" that is an alias to the \"Foo::"
"Var\" component target\n"
"    self.cpp_info.components[\"mycomponent\"]."
"set_property(\"cmake_target_aliases\", [\"VarComponent\"])\n"
"\n"
"    # Skip this package when generating the files for the whole dependency "
"tree in the consumer\n"
"    # note: it will make useless the previous adjustments.\n"
"    # self.cpp_info.set_property(\"cmake_find_mode\", \"none\")\n"
"\n"
"    # Generate both MyFileNameConfig.cmake and FindMyFileName.cmake\n"
"    self.cpp_info.set_property(\"cmake_find_mode\", \"both\")"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:308
msgid "Disable CMakeDeps For Installed CMake configuration files"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:310
msgid ""
"Some projects may want to disable the ``CMakeDeps`` generator for downstream "
"consumers. This can be done by settings ``cmake_find_mode`` to ``none``. If "
"the project wants to provide it's own configuration targets, it should "
"append them to the ``buildirs`` attribute of ``cpp_info``."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:313
msgid ""
"This method is intended to work with downstream consumers using the "
"``CMakeToolchain`` generator, which will be populated with the ``builddirs`` "
"attribute."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:317
msgid ""
"def package(self):\n"
"    ...\n"
"    cmake.install()\n"
"\n"
"def package_info(self):\n"
"    self.cpp_info.set_property(\"cmake_find_mode\", \"none\") # Do NOT "
"generate anyfiles\n"
"    self.cpp_info.builddirs.append(os.path.join(\"lib\", \"cmake\", \"foo\"))"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:328
msgid "Map from project configuration to imported target's configuration"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:330
msgid ""
"As mentioned above, ``CMakeDeps`` provides support for multiple "
"configuration environments (Debug, Release, etc.) This is achieved by "
"populating properties on the imported targets according to the "
"``build_type`` setting when installing dependencies. When a consumer project "
"is configured with a single-configuration CMake generator, however, it is "
"necessary to define the ``CMAKE_BUILD_TYPE`` with a value that matches that "
"of the installed dependencies."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:335
msgid ""
"If the consumer CMake project is configured with a different build type than "
"the dependencies, it is necessary to tell CMake how to map the "
"configurations from the current project to the imported targets by setting "
"the ``CMAKE_MAP_IMPORTED_CONFIG_<CONFIG>`` CMake variable."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmakedeps.rst:339
msgid ""
"cd build-coverage/\n"
"conan install .. -s build_type=Debug\n"
"cmake .. -DCMAKE_BUILD_TYPE=Coverage -DCMAKE_TOOLCHAIN_FILE=<path>/"
"conan_toolchain.cmake -DCMAKE_MAP_IMPORTED_CONFIG_COVERAGE=Debug"
msgstr ""
