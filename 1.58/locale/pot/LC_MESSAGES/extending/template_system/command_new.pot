# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2022, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.58\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../extending/template_system/command_new.rst:5
msgid "Package scaffolding for :command:`conan new` command"
msgstr ""

#: ../../../extending/template_system/command_new.rst:9
msgid ""
"This functionality has to be considered as an **experimental** feature. We "
"might change the context provided for these templates once we have more "
"examples from the community."
msgstr ""

#: ../../../extending/template_system/command_new.rst:13
msgid ""
"Using the Conan command :command:`conan new` is a very convenient way to "
"start a new project with an example `conanfile.py`. This command has a ``--"
"template`` argument that you can use to provide a path to a template file "
"for the ``conanfile.py`` itself or even a path to a folder containing files "
"for a C++ project using Conan recipes."
msgstr ""

#: ../../../extending/template_system/command_new.rst:18
msgid ""
"The argument ``--template`` can take an absolute path or a relative path. If "
"relative, Conan will look for the files starting in the Conan cache folder "
"``templates/command/new/``. This is very useful in combination with :ref:"
"`conan_config_install` because you can easily share these templates with all "
"your team."
msgstr ""

#: ../../../extending/template_system/command_new.rst:25
msgid ""
"For backwards compatibility reasons, if the ``--template`` argument takes "
"the path to a single file Conan will look for it in the cache at the path "
"``templates/<filename>`` first. This will likely be removed in Conan v2.0."
msgstr ""

#: ../../../extending/template_system/command_new.rst:29
msgid ""
"This mechanism lets you have the Conan cache templates containing not only a "
"*conanfile.py*, but the full C++ project scaffolding. Thus just a single "
"command can get you started:"
msgstr ""

#: ../../../extending/template_system/command_new.rst:32
msgid ""
"$ conan new mypackage/version --template=header_only\n"
"$ conan new mypackage/version --template=conan-center"
msgstr ""

#: ../../../extending/template_system/command_new.rst:37
msgid ""
"Conan will process all the files found in that folder using `Jinja2 engine "
"<https://palletsprojects.com/p/jinja/>`_ and also the paths to those files. "
"Thus the following template directory (that does match the conventions for "
"`conan-center-index <https://github.com/conan-io/conan-center-index/tree/"
"master/recipes>`_ recipes):"
msgstr ""

#: ../../../extending/template_system/command_new.rst:41
msgid ""
"conan-center/{{name}}/config.yml\n"
"            /{{name}}/all/conanfile.py\n"
"            /{{name}}/all/conandata.yml\n"
"            /{{name}}/all/test_package/conanfile.py\n"
"            /{{name}}/all/test_package/CMakeLists.txt\n"
"            /{{name}}/all/test_package/main.cpp"
msgstr ""

#: ../../../extending/template_system/command_new.rst:50
msgid "will be translated to:"
msgstr ""

#: ../../../extending/template_system/command_new.rst:52
msgid ""
"conan-center/mypackage/config.yml\n"
"            /mypackage/all/conanfile.py\n"
"            /mypackage/all/conandata.yml\n"
"            /mypackage/all/test_package/conanfile.py\n"
"            /mypackage/all/test_package/CMakeLists.txt\n"
"            /mypackage/all/test_package/main.cpp"
msgstr ""

#: ../../../extending/template_system/command_new.rst:61
msgid ""
"Then the contents of all the files will be rendered using Jinja2 syntax as "
"well, thus substituting content values with context values - as we will see "
"in the next section."
msgstr ""

#: ../../../extending/template_system/command_new.rst:65
msgid "Context"
msgstr ""

#: ../../../extending/template_system/command_new.rst:67
msgid ""
"All the files should be valid Jinja2 templates. They will be feed with the "
"following context:"
msgstr ""

#: ../../../extending/template_system/command_new.rst:69
msgid "``name`` and ``version``: defined from the command line."
msgstr ""

#: ../../../extending/template_system/command_new.rst:70
msgid ""
"``package_name``: a *CamelCase* variant of the name. Any valid Conan package "
"name like ``package_name``, ``package+name``, ``package.name`` or ``package-"
"name`` will be converted into a suitable name for a Python class, "
"``PackageName``."
msgstr ""

#: ../../../extending/template_system/command_new.rst:73
msgid ""
"``conan_version``: an object that renders as the current Conan version, e.g. "
"``1.24.0``."
msgstr ""

#: ../../../extending/template_system/command_new.rst:76
msgid "Example"
msgstr ""

#: ../../../extending/template_system/command_new.rst:78
msgid "This is a very simple example for a header only library:"
msgstr ""

#: ../../../extending/template_system/command_new.rst:80
msgid ""
"# Recipe autogenerated with Conan {{ conan_version }} using `conan new --"
"template` command\n"
"\n"
"from conans import ConanFile\n"
"\n"
"\n"
"class {{package_name}}Conan(ConanFile):\n"
"    name = \"{{ name }}\"\n"
"    version = \"{{ version }}\"\n"
"    settings = \"os\", \"arch\", \"compiler\", \"build_type\"\n"
"    exports_sources = \"include/*\"\n"
"\n"
"    def package(self):\n"
"        self.copy(\"*.hpp\", dst=\"include\")\n"
"        self.copy(\"LICENSE.txt\", dst=\"licenses\")\n"
"\n"
"    def package_id(self):\n"
"        self.info.clear()"
msgstr ""

#: ../../../extending/template_system/command_new.rst:101
msgid "Custom definitions"
msgstr ""

#: ../../../extending/template_system/command_new.rst:103
msgid ""
"Sometimes it's needed to provide additional variables for the custom "
"templates. For instance, if it's desired to have ``description`` and "
"``homepage`` to be templated as well:"
msgstr ""

#: ../../../extending/template_system/command_new.rst:106
msgid ""
"# Recipe autogenerated with Conan {{ conan_version }} using `conan new --"
"template` command\n"
"\n"
"from conans import ConanFile\n"
"\n"
"\n"
"class {{package_name}}Conan(ConanFile):\n"
"    name = \"{{ name }}\"\n"
"    version = \"{{ version }}\"\n"
"    description = \"{{ description }}\"\n"
"    homepage = \"{{ homepage }}\"\n"
"    settings = \"os\", \"arch\", \"compiler\", \"build_type\"\n"
"    exports_sources = \"include/*\"\n"
"\n"
"    def package(self):\n"
"        self.copy(\"*.hpp\", dst=\"include\")\n"
"        self.copy(\"LICENSE.txt\", dst=\"licenses\")\n"
"\n"
"    def package_id(self):\n"
"        self.info.clear()"
msgstr ""

#: ../../../extending/template_system/command_new.rst:128
msgid ""
"With the above template it's now easy to overwrite such extra keywords with "
"values from the command line:"
msgstr ""

#: ../../../extending/template_system/command_new.rst:130
msgid ""
"$ conan new mypackage/version --template=header_only -d homepage=https://www."
"example.com -d description=\"the best package\""
msgstr ""

#: ../../../extending/template_system/command_new.rst:135
msgid "Predefined templates"
msgstr ""

#: ../../../extending/template_system/command_new.rst:137
msgid ""
"Available since: `1.40.0 <https://github.com/conan-io/conan/releases/"
"tag/1.40.0>`_"
msgstr ""

#: ../../../extending/template_system/command_new.rst:139
msgid ""
"The Conan client has some predefined templates that can be used with the "
"command ``new``. These two templates are related to :ref:"
"`Layouts<conan_tools_layout_predefined_layouts>` and offer a simple Hello "
"World example:"
msgstr ""

#: ../../../extending/template_system/command_new.rst:142
msgid ""
"`cmake_lib`: Generates a hello world c++ library based on modern Conan "
"recipe (layout + generate) using CMake as the build system."
msgstr ""

#: ../../../extending/template_system/command_new.rst:143
msgid ""
"`cmake_exe`: Generates a hello world executable based on modern Conan recipe "
"(layout + generate) using CMake as the build system."
msgstr ""

#: ../../../extending/template_system/command_new.rst:144
msgid ""
"`msbuild_lib`: Generates a hello world c++ library based on modern Conan "
"recipe (layout + generate) using MSBuild as the build system."
msgstr ""

#: ../../../extending/template_system/command_new.rst:145
msgid ""
"`msbuild_exe`: Generates a hello world executable based on modern Conan "
"recipe (layout + generate) using MSBuild as the build system."
msgstr ""

#: ../../../extending/template_system/command_new.rst:146
msgid ""
"`meson_lib`: Generates a hello world c++ library based on modern Conan "
"recipe (layout + generate) using Meson as the build system (since Conan "
"1.45)."
msgstr ""

#: ../../../extending/template_system/command_new.rst:147
msgid ""
"`meson_exe`: Generates a hello world executable based on modern Conan recipe "
"(layout + generate) using Meson as the build system (since Conan 1.45)."
msgstr ""

#: ../../../extending/template_system/command_new.rst:148
msgid ""
"`bazel_lib`: Generates a hello world c++ library based on modern Conan "
"recipe (layout + generate) using Bazel as the build system (since Conan "
"1.47)."
msgstr ""

#: ../../../extending/template_system/command_new.rst:149
msgid ""
"`bazel_exe`: Generates a hello world executable based on modern Conan recipe "
"(layout + generate) using Bazel as the build system (since Conan 1.47)."
msgstr ""

#: ../../../extending/template_system/command_new.rst:150
msgid ""
"`autotools_lib`: Generates a hello world c++ library based on modern Conan "
"recipe (layout + generate) using Autotools as the build system (since Conan "
"1.48)."
msgstr ""

#: ../../../extending/template_system/command_new.rst:151
msgid ""
"`autotools_exe`: Generates a hello world executable based on modern Conan "
"recipe (layout + generate) using Autotools as the build system (since Conan "
"1.48)."
msgstr ""

#: ../../../extending/template_system/command_new.rst:153
msgid ""
"A full example can be found in :ref:`Creating "
"Packages<packaging_getting_started>` section."
msgstr ""
