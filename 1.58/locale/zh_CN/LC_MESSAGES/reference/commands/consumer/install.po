# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2022, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.58\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/commands/consumer/install.rst:5
msgid "conan install"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:7
msgid ""
"$ conan install [-h] [-g GENERATOR] [-if INSTALL_FOLDER] [-of OUTPUT_FOLDER] "
"[-m [MANIFESTS]] [-mi [MANIFESTS_INTERACTIVE]]\n"
"                [-v [VERIFY]] [--no-imports] [--build-require] [-j JSON] [-b "
"[BUILD]] [-r REMOTE] [-u] [-l LOCKFILE] [--lockfile-out LOCKFILE_OUT]\n"
"                [-e ENV_HOST] [-e:b ENV_BUILD] [-e:h ENV_HOST] [-o "
"OPTIONS_HOST] [-o:b OPTIONS_BUILD] [-o:h OPTIONS_HOST] [-pr PROFILE_HOST]\n"
"                [-pr:b PROFILE_BUILD] [-pr:h PROFILE_HOST] [-s "
"SETTINGS_HOST] [-s:b SETTINGS_BUILD] [-s:h SETTINGS_HOST] [-c CONF_HOST]\n"
"                [-c:b CONF_BUILD] [-c:h CONF_HOST] [--lockfile-node-id "
"LOCKFILE_NODE_ID] [--require-override REQUIRE_OVERRIDE]\n"
"                path_or_reference [reference]"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:17
msgid ""
"Installs the requirements specified in a recipe (conanfile.py or conanfile."
"txt)."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:19
msgid ""
"It can also be used to install a concrete package specifying a reference. If "
"any requirement is not found in the local cache, it will retrieve the recipe "
"from a remote, looking for it sequentially in the configured remotes. When "
"the recipes have been downloaded it will try to download a binary package "
"matching the specified settings, only from the remote from which the recipe "
"was retrieved. If no binary package is found, it can be built from sources "
"using the '--build' option. When the package is installed, Conan will write "
"the files for the specified generators."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:29
msgid ""
"positional arguments:\n"
"  path_or_reference     Path to a folder containing a recipe (conanfile.py "
"or\n"
"                        conanfile.txt) or to a recipe file. e.g.,\n"
"                        ./my_project/conanfile.txt. It could also be a\n"
"                        reference\n"
"  reference             Reference for the conanfile path of the first\n"
"                        argument: user/channel, version@user/channel or\n"
"                        pkg/version@user/channel(if name or version "
"declared\n"
"                        in conanfile.py, they should match)\n"
"\n"
"optional arguments:\n"
"  -h, --help            show this help message and exit\n"
"  -g GENERATOR, --generator GENERATOR\n"
"                        Generators to use\n"
"  -if INSTALL_FOLDER, --install-folder INSTALL_FOLDER\n"
"                        Use this directory as the directory where to put "
"the\n"
"                        generatorfiles. e.g., conaninfo/conanbuildinfo.txt\n"
"  -of OUTPUT_FOLDER, --output-folder OUTPUT_FOLDER\n"
"                        The root output folder for generated and build "
"files\n"
"  -m [MANIFESTS], --manifests [MANIFESTS]\n"
"                        Install dependencies manifests in folder for later\n"
"                        verify. Default folder is .conan_manifests, but can "
"be\n"
"                        changed\n"
"  -mi [MANIFESTS_INTERACTIVE], --manifests-interactive "
"[MANIFESTS_INTERACTIVE]\n"
"                        Install dependencies manifests in folder for later\n"
"                        verify, asking user for confirmation. Default "
"folder\n"
"                        is .conan_manifests, but can be changed\n"
"  -v [VERIFY], --verify [VERIFY]\n"
"                        Verify dependencies manifests against stored ones\n"
"  --no-imports          Install specified packages but avoid running "
"imports\n"
"  --build-require       The provided reference is a build-require\n"
"  -j JSON, --json JSON  Path to a json file where the install information "
"will\n"
"                        be written\n"
"  -b [BUILD], --build [BUILD]\n"
"                        Optional, specify which packages to build from "
"source.\n"
"                        Combining multiple '--build' options on one command\n"
"                        line is allowed. For dependencies, the optional\n"
"                        'build_policy' attribute in their conanfile.py "
"takes\n"
"                        precedence over the command line parameter. "
"Possible\n"
"                        parameters: --build Force build for all packages, "
"do\n"
"                        not use binary packages. --build=never Disallow "
"build\n"
"                        for all packages, use binary packages or fail if a\n"
"                        binary package is not found. Cannot be combined "
"with\n"
"                        other '--build' options. --build=missing Build\n"
"                        packages from source whose binary package is not\n"
"                        found. --build=outdated Build packages from source\n"
"                        whose binary package was not generated from the "
"latest\n"
"                        recipe or is not found. --build=cascade Build "
"packages\n"
"                        from source that have at least one dependency being\n"
"                        built from source. --build=[pattern] Build packages\n"
"                        from source whose package reference matches the\n"
"                        pattern. The pattern uses 'fnmatch' style "
"wildcards.\n"
"                        --build=![pattern] Excluded packages, which will "
"not\n"
"                        be built from the source, whose package reference\n"
"                        matches the pattern. The pattern uses 'fnmatch' "
"style\n"
"                        wildcards. Default behavior: If you omit the '--"
"build'\n"
"                        option, the 'build_policy' attribute in conanfile."
"py\n"
"                        will be used if it exists, otherwise the behavior "
"is\n"
"                        like '--build=never'.\n"
"  -r REMOTE, --remote REMOTE\n"
"                        Look in the specified remote server\n"
"  -u, --update          Will check the remote and in case a newer version\n"
"                        and/or revision of the dependencies exists there, "
"it\n"
"                        will install those in the local cache. When using\n"
"                        version ranges, it will install the latest version\n"
"                        that satisfies the range. Also, if using revisions, "
"it\n"
"                        will update to the latest revision for the resolved\n"
"                        version range.\n"
"  -l LOCKFILE, --lockfile LOCKFILE\n"
"                        Path to a lockfile\n"
"  --lockfile-out LOCKFILE_OUT\n"
"                        Filename of the updated lockfile\n"
"  -e ENV_HOST, --env ENV_HOST\n"
"                        Environment variables that will be set during the\n"
"                        package build (host machine). e.g.: -e\n"
"                        CXX=/usr/bin/clang++\n"
"  -e:b ENV_BUILD, --env:build ENV_BUILD\n"
"                        Environment variables that will be set during the\n"
"                        package build (build machine). e.g.: -e:b\n"
"                        CXX=/usr/bin/clang++\n"
"  -e:h ENV_HOST, --env:host ENV_HOST\n"
"                        Environment variables that will be set during the\n"
"                        package build (host machine). e.g.: -e:h\n"
"                        CXX=/usr/bin/clang++\n"
"  -o OPTIONS_HOST, --options OPTIONS_HOST\n"
"                        Define options values (host machine), e.g.: -o\n"
"                        Pkg:with_qt=true\n"
"  -o:b OPTIONS_BUILD, --options:build OPTIONS_BUILD\n"
"                        Define options values (build machine), e.g.: -o:b\n"
"                        Pkg:with_qt=true\n"
"  -o:h OPTIONS_HOST, --options:host OPTIONS_HOST\n"
"                        Define options values (host machine), e.g.: -o:h\n"
"                        Pkg:with_qt=true\n"
"  -pr PROFILE_HOST, --profile PROFILE_HOST\n"
"                        Apply the specified profile to the host machine\n"
"  -pr:b PROFILE_BUILD, --profile:build PROFILE_BUILD\n"
"                        Apply the specified profile to the build machine\n"
"  -pr:h PROFILE_HOST, --profile:host PROFILE_HOST\n"
"                        Apply the specified profile to the host machine\n"
"  -s SETTINGS_HOST, --settings SETTINGS_HOST\n"
"                        Settings to build the package, overwriting the\n"
"                        defaults (host machine). e.g.: -s compiler=gcc\n"
"  -s:b SETTINGS_BUILD, --settings:build SETTINGS_BUILD\n"
"                        Settings to build the package, overwriting the\n"
"                        defaults (build machine). e.g.: -s:b compiler=gcc\n"
"  -s:h SETTINGS_HOST, --settings:host SETTINGS_HOST\n"
"                        Settings to build the package, overwriting the\n"
"                        defaults (host machine). e.g.: -s:h compiler=gcc\n"
"  -c CONF_HOST, --conf CONF_HOST\n"
"                        Configuration to build the package, overwriting the "
"defaults (host machine). e.g.: -c\n"
"                        tools.cmake.cmaketoolchain:generator=Xcode\n"
"  -c:b CONF_BUILD, --conf:build CONF_BUILD\n"
"                        Configuration to build the package, overwriting the "
"defaults (build machine). e.g.: -c:b\n"
"                        tools.cmake.cmaketoolchain:generator=Xcode\n"
"  -c:h CONF_HOST, --conf:host CONF_HOST\n"
"                        Configuration to build the package, overwriting the "
"defaults (host machine). e.g.: -c:h\n"
"                        tools.cmake.cmaketoolchain:generator=Xcode\n"
"  --lockfile-node-id LOCKFILE_NODE_ID\n"
"                        NodeID of the referenced package in the lockfile\n"
"  --require-override REQUIRE_OVERRIDE\n"
"                        Define a requirement override"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:154
msgid ""
":command:`conan install` executes methods of a *conanfile.py* in the "
"following order:"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:156
#: ../../../reference/commands/consumer/install.rst:169
msgid "``config_options()``"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:157
#: ../../../reference/commands/consumer/install.rst:170
msgid "``configure()``"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:158
#: ../../../reference/commands/consumer/install.rst:171
msgid "``layout()``"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:159
#: ../../../reference/commands/consumer/install.rst:172
msgid "``requirements()``"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:160
#: ../../../reference/commands/consumer/install.rst:173
msgid "``package_id()``"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:161
#: ../../../reference/commands/consumer/install.rst:174
msgid "``validate()``"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:162
#: ../../../reference/commands/consumer/install.rst:175
msgid "``validate_build()``"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:163
#: ../../../reference/commands/consumer/install.rst:184
msgid "``package_info()``"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:164
#: ../../../reference/commands/consumer/install.rst:185
msgid "``deploy()``"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:166
msgid ""
"Note this describes the process of installing a pre-built binary package. If "
"the package has to be built, :command:`conan install --build` executes the "
"following:"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:176
msgid "``build_requirements()``"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:177
msgid "``build_id()``"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:178
msgid "``system_requirements()``"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:179
msgid "``source()``"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:180
msgid "``generate()``"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:181
msgid "``imports()``"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:182
msgid "``build()``"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:183
msgid "``package()``"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:187
msgid "**Examples**"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:189
msgid ""
"Install a package requirement from a ``conanfile.txt``, saved in your "
"current directory with one option and setting (other settings will be "
"defaulted as defined in ``<userhome>/.conan/profiles/default``):"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:193
msgid "$ conan install . -o pkg_name:use_debug_mode=on -s compiler=clang"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:197
msgid ""
"Install the requirements defined in a ``conanfile.py`` file in your current "
"directory, with the default settings in default profile ``<userhome>/.conan/"
"profiles/default``, and specifying the version, user and channel (as they "
"might be used in the recipe):"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:201
msgid ""
"class Pkg(ConanFile):\n"
"   name = \"mypkg\"\n"
"   # see, no version defined!\n"
"   def requirements(self):\n"
"       # this trick allow to depend on packages on your same user/channel\n"
"       self.requires(\"dep/0.3@%s/%s\" % (self.user, self.channel))\n"
"\n"
"   def build(self):\n"
"       if self.version == \"myversion\":\n"
"           # something specific for this version of the package."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:214
msgid "$ conan install . myversion@someuser/somechannel"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:218
msgid ""
"Those values are cached in a file, so later calls to local commands like "
"``conan build`` can find and use this version, user and channel data."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:221
msgid ""
"Install the **opencv/4.1.1@conan/stable** reference with its default options "
"and default settings from ``<userhome>/.conan/profiles/default``:"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:224
msgid "$ conan install opencv/4.1.1@conan/stable"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:228
msgid ""
"Install the **opencv/4.1.1@conan/stable** reference updating the recipe and "
"the binary package if new upstream versions are available:"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:231
msgid "$ conan install opencv/4.1.1@conan/stable --update"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:238
msgid "build options"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:240
msgid ""
"Both the conan **install** and **create** commands accept :command:`--build` "
"options to specify which packages to build from source. Combining multiple :"
"command:`--build` options on one command line is allowed, where a package is "
"built from source if at least one of the given build options selects it for "
"the build. For dependencies, the optional ``build_policy`` attribute in "
"their `conanfile.py` can override the behavior of the given command line "
"parameters. Possible values are:"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:247
msgid ""
":command:`--build`: Always build everything from source. Produces a clean re-"
"build of all packages. and transitively dependent packages"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:249
msgid ""
":command:`--build=never`: Conan will not try to build packages when the "
"requested configuration does not match, in which case it will throw an "
"error. This option can not be combined with other :command:`--build` options."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:252
msgid ""
":command:`--build=missing`: Conan will try to build packages from source "
"whose binary package was not found in the requested configuration on any of "
"the active remotes or the cache."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:254
msgid ""
":command:`--build=outdated`: Conan will try to build packages from source "
"whose binary package was not built with the current recipe or when missing "
"the binary package."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:256
msgid ""
":command:`--build=cascade`: Conan selects packages for the build where at "
"least one of its dependencies is selected for the build. This is useful to "
"rebuild packages that, directly or indirectly, depend on changed packages."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:259
msgid ""
":command:`--build=[pattern]`: A fnmatch case-sensitive pattern of a package "
"reference or only the package name. Conan will force the build of the "
"packages whose reference matches the given **pattern**. Several patterns can "
"be specified, chaining multiple options:"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:263
msgid ""
"e.g., :command:`--build=pattern1 --build=pattern2` can be used to specify "
"more than one pattern."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:264
msgid ""
"e.g., :command:`--build=zlib` will match any package named ``zlib`` (same as "
"``zlib/*``)."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:265
msgid ""
"e.g., :command:`--build=z*@conan/stable` will match any package starting "
"with ``z`` with ``conan/stable`` as user/channel."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:267
msgid ""
":command:`--build=![pattern]`: A fnmatch case-sensitive pattern of a package "
"reference or only the package name. Conan will exclude the build of the "
"packages whose reference matches the given **pattern**. Several patterns can "
"be specified, chaining multiple options:"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:271
msgid ""
"e.g., :command:`--build=!zlib --build` Build all packages from source, "
"except for zlib."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:272
msgid ""
"e.g., :command:`--build=!z* --build` Build all packages from source, except "
"for those starting with ``z``"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:274
msgid ""
"If you omit the :command:`--build` option, the ``build_policy`` attribute in "
"`conanfile.py` will be looked up. If it is set to ``missing`` or ``always``, "
"this build option will be used, otherwise the command will behave like :"
"command:`--build=never` was set."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:279
msgid "env variables"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:281
msgid "With the :command:`-e` parameters you can define:"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:283
msgid ""
"Global environment variables (:command:`-e SOME_VAR=\"SOME_VALUE\"`). These "
"variables will be defined before the `build` step in all the packages and "
"will be cleaned after the `build` execution."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:285
msgid ""
"Specific package environment variables (:command:`-e zlib:"
"SOME_VAR=\"SOME_VALUE\"`). These variables will be defined only in the "
"specified packages (e.g., zlib)."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:288
msgid ""
"You can specify this variables not only for your direct ``requires`` but for "
"any package in the dependency graph."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:291
msgid ""
"If you want to define an environment variable but you want to append the "
"variables declared in your requirements you can use the [] syntax:"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:294
msgid "$ conan install . -e PATH=[/other/path]"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:298
msgid ""
"This way the first entry in the ``PATH`` variable will be */other/path* but "
"the ``PATH`` values declared in the requirements of the project will be "
"appended at the end using the system path separator."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:303
msgid "settings"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:305
msgid "With the :command:`-s` parameters you can define:"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:307
msgid ""
"Global settings (:command:`-s compiler=\"Visual Studio\"`). Will apply to "
"all the requires."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:308
msgid ""
"Specific package settings (:command:`-s zlib:compiler=\"MinGW\"`). Those "
"settings will be applied only to the specified packages. They accept "
"patterns too, like ``-s *@myuser/*:compiler=MinGW``, which means that "
"packages that have the username \"myuser\" will use MinGW as compiler."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:310
msgid ""
"**Experimental:** Settings only for the consumer package. (:command:`-s &:"
"compiler=\"MinGW\"`). If `&` is specified as the package name it will apply "
"only to the consumer conanfile (.py or .txt). This is a special case because "
"the consumer conanfile might not declare a `name` so it would be impossible "
"to reference it."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:314
msgid ""
"You can specify custom settings not only for your direct ``requires`` but "
"for any package in the dependency graph."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:318
msgid "options"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:320
msgid ""
"With the :command:`-o` parameters you can only define specific package "
"options."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:322
msgid ""
"$ conan install . -o zlib:shared=True\n"
"$ conan install . -o zlib:shared=True -o bzip2:option=132\n"
"# you can also apply the same options to many packages with wildcards:\n"
"$ conan install . -o *:shared=True"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:329
msgid ""
"**Experimental:** To define an option just for the consumer conanfile.py "
"use :command:`-o &:shared=True` syntax. If `&` is specified as the package "
"name it will apply only to the consumer conanfile.py. This is a special case "
"because the consumer conanfile might not declare a `name` so it would be "
"impossible to reference it."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:335
msgid ""
"You can use :ref:`profiles <profiles>` files to create predefined sets of "
"**settings**, **options** and **environment variables**."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:339
msgid "folders"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:343
#: ../../../reference/commands/consumer/install.rst:359
msgid ""
"This feature is still **under development**, while it is recommended and "
"usable and we will try not to break them in future releases, some breaking "
"changes might still happen if necessary to prepare for the *Conan 2.0 "
"release*."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:347
msgid ""
"The ``--output-folder`` define together with the ``layout()`` recipe method "
"the location of the output files. For example, the files created by build "
"system integrations such as ``CMakeToolchain`` or ``PkgConfigDeps`` will be "
"created in the folder defined by the ``layout()`` ``generators`` folder, "
"inside the defined ``--output-folder``. By default, the ``--output-folder`` "
"is the folder containing the ``conanfile.py``."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:355
msgid "conf"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:362
msgid ""
"With the :command:`-c` parameters you can define specific tool "
"configurations."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:364
msgid ""
"$ conan install . -c tools.microsoft.msbuild:verbosity=Diagnostic\n"
"$ conan install . -c tools.microsoft.msbuild:verbosity=Detailed -c tools."
"build:processes=10"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:371
msgid ""
"To list all possible configurations available, run :command:`conan config "
"list`."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:375
msgid ""
"You can see more information about configurations in :ref:`global.conf "
"section <global_conf>`."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:379
msgid "reference"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:381
msgid ""
"An optional positional argument, if used the first argument should be a "
"path. If the reference specifies name and/or version, and they are also "
"declared in the ``conanfile.py``, they should match, otherwise, an error "
"will be raised."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:385
msgid ""
"$ conan install . # OK, user and channel will be None\n"
"$ conan install . user/testing # OK\n"
"$ conan install . version@user/testing # OK\n"
"$ conan install . pkg/version@user/testing # OK\n"
"$ conan install pkg/version@user/testing user/channel # Error, first arg is "
"not a path"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:395
msgid "lockfiles"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:397
msgid ""
"The ``install`` command accepts several arguments related to :ref:"
"`lockfiles<versioning_lockfiles>`:"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:399
msgid ""
"``--lockfile=<path-to-lockfile>``: The ``conan install ... --lockfile=path/"
"to/file.lock`` command will provide an input lockfile to the command. "
"Versions, revisions, and other data contained in that lockfile will be "
"respected. If something has changed locally that diverges with respect the "
"locked information in the lockfile, the command will fail."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:402
msgid ""
"``--lockfile-out=<path-to-lockfile>``: This argument will define the "
"filename of the resulting ``install`` operation. If the input lockfile has "
"not completely locked something, and the install command can, for example, "
"build some dependency from source with the ``--build=<dep-name>`` argument, "
"this will provide new data, like a new package revision. This new data can "
"be captured and locked in the output lockfile."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:406
msgid ""
"``--lockfile-node-id=<node-id>``: **Experimental, subject to breaking "
"changes**. In some cases, it is impossible to reference a package in the "
"dependency graph by name or reference, because there might be several "
"instances of it with the same one. This could happen with some special type "
"of requirements, like build-requires or private requires. Providing the "
"``node-id``, as defined in the lockfile file, can define without any "
"ambiguity the package in the graph that the command is referencing."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:414
msgid ""
"Installation of binaries can be accelerated setting up parallel downloads "
"with the ``general.parallel_download`` **under development** configuration "
"in :ref:`conan_conf`."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:418
msgid "--build-require"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:420
msgid ""
"Available since: `1.37.0 <https://github.com/conan-io/conan/releases/"
"tag/1.37.0>`_"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:422
msgid ""
"The ``--build-require`` allows to install the package using the "
"configuration and settings of the \"build\" context, as it was a "
"``build_require``. Lets see it with an example:"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:425
msgid ""
"We have a ``mycmake/1.0`` package, which bundles cmake executable, and we "
"are cross-compiling from Windows to Linux, so all the usual install commands "
"will use something like ``-pr:b=Windows -pr:h=Linux``. At some point we "
"might want to install the ``build-require`` to test it, executing it "
"directly in the terminal, with ``-build-require`` it is possible:"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:430
msgid ""
"$ conan install mycmake/1.0@ --build-require -g virtualenv -pr:b=Windows -pr:"
"h=Linux\n"
"# Installs Windows package binary, not the Linux one.\n"
"$ source ./activate.sh && mycmake\n"
"# This will execute the \"mycmake\" from the Windows package."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:437
msgid ""
"This also works when building a dependency graph, including build-requires, "
"in CI. As the ``conan lock build-order`` command will return a list "
"including the build/host context, it is possible to use that to add the ``--"
"build-require`` to the command, and build ``build-requires`` as necessary "
"without needing to change the profiles at all."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:446
msgid "--require-override"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:449
msgid ""
"Available since: `1.39.0 <https://github.com/conan-io/conan/releases/"
"tag/1.39.0>`_"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:451
msgid ""
"The ``--require-override`` argument allows to inject an override requirement "
"to the consumer conanfile being called by this command, that would be "
"equivalent to:"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:454
msgid ""
"class Pkg(ConanFile):\n"
"\n"
"    def requirements(self):\n"
"        self.requires(\"zlib/1.3\", override=True)"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:461
msgid ""
"This allows to dynamically test specific versions upstream without requiring "
"editions to conanfiles. Note however this would not be a generally "
"recommended practice for production, it would be better to actually update "
"the conanfiles to explicitly reflect in code which specific versions "
"upstream are being used."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:465
msgid ""
"If the consumer conanfile already contains a direct requirement to that "
"dependency, then such version will be directly overwritten, but no "
"``override=True`` will be added (note that ``override=True`` means that the "
"current package does not depend on that other package)."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:469
msgid ""
"This feature affects only to regular ``requires``, not to ``tool_requires`` "
"or ``python_requires``, as those don't have such an overriding mechanism, "
"and they are private to their consumer, not propagating downstream nor "
"upstream."
msgstr ""
