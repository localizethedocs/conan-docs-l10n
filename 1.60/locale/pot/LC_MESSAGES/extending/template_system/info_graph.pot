# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2022, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.60\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:02+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../extending/template_system/info_graph.rst:5
msgid "Graph output for :command:`conan info` command"
msgstr ""

#: ../../../extending/template_system/info_graph.rst:9
msgid ""
"This is a **migrated** feature. Please refer to :ref:`conan_v2_graph_info` "
"learn about the changes. Most of the functionality remains intact and the "
"main changes are to the command line."
msgstr ""

#: ../../../extending/template_system/info_graph.rst:13
msgid ""
"The :ref:`conan_info` command can generate a visualization of the dependency "
"graph, it comes in two flavors: `html` and `dot` (GraphViz), but both take "
"the same template parameters. Conan will use the following input files, if "
"found, inside the Conan cache folder:"
msgstr ""

#: ../../../extending/template_system/info_graph.rst:18
msgid "HTML output: *<cache>/templates/output/info_graph.html*."
msgstr ""

#: ../../../extending/template_system/info_graph.rst:19
msgid "DOT output: *<cache>/templates/output/info_graph.dot*."
msgstr ""

#: ../../../extending/template_system/info_graph.rst:22
msgid "Context"
msgstr ""

#: ../../../extending/template_system/info_graph.rst:24
msgid ""
"These files should be valid `Jinja2 documentation <https://palletsprojects."
"com/p/jinja/>`_ templates and they will be feed with the following context:"
msgstr ""

#: ../../../extending/template_system/info_graph.rst:27
msgid ""
"``base_template_path``: absolute path to the directory where the chosen "
"template file is located. It is needed if your output file needs to link "
"assets distributed together with the template file (see HTML example linking "
"CSS and JS files)."
msgstr ""

#: ../../../extending/template_system/info_graph.rst:30
msgid ""
"``graph``: this object contains all the information from the graph of "
"dependencies. It offers the following API:"
msgstr ""

#: ../../../extending/template_system/info_graph.rst:33
msgid ""
"``graph.nodes``: list of ``Node`` objects with the information for each "
"Conan package included in the graph (see below API for this ``Node`` object)."
msgstr ""

#: ../../../extending/template_system/info_graph.rst:35
msgid ""
"``graph.edges``: list of tuples with all the connections in the dependency "
"graph. First item in the tuple is the consumer ``Node`` and second item the "
"required ``Node``."
msgstr ""

#: ../../../extending/template_system/info_graph.rst:37
msgid ""
"``graph.binary_color(node)``: function that retrieves the Conan default "
"color based on the ``node.binary`` value."
msgstr ""

#: ../../../extending/template_system/info_graph.rst:40
msgid ""
"The ``Node`` objects in the context provide all the required information "
"about each package:"
msgstr ""

#: ../../../extending/template_system/info_graph.rst:42
msgid "``node.label``: display name for the conanfile."
msgstr ""

#: ../../../extending/template_system/info_graph.rst:43
msgid "``node.short_label``: ``name/version`` parts of the Conan reference."
msgstr ""

#: ../../../extending/template_system/info_graph.rst:44
msgid "``node.package_id``: the package identifier."
msgstr ""

#: ../../../extending/template_system/info_graph.rst:45
msgid "``node.is_build_requires``:"
msgstr ""

#: ../../../extending/template_system/info_graph.rst:46
msgid ""
"``node.binary``: it identifies where the binary comes from (cache, download, "
"build,"
msgstr ""

#: ../../../extending/template_system/info_graph.rst:47
msgid "missing, update)."
msgstr ""

#: ../../../extending/template_system/info_graph.rst:48
msgid ""
"``node.data()``: returns a dictionary that contains data from the recipe, "
"members are ``url``, ``homepage``, ``license``, ``author`` and ``topics``."
msgstr ""

#: ../../../extending/template_system/info_graph.rst:54
msgid "Examples"
msgstr ""

#: ../../../extending/template_system/info_graph.rst:56
msgid ""
"These are two examples of templates that Conan is currently using for the "
"basic functionality. You can refer to the `Jinja2 documentation <https://"
"palletsprojects.com/p/jinja/>`_ for more information about the logic and "
"filters you can use in these templates."
msgstr ""

#: ../../../extending/template_system/info_graph.rst:60
msgid ""
"Let us know if you have a cool template you want to share with the Conan "
"community."
msgstr ""

#: ../../../extending/template_system/info_graph.rst:64
msgid "Dot files:"
msgstr ""

#: ../../../extending/template_system/info_graph.rst:66
msgid ""
"Default template for the DOT output contains just the node names and the "
"edges:"
msgstr ""

#: ../../../extending/template_system/info_graph.rst:68
msgid ""
"digraph {\n"
"    {%- for src, dst in graph.edges %}\n"
"        \"{{ src.label }}\" -> \"{{ dst.label }}\"\n"
"    {%- endfor %}\n"
"}"
msgstr ""

#: ../../../extending/template_system/info_graph.rst:77
msgid "The output will compose a valid ``dot`` file:"
msgstr ""

#: ../../../extending/template_system/info_graph.rst:79
msgid "conan info poco/1.10.0@ --graph=poco.dot"
msgstr ""

#: ../../../extending/template_system/info_graph.rst:84
msgid ""
"digraph {\n"
"        \"poco/1.10.0\" -> \"openssl/1.1.1g\"\n"
"        \"virtual\" -> \"poco/1.10.0\"\n"
"}"
msgstr ""

#: ../../../extending/template_system/info_graph.rst:92
msgid "Use ``dot`` to render the default view of the generated graph:"
msgstr ""

#: ../../../extending/template_system/info_graph.rst:94
msgid "dot -Tpng poco.dot > poco.png"
msgstr ""

#: ../../../extending/template_system/info_graph.rst:105
msgid "HTML files:"
msgstr ""

#: ../../../extending/template_system/info_graph.rst:107
msgid ""
"HTML templates are more complicated than ``dot`` ones, but the HTML can "
"provide a nicer view of the graph and easily include JavaScript to create an "
"interactive view of the graph."
msgstr ""

#: ../../../extending/template_system/info_graph.rst:110
msgid ""
"In this example we assume you have distributed the following files to your "
"cache folder:"
msgstr ""

#: ../../../extending/template_system/info_graph.rst:112
msgid ""
"<cache>/templates/output/css/vis.min.css\n"
"<cache>/templates/output/js/vis.min.js\n"
"<cache>/templates/output/info_graph.html"
msgstr ""

#: ../../../extending/template_system/info_graph.rst:119
msgid ""
"Our template will be the *info_graph.html* file, and it will use the assets "
"from the local files provided in the cache (most use cases will use files "
"from the internet using the full URL)."
msgstr ""

#: ../../../extending/template_system/info_graph.rst:123
msgid ""
"These are some snippets from the *info_graph.html* template, it uses the "
"`vis.js <https://visjs.org/>`_ library:"
msgstr ""

#: ../../../extending/template_system/info_graph.rst:125
msgid ""
"<html lang=\"en\">\n"
"    <head>\n"
"        {# ... #}\n"
"        <script type=\"text/javascript\" src=\"{{ base_template_path }}/js/"
"vis.min.js\"></script>\n"
"        <link href=\"{{ base_template_path }}/css/vis.min.css\" "
"rel=\"stylesheet\" type=\"text/css\"/>\n"
"    </head>\n"
"\n"
"    <body>\n"
"        {# ... #}\n"
"\n"
"        <div style=\"width: 100%;\">\n"
"            <div id=\"mynetwork\"></div>\n"
"        </div>\n"
"\n"
"        {# ... #}\n"
"\n"
"        <script type=\"text/javascript\">\n"
"            var nodes = new vis.DataSet([\n"
"                {%- for node in graph.nodes %}\n"
"                    {\n"
"                        id: {{ node.id }},\n"
"                        label: '{{ node.short_label }}',\n"
"                        shape: '{% if node.is_build_requires %}ellipse{% "
"else %}box{% endif %}',\n"
"                        color: { background: '{{ graph."
"binary_color(node) }}'},\n"
"                        fulllabel: '<h3>{{ node.label }}</h3>' +\n"
"                                '<ul>' +\n"
"                                '    <li><b>id</b>: {{ node.package_id }}</"
"li>' +\n"
"                                {%- for key, value in node.data().items() "
"%}\n"
"                                {%- if value %}\n"
"                                '    <li><b>{{ key }}</b>: {{ value }}</li>' "
"+\n"
"                                {%- endif %}\n"
"                                {%- endfor %}\n"
"                                '</ul>'\n"
"                    }{%- if not loop.last %},{% endif %}\n"
"                {%- endfor %}\n"
"            ]);\n"
"            var edges = new vis.DataSet([\n"
"                {%- for src, dst in graph.edges %}\n"
"                    { from: {{ src.id }}, to: {{ dst.id }} }{%- if not loop."
"last %},{% endif %}\n"
"                {%- endfor %}\n"
"            ]);\n"
"\n"
"            var container = document.getElementById('mynetwork');\n"
"            var data = {\n"
"                nodes: nodes,\n"
"                edges: edges\n"
"            };\n"
"            var network = new vis.Network(container, data, options);\n"
"        </script>\n"
"    </body>\n"
"</html>"
msgstr ""
