# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2022, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.60\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:02+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../integrations/ide/android_studio.rst:5
msgid "|android_studio_logo| Android Studio"
msgstr ""

#: ../../../integrations/ide/android_studio.rst:8
msgid ""
"You can use Conan to :ref:`cross-build your libraries for "
"Android<cross_building_android>` with different architectures. If you are "
"using Android Studio for your Android application development, you can "
"integrate Conan to automate the library building for the different "
"architectures that you want to support in your project."
msgstr ""

#: ../../../integrations/ide/android_studio.rst:12
msgid ""
"Here is an example of how to integrate the ``libpng`` Conan package library "
"in an Android application, but any library that can be cross-compiled to "
"Android could be used using the same procedure."
msgstr ""

#: ../../../integrations/ide/android_studio.rst:15
msgid ""
"We are going to start from the \"Hello World\" wizard application and then "
"will add it the ``libpng`` C library:"
msgstr ""

#: ../../../integrations/ide/android_studio.rst:17
msgid ""
"Follow the :ref:`cross-build your libraries for "
"Android<cross_building_android>` guide to create a standalone toolchain and "
"create a profile named ``android_21_arm_clang`` for Android. You can also "
"use the NDK that the Android Studio installs."
msgstr ""

#: ../../../integrations/ide/android_studio.rst:21
msgid "Create a new Android Studio project and include C++ support."
msgstr ""

#: ../../../integrations/ide/android_studio.rst:24
msgid "|wizard1|"
msgstr ""

#: ../../../integrations/ide/android_studio.rst:27
msgid ""
"3. Select your API level and target. The arch and api level have to match "
"with the standalone toolchain created in step 1."
msgstr ""

#: ../../../integrations/ide/android_studio.rst:31
msgid "|wizard2|"
msgstr ""

#: ../../../integrations/ide/android_studio.rst:34
msgid "Add an empty Activity and name it."
msgstr ""

#: ../../../integrations/ide/android_studio.rst:36
msgid "|wizard3|"
msgstr ""

#: ../../../integrations/ide/android_studio.rst:38
msgid "|wizard4|"
msgstr ""

#: ../../../integrations/ide/android_studio.rst:41
msgid "Select the C++ standard"
msgstr ""

#: ../../../integrations/ide/android_studio.rst:43
msgid "|wizard5|"
msgstr ""

#: ../../../integrations/ide/android_studio.rst:45
msgid ""
"6. Change to the `project view` and in the `app` folder create a ``conanfile."
"txt`` with the following contents:"
msgstr ""

#: ../../../integrations/ide/android_studio.rst:49
msgid "**conanfile.txt**"
msgstr ""

#: ../../../integrations/ide/android_studio.rst:51
msgid ""
"[requires]\n"
"libpng/1.6.23@lasote/stable\n"
"\n"
"[generators]\n"
"cmake"
msgstr ""

#: ../../../integrations/ide/android_studio.rst:60
msgid ""
"Open the ``CMakeLists.txt`` file from the app folder and replace the "
"contents with:"
msgstr ""

#: ../../../integrations/ide/android_studio.rst:63
msgid ""
"cmake_minimum_required(VERSION 3.4.1)\n"
"\n"
"include(${CMAKE_CURRENT_SOURCE_DIR}/conan_build/conanbuildinfo.cmake)\n"
"set(CMAKE_CXX_COMPILER_VERSION \"5.0\") # Unknown miss-detection of the "
"compiler by CMake\n"
"conan_basic_setup(TARGETS)\n"
"\n"
"add_library(native-lib SHARED src/main/cpp/native-lib.cpp)\n"
"target_link_libraries(native-lib CONAN_PKG::libpng)"
msgstr ""

#: ../../../integrations/ide/android_studio.rst:74
msgid ""
"8. Open the *app/build.gradle* file. We are configuring the architectures we "
"want to build, specifying adding a new task ``conanInstall`` that will call :"
"command:`conan install` to install the requirements:"
msgstr ""

#: ../../../integrations/ide/android_studio.rst:77
msgid "In the defaultConfig section, append:"
msgstr ""

#: ../../../integrations/ide/android_studio.rst:79
msgid ""
"ndk {\n"
"   // Specifies the ABI configurations of your native\n"
"   // libraries Gradle should build and package with your APK.\n"
"   abiFilters 'armeabi-v7a'\n"
"}"
msgstr ""

#: ../../../integrations/ide/android_studio.rst:87
msgid "After the android block:"
msgstr ""

#: ../../../integrations/ide/android_studio.rst:89
msgid ""
"task conanInstall(type: Exec) {\n"
"    executable \"conan\" // on MacOSX may need to specify the absolute path, "
"i.e. `/usr/local/bin/conan`\n"
"    args = [\"install\", \"conanfile.txt\",\n"
"            \"--profile=android_21_arm_clang\",\n"
"            \"--install-folder=${new File(\"conan_build\").tap "
"{ mkdirs() }}\",\n"
"            \"--build=missing\"]\n"
"    standardInput = System.in\n"
"}"
msgstr ""

#: ../../../integrations/ide/android_studio.rst:100
msgid ""
"Make your Android build depend on the NDK build, so Conan install is called "
"each time you're building the Android app. In the same *.gradle* file:"
msgstr ""

#: ../../../integrations/ide/android_studio.rst:102
msgid "preBuild.dependsOn conanInstall"
msgstr ""

#: ../../../integrations/ide/android_studio.rst:106
msgid ""
"Finally open the default example cpp library in ``app/src/main/cpp/native-"
"lib.cpp`` and include some lines using your library."
msgstr ""

#: ../../../integrations/ide/android_studio.rst:108
msgid ""
"Be careful with the JNICALL name if you used another app name in the wizard:"
msgstr ""

#: ../../../integrations/ide/android_studio.rst:111
msgid ""
"#include <jni.h>\n"
"#include <string>\n"
"#include \"png.h\"\n"
"#include \"zlib.h\"\n"
"#include <sstream>\n"
"#include <iostream>\n"
"\n"
"extern \"C\"\n"
"JNIEXPORT jstring JNICALL\n"
"Java_com_jfrog_myconanandroidcppapp_MainActivity_stringFromJNI(\n"
"       JNIEnv *env,\n"
"       jobject /* this */) {\n"
"   std::ostringstream oss;\n"
"   oss << \"Compiled with libpng: \" << PNG_LIBPNG_VER_STRING << std::endl;\n"
"   oss << \"Running with libpng: \" << png_libpng_ver << std::endl;\n"
"   oss << \"Compiled with zlib: \" << ZLIB_VERSION << std::endl;\n"
"   oss << \"Running with zlib: \" << zlib_version << std::endl;\n"
"\n"
"   return env->NewStringUTF(oss.str().c_str());\n"
"}"
msgstr ""

#: ../../../integrations/ide/android_studio.rst:135
msgid ""
"Build your project normally. Conan will create a ``conan`` folder with a "
"folder for each different architecture you have specified in the abiFilters "
"with a ``conanbuildinfo.cmake`` file."
msgstr ""

#: ../../../integrations/ide/android_studio.rst:137
msgid "Then run the app using an x86 emulator for best performance:"
msgstr ""

#: ../../../integrations/ide/android_studio.rst:139
msgid "|wizard9|"
msgstr ""

#: ../../../integrations/ide/android_studio.rst:143
msgid ""
"Check the section :ref:`cross_building_android` to read more about cross-"
"building for Android."
msgstr ""
