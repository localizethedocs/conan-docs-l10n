# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2022, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.62\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:05+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../getting_started.rst:4
msgid "Getting Started"
msgstr ""

#: ../../../getting_started.rst:8
msgid ""
"We are actively working to finalize the *Conan 2.0 Release*. Some of the "
"information on this page references **deprecated** features which will not "
"be carried forward with the new release. It's important to check the :ref:"
"`Migration Guidelines<conan2_migration_guide>` to ensure you are using the "
"most up to date features."
msgstr ""

#: ../../../getting_started.rst:12
msgid ""
"Let's get started with an example: We are going to create an MD5 hash "
"calculator app that uses one of the most popular C++ libraries: Poco_."
msgstr ""

#: ../../../getting_started.rst:15
msgid ""
"We'll use CMake as build system in this case but keep in mind that Conan "
"**works with any build system** and is not limited to using CMake."
msgstr ""

#: ../../../getting_started.rst:18
msgid ""
"Make sure you are running the latest Conan version. Read the :ref:`Conan "
"update<conan_update>` section to get more information."
msgstr ""

#: ../../../getting_started.rst:22
msgid "An MD5 hash calculator using the Poco Libraries"
msgstr ""

#: ../../../getting_started.rst:26
msgid ""
"The source files to recreate this project are available in the `example "
"repository`_ in GitHub. You can skip the manual creation of the folder and "
"sources with this command:"
msgstr ""

#: ../../../getting_started.rst:29
msgid ""
"$ git clone https://github.com/conan-io/examples.git && cd examples/"
"libraries/poco/md5"
msgstr ""

#: ../../../getting_started.rst:33
msgid ""
"Create the following source file inside a folder. This will be the source "
"file of our application:"
msgstr ""

#: ../../../getting_started.rst:35
msgid "**md5.cpp**"
msgstr ""

#: ../../../getting_started.rst:35
msgid ""
" #include \"Poco/MD5Engine.h\"\n"
" #include \"Poco/DigestStream.h\"\n"
"\n"
" #include <iostream>\n"
"\n"
" int main(int argc, char** argv){\n"
"     Poco::MD5Engine md5;\n"
"     Poco::DigestOutputStream ds(md5);\n"
"     ds << \"abcdefghijklmnopqrstuvwxyz\";\n"
"     ds.close();\n"
"     std::cout << Poco::DigestEngine::digestToHex(md5.digest()) << std::"
"endl;\n"
"     return 0;\n"
" }"
msgstr ""

#: ../../../getting_started.rst:52
msgid ""
"We know that our application relies on the Poco libraries. Let's look for it "
"in the ConanCenter remote, going to https://conan.io/center, and typing "
"\"poco\" in the search box. We will see that there are some different "
"versions available:"
msgstr ""

#: ../../../getting_started.rst:56
msgid ""
"poco/1.8.1\n"
"poco/1.9.3\n"
"poco/1.9.4\n"
"..."
msgstr ""

#: ../../../getting_started.rst:66
msgid ""
"The Conan client contains a command to search in remote repositories, and we "
"could try :command:`$ conan search poco --remote=conancenter`. You can "
"perfectly use this command to search in your own repositories, but note that "
"at the moment this might timeout in ConanCenter. The infrastructure is being "
"improved to support this command too, but meanwhile using the `ConanCenter "
"UI <https://conan.io/center/>`_ is recommended."
msgstr ""

#: ../../../getting_started.rst:72
msgid ""
"We got some interesting references for Poco. Let's inspect the metadata of "
"the 1.9.4 version:"
msgstr ""

#: ../../../getting_started.rst:74
msgid ""
"$ conan inspect poco/1.9.4\n"
"name: poco\n"
"version: 1.9.4\n"
"url: https://github.com/conan-io/conan-center-index\n"
"homepage: https://pocoproject.org\n"
"license: BSL-1.0\n"
"author: None\n"
"description: Modern, powerful open source C++ class libraries for building "
"network- and internet-based applications that run on desktop, server, mobile "
"and embedded systems.\n"
"topics: ('conan', 'poco', 'building', 'networking', 'server', 'mobile', "
"'embedded')\n"
"generators: cmake\n"
"exports: None\n"
"exports_sources: CMakeLists.txt\n"
"short_paths: False\n"
"apply_env: True\n"
"build_policy: None\n"
"revision_mode: hash\n"
"settings: ('os', 'arch', 'compiler', 'build_type')\n"
"options:\n"
"    cxx_14: [True, False]\n"
"    enable_apacheconnector: [True, False]\n"
"    enable_cppparser: [True, False]\n"
"    enable_crypto: [True, False]\n"
"    [...]\n"
"default_options:\n"
"    cxx_14: False\n"
"    enable_apacheconnector: False\n"
"    enable_cppparser: False\n"
"    enable_crypto: True\n"
"    [...]"
msgstr ""

#: ../../../getting_started.rst:106
msgid ""
"Let's use this ``poco/1.9.4`` version for our MD5 calculator app, creating a "
"*conanfile.txt* inside our project's folder with the following content:"
msgstr ""

#: ../../../getting_started.rst:109
msgid "**conanfile.txt**"
msgstr ""

#: ../../../getting_started.rst:109
msgid ""
" [requires]\n"
" poco/1.9.4\n"
"\n"
" [generators]\n"
" cmake"
msgstr ""

#: ../../../getting_started.rst:118
msgid ""
"In this example we are using CMake to build the project, which is why the "
"``cmake`` generator is specified. This generator creates a *conanbuildinfo."
"cmake* file that defines CMake variables including paths and library names "
"that can be used in our build. Read more about :ref:`generators_reference`."
msgstr ""

#: ../../../getting_started.rst:123
msgid ""
"Next step: We are going to install the required dependencies and generate "
"the information for the build system:"
msgstr ""

#: ../../../getting_started.rst:127
msgid ""
"If you are using **GCC compiler >= 5.1**, Conan will set the ``compiler."
"libcxx`` to the old ABI for backwards compatibility. In the context of this "
"getting started example, this is a bad choice though: Recent gcc versions "
"will compile the example by default with the new ABI and linking will fail "
"without further customization of your cmake configuration. You can avoid "
"this with the following commands:"
msgstr ""

#: ../../../getting_started.rst:132
msgid ""
"$ conan profile new default --detect  # Generates default profile detecting "
"GCC and sets old ABI\n"
"$ conan profile update settings.compiler.libcxx=libstdc++11 default  # Sets "
"libcxx to C++11 ABI"
msgstr ""

#: ../../../getting_started.rst:137
msgid "You will find more information in :ref:`manage_gcc_abi`."
msgstr ""

#: ../../../getting_started.rst:139
msgid ""
"$ mkdir build && cd build\n"
"$ conan install ..\n"
"...\n"
"Requirements\n"
"    bzip2/1.0.8 from 'conancenter' - Downloaded\n"
"    expat/2.2.9 from 'conancenter' - Downloaded\n"
"    openssl/1.1.1g from 'conancenter' - Downloaded\n"
"    pcre/8.41 from 'conancenter' - Downloaded\n"
"    poco/1.9.4 from 'conancenter' - Cache\n"
"    sqlite3/3.31.1 from 'conancenter' - Downloaded\n"
"    zlib/1.2.11 from 'conancenter' - Downloaded\n"
"Packages\n"
"    bzip2/1.0.8:5be2b7a2110ec8acdbf9a1cea9de5d60747edb34 - Download\n"
"    expat/2.2.9:6cc50b139b9c3d27b3e9042d5f5372d327b3a9f7 - Download\n"
"    openssl/1.1.1g:6cc50b139b9c3d27b3e9042d5f5372d327b3a9f7 - Download\n"
"    pcre/8.41:20fc3dfce989c458ac2372442673140ea8028c06 - Download\n"
"    poco/1.9.4:73e83a21ea6817fa9ef0f7d1a86ea923190b0205 - Download\n"
"    sqlite3/3.31.1:4559c5d4f09161e1edf374b033b1d6464826db16 - Download\n"
"    zlib/1.2.11:6cc50b139b9c3d27b3e9042d5f5372d327b3a9f7 - Download\n"
"\n"
"zlib/1.2.11: Retrieving package f74366f76f700cc6e991285892ad7a23c30e6d47 "
"from remote 'conancenter'\n"
"Downloading conanmanifest.txt completed [0.25k]\n"
"Downloading conaninfo.txt completed [0.44k]\n"
"Downloading conan_package.tgz completed [83.15k]\n"
"Decompressing conan_package.tgz completed [0.00k]\n"
"zlib/1.2.11: Package installed f74366f76f700cc6e991285892ad7a23c30e6d47\n"
"zlib/1.2.11: Downloaded package revision 0\n"
"...\n"
"poco/1.9.4: Retrieving package 645aaff0a79e6036c77803601e44677556109dd9 from "
"remote 'conancenter'\n"
"Downloading conanmanifest.txt completed [48.75k]\n"
"Downloading conaninfo.txt completed [2.44k]\n"
"Downloading conan_package.tgz completed [5128.39k]\n"
"Decompressing conan_package.tgz completed [0.00k]\n"
"poco/1.9.4: Package installed 645aaff0a79e6036c77803601e44677556109dd9\n"
"poco/1.9.4: Downloaded package revision 0\n"
"conanfile.txt: Generator cmake created conanbuildinfo.cmake\n"
"conanfile.txt: Generator txt created conanbuildinfo.txt\n"
"conanfile.txt: Generated conaninfo.txt\n"
"conanfile.txt: Generated graphinfo"
msgstr ""

#: ../../../getting_started.rst:182
msgid ""
"Conan installed our Poco dependency but also the **transitive dependencies** "
"for it: OpenSSL, zlib, sqlite and others. It has also generated a "
"*conanbuildinfo.cmake* file for our build system."
msgstr ""

#: ../../../getting_started.rst:187
msgid ""
"There are prebuilt binaries for several mainstream compilers and versions "
"available in ConanCenter repository, a list is keep in `the repository's "
"documentation <https://github.com/conan-io/conan-center-index/blob/master/"
"docs/supported_platforms_and_configurations.md>`_ If your current "
"configuration is not pre-built in ConanCenter, Conan will raise a \"Binary "
"Missing\" error. Please read carefully the error messages. You can build the "
"binary package from sources using :command:`conan install .. --"
"build=missing`, it will succeed if your configuration is supported by the "
"recipe (it is possible that some ConanCenter recipes fail to build for some "
"platforms). You will find more info in the :ref:"
"`getting_started_other_configurations` section."
msgstr ""

#: ../../../getting_started.rst:195
msgid ""
"Now let's create our build file. To inject the Conan information, include "
"the generated *conanbuildinfo.cmake* file like this:"
msgstr ""

#: ../../../getting_started.rst:199
msgid ""
"The :ref:`Creating Packages's Getting Started<packaging_getting_started>` is "
"a more up-to-date version of this section."
msgstr ""

#: ../../../getting_started.rst:201
msgid "**CMakeLists.txt**"
msgstr ""

#: ../../../getting_started.rst:201
msgid ""
" cmake_minimum_required(VERSION 2.8.12)\n"
" project(MD5Encrypter)\n"
"\n"
" add_definitions(\"-std=c++11\")\n"
"\n"
" include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)\n"
" conan_basic_setup()\n"
"\n"
" add_executable(md5 md5.cpp)\n"
" target_link_libraries(md5 ${CONAN_LIBS})"
msgstr ""

#: ../../../getting_started.rst:217
msgid ""
"There are other integrations with CMake, like the ``cmake_find_package`` "
"generators, that will use the ``find_package()`` CMake syntax (see :ref:"
"`cmake` section)."
msgstr ""

#: ../../../getting_started.rst:220
msgid "Now we are ready to build and run our MD5 app:"
msgstr ""

#: ../../../getting_started.rst:222
msgid ""
"(win)\n"
"$ cmake .. -G \"Visual Studio 16\"\n"
"$ cmake --build . --config Release\n"
"\n"
"(linux, mac)\n"
"$ cmake .. -G \"Unix Makefiles\" -DCMAKE_BUILD_TYPE=Release\n"
"$ cmake --build .\n"
"...\n"
"[100%] Built target md5\n"
"$ ./bin/md5\n"
"c3fcd3d76192e4007dfb496cca67e13b"
msgstr ""

#: ../../../getting_started.rst:238
msgid "Installing Dependencies"
msgstr ""

#: ../../../getting_started.rst:240
msgid ""
"The :command:`conan install` command downloads the binary package required "
"for your configuration (detected the first time you ran the command), "
"**together with other (transitively required by Poco) libraries, like "
"OpenSSL and Zlib**. It will also create the *conanbuildinfo.cmake* file in "
"the current directory, in which you can see the CMake variables, and a "
"*conaninfo.txt* in which the settings, requirements and optional information "
"is saved."
msgstr ""

#: ../../../getting_started.rst:247
msgid ""
"Conan generates a :ref:`default profile <default_profile>` with your "
"detected settings (OS, compiler, architecture...) and that configuration is "
"printed at the top of every :command:`conan install` command. However, it is "
"strongly recommended to review it and adjust the settings to accurately "
"describe your system as shown in the :ref:"
"`getting_started_other_configurations` section."
msgstr ""

#: ../../../getting_started.rst:251
msgid ""
"It is very important to understand the installation process. When the :"
"command:`conan install` command runs, settings specified on the command line "
"or taken from the defaults in *<userhome>/.conan/profiles/default* file are "
"applied."
msgstr ""

#: ../../../getting_started.rst:259
msgid ""
"For example, the command :command:`conan install .. --settings os=\"Linux\" "
"--settings compiler=\"gcc\"`, performs these steps:"
msgstr ""

#: ../../../getting_started.rst:261
msgid ""
"Checks if the package recipe (for ``poco/1.9.4`` package) exists in the "
"local cache. If we are just starting, the cache is empty."
msgstr ""

#: ../../../getting_started.rst:263
msgid ""
"Looks for the package recipe in the defined remotes. Conan comes with "
"``conancenter`` remote as the default, but can be changed."
msgstr ""

#: ../../../getting_started.rst:264
msgid ""
"If the recipe exists, the Conan client fetches and stores it in your local "
"Conan cache."
msgstr ""

#: ../../../getting_started.rst:265
msgid ""
"With the package recipe and the input settings (Linux, GCC), Conan looks for "
"the corresponding binary in the local cache."
msgstr ""

#: ../../../getting_started.rst:266
msgid ""
"As the binary is not found in the cache, Conan looks for it in the remote "
"and fetches it."
msgstr ""

#: ../../../getting_started.rst:267
msgid ""
"Finally, it generates an appropriate file for the build system specified in "
"the ``[generators]`` section."
msgstr ""

#: ../../../getting_started.rst:271
msgid "Inspecting Dependencies"
msgstr ""

#: ../../../getting_started.rst:273
msgid ""
"The retrieved packages are installed to your local user cache (typically *."
"conan/data*), and can be reused from this location for other projects. This "
"allows to clean your current project and continue working even without "
"network connection. To search for packages in the local cache run:"
msgstr ""

#: ../../../getting_started.rst:277
msgid ""
"$ conan search \"*\"\n"
"Existing package recipes:\n"
"\n"
"openssl/1.0.2t\n"
"poco/1.9.4\n"
"zlib/1.2.11\n"
"..."
msgstr ""

#: ../../../getting_started.rst:287
msgid "To inspect the different binary packages of a reference run:"
msgstr ""

#: ../../../getting_started.rst:289
msgid ""
"$ conan search poco/1.9.4@\n"
"Existing packages for recipe poco/1.9.4:\n"
"\n"
"Package_ID: 645aaff0a79e6036c77803601e44677556109dd9\n"
"    [options]\n"
"        cxx_14: False\n"
"        enable_apacheconnector: False\n"
"        enable_cppparser: False\n"
"        enable_crypto: True\n"
"        enable_data: True\n"
"..."
msgstr ""

#: ../../../getting_started.rst:303
msgid ""
"The ``@`` symbol at the end of the package name is important to search for a "
"specific package. If you don't add the ``@``, Conan will interpret the "
"argument as a pattern search and return all the packages that match the "
"``poco/1.9.4`` pattern and may have different :ref:`user and channel "
"<user_channel>`."
msgstr ""

#: ../../../getting_started.rst:308
msgid ""
"To inspect all your current project's dependencies use the :command:`conan "
"info` command by pointing it to the location of the *conanfile.txt* folder:"
msgstr ""

#: ../../../getting_started.rst:311
msgid ""
"$ conan info ..\n"
"conanfile.txt\n"
"    ID: db91af4811b080e02ebe5a626f1d256bb90d5223\n"
"    BuildID: None\n"
"    Requires:\n"
"        poco/1.9.4\n"
"openssl/1.0.2t\n"
"    ID: eb50d18a5a5d59bd0c332464a4c348ab65e353bf\n"
"    BuildID: None\n"
"    Context: host\n"
"    Remote: conancenter=https://center.conan.io\n"
"    URL: https://github.com/conan-io/conan-center-index\n"
"    Homepage: https://github.com/openssl/openssl\n"
"    License: OpenSSL\n"
"    Description: A toolkit for the Transport Layer Security (TLS) and Secure "
"Sockets Layer (SSL) protocols\n"
"    Topics: conan, openssl, ssl, tls, encryption, security\n"
"    Recipe: Cache\n"
"    Binary: Cache\n"
"    Binary remote: conancenter\n"
"    Creation date: 2019-11-13 23:14:37\n"
"    Required by:\n"
"        poco/1.9.4\n"
"    Requires:\n"
"        zlib/1.2.11\n"
"poco/1.9.4\n"
"    ID: 645aaff0a79e6036c77803601e44677556109dd9\n"
"    BuildID: None\n"
"    Context: host\n"
"    Remote: conancenter=https://center.conan.io\n"
"    URL: https://github.com/conan-io/conan-center-index\n"
"    Homepage: https://pocoproject.org\n"
"    License: BSL-1.0\n"
"    Description: Modern, powerful open source C++ class libraries for "
"building network- and internet-based applications that run on desktop, "
"server, mobile and embedded systems.\n"
"    Topics: conan, poco, building, networking, server, mobile, embedded\n"
"    Recipe: Cache\n"
"    Binary: Cache\n"
"    Binary remote: conancenter\n"
"    Creation date: 2020-01-07 17:29:24\n"
"    Required by:\n"
"        conanfile.txt\n"
"    Requires:\n"
"        openssl/1.0.2t\n"
"zlib/1.2.11\n"
"    ID: f74366f76f700cc6e991285892ad7a23c30e6d47\n"
"    BuildID: None\n"
"    Context: host\n"
"    Remote: conancenter=https://center.conan.io\n"
"    URL: https://github.com/conan-io/conan-center-index\n"
"    Homepage: https://zlib.net\n"
"    License: Zlib\n"
"    Description: A Massively Spiffy Yet Delicately Unobtrusive Compression "
"Library (Also Free, Not to Mention Unencumbered by Patents)\n"
"    Recipe: Cache\n"
"    Binary: Cache\n"
"    Binary remote: conancenter\n"
"    Creation date: 2020-01-07 17:01:29\n"
"    Required by:\n"
"        openssl/1.0.2t"
msgstr ""

#: ../../../getting_started.rst:372
msgid "Or generate a graph of your dependencies using Dot or HTML formats:"
msgstr ""

#: ../../../getting_started.rst:374
msgid ""
"$ conan info .. --graph=file.html\n"
"$ file.html # or open the file, double-click"
msgstr ""

#: ../../../getting_started.rst:385
msgid "Searching Packages"
msgstr ""

#: ../../../getting_started.rst:387
msgid ""
"The remote repository where packages are installed from is configured by "
"default in Conan. It is called Conan Center (configured as `conancenter` "
"remote)."
msgstr ""

#: ../../../getting_started.rst:390
msgid ""
"If we search for something like ``open`` in `ConanCenter <https://conan.io/"
"center/>`_ we could find different packages like:"
msgstr ""

#: ../../../getting_started.rst:392
msgid ""
"openal/1.18.2@bincrafters/stable\n"
"openal/1.19.1\n"
"opencv/2.4.13.5@conan/stable\n"
"opencv/3.4.3@conan/stable\n"
"opencv/4.1.1@conan/stable\n"
"openexr/2.3.0\n"
"openexr/2.3.0@conan/stable\n"
"openexr/2.4.0\n"
"openjpeg/2.3.0@bincrafters/stable\n"
"openjpeg/2.3.1\n"
"openjpeg/2.3.1@bincrafters/stable\n"
"openssl/1.0.2s\n"
"..."
msgstr ""

#: ../../../getting_started.rst:408
msgid ""
"As you can see, some of the libraries end with a ``@`` symbol followed by "
"two strings separated by a slash. These fields are the :ref:`user and "
"channel <user_channel>` for the Conan package, and they are useful if you "
"want to make specific changes and disambiguate your modified recipe from the "
"one in the Conan Center or any other remote. These are legacy packages, and "
"the ones without user and channel are the ones strongly recommended to use "
"from ConanCenter."
msgstr ""

#: ../../../getting_started.rst:414
msgid ""
"ConanCenter is the central public repository for Conan packages. You can "
"contribute packages to it in the `conan-center-index Github repository "
"<https://github.com/conan-io/conan-center-index>`_. If you want to store "
"your own private packages, you can download the free Artifactory Community "
"Edition (CE) directly from the `Conan downloads page <https://conan.io/"
"downloads.html>`_."
msgstr ""

#: ../../../getting_started.rst:423
msgid "Building with other configurations"
msgstr ""

#: ../../../getting_started.rst:425
msgid ""
"In this example, we have built our project using the default configuration "
"detected by Conan. This configuration is known as the :ref:`default profile "
"<default_profile>`."
msgstr ""

#: ../../../getting_started.rst:428
msgid ""
"A profile needs to be available prior to running commands such as :command:"
"`conan install`. When running the command, your settings are automatically "
"detected (compiler, architecture...) and stored as the default profile. You "
"can edit these settings *~/.conan/profiles/default* or create new profiles "
"with your desired configuration."
msgstr ""

#: ../../../getting_started.rst:432
msgid ""
"For example, if we have a profile with a 32-bit GCC configuration in a file "
"called *gcc_x86*, we can run the following:"
msgstr ""

#: ../../../getting_started.rst:434
msgid "$ conan install .. --profile=gcc_x86"
msgstr ""

#: ../../../getting_started.rst:440
msgid ""
"We strongly recommend using :ref:`profiles` and managing them with :ref:"
"`conan_config_install`."
msgstr ""

#: ../../../getting_started.rst:442
msgid ""
"However, the user can always override the profile settings in the :command:"
"`conan install` command using the :command:`--settings` parameter. As an "
"exercise, try building the 32-bit version of the hash calculator project "
"like this:"
msgstr ""

#: ../../../getting_started.rst:445
msgid "$ conan install .. --settings arch=x86"
msgstr ""

#: ../../../getting_started.rst:449
msgid ""
"The above command installs a different package, using the :command:`--"
"settings arch=x86` instead of the one of the default profile used "
"previously. Note you might need to install extra compilers or toolchains in "
"some platforms, as for example, Linux distributions no longer install 32bits "
"toolchains by default."
msgstr ""

#: ../../../getting_started.rst:453
msgid ""
"To use the 32-bit binaries, you will also have to change your project build:"
msgstr ""

#: ../../../getting_started.rst:455
msgid "In Windows, change the CMake invocation to ``Visual Studio 14``."
msgstr ""

#: ../../../getting_started.rst:456
msgid ""
"In Linux, you have to add the ``-m32`` flag to your ``CMakeLists.txt`` by "
"running ``SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -m32\")``, and the same "
"applies to ``CMAKE_C_FLAGS, CMAKE_SHARED_LINK_FLAGS and "
"CMAKE_EXE_LINKER_FLAGS``. This can also be done more easily, by "
"automatically using Conan, as we'll show later."
msgstr ""

#: ../../../getting_started.rst:459
msgid ""
"In macOS, you need to add the definition ``-DCMAKE_OSX_ARCHITECTURES=i386``."
msgstr ""

#: ../../../getting_started.rst:461
msgid ""
"Got any doubts? Check our :ref:`faq`, |write_us| or join the community in "
"`Cpplang Slack`_ ``#conan`` channel!"
msgstr ""

#: ../../../getting_started.rst:463
msgid "<a href=\"mailto:info@conan.io\" target=\"_blank\">write us</a>"
msgstr ""
