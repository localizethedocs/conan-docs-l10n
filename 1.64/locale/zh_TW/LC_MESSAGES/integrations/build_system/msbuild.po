# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.64\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../integrations/build_system/msbuild.rst:5
msgid "|visual_logo| MSBuild (Visual Studio)"
msgstr ""

#: ../../../integrations/build_system/msbuild.rst:107
msgid "visual_logo"
msgstr ""

#: ../../../integrations/build_system/msbuild.rst:9
msgid ""
"This is a **deprecated** feature. Please refer to the :ref:`Migration "
"Guidelines<conan2_migration_guide>` to find the feature that replaced this "
"one."
msgstr ""

#: ../../../integrations/build_system/msbuild.rst:12
msgid ""
"The new, **under development** Using the ``conan.tools.microsoft`` tools: "
"``MSBuildDeps``, ``MSBuildToolchain`` and ``MSBuild`` helpers to generate "
"properties files for your project, containing information about the project "
"dependencies and toolchain. Go to :ref:`conan_tools_microsoft` for more "
"information. While they are recommended and usable and we will try not to "
"break them in future releases, some breaking changes might still happen if "
"necessary to prepare for the *Conan 2.0 release*."
msgstr ""

#: ../../../integrations/build_system/msbuild.rst:18
msgid ""
"If you are using CMake to generate your Visual Studio projects, this is not "
"the right section, go to :ref:`cmake` instead. This section is about native "
"integration with Microsoft MSBuild, using properties files."
msgstr ""

#: ../../../integrations/build_system/msbuild.rst:21
msgid ""
"Conan can be integrated with **MSBuild** natively, the build system of "
"Visual Studio by:"
msgstr ""

#: ../../../integrations/build_system/msbuild.rst:23
msgid ""
"Using the ``visual_studio`` or ``visual_studio_multi`` generators to create "
"a MSBuild properties *conanbuildinfo.props* file."
msgstr ""

#: ../../../integrations/build_system/msbuild.rst:26
msgid "With *visual_studio* generator"
msgstr ""

#: ../../../integrations/build_system/msbuild.rst:28
msgid ""
"Use the **visual_studio** generator, or **visual_studio_multi**, if you are "
"maintaining your Visual Studio projects, and want to use Conan to to tell "
"Visual Studio how to find your third-party dependencies."
msgstr ""

#: ../../../integrations/build_system/msbuild.rst:30
msgid ""
"You can use the **visual_studio** generator to manage your requirements via "
"your *Visual Studio*  project."
msgstr ""

#: ../../../integrations/build_system/msbuild.rst:33
msgid ""
"This generator creates a `Visual Studio project properties`_ file, with all "
"the *include paths*, *lib paths*, *libs*, *flags* etc., that can be imported "
"in your project."
msgstr ""

#: ../../../integrations/build_system/msbuild.rst:35
msgid ""
"Open ``conanfile.txt`` and change (or add) the ``visual_studio`` generator:"
msgstr ""

#: ../../../integrations/build_system/msbuild.rst:37
msgid ""
"[requires]\n"
"poco/1.9.4\n"
"\n"
"[generators]\n"
"visual_studio"
msgstr ""

#: ../../../integrations/build_system/msbuild.rst:45
msgid "Install the requirements:"
msgstr "安裝要求項："

#: ../../../integrations/build_system/msbuild.rst:47
msgid "$ conan install ."
msgstr "$ conan install ."

#: ../../../integrations/build_system/msbuild.rst:51
msgid ""
"Go to your Visual Studio project, and open the **Property Manager** (usually "
"in **View -> Other Windows -> Property Manager**)."
msgstr ""

#: ../../../integrations/build_system/msbuild.rst:55
msgid ""
"Click the **+** icon and select the generated ``conanbuildinfo.props`` file:"
msgstr ""

#: ../../../integrations/build_system/msbuild.rst:59
msgid "Build your project as usual."
msgstr ""

#: ../../../integrations/build_system/msbuild.rst:63
msgid ""
"Remember to set your project's architecture and build type accordingly, "
"explicitly or implicitly, when issuing the :command:`conan install` command. "
"If these values don't match, your build will probably fail."
msgstr ""

#: ../../../integrations/build_system/msbuild.rst:66
msgid "e.g. **Release/x64**"
msgstr ""

#: ../../../integrations/build_system/msbuild.rst:70
msgid "Check :ref:`visualstudio_generator` for the complete reference."
msgstr ""

#: ../../../integrations/build_system/msbuild.rst:75
msgid "Build an existing Visual Studio project"
msgstr ""

#: ../../../integrations/build_system/msbuild.rst:77
msgid ""
"You can build an existing Visual Studio from your ``build()`` method using "
"the :ref:`MSBuild()<msbuild>` build helper."
msgstr ""

#: ../../../integrations/build_system/msbuild.rst:79
msgid ""
"from conans import ConanFile, MSBuild\n"
"\n"
"class ExampleConan(ConanFile):\n"
"    ...\n"
"\n"
"    def build(self):\n"
"        msbuild = MSBuild(self)\n"
"        msbuild.build(\"MyProject.sln\")"
msgstr ""

#: ../../../integrations/build_system/msbuild.rst:91
msgid "Toolsets"
msgstr ""

#: ../../../integrations/build_system/msbuild.rst:93
msgid ""
"You can use the sub-setting ``toolset`` of the Visual Studio compiler to "
"specify a custom toolset. It will be automatically applied when using the "
"``CMake()`` and ``MSBuild()`` build helpers. The toolset can also be "
"specified manually in these build helpers with the ``toolset`` parameter."
msgstr ""

#: ../../../integrations/build_system/msbuild.rst:97
msgid ""
"By default, Conan will not generate a new binary package if the specified "
"``compiler.toolset`` matches an already generated package for the "
"corresponding ``compiler.version``. Check the :ref:"
"`package_id()<method_package_id>` reference to learn more."
msgstr ""

#: ../../../integrations/build_system/msbuild.rst:103
msgid ""
"Check the :ref:`CMake()<cmake_reference>` reference section for more info."
msgstr ""
