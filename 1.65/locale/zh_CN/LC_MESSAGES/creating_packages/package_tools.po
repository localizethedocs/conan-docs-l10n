# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.65\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:15+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../creating_packages/package_tools.rst:4
msgid "Package Creator Tools"
msgstr ""

#: ../../../creating_packages/package_tools.rst:6
msgid ""
"Using Python (or just pure shell or bash) scripting, allows you to easily "
"automate the whole package creation and testing process, for many different "
"configurations. For example you could put the following script in the "
"package root folder. Name it *build.py*:"
msgstr ""

#: ../../../creating_packages/package_tools.rst:10
msgid ""
"import os, sys\n"
"import platform\n"
"\n"
"def system(command):\n"
"    retcode = os.system(command)\n"
"    if retcode != 0:\n"
"        raise Exception(\"Error while executing:\\n\\t %s\" % command)\n"
"\n"
"if __name__ == \"__main__\":\n"
"    params = \" \".join(sys.argv[1:])\n"
"\n"
"    if platform.system() == \"Windows\":\n"
"        system('conan create . demo/testing -s compiler=\"Visual Studio\" -s "
"compiler.version=14 %s' % params)\n"
"        system('conan create . demo/testing -s compiler=\"Visual Studio\" -s "
"compiler.version=12 %s' % params)\n"
"        system('conan create . demo/testing -s compiler=\"gcc\" -s compiler."
"version=4.8 %s' % params)\n"
"    else:\n"
"        pass"
msgstr ""

#: ../../../creating_packages/package_tools.rst:30
msgid ""
"This is a pure Python script, not related to Conan, and should be run as "
"such:"
msgstr ""

#: ../../../creating_packages/package_tools.rst:32
msgid "$ python build.py"
msgstr ""
