# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.66\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:06+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../mastering/virtualenv.rst:5
msgid "Virtual Environments"
msgstr ""

#: ../../../mastering/virtualenv.rst:9
msgid ""
"We are actively working to finalize the *Conan 2.0 Release*. Some of the "
"information on this page references **deprecated** features which will not "
"be carried forward with the new release. It's important to check the :ref:"
"`Migration Guidelines<conan2_migration_guide>` to ensure you are using the "
"most up to date features."
msgstr ""

#: ../../../mastering/virtualenv.rst:13
msgid ""
"Conan offers three special Conan generators to create virtual environments:"
msgstr ""

#: ../../../mastering/virtualenv.rst:15
msgid ""
"``virtualenv``:  Declares the :ref:`self."
"env_info<method_package_info_env_info>` variables of the requirements."
msgstr ""

#: ../../../mastering/virtualenv.rst:16
msgid ""
"``virtualbuildenv``: Special build environment variables for autotools/"
"visual studio."
msgstr ""

#: ../../../mastering/virtualenv.rst:17
msgid ""
"``virtualrunenv``: Special environment variables to locate executables and "
"shared libraries in the requirements."
msgstr ""

#: ../../../mastering/virtualenv.rst:19
msgid ""
"These virtual environment generators create two executable script files (.sh "
"or .bat depending on the current operating system), one to ``activate`` the "
"virtual environment (set the environment variables) and one to "
"``deactivate`` it."
msgstr ""

#: ../../../mastering/virtualenv.rst:22
msgid ""
"You can aggregate two or more virtual environments, that means that you can "
"activate a ``virtualenv`` and then activate a ``virtualrunenv`` so you will "
"have available the environment variables declared in the ``env_info`` object "
"of the requirements plus the special environment variables to locate "
"executables and shared libraries."
msgstr ""

#: ../../../mastering/virtualenv.rst:28
msgid "Virtualenv generator"
msgstr ""

#: ../../../mastering/virtualenv.rst:30
msgid ""
"Conan provides a **virtualenv** generator, able to read from each dependency "
"the :ref:`self.env_info<method_package_info_env_info>` variables declared in "
"the ``package_info()`` method and generate two scripts \"activate\" and "
"\"deactivate\". These scripts set/unset all env variables in the current "
"shell."
msgstr ""

#: ../../../mastering/virtualenv.rst:33
msgid "**Example**:"
msgstr ""

#: ../../../mastering/virtualenv.rst:35
msgid ""
"The recipe of ``cmake/3.16.3`` appends to the PATH variable the package "
"folder/bin."
msgstr ""

#: ../../../mastering/virtualenv.rst:37
msgid ""
"You can check existing CMake Conan package versions in `conancenter` with:"
msgstr ""

#: ../../../mastering/virtualenv.rst:39
msgid "$ conan search cmake* -r=conancenter"
msgstr ""

#: ../../../mastering/virtualenv.rst:43
msgid "In the **bin** folder there is a **cmake** executable:"
msgstr ""

#: ../../../mastering/virtualenv.rst:46
msgid ""
"def package_info(self):\n"
"  self.env_info.path.append(os.path.join(self.package_folder, \"bin\"))"
msgstr ""

#: ../../../mastering/virtualenv.rst:53
msgid ""
"Let's prepare a virtual environment to have cmake available in the path. "
"Open ``conanfile.txt`` and change (or add) **virtualenv** generator:"
msgstr ""

#: ../../../mastering/virtualenv.rst:56
msgid ""
"[requires]\n"
"cmake/3.16.3\n"
"\n"
"[generators]\n"
"virtualenv"
msgstr ""

#: ../../../mastering/virtualenv.rst:64
msgid "Run :command:`conan install`:"
msgstr ""

#: ../../../mastering/virtualenv.rst:66
msgid "$ conan install ."
msgstr ""

#: ../../../mastering/virtualenv.rst:70
msgid ""
"You can also avoid the creation of the *conanfile.txt* completely and "
"directly do:"
msgstr ""

#: ../../../mastering/virtualenv.rst:72
msgid "$ conan install cmake/3.16.3 -g=virtualenv"
msgstr ""

#: ../../../mastering/virtualenv.rst:76
msgid ""
"Activate the virtual environment, and now you can run ``cmake --version`` to "
"check that you have the installed CMake in path."
msgstr ""

#: ../../../mastering/virtualenv.rst:79
msgid ""
"$ source activate.sh # Windows: activate.bat without the source\n"
"$ cmake --version"
msgstr ""

#: ../../../mastering/virtualenv.rst:84
msgid ""
"Two sets of scripts are available on all platforms - ``activate.sh``/"
"``deactivate.sh`` and ``activate.ps1``/``deactivate.ps1`` if you are using "
"powershell. In addition Windows has ``activate.bat``/``deactivate.bat`` "
"Deactivate the virtual environment (or close the console) to restore the "
"environment variables:"
msgstr ""

#: ../../../mastering/virtualenv.rst:89
msgid ""
"$ source deactivate.sh # Windows: deactivate.bat or deactivate.ps1 without "
"the source"
msgstr ""

#: ../../../mastering/virtualenv.rst:94
msgid ""
"Read the Howto :ref:`Create installer packages<create_installer_packages>` "
"to learn more about the virtual environment feature. Check the section :ref:"
"`Reference/virtualenv<virtualenv_generator>` to see the generator reference."
msgstr ""

#: ../../../mastering/virtualenv.rst:100
msgid "Virtualbuildenv environment"
msgstr ""

#: ../../../mastering/virtualenv.rst:102
msgid ""
"Use the generator ``virtualbuildenv`` to activate an environment that will "
"set the environment variables for Autotools and Visual Studio."
msgstr ""

#: ../../../mastering/virtualenv.rst:105
msgid ""
"The generator will create ``activate_build`` and ``deactivate_build`` files."
msgstr ""

#: ../../../mastering/virtualenv.rst:107
msgid ""
"Read More about the building environment variables defined in the sections :"
"ref:`Building with autotools <autotools_reference>` and :ref:`Build with "
"Visual Studio<msbuild>`."
msgstr ""

#: ../../../mastering/virtualenv.rst:109
msgid ""
"Check the section :ref:`Reference/"
"virtualbuildenv<virtualbuildenv_generator>` to see the generator reference."
msgstr ""

#: ../../../mastering/virtualenv.rst:115
msgid "Virtualrunenv generator"
msgstr ""

#: ../../../mastering/virtualenv.rst:117
msgid ""
"Use the generator ``virtualrunenv`` to activate an environment that will:"
msgstr ""

#: ../../../mastering/virtualenv.rst:119
msgid ""
"Append to ``PATH`` environment variable every ``bin`` folder of your "
"requirements."
msgstr ""

#: ../../../mastering/virtualenv.rst:120
msgid ""
"Append to ``LD_LIBRARY_PATH`` and ``DYLD_LIBRARY_PATH`` environment "
"variables each ``lib`` folder of  your requirements."
msgstr ""

#: ../../../mastering/virtualenv.rst:122
msgid ""
"The generator will create ``activate_run`` and ``deactivate_run`` files. "
"This generator is especially useful:"
msgstr ""

#: ../../../mastering/virtualenv.rst:124
msgid ""
"If you are requiring packages with shared libraries and you are running some "
"executable that needs those libraries."
msgstr ""

#: ../../../mastering/virtualenv.rst:125
msgid ""
"If you have a requirement with some tool (executable) and you need it in the "
"path."
msgstr ""

#: ../../../mastering/virtualenv.rst:127
msgid ""
"In the previous example of the ``cmake`` recipe, even if the cmake package "
"doesn't declare the ``self.env_info.path`` variable, using the virtualrunenv "
"generator, the ``bin`` folder of the package will be available in the PATH. "
"So after activating the virtual environment we could just run ``cmake`` in "
"order to execute the package's cmake."
msgstr ""

#: ../../../mastering/virtualenv.rst:131
msgid ":ref:`Reference/Tools/environment_append <tools_environment_append>`"
msgstr ""
