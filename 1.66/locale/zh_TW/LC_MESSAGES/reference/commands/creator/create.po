# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.66\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:06+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/commands/creator/create.rst:9
msgid "conan create"
msgstr ""

#: ../../../reference/commands/creator/create.rst:11
msgid ""
"$ conan create [-h] [-j JSON] [-k] [-kb] [-ne] [-tbf TEST_BUILD_FOLDER]\n"
"                [-tf TEST_FOLDER] [--ignore-dirty] [--build-require]\n"
"                [--require-override REQUIRE_OVERRIDE] [-m [MANIFESTS]]\n"
"                [-mi [MANIFESTS_INTERACTIVE]] [-v [VERIFY]] [-b [BUILD]]\n"
"                [-r REMOTE] [-u] [-l LOCKFILE]\n"
"                [--lockfile-out LOCKFILE_OUT] [-e ENV_HOST]\n"
"                [-e:b ENV_BUILD] [-e:h ENV_HOST] [-o OPTIONS_HOST]\n"
"                [-o:b OPTIONS_BUILD] [-o:h OPTIONS_HOST]\n"
"                [-pr PROFILE_HOST] [-pr:b PROFILE_BUILD]\n"
"                [-pr:h PROFILE_HOST] [-s SETTINGS_HOST]\n"
"                [-s:b SETTINGS_BUILD] [-s:h SETTINGS_HOST]\n"
"                [-c CONF_HOST] [-c:b CONF_BUILD] [-c:h CONF_HOST]\n"
"                path [reference]"
msgstr ""

#: ../../../reference/commands/creator/create.rst:27
msgid "Builds a binary package for a recipe (conanfile.py)."
msgstr ""

#: ../../../reference/commands/creator/create.rst:29
msgid ""
"Uses the specified configuration in a profile or in -s settings, -o options, "
"etc. If a 'test_package' folder (the name can be configured with -tf) is "
"found, the command will run the consumer project to ensure that the package "
"has been created correctly. Check 'conan test' command to know more about "
"'test_folder' project."
msgstr ""

#: ../../../reference/commands/creator/create.rst:35
msgid ""
"positional arguments:\n"
"  path                  Path to a folder containing a conanfile.py or to a\n"
"                        recipe file e.g., my_folder/conanfile.py\n"
"  reference             user/channel, version@user/channel or\n"
"                        pkg/version@user/channel (if name or version "
"declared\n"
"                        in conanfile.py, they should match)\n"
"\n"
"optional arguments:\n"
"  -h, --help            show this help message and exit\n"
"  -j JSON, --json JSON  json file path where the install information will "
"be\n"
"                        written to\n"
"  -k, -ks, --keep-source\n"
"                        Do not remove the source folder in the local cache,\n"
"                        even if the recipe changed. Use this for testing\n"
"                        purposes only\n"
"  -kb, --keep-build     Do not remove the build folder in local cache. "
"Implies\n"
"                        --keep-source. Use this for testing purposes only\n"
"  -ne, --not-export     Do not export the conanfile.py\n"
"  -tbf TEST_BUILD_FOLDER, --test-build-folder TEST_BUILD_FOLDER\n"
"                        Working directory for the build of the test "
"project.\n"
"  -tf TEST_FOLDER, --test-folder TEST_FOLDER\n"
"                        Alternative test folder name. By default it is\n"
"                        \"test_package\". Use \"None\" to skip the test "
"stage\n"
"  --ignore-dirty        When using the \"scm\" feature with \"auto\" "
"values,\n"
"                        capture the revision and url even if there are\n"
"                        uncommitted changes\n"
"  --build-require       The provided reference is a build-require\n"
"  --require-override REQUIRE_OVERRIDE\n"
"                        Define a requirement override\n"
"  -m [MANIFESTS], --manifests [MANIFESTS]\n"
"                        Install dependencies manifests in folder for later\n"
"                        verify. Default folder is .conan_manifests, but can "
"be\n"
"                        changed\n"
"  -mi [MANIFESTS_INTERACTIVE], --manifests-interactive "
"[MANIFESTS_INTERACTIVE]\n"
"                        Install dependencies manifests in folder for later\n"
"                        verify, asking user for confirmation. Default "
"folder\n"
"                        is .conan_manifests, but can be changed\n"
"  -v [VERIFY], --verify [VERIFY]\n"
"                        Verify dependencies manifests against stored ones\n"
"  -b [BUILD], --build [BUILD]\n"
"                        Optional, specify which packages to build from "
"source.\n"
"                        Combining multiple '--build' options on one command\n"
"                        line is allowed. For dependencies, the optional\n"
"                        'build_policy' attribute in their conanfile.py "
"takes\n"
"                        precedence over the command line parameter. "
"Possible\n"
"                        parameters: --build Force build for all packages, "
"do\n"
"                        not use binary packages. --build=never Disallow "
"build\n"
"                        for all packages, use binary packages or fail if a\n"
"                        binary package is not found. Cannot be combined "
"with\n"
"                        other '--build' options. --build=missing Build\n"
"                        packages from source whose binary package is not\n"
"                        found. --build=outdated Build packages from source\n"
"                        whose binary package was not generated from the "
"latest\n"
"                        recipe or is not found. --build=cascade Build "
"packages\n"
"                        from source that have at least one dependency being\n"
"                        built from source. --build=[pattern] Build packages\n"
"                        from source whose package reference matches the\n"
"                        pattern. The pattern uses 'fnmatch' style "
"wildcards.\n"
"                        --build=![pattern] Excluded packages, which will "
"not\n"
"                        be built from the source, whose package reference\n"
"                        matches the pattern. The pattern uses 'fnmatch' "
"style\n"
"                        wildcards. Default behavior: If you omit the '--"
"build'\n"
"                        option, the 'build_policy' attribute in conanfile."
"py\n"
"                        will be used if it exists, otherwise the behavior "
"is\n"
"                        like '--build=package name'.\n"
"  -r REMOTE, --remote REMOTE\n"
"                        Look in the specified remote server\n"
"  -u, --update          Will check the remote and in case a newer version\n"
"                        and/or revision of the dependencies exists there, "
"it\n"
"                        will install those in the local cache. When using\n"
"                        version ranges, it will install the latest version\n"
"                        that satisfies the range. Also, if using revisions, "
"it\n"
"                        will update to the latest revision for the resolved\n"
"                        version range.\n"
"  -l LOCKFILE, --lockfile LOCKFILE\n"
"                        Path to a lockfile\n"
"  --lockfile-out LOCKFILE_OUT\n"
"                        Filename of the updated lockfile\n"
"  -e ENV_HOST, --env ENV_HOST\n"
"                        Environment variables that will be set during the\n"
"                        package build (host machine). e.g.: -e\n"
"                        CXX=/usr/bin/clang++\n"
"  -e:b ENV_BUILD, --env:build ENV_BUILD\n"
"                        Environment variables that will be set during the\n"
"                        package build (build machine). e.g.: -e:b\n"
"                        CXX=/usr/bin/clang++\n"
"  -e:h ENV_HOST, --env:host ENV_HOST\n"
"                        Environment variables that will be set during the\n"
"                        package build (host machine). e.g.: -e:h\n"
"                        CXX=/usr/bin/clang++\n"
"  -o OPTIONS_HOST, --options OPTIONS_HOST\n"
"                        Define options values (host machine), e.g.: -o\n"
"                        Pkg:with_qt=true\n"
"  -o:b OPTIONS_BUILD, --options:build OPTIONS_BUILD\n"
"                        Define options values (build machine), e.g.: -o:b\n"
"                        Pkg:with_qt=true\n"
"  -o:h OPTIONS_HOST, --options:host OPTIONS_HOST\n"
"                        Define options values (host machine), e.g.: -o:h\n"
"                        Pkg:with_qt=true\n"
"  -pr PROFILE_HOST, --profile PROFILE_HOST\n"
"                        Apply the specified profile to the host machine\n"
"  -pr:b PROFILE_BUILD, --profile:build PROFILE_BUILD\n"
"                        Apply the specified profile to the build machine\n"
"  -pr:h PROFILE_HOST, --profile:host PROFILE_HOST\n"
"                        Apply the specified profile to the host machine\n"
"  -s SETTINGS_HOST, --settings SETTINGS_HOST\n"
"                        Settings to build the package, overwriting the\n"
"                        defaults (host machine). e.g.: -s compiler=gcc\n"
"  -s:b SETTINGS_BUILD, --settings:build SETTINGS_BUILD\n"
"                        Settings to build the package, overwriting the\n"
"                        defaults (build machine). e.g.: -s:b compiler=gcc\n"
"  -s:h SETTINGS_HOST, --settings:host SETTINGS_HOST\n"
"                        Settings to build the package, overwriting the\n"
"                        defaults (host machine). e.g.: -s:h compiler=gcc\n"
"  -c CONF_HOST, --conf CONF_HOST\n"
"                        Configuration to build the package, overwriting the "
"defaults (host machine). e.g.: -c\n"
"                        tools.cmake.cmaketoolchain:generator=Xcode\n"
"  -c:b CONF_BUILD, --conf:build CONF_BUILD\n"
"                        Configuration to build the package, overwriting the "
"defaults (build machine). e.g.: -c:b\n"
"                        tools.cmake.cmaketoolchain:generator=Xcode\n"
"  -c:h CONF_HOST, --conf:host CONF_HOST\n"
"                        Configuration to build the package, overwriting the "
"defaults (host machine). e.g.: -c:h\n"
"                        tools.cmake.cmaketoolchain:generator=Xcode"
msgstr ""

#: ../../../reference/commands/creator/create.rst:163
msgid ":command:`conan create . demo/testing` is equivalent to:"
msgstr ""

#: ../../../reference/commands/creator/create.rst:165
msgid ""
"$ conan export . demo/testing\n"
"$ conan install hello/0.1@demo/testing --build=hello\n"
"# package is created now, use test to test it\n"
"$ cd test_package\n"
"$ conan test . hello/0.1@demo/testing"
msgstr ""

#: ../../../reference/commands/creator/create.rst:176
msgid ""
"Sometimes you need to **skip/disable test stage** to avoid a failure while "
"creating the package, i.e: when you are cross compiling libraries and target "
"code cannot be executed in current host platform. In that case you can skip/"
"disable the test package stage:"
msgstr ""

#: ../../../reference/commands/creator/create.rst:180
msgid "$ conan create . demo/testing --test-folder=None"
msgstr ""

#: ../../../reference/commands/creator/create.rst:185
msgid "Methods execution order"
msgstr ""

#: ../../../reference/commands/creator/create.rst:187
msgid ""
":command:`conan create` executes methods of a *conanfile.py* in the "
"following order:"
msgstr ""

#: ../../../reference/commands/creator/create.rst:189
msgid "``export()``"
msgstr ""

#: ../../../reference/commands/creator/create.rst:190
msgid "``export_sources()``"
msgstr ""

#: ../../../reference/commands/creator/create.rst:191
msgid "``config_options()``"
msgstr ""

#: ../../../reference/commands/creator/create.rst:192
msgid "``configure()``"
msgstr ""

#: ../../../reference/commands/creator/create.rst:193
msgid "``layout()``"
msgstr ""

#: ../../../reference/commands/creator/create.rst:194
msgid "``requirements()``"
msgstr ""

#: ../../../reference/commands/creator/create.rst:195
msgid "``package_id()``"
msgstr ""

#: ../../../reference/commands/creator/create.rst:196
msgid "``validate()``"
msgstr ""

#: ../../../reference/commands/creator/create.rst:197
msgid "``validate_build()``"
msgstr ""

#: ../../../reference/commands/creator/create.rst:198
msgid "``build_requirements()``"
msgstr ""

#: ../../../reference/commands/creator/create.rst:199
msgid "``build_id()``"
msgstr ""

#: ../../../reference/commands/creator/create.rst:200
msgid "``system_requirements()``"
msgstr ""

#: ../../../reference/commands/creator/create.rst:201
msgid "``source()``"
msgstr ""

#: ../../../reference/commands/creator/create.rst:202
msgid "``generate()``"
msgstr ""

#: ../../../reference/commands/creator/create.rst:203
msgid "``imports()``"
msgstr ""

#: ../../../reference/commands/creator/create.rst:204
msgid "``build()``"
msgstr ""

#: ../../../reference/commands/creator/create.rst:205
msgid "``package()``"
msgstr ""

#: ../../../reference/commands/creator/create.rst:206
msgid "``package_info()``"
msgstr ""

#: ../../../reference/commands/creator/create.rst:208
msgid ""
"In case of installing a pre-built binary, steps from 9 to 17 will be "
"skipped. Note that ``deploy()`` method is only used in :command:`conan "
"install`."
msgstr ""

#: ../../../reference/commands/creator/create.rst:213
msgid ""
"Installation of binaries can be accelerated setting up parallel downloads "
"with the ``general.parallel_download`` **under development** configuration "
"in :ref:`conan_conf`."
msgstr ""

#: ../../../reference/commands/creator/create.rst:217
msgid ""
"The ``--build-require``, new in Conan 1.37, allows to create the package "
"using the configuration and settings of the \"build\" context, as it was a "
"``build_require``. This feature allows to create packages in a way that is "
"consistent to the way they will be used later. When there is a "
"``test_package``, it is possible to use there the ``test_type=\"explicit\"`` "
"and ``self.test_requires(self.tested_reference_str)``. There is no need to "
"provide it in the command line, :ref:`check \"testing tool requires\" "
"<testing_build_requires>` to know more."
msgstr ""

#: ../../../reference/commands/creator/create.rst:225
msgid "--require-override"
msgstr ""

#: ../../../reference/commands/creator/create.rst:227
msgid ""
"Available since: `1.39.0 <https://github.com/conan-io/conan/releases/"
"tag/1.39.0>`_"
msgstr ""

#: ../../../reference/commands/creator/create.rst:229
msgid ""
"This argument is the same, and has the same behavior as the :ref:`conan "
"install command<cli_arg_require_override>`."
msgstr ""
