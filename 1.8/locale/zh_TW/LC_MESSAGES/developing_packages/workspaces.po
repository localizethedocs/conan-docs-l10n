# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2018, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 18:24+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../developing_packages/workspaces.rst:4
msgid "Workspaces [EXPERIMENTAL]"
msgstr ""

#: ../../../developing_packages/workspaces.rst:8
msgid ""
"This is an **experimental** feature (actually a preview of the feature). "
"File formats, commands and flows are subject to breaking changes in future "
"releases."
msgstr ""

#: ../../../developing_packages/workspaces.rst:11
msgid ""
"Sometimes, it is necessary to work on more than one package simultaneously. "
"In theory, each package should be a distinct \"work unit\", and developers "
"should be able to work on them in isolation. However, some changes require "
"modifications in more than one package at the same time. The local "
"development flow can help, but it still requires using ``export-pkg`` to put "
"the artifacts in the local cache, where other packages under development can "
"consume them."
msgstr ""

#: ../../../developing_packages/workspaces.rst:16
msgid ""
"Conan Workspaces allow having more than one package in user folders, and "
"have them directly use other packages from user folders without having to "
"put them in the local cache."
msgstr ""

#: ../../../developing_packages/workspaces.rst:19
msgid "Let's introduce Workspaces with a practical example:"
msgstr ""

#: ../../../developing_packages/workspaces.rst:21
msgid ""
"$ git clone https://github.com/memsharded/conan-workspace-example.git\n"
"$ cd conan-workspace-example"
msgstr ""

#: ../../../developing_packages/workspaces.rst:26
msgid ""
"Note that this folder contains a *conanws.yml* file in the root, with the "
"following contents:"
msgstr ""

#: ../../../developing_packages/workspaces.rst:28
msgid ""
"HelloB:\n"
"    folder: B\n"
"    includedirs: src\n"
"    cmakedir: src\n"
"HelloC:\n"
"    folder: C\n"
"    includedirs: src\n"
"    cmakedir: src\n"
"HelloA:\n"
"    folder: A\n"
"    cmakedir: src\n"
"\n"
"root: HelloA\n"
"generator: cmake\n"
"name: MyProject"
msgstr ""

#: ../../../developing_packages/workspaces.rst:47
msgid ""
"Next, run a :command:`conan install` as usual, using a *build* folder to "
"output the dependencies information:"
msgstr ""

#: ../../../developing_packages/workspaces.rst:49
msgid ""
"$ conan install . -if=build\n"
"Using conanws.yml file from C:\\Users\\<youruser>\\conan-workspace-example\n"
"Workspace: Installing...\n"
"Requirements\n"
"    HelloA/root@project/develop from 'conanws.yml'\n"
"    HelloB/0.1@user/testing from 'conanws.yml'\n"
"    HelloC/0.1@user/testing from 'conanws.yml'\n"
"Packages\n"
"    HelloA/root@project/develop:8a1ff0ad9a2a372996a26ff4136faa83268b5442\n"
"    HelloB/0.1@user/testing:e5affb0ca4e5d6998c29f435daf78ab20ef50be5\n"
"    HelloC/0.1@user/testing:63da998e3642b50bee33f4449826b2d623661505\n"
"\n"
"Workspace HelloC: Generator cmake created conanbuildinfo.cmake\n"
"Workspace HelloC: Generated conaninfo.txt\n"
"Workspace HelloC: Generated conanbuildinfo.txt\n"
"Workspace HelloB: Generator cmake created conanbuildinfo.cmake\n"
"Workspace HelloB: Generated conaninfo.txt\n"
"Workspace HelloB: Generated conanbuildinfo.txt\n"
"Workspace HelloA: Generator cmake created conanbuildinfo.cmake\n"
"Workspace HelloA: Generated conaninfo.txt\n"
"Workspace HelloA: Generated conanbuildinfo.txt"
msgstr ""

#: ../../../developing_packages/workspaces.rst:74
msgid ""
"Note that nothing will really be installed in the local cache. All the "
"dependencies are resolved locally:"
msgstr ""

#: ../../../developing_packages/workspaces.rst:76
msgid ""
"$ conan search\n"
"There are no packages"
msgstr ""

#: ../../../developing_packages/workspaces.rst:81
msgid ""
"Also, all the generated *conanbuildinfo.cmake* files for the dependencies "
"are installed in the *build* folder. You can inspect them to check that the "
"paths they define for their dependencies are user folders. They don't point "
"to the local cache."
msgstr ""

#: ../../../developing_packages/workspaces.rst:84
msgid ""
"As defined in the *conanws.yml*, a root *CMakeLists.txt* is generated for "
"us. We can use it to generate the super-project and build it:"
msgstr ""

#: ../../../developing_packages/workspaces.rst:86
msgid ""
"$ cd build\n"
"$ cmake .. -G \"Visual Studio 14 Win64\" # Adapt accordingly to your conan "
"profile\n"
"# Now build it. You can also open your IDE and build\n"
"$ cmake --build . --config Release\n"
"$ ./A/Release/app.exe\n"
"Hello World C Release!\n"
"Hello World B Release!\n"
"Hello World A Release!"
msgstr ""

#: ../../../developing_packages/workspaces.rst:97
msgid ""
"Now the project is editable. You can change the code of folder C *hello.cpp* "
"to say \"Bye World\" and:"
msgstr ""

#: ../../../developing_packages/workspaces.rst:99
msgid ""
"# Edit your C/src/hello.cpp file to say \"Bye\"\n"
"# Or press the build button of your IDE\n"
"$ cmake --build . --config Release\n"
"$ ./A/Release/app.exe\n"
"Bye World C Release!\n"
"Hello World B Release!\n"
"Hello World A Release!"
msgstr ""

#: ../../../developing_packages/workspaces.rst:110
msgid "In-source builds"
msgstr ""

#: ../../../developing_packages/workspaces.rst:111
msgid ""
"The current approach with automatic generation of the super-project is only "
"valid if all the opened packages are using the same build system, CMake. "
"However, without using a super-project, you can still use Workspaces to "
"simultaneously work on different packages with different build systems."
msgstr ""

#: ../../../developing_packages/workspaces.rst:115
msgid ""
"For this case, the *conanws.yml* won't have the ``generator`` or ``name`` "
"fields. The installation will be done without specifying an install folder:"
msgstr ""

#: ../../../developing_packages/workspaces.rst:118
msgid "$ conan install ."
msgstr ""

#: ../../../developing_packages/workspaces.rst:122
msgid ""
"Each local package will have its own build folder, which will contain the "
"generated *conanbuildinfo.cmake* file. You can do local builds in each of "
"the packages, and they will be referring and linking the other opened "
"packages in user folders."
msgstr ""

#: ../../../developing_packages/workspaces.rst:128
msgid "conanws.yml syntax"
msgstr ""

#: ../../../developing_packages/workspaces.rst:129
msgid ""
"The *conanws.yml* file can be located in any parent folder of the location "
"pointed to by the :command:`conan install` command. Conan will search up "
"through the folder hierarchy looking for a *conanws.yml* file. If the file "
"is not found, the normal :command:`conan install` command for a single "
"package will be executed."
msgstr ""

#: ../../../developing_packages/workspaces.rst:134
msgid ""
"Any \"opened\" package will have an entry in the *conanws.yml* file. This "
"entry will define the relative location of different folders:"
msgstr ""

#: ../../../developing_packages/workspaces.rst:137
msgid ""
"HelloB:\n"
"    folder: B\n"
"    includedirs: src  # relative to B, i.e. B/src\n"
"    cmakedir: src # Where the CMakeLists.txt is, necessary for the super-"
"project\n"
"    build: \"'build' if '{os}'=='Windows' else 'build_{build_type}'."
"lower()\"\n"
"    libdirs: \"'build/{build_type}' if '{os}'=='Windows' else "
"'build_{build_type}'.lower()\""
msgstr ""

#: ../../../developing_packages/workspaces.rst:146
msgid ""
"If necessary, the local ``build`` and ``libdirs`` folders can be "
"parameterized with the build type and the architecture (``arch``) to account "
"for different layouts and configurations."
msgstr ""

#: ../../../developing_packages/workspaces.rst:150
msgid ""
"The ``root`` field of *conanws.yml* defines the end consumers. They are "
"needed as an input to define the dependency graph. There can be more than "
"one ``root`` in a comma separated list, but all of them will share the same "
"dependency graph, so if they require different versions of the same "
"dependencies, they will conflict."
msgstr ""

#: ../../../developing_packages/workspaces.rst:154
msgid ""
"root: HelloA, Other\n"
"generator: cmake # The super-project build system\n"
"name: MyProject # Name for the super-project"
msgstr ""

#: ../../../developing_packages/workspaces.rst:162
msgid "Known limitations"
msgstr ""

#: ../../../developing_packages/workspaces.rst:164
msgid ""
"So far, only the CMake super-project generator is implemented. A Visual "
"Studio version seems feasible, but is currently still under development and "
"not yet available."
msgstr ""

#: ../../../developing_packages/workspaces.rst:169
msgid ""
"We really want your feedback. Please submit any suggestions, problems or "
"ideas as issues to https://github.com/conan-io/conan/issues making sure to "
"use the [workspaces] prefix in the issue title."
msgstr ""
