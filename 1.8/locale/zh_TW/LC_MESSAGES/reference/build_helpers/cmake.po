# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2018, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 18:24+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/build_helpers/cmake.rst:4
msgid "CMake"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:6
msgid ""
"The `CMake` class helps us to invoke `cmake` command with the generator, "
"flags and definitions, reflecting the specified Conan settings."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:8
msgid "There are two ways to invoke your cmake tools:"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:10
msgid ""
"Using the helper attributes ``cmake.command_line`` and ``cmake."
"build_config``:"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:12
msgid ""
"from conans import ConanFile, CMake\n"
"\n"
" class ExampleConan(ConanFile):\n"
"     ...\n"
"\n"
"     def build(self):\n"
"         cmake = CMake(self)\n"
"         self.run('cmake \"%s\" %s' % (self.source_folder, cmake."
"command_line))\n"
"         self.run('cmake --build . %s' % cmake.build_config)\n"
"         self.run('cmake --build . --target install')"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:25
msgid "Using the helper methods:"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:27
msgid ""
"from conans import ConanFile, CMake\n"
"\n"
"class ExampleConan(ConanFile):\n"
"    ...\n"
"\n"
"    def build(self):\n"
"        cmake = CMake(self)\n"
"        # same as cmake.configure(source_folder=self.source_folder, "
"build_folder=self.build_folder)\n"
"        cmake.configure()\n"
"        cmake.build()\n"
"        cmake.test() # Build the \"RUN_TESTS\" or \"test\" target\n"
"        # Build the \"install\" target, defining CMAKE_INSTALL_PREFIX to "
"self.package_folder\n"
"        cmake.install()"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:45
msgid "Constructor"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:47
msgid ""
"class CMake(object):\n"
"\n"
"    def __init__(self, conanfile, generator=None, cmake_system_name=True,\n"
"                 parallel=True, build_type=None, toolset=None, "
"make_program=None,\n"
"                 set_cmake_flags=False)"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:64
#: ../../../reference/build_helpers/cmake.rst:229
#: ../../../reference/build_helpers/cmake.rst:243
#: ../../../reference/build_helpers/cmake.rst:258
#: ../../../reference/build_helpers/cmake.rst:272
msgid "Parameters:"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:56
msgid ""
"**conanfile** (Required): Conanfile object. Usually ``self`` in a *conanfile."
"py*"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:57
msgid ""
"**generator** (Optional, Defaulted to ``None``): Specify a custom generator "
"instead of autodetect it. e.g., \"MinGW Makefiles\""
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:58
msgid ""
"**cmake_system_name** (Optional, Defaulted to ``True``): Specify a custom "
"value for ``CMAKE_SYSTEM_NAME`` instead of autodetect it."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:59
msgid ""
"**parallel** (Optional, Defaulted to ``True``): If ``True``, will append the "
"`-jN` attribute for parallel building being N the :ref:"
"`cpu_count()<cpu_count>`."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:60
msgid ""
"**build_type** (Optional, Defaulted to ``None``): Force the build type to be "
"declared in ``CMAKE_BUILD_TYPE``. If you set this parameter the build type "
"not will be taken from the settings."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:62
msgid ""
"**toolset** (Optional, Defaulted to ``None``): Specify a toolset for Visual "
"Studio."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:63
msgid ""
"**make_program** (Optional, Defaulted to ``None``): Indicate path to "
"``make``."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:64
msgid ""
"**set_cmake_flags** (Optional, Defaulted to ``None``): Whether or not to set "
"CMake flags like ``CMAKE_CXX_FLAGS``, ``CMAKE_C_FLAGS``, etc."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:67
msgid "Attributes"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:70
msgid "verbose"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:72
msgid "**Defaulted to**: ``False``"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:74
msgid ""
"Set it to ``True`` or ``False`` to automatically set the definition "
"``CMAKE_VERBOSE_MAKEFILE``."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:76
msgid ""
"from conans import ConanFile, CMake\n"
"\n"
"class ExampleConan(ConanFile):\n"
"    ...\n"
"\n"
"    def build(self):\n"
"        cmake = CMake(self)\n"
"        cmake.verbose = True\n"
"        cmake.configure()\n"
"        cmake.build()"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:91
msgid "command_line (read only)"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:93
msgid ""
"Generator, conan definitions and flags that reflects the specified Conan "
"settings."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:95
msgid ""
"-G \"Unix Makefiles\" -DCMAKE_BUILD_TYPE=Release ... -DCONAN_C_FLAGS=-m64 -"
"Wno-dev"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:100
msgid "build_config (read only)"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:102
msgid "Value for ``--config`` option for Multi-configuration IDEs."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:104
msgid "--config Release"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:109
msgid "definitions"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:111
msgid ""
"The CMake helper will automatically append some definitions based on your "
"settings:"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:114
#: ../../../reference/build_helpers/cmake.rst:168
msgid "Variable"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:114
#: ../../../reference/build_helpers/cmake.rst:168
msgid "Description"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:116
msgid "CMAKE_BUILD_TYPE"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:116
msgid "Debug or Release (from self.settings.build_type)"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:118
msgid "CMAKE_OSX_ARCHITECTURES"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:118
msgid "\"i386\" if architecture is x86 in an OSX system"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:120
msgid "BUILD_SHARED_LIBS"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:120
msgid "Only If your conanfile has a \"shared\" option"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:122
msgid "CONAN_COMPILER"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:122
msgid "Conan internal variable to check compiler"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:124
msgid "CMAKE_SYSTEM_NAME"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:124
msgid "If detected cross building it's set to self.settings.os"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:126
msgid "CMAKE_SYSTEM_VERSION"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:126
msgid "If detected cross building it's set to the self.settings.os_version"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:128
msgid "CMAKE_ANDROID_ARCH_ABI"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:128
msgid "If detected cross building to Android"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:130
msgid "CONAN_LIBCXX"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:130
msgid "from self.settings.compiler.libcxx"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:132
msgid "CONAN_CMAKE_SYSTEM_PROCESSOR"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:132
#: ../../../reference/build_helpers/cmake.rst:134
#: ../../../reference/build_helpers/cmake.rst:136
#: ../../../reference/build_helpers/cmake.rst:138
#: ../../../reference/build_helpers/cmake.rst:140
msgid "Definition only set if same environment variable is declared by user"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:134
msgid "CONAN_CMAKE_FIND_ROOT_PATH"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:136
msgid "CONAN_CMAKE_FIND_ROOT_PATH_MODE_PROGRAM"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:138
msgid "CONAN_CMAKE_FIND_ROOT_PATH_MODE_LIBRARY"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:140
msgid "CONAN_CMAKE_FIND_ROOT_PATH_MODE_INCLUDE"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:142
msgid "CONAN_CMAKE_POSITION_INDEPENDENT_CODE"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:142
msgid ""
"When ``fPIC`` option is present and True or when ``fPIC`` is present and "
"False but option ``shared`` is present and True"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:144
msgid "CONAN_SHARED_LINKER_FLAGS"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:144
msgid "-m32 and -m64 based on your architecture"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:146
msgid "CONAN_C_FLAGS"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:146
#: ../../../reference/build_helpers/cmake.rst:148
msgid "-m32 and -m64 based on your architecture and /MP for MSVS"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:148
msgid "CONAN_CXX_FLAGS"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:150
msgid "CONAN_LINK_RUNTIME"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:150
msgid "Runtime from self.settings.compiler.runtime for MSVS"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:152
msgid "CONAN_CMAKE_CXX_STANDARD"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:152
msgid "From setting ``cppstd``"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:154
msgid "CONAN_CMAKE_CXX_EXTENSIONS"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:154
msgid "From setting ``cppstd``, when GNU extensions are enabled"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:156
msgid "CONAN_STD_CXX_FLAG"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:156
msgid "From setting ``cppstd``. Flag for compiler directly (for CMake < 3.1)"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:158
msgid "CMAKE_EXPORT_NO_PACKAGE_REGISTRY"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:158
msgid "By default, disable the package registry"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:160
msgid "CONAN_IN_LOCAL_CACHE"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:160
msgid ""
"``ON`` if installing the package (runs in local cache), ``OFF`` if running "
"in a user folder"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:162
msgid "CONAN_EXPORTED"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:162
msgid "Defined when CMake is called using Conan CMake helper"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:165
msgid ""
"There are some definitions set to be used later on the the ``install()`` "
"step too:"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:170
msgid "CMAKE_INSTALL_PREFIX"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:170
msgid "Set to ``conanfile.package_folder``"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:172
msgid "CMAKE_INSTALL_BINDIR"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:172
#: ../../../reference/build_helpers/cmake.rst:174
#: ../../../reference/build_helpers/cmake.rst:176
msgid "Set to *bin* inside the package folder."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:174
msgid "CMAKE_INSTALL_SBINDIR"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:176
msgid "CMAKE_INSTALL_LIBEXECDIR"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:178
msgid "CMAKE_INSTALL_LIBDIR"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:178
msgid "Set to *lib* inside the package folder."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:180
msgid "CMAKE_INSTALL_INCLUDEDIR"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:180
#: ../../../reference/build_helpers/cmake.rst:182
msgid "Set to *include* inside the package folder."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:182
msgid "CMAKE_INSTALL_OLDINCLUDEDIR"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:184
msgid "CMAKE_INSTALL_DATAROOTDIR"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:184
msgid "Set to *share* inside the package folder."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:187
msgid ""
"But you can change the automatic definitions after the ``CMake()`` object "
"creation using the ``definitions`` property:"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:189
msgid ""
"from conans import ConanFile, CMake\n"
"\n"
"class ExampleConan(ConanFile):\n"
"    ...\n"
"\n"
"    def build(self):\n"
"        cmake = CMake(self)\n"
"        cmake.definitions[\"CMAKE_SYSTEM_NAME\"] = \"Generic\"\n"
"        cmake.configure()\n"
"        cmake.build()\n"
"        cmake.install() # Build --target=install"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:204
msgid "Methods"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:207
msgid "configure()"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:209
msgid ""
"def configure(self, args=None, defs=None, source_folder=None, "
"build_folder=None,\n"
"              cache_build_folder=None, pkg_config_paths=None)"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:214
msgid "Configures `CMake` project with the given parameters."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:217
#: ../../../reference/build_helpers/cmake.rst:241
msgid ""
"**args** (Optional, Defaulted to ``None``): A list of additional arguments "
"to be passed to the ``cmake`` command. Each argument will be escaped "
"according to the current shell. No extra arguments will be added if "
"``args=None``"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:218
msgid ""
"**definitions** (Optional, Defaulted to ``None``): A dict that will be "
"converted to a list of CMake command line variable definitions of the form "
"``-DKEY=VALUE``. Each value will be escaped according to the current shell "
"and can be either ``str``, ``bool`` or of numeric type"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:219
msgid ""
"**source_folder**: CMake's source directory where ``CMakeLists.txt`` is "
"located. The default value is the ``self.source_folder``. Relative paths are "
"allowed and will be relative to ``self.source_folder``."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:221
msgid ""
"**build_folder**: CMake's output directory. The default value is the ``self."
"build_folder`` if ``None`` is specified. The ``CMake`` object will store "
"``build_folder`` internally for subsequent calls to ``build()``."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:223
msgid ""
"**cache_build_folder** (Optional, Defaulted to ``None``): Use the given "
"subfolder as build folder when building the package in the local cache. This "
"argument doesn't have effect when the package is being built in user folder "
"with :command:`conan build` but overrides **build_folder** when working in "
"the local cache. See :ref:`self.in_local_cache<in_local_cache>`."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:226
msgid ""
"**pkg_config_paths** (Optional, Defaulted to ``None``): Specify folders (in "
"a list) of relative paths to the install folder or absolute ones where to "
"find ``*.pc`` files (by using the env var ``PKG_CONFIG_PATH``). If ``None`` "
"is specified but the conanfile is using the ``pkg_config`` generator, the "
"``self.install_folder`` will be added to the ``PKG_CONFIG_PATH`` in order to "
"locate the pc files of the requirements of the conanfile."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:232
msgid "build()"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:234
msgid "def build(self, args=None, build_dir=None, target=None)"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:238
msgid "Builds `CMake` project with the given parameters."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:242
msgid ""
"**build_dir** (Optional, Defaulted to ``None``): CMake's output directory. "
"If ``None`` is specified the ``build_dir`` from ``configure()`` will be used."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:243
msgid ""
"**target** (Optional, Defaulted to ``None``): Specifies the target to "
"execute. The default *all* target will be built if ``None`` is specified. "
"``\"install\"`` can be used to relocate files to aid packaging."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:246
msgid "test()"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:248
msgid "def test(args=None, build_dir=None, target=None)"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:252
msgid ""
"Build `CMake` test target (could be RUN_TESTS in multi-config projects or "
"``test`` in single-config projects), which usually means building and "
"running unit tests"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:255
#: ../../../reference/build_helpers/cmake.rst:270
msgid ""
"**args** (Optional, Defaulted to ``None``): A list of additional arguments "
"to be passed to the ``cmake`` command. Each argument will be escaped "
"according to the current shell. No extra arguments will be added if "
"``args=None``."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:256
#: ../../../reference/build_helpers/cmake.rst:271
msgid ""
"**build_dir** (Optional, Defaulted to ``None``): CMake's output directory. "
"If ``None`` is specified the ``build_folder`` from ``configure()`` will be "
"used."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:257
msgid ""
"**target** (Optional, default to ``None``). Alternative target name for "
"running the tests. If not defined RUN_TESTS or ``test`` will be used"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:261
msgid "install()"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:263
msgid "def install(args=None, build_dir=None)"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:267
msgid "Installs `CMake` project with the given parameters."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:275
msgid "patch_config_paths() [EXPERIMENTAL]"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:277
msgid "def patch_config_paths()"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:283
msgid ""
"This is an **experimental** feature subject to breaking changes in future "
"releases."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:285
msgid ""
"This method changes references to the absolute path of the installed package "
"in exported CMake config files to the appropriate Conan variable. Method "
"also changes references to other packages installation paths in export CMake "
"config files to Conan variable with their installation roots. This makes "
"most CMake config files portable."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:290
msgid ""
"For example, if a package foo installs a file called *fooConfig.cmake* to be "
"used by cmake's ``find_package()`` method, normally this file will contain "
"absolute paths to the installed package folder, for example it will contain "
"a line such as:"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:293
msgid "SET(Foo_INSTALL_DIR /home/developer/.conan/data/Foo/1.0.0/...)"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:297
msgid ""
"This will cause cmake's ``find_package()`` method to fail when someone else "
"installs the package via Conan. This function will replace such paths to:"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:300
msgid "SET(Foo_INSTALL_DIR ${CONAN_FOO_ROOT})"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:304
msgid ""
"Which is a variable that is set by *conanbuildinfo.cmake*, so that "
"``find_package()`` now correctly works on this Conan package."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:306
msgid ""
"For dependent packages method replaces lines with references to dependencies "
"installation paths such as:"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:308
msgid ""
"SET_TARGET_PROPERTIES(foo PROPERTIES INTERFACE_INCLUDE_DIRECTORIES \"/home/"
"developer/.conan/data/Bar/1.0.0/user/channel/id/include\")"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:312
msgid "to following lines:"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:314
msgid ""
"SET_TARGET_PROPERTIES(foo PROPERTIES INTERFACE_INCLUDE_DIRECTORIES "
"\"${CONAN_BAR_ROOT}/include\")"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:318
msgid ""
"If the ``install()`` method of the CMake object in the conanfile is used, "
"this function should be called **after** that invocation. For example:"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:321
msgid ""
"def build(self):\n"
"    cmake = CMake(self)\n"
"    cmake.configure()\n"
"    cmake.build()\n"
"    cmake.install()\n"
"    cmake.patch_config_paths()"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:331
msgid "get_version()"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:333
msgid ""
"@staticmethod\n"
"def get_version()"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:338
msgid ""
"Returns the CMake version in a ``conans.model.Version`` object as it is "
"evaluated by the command line. Will raise if cannot resolve it to valid "
"version."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:343
msgid "Environment variables"
msgstr "環境變數"

#: ../../../reference/build_helpers/cmake.rst:345
msgid ""
"There are some environment variables that will also affect the ``CMake()`` "
"helper class. Check them in the :ref:`CMAKE RELATED "
"VARIABLES<cmake_related_variables>` section."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:349
msgid "Example"
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:350
msgid ""
"The following example of ``conanfile.py`` shows you how to manage a project "
"with conan and CMake."
msgstr ""

#: ../../../reference/build_helpers/cmake.rst:352
msgid ""
"from conans import ConanFile, CMake\n"
"\n"
"class SomePackage(ConanFile):\n"
"    name = \"SomePackage\"\n"
"    version = \"1.0.0\"\n"
"    settings = \"os\", \"compiler\", \"build_type\", \"arch\"\n"
"    generators = \"cmake\"\n"
"\n"
"def configure_cmake(self):\n"
"    cmake = CMake(self)\n"
"\n"
"    # put definitions here so that they are re-used in cmake between\n"
"    # build() and package()\n"
"    cmake.definitions[\"SOME_DEFINITION_NAME\"] = \"On\"\n"
"\n"
"    cmake.configure()\n"
"    return cmake\n"
"\n"
"def build(self):\n"
"    cmake = self.configure_cmake()\n"
"    cmake.build()\n"
"\n"
"    # run unit tests after the build\n"
"    cmake.test()\n"
"\n"
"    # run custom make command\n"
"    self.run(\"make -j3 check)\n"
"\n"
"def package(self):\n"
"    cmake = self.configure_cmake()\n"
"    cmake.install()"
msgstr ""
