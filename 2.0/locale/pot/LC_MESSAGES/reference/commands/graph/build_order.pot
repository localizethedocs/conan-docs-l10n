# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:32+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/commands/graph/build_order.rst:2
msgid "conan graph build-order"
msgstr ""

#: ../../../reference/commands/graph/build_order.rst:-1
msgid ""
"$ conan graph build-order -h\n"
"usage: conan graph build-order [-h] [-f FORMAT] [-v [V]] [--name NAME]\n"
"                               [--version VERSION] [--user USER]\n"
"                               [--channel CHANNEL] [--requires REQUIRES]\n"
"                               [--tool-requires TOOL_REQUIRES] [-b BUILD]\n"
"                               [-r REMOTE | -nr] [-u] [-pr PROFILE]\n"
"                               [-pr:b PROFILE_BUILD] [-pr:h PROFILE_HOST]\n"
"                               [-pr:a PROFILE_ALL] [-o OPTIONS]\n"
"                               [-o:b OPTIONS_BUILD] [-o:h OPTIONS_HOST]\n"
"                               [-o:a OPTIONS_ALL] [-s SETTINGS]\n"
"                               [-s:b SETTINGS_BUILD] [-s:h SETTINGS_HOST]\n"
"                               [-s:a SETTINGS_ALL] [-c CONF] [-c:b "
"CONF_BUILD]\n"
"                               [-c:h CONF_HOST] [-c:a CONF_ALL] [-l "
"LOCKFILE]\n"
"                               [--lockfile-partial]\n"
"                               [--lockfile-out LOCKFILE_OUT]\n"
"                               [--lockfile-packages] [--lockfile-clean]\n"
"                               [--lockfile-overrides LOCKFILE_OVERRIDES]\n"
"                               [path]\n"
"\n"
"Compute the build order of a dependency graph.\n"
"\n"
"positional arguments:\n"
"  path                  Path to a folder containing a recipe (conanfile.py "
"or\n"
"                        conanfile.txt) or to a recipe file. e.g.,\n"
"                        ./my_project/conanfile.txt.\n"
"\n"
"options:\n"
"  -h, --help            show this help message and exit\n"
"  -f FORMAT, --format FORMAT\n"
"                        Select the output format: json\n"
"  -v [V]                Level of detail of the output. Valid options from "
"less\n"
"                        verbose to more verbose: -vquiet, -verror, -"
"vwarning,\n"
"                        -vnotice, -vstatus, -v or -vverbose, -vv or -"
"vdebug,\n"
"                        -vvv or -vtrace\n"
"  --name NAME           Provide a package name if not specified in "
"conanfile\n"
"  --version VERSION     Provide a package version if not specified in\n"
"                        conanfile\n"
"  --user USER           Provide a user if not specified in conanfile\n"
"  --channel CHANNEL     Provide a channel if not specified in conanfile\n"
"  --requires REQUIRES   Directly provide requires instead of a conanfile\n"
"  --tool-requires TOOL_REQUIRES\n"
"                        Directly provide tool-requires instead of a "
"conanfile\n"
"  -b BUILD, --build BUILD\n"
"                        Optional, specify which packages to build from "
"source.\n"
"                        Combining multiple '--build' options on one command\n"
"                        line is allowed. Possible values: --build=\"*\" "
"Force\n"
"                        build from source for all packages. --build=never\n"
"                        Disallow build for all packages, use binary "
"packages\n"
"                        or fail if a binary package is not found, it cannot "
"be\n"
"                        combined with other '--build' options. --"
"build=missing\n"
"                        Build packages from source whose binary package is "
"not\n"
"                        found. --build=cascade Build packages from source "
"that\n"
"                        have at least one dependency being built from "
"source.\n"
"                        --build=[pattern] Build packages from source whose\n"
"                        package reference matches the pattern. The pattern\n"
"                        uses 'fnmatch' style wildcards. --build=~[pattern]\n"
"                        Excluded packages, which will not be built from the\n"
"                        source, whose package reference matches the "
"pattern.\n"
"                        The pattern uses 'fnmatch' style wildcards.\n"
"                        --build=missing:[pattern] Build from source if a\n"
"                        compatible binary does not exist, only for packages\n"
"                        matching pattern.\n"
"  -r REMOTE, --remote REMOTE\n"
"                        Look in the specified remote or remotes server\n"
"  -nr, --no-remote      Do not use remote, resolve exclusively in the cache\n"
"  -u, --update          Will check the remote and in case a newer version\n"
"                        and/or revision of the dependencies exists there, "
"it\n"
"                        will install those in the local cache. When using\n"
"                        version ranges, it will install the latest version\n"
"                        that satisfies the range. Also, if using revisions, "
"it\n"
"                        will update to the latest revision for the resolved\n"
"                        version range.\n"
"  -pr PROFILE, --profile PROFILE\n"
"                        Apply the specified profile. By default, or if\n"
"                        specifying -pr:h (--profile:host), it applies to "
"the\n"
"                        host context. Use -pr:b (--profile:build) to "
"specify\n"
"                        the build context, or -pr:a (--profile:all) to "
"specify\n"
"                        both contexts at once\n"
"  -pr:b PROFILE_BUILD, --profile:build PROFILE_BUILD\n"
"  -pr:h PROFILE_HOST, --profile:host PROFILE_HOST\n"
"  -pr:a PROFILE_ALL, --profile:all PROFILE_ALL\n"
"  -o OPTIONS, --options OPTIONS\n"
"                        Apply the specified options. By default, or if\n"
"                        specifying -o:h (--options:host), it applies to the\n"
"                        host context. Use -o:b (--options:build) to specify\n"
"                        the build context, or -o:a (--options:all) to "
"specify\n"
"                        both contexts at once. Example: -o pkg:with_qt=true\n"
"  -o:b OPTIONS_BUILD, --options:build OPTIONS_BUILD\n"
"  -o:h OPTIONS_HOST, --options:host OPTIONS_HOST\n"
"  -o:a OPTIONS_ALL, --options:all OPTIONS_ALL\n"
"  -s SETTINGS, --settings SETTINGS\n"
"                        Apply the specified settings. By default, or if\n"
"                        specifying -s:h (--settings:host), it applies to "
"the\n"
"                        host context. Use -s:b (--settings:build) to "
"specify\n"
"                        the build context, or -s:a (--settings:all) to "
"specify\n"
"                        both contexts at once. Example: -s compiler=gcc\n"
"  -s:b SETTINGS_BUILD, --settings:build SETTINGS_BUILD\n"
"  -s:h SETTINGS_HOST, --settings:host SETTINGS_HOST\n"
"  -s:a SETTINGS_ALL, --settings:all SETTINGS_ALL\n"
"  -c CONF, --conf CONF  Apply the specified conf. By default, or if "
"specifying\n"
"                        -c:h (--conf:host), it applies to the host context.\n"
"                        Use -c:b (--conf:build) to specify the build "
"context,\n"
"                        or -c:a (--conf:all) to specify both contexts at "
"once.\n"
"                        Example: -c tools.cmake.cmaketoolchain:"
"generator=Xcode\n"
"  -c:b CONF_BUILD, --conf:build CONF_BUILD\n"
"  -c:h CONF_HOST, --conf:host CONF_HOST\n"
"  -c:a CONF_ALL, --conf:all CONF_ALL\n"
"  -l LOCKFILE, --lockfile LOCKFILE\n"
"                        Path to a lockfile. Use --lockfile=\"\" to avoid\n"
"                        automatic use of existing 'conan.lock' file\n"
"  --lockfile-partial    Do not raise an error if some dependency is not "
"found\n"
"                        in lockfile\n"
"  --lockfile-out LOCKFILE_OUT\n"
"                        Filename of the updated lockfile\n"
"  --lockfile-packages   Lock package-id and package-revision information\n"
"  --lockfile-clean      Remove unused entries from the lockfile\n"
"  --lockfile-overrides LOCKFILE_OVERRIDES\n"
"                        Overwrite lockfile overrides\n"
"\n"
msgstr ""

#: ../../../reference/commands/graph/build_order.rst:8
msgid ""
"The ``conan graph build-order`` command computes build order of the "
"dependency graph for the recipe specified in ``path``."
msgstr ""

#: ../../../reference/commands/graph/build_order.rst:11
msgid "**Example**:"
msgstr ""

#: ../../../reference/commands/graph/build_order.rst:13
msgid ""
"Let's think of installing `libpng`, and we want to see the build order for "
"this requirement:"
msgstr ""

#: ../../../reference/commands/graph/build_order.rst:15
msgid ""
"$ conan graph build-order --requires libpng/1.5.30 --format json\n"
"...\n"
"======== Computing the build order ========\n"
"[\n"
"    [\n"
"        {\n"
"            \"ref\": \"zlib/1.3#5c0f3a1a222eebb6bff34980bcd3e024\",\n"
"            \"depends\": [],\n"
"            \"packages\": [\n"
"                [\n"
"                    {\n"
"                        \"package_id\": "
"\"be7ccd6109b8a8f9da81fd00ee143a1f5bbd5bbf\",\n"
"                        \"prev\": null,\n"
"                        \"context\": \"host\",\n"
"                        \"binary\": \"Missing\",\n"
"                        \"options\": [],\n"
"                        \"filenames\": [],\n"
"                        \"depends\": [],\n"
"                        \"overrides\": {},\n"
"                        \"build_args\": null\n"
"                    }\n"
"                ]\n"
"            ]\n"
"        }\n"
"    ],\n"
"    [\n"
"        {\n"
"            \"ref\": \"libpng/1.5.30#ed8593b3f837c6c9aa766f231c917a5b\",\n"
"            \"depends\": [\n"
"                \"zlib/1.3#5c0f3a1a222eebb6bff34980bcd3e024\"\n"
"            ],\n"
"            \"packages\": [\n"
"                [\n"
"                    {\n"
"                        \"package_id\": "
"\"235f6d8c648e7c618d86155a8c3c6efb96d61fa1\",\n"
"                        \"prev\": null,\n"
"                        \"context\": \"host\",\n"
"                        \"binary\": \"Missing\",\n"
"                        \"options\": [],\n"
"                        \"filenames\": [],\n"
"                        \"depends\": [],\n"
"                        \"overrides\": {},\n"
"                        \"build_args\": null\n"
"                    }\n"
"                ]\n"
"            ]\n"
"        }\n"
"    ]\n"
"]"
msgstr ""

#: ../../../reference/commands/graph/build_order.rst:67
msgid ""
"At first place, we can see the ``zlib`` package as ``libpng`` depends on it. "
"That output is ordered by recipes by default, but we could want to see it "
"ordered by configurations instead:"
msgstr ""

#: ../../../reference/commands/graph/build_order.rst:70
msgid ""
"$ conan graph build-order --requires libpng/1.5.30 --format json --order "
"configuration\n"
"...\n"
"======== Computing the build order ========\n"
"[\n"
"    [\n"
"        {\n"
"            \"ref\": \"zlib/1.3#5c0f3a1a222eebb6bff34980bcd3e024\",\n"
"            \"pref\": \"zlib/1.3#5c0f3a1a222eebb6bff34980bcd3e024:"
"be7ccd6109b8a8f9da81fd00ee143a1f5bbd5bbf\",\n"
"            \"package_id\": \"be7ccd6109b8a8f9da81fd00ee143a1f5bbd5bbf\",\n"
"            \"prev\": null,\n"
"            \"context\": \"host\",\n"
"            \"binary\": \"Missing\",\n"
"            \"options\": [],\n"
"            \"filenames\": [],\n"
"            \"depends\": [],\n"
"            \"overrides\": {},\n"
"            \"build_args\": null\n"
"        }\n"
"    ],\n"
"    [\n"
"        {\n"
"            \"ref\": \"libpng/1.5.30#ed8593b3f837c6c9aa766f231c917a5b\",\n"
"            \"pref\": "
"\"libpng/1.5.30#ed8593b3f837c6c9aa766f231c917a5b:235f6d8c648e7c618d86155a8c3c6efb96d61fa1\",\n"
"            \"package_id\": \"235f6d8c648e7c618d86155a8c3c6efb96d61fa1\",\n"
"            \"prev\": null,\n"
"            \"context\": \"host\",\n"
"            \"binary\": \"Missing\",\n"
"            \"options\": [],\n"
"            \"filenames\": [],\n"
"            \"depends\": [\n"
"                \"zlib/1.3#5c0f3a1a222eebb6bff34980bcd3e024:"
"be7ccd6109b8a8f9da81fd00ee143a1f5bbd5bbf\"\n"
"            ],\n"
"            \"overrides\": {},\n"
"            \"build_args\": null\n"
"        }\n"
"    ]\n"
"]"
msgstr ""
