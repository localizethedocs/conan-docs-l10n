# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:37+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../examples/conanfile/package_info/components.rst:4
msgid "Define components for Conan packages that provide multiple libraries"
msgstr ""

#: ../../../examples/conanfile/package_info/components.rst:6
msgid ""
"At the :ref:`section of the tutorial about the package_info() method "
"<tutorial_creating_define_package_info>`, we learned how to define "
"information in a package for consumers, such as library names or include and "
"library folders. In the tutorial, we created a package with only one library "
"that consumers linked to. However, in some cases, libraries provide their "
"functionalities separated into different *components*. These components can "
"be consumed independently, and in some cases, they may require other "
"components from the same library or others. For example, consider a library "
"like OpenSSL that provides *libcrypto* and *libssl*, where *libssl* depends "
"on *libcrypto*."
msgstr ""

#: ../../../examples/conanfile/package_info/components.rst:15
msgid ""
"Conan provides a way to abstract this information using the `components` "
"attribute of the `CppInfo` object to define the information for each "
"separate component of a Conan package. Consumers can also select specific "
"components to link against but not the rest of the package."
msgstr ""

#: ../../../examples/conanfile/package_info/components.rst:20
msgid ""
"Let's take a game-engine library as an example, which provides several "
"components such as *algorithms*, *ai*, *rendering*, and *network*. Both *ai* "
"and *rendering* depend on the *algorithms* component."
msgstr ""

#: ../../../examples/conanfile/package_info/components.rst:24
msgid "components of the game-engine package"
msgstr ""

#: ../../../examples/conanfile/package_info/components.rst:36
msgid ""
"Please, first clone the sources to recreate this project. You can find them "
"in the `examples2 repository <https://github.com/conan-io/examples2>`_ in "
"GitHub:"
msgstr ""

#: ../../../examples/conanfile/package_info/components.rst:39
msgid ""
"$ git clone https://github.com/conan-io/examples2.git\n"
"$ cd examples2/examples/conanfile/package_info/components"
msgstr ""

#: ../../../examples/conanfile/package_info/components.rst:45
msgid "You can check the contents of the project:"
msgstr ""

#: ../../../examples/conanfile/package_info/components.rst:47
msgid ""
".\n"
"├── CMakeLists.txt\n"
"├── conanfile.py\n"
"├── include\n"
"│   ├── ai.h\n"
"│   ├── algorithms.h\n"
"│   ├── network.h\n"
"│   └── rendering.h\n"
"├── src\n"
"│   ├── ai.cpp\n"
"│   ├── algorithms.cpp\n"
"│   ├── network.cpp\n"
"│   └── rendering.cpp\n"
"└── test_package\n"
"    ├── CMakeLists.txt\n"
"    ├── CMakeUserPresets.json\n"
"    ├── conanfile.py\n"
"    └── src\n"
"        └── example.cpp"
msgstr ""

#: ../../../examples/conanfile/package_info/components.rst:69
msgid ""
"As you can see, there are sources for each of the components and a "
"CMakeLists.txt file to build them. We also have a `test_package` that we are "
"going to use to test the consumption of the separate components."
msgstr ""

#: ../../../examples/conanfile/package_info/components.rst:73
msgid ""
"First, let's have a look at package_info() method in the *conanfile.py* and "
"how we declared the information for each component that we want to provide "
"to the consumers of the game-engine package:"
msgstr ""

#: ../../../examples/conanfile/package_info/components.rst:77
msgid ""
"...\n"
"\n"
"def package_info(self):\n"
"    self.cpp_info.components[\"algorithms\"].libs = [\"algorithms\"]\n"
"    self.cpp_info.components[\"algorithms\"]."
"set_property(\"cmake_target_name\", \"algorithms\")\n"
"\n"
"    self.cpp_info.components[\"network\"].libs = [\"network\"]\n"
"    self.cpp_info.components[\"network\"]."
"set_property(\"cmake_target_name\", \"network\")\n"
"\n"
"    self.cpp_info.components[\"ai\"].libs = [\"ai\"]\n"
"    self.cpp_info.components[\"ai\"].requires = [\"algorithms\"]\n"
"    self.cpp_info.components[\"ai\"].set_property(\"cmake_target_name\", "
"\"ai\")\n"
"\n"
"    self.cpp_info.components[\"rendering\"].libs = [\"rendering\"]\n"
"    self.cpp_info.components[\"rendering\"].requires = [\"algorithms\"]\n"
"    self.cpp_info.components[\"rendering\"]."
"set_property(\"cmake_target_name\", \"rendering\")"
msgstr ""

#: ../../../examples/conanfile/package_info/components.rst:97
msgid "There are a couple of relevant things:"
msgstr ""

#: ../../../examples/conanfile/package_info/components.rst:99
msgid ""
"We declare the libraries generated by each of the components by setting "
"information in the ``cpp_info.components`` attribute. You can set the same "
"information for each of the components as you would for the ``self."
"cpp_info`` object. The ``cpp_info`` for components has some defaults "
"defined, just like it does for :ref:`self."
"cpp_info<tutorial_creating_define_package_info>`. For example, the "
"``cpp_info.components`` object provides the ``.includedirs`` and ``."
"libdirs`` properties to define those locations, but Conan sets their value "
"as ``[\"lib\"]`` and ``[\"include\"]`` by default, so it's not necessary to "
"add them in this case."
msgstr ""

#: ../../../examples/conanfile/package_info/components.rst:108
msgid ""
"We are also declaring the components' dependencies using the ``.requires`` "
"attribute. With this attribute, you can declare requirements at the "
"component level, not only for components in the same recipe but also for "
"components from other packages that are declared as requires of the Conan "
"package."
msgstr ""

#: ../../../examples/conanfile/package_info/components.rst:113
msgid ""
"We are changing the default target names for the components using the :ref:"
"`properties model<tutorial_creating_define_package_info_properties>`. By "
"default, Conan sets a target name for components like ``<package_name::"
"component_name>``, but for this tutorial we will set the component target "
"names just with the component names omitting the ``::``."
msgstr ""

#: ../../../examples/conanfile/package_info/components.rst:119
msgid ""
"You can have a look at the consumer part by checking the *test_package* "
"folder. First the *conanfile.py*:"
msgstr ""

#: ../../../examples/conanfile/package_info/components.rst:122
msgid ""
"...\n"
"\n"
"def generate(self):\n"
"    deps = CMakeDeps(self)\n"
"    deps.check_components_exist = True\n"
"    deps.generate()"
msgstr ""

#: ../../../examples/conanfile/package_info/components.rst:131
msgid ""
"You can see that we are setting the :ref:`check_components_exist "
"<conan_tools_cmakedeps_check_components_exist>` property for CMakeDeps. This "
"is not needed, just to show how you can do if you want your consumers to "
"fail if the component does not exist. So, the CMakeLists.txt could look like "
"this:"
msgstr ""

#: ../../../examples/conanfile/package_info/components.rst:137
msgid ""
"cmake_minimum_required(VERSION 3.15)\n"
"project(PackageTest CXX)\n"
"\n"
"find_package(game-engine REQUIRED COMPONENTS algorithms network ai "
"rendering)\n"
"\n"
"add_executable(example src/example.cpp)\n"
"\n"
"target_link_libraries(example algorithms\n"
"                              network\n"
"                              ai\n"
"                              rendering)"
msgstr ""

#: ../../../examples/conanfile/package_info/components.rst:151
msgid ""
"And the ``find_package()`` call would fail if any of the components targets "
"do not exist."
msgstr ""

#: ../../../examples/conanfile/package_info/components.rst:153
msgid "Let's run the example:"
msgstr ""

#: ../../../examples/conanfile/package_info/components.rst:155
msgid ""
"$ conan create .\n"
"...\n"
"game-engine/1.0: RUN: cmake --build \"/Users/barbarian/.conan2/p/t/game-"
"d6e361d329116/b/build/Release\" -- -j16\n"
"[ 12%] Building CXX object CMakeFiles/algorithms.dir/src/algorithms.cpp.o\n"
"[ 25%] Building CXX object CMakeFiles/network.dir/src/network.cpp.o\n"
"[ 37%] Linking CXX static library libnetwork.a\n"
"[ 50%] Linking CXX static library libalgorithms.a\n"
"[ 50%] Built target network\n"
"[ 50%] Built target algorithms\n"
"[ 62%] Building CXX object CMakeFiles/ai.dir/src/ai.cpp.o\n"
"[ 75%] Building CXX object CMakeFiles/rendering.dir/src/rendering.cpp.o\n"
"[ 87%] Linking CXX static library libai.a\n"
"[100%] Linking CXX static library librendering.a\n"
"[100%] Built target ai\n"
"[100%] Built target rendering\n"
"...\n"
"\n"
"======== Launching test_package ========\n"
"\n"
"...\n"
"-- Conan: Component target declared 'algorithms'\n"
"-- Conan: Component target declared 'network'\n"
"-- Conan: Component target declared 'ai'\n"
"-- Conan: Component target declared 'rendering'\n"
"...\n"
"[ 50%] Building CXX object CMakeFiles/example.dir/src/example.cpp.o\n"
"[100%] Linking CXX executable example\n"
"[100%] Built target example\n"
"\n"
"\n"
"======== Testing the package: Executing test ========\n"
"game-engine/1.0 (test package): Running test()\n"
"game-engine/1.0 (test package): RUN: ./example\n"
"I am the algorithms component!\n"
"I am the network component!\n"
"I am the ai component!\n"
"└───> I am the algorithms component!\n"
"I am the rendering component!\n"
"└───> I am the algorithms component!"
msgstr ""

#: ../../../examples/conanfile/package_info/components.rst:197
msgid ""
"You could check that requiring a component that does not exist will raise an "
"error. Add the *nonexistent* component to the find_package() call:"
msgstr ""

#: ../../../examples/conanfile/package_info/components.rst:200
msgid ""
"cmake_minimum_required(VERSION 3.15)\n"
"project(PackageTest CXX)\n"
"\n"
"find_package(game-engine REQUIRED COMPONENTS nonexistent algorithms network "
"ai rendering)\n"
"\n"
"add_executable(example src/example.cpp)\n"
"\n"
"target_link_libraries(example algorithms\n"
"                              network\n"
"                              ai\n"
"                              rendering)"
msgstr ""

#: ../../../examples/conanfile/package_info/components.rst:214
msgid "And test the package again:"
msgstr ""

#: ../../../examples/conanfile/package_info/components.rst:216
msgid ""
"$ conan test test_package game-engine/1.0\n"
"\n"
"...\n"
"\n"
"Conan: Component 'nonexistent' NOT found in package 'game-engine'\n"
"Call Stack (most recent call first):\n"
"CMakeLists.txt:4 (find_package)\n"
"\n"
"-- Configuring incomplete, errors occurred!\n"
"\n"
"...\n"
"\n"
"ERROR: game-engine/1.0 (test package): Error in build() method, line 22\n"
"        cmake.configure()\n"
"        ConanException: Error 1 while executing"
msgstr ""

#: ../../../examples/conanfile/package_info/components.rst:237
msgid ""
"If you want to use recipes defining components in ``editable`` mode, check "
"the example in :ref:`examples_conanfile_layout_components_editables`."
msgstr ""
