# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:37+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../examples/tools/google/bazeltoolchain/build_simple_bazel_project.rst:4
msgid "Build a simple Bazel project using Conan"
msgstr ""

#: ../../../examples/tools/google/bazeltoolchain/build_simple_bazel_project.rst:6
msgid ""
"In this example, we are going to create a Hello World program that uses one "
"of the most popular C++ libraries: `fmt <https://fmt.dev/latest/index.html/"
">`_."
msgstr ""

#: ../../../examples/tools/google/bazeltoolchain/build_simple_bazel_project.rst:11
msgid ""
"This example is based on the main :ref:`Build a simple CMake project using "
"Conan<consuming_packages_build_simple_cmake_project>` tutorial. So we highly "
"recommend reading it before trying out this one."
msgstr ""

#: ../../../examples/tools/google/bazeltoolchain/build_simple_bazel_project.rst:15
msgid ""
"We'll use Bazel as the build system and helper tool in this case, so you "
"should get it installed before going forward with this example. See `how to "
"install Bazel <https://bazel.build/install>`_."
msgstr ""

#: ../../../examples/tools/google/bazeltoolchain/build_simple_bazel_project.rst:18
msgid ""
"Please, first clone the sources to recreate this project. You can find them "
"in the `examples2 repository <https://github.com/conan-io/examples2>`_ in "
"GitHub:"
msgstr ""

#: ../../../examples/tools/google/bazeltoolchain/build_simple_bazel_project.rst:21
msgid ""
"$ git clone https://github.com/conan-io/examples2.git\n"
"$ cd examples2/examples/tools/google/bazeltoolchain/string_formatter"
msgstr ""

#: ../../../examples/tools/google/bazeltoolchain/build_simple_bazel_project.rst:27
msgid "We start from a very simple C++ language project with this structure:"
msgstr ""

#: ../../../examples/tools/google/bazeltoolchain/build_simple_bazel_project.rst:29
msgid ""
".\n"
"├── WORKSPACE\n"
"├── conanfile.txt\n"
"└── main\n"
"    ├── BUILD\n"
"    └── demo.cpp"
msgstr ""

#: ../../../examples/tools/google/bazeltoolchain/build_simple_bazel_project.rst:38
msgid ""
"This project contains a *WORKSPACE* file loading the Conan dependencies (in "
"this case only ``fmt``) and a *main/BUILD* file which defines the *demo* "
"bazel target and it's in charge of using ``fmt`` to build a simple Hello "
"World program."
msgstr ""

#: ../../../examples/tools/google/bazeltoolchain/build_simple_bazel_project.rst:42
msgid "Let's have a look at each file's content:"
msgstr ""

#: ../../../examples/tools/google/bazeltoolchain/build_simple_bazel_project.rst:44
msgid "**main/demo.cpp**"
msgstr ""

#: ../../../examples/tools/google/bazeltoolchain/build_simple_bazel_project.rst:44
msgid ""
"#include <cstdlib>\n"
"#include <fmt/core.h>\n"
"\n"
"int main() {\n"
"    fmt::print(\"{} - The C++ Package Manager!\\n\", \"Conan\");\n"
"    return EXIT_SUCCESS;\n"
"}"
msgstr ""

#: ../../../examples/tools/google/bazeltoolchain/build_simple_bazel_project.rst:55
msgid "**WORKSPACE**"
msgstr ""

#: ../../../examples/tools/google/bazeltoolchain/build_simple_bazel_project.rst:55
msgid ""
"load(\"@//conan:dependencies.bzl\", \"load_conan_dependencies\")\n"
"load_conan_dependencies()"
msgstr ""

#: ../../../examples/tools/google/bazeltoolchain/build_simple_bazel_project.rst:62
msgid "**main/BUILD**"
msgstr ""

#: ../../../examples/tools/google/bazeltoolchain/build_simple_bazel_project.rst:62
msgid ""
"load(\"@rules_cc//cc:defs.bzl\", \"cc_binary\")\n"
"\n"
"cc_binary(\n"
"    name = \"demo\",\n"
"    srcs = [\"demo.cpp\"],\n"
"    deps = [\n"
"        \"@fmt//:fmt\"\n"
"    ],\n"
")"
msgstr ""

#: ../../../examples/tools/google/bazeltoolchain/build_simple_bazel_project.rst:76
msgid "**conanfile.txt**"
msgstr ""

#: ../../../examples/tools/google/bazeltoolchain/build_simple_bazel_project.rst:76
msgid ""
"[requires]\n"
"fmt/10.1.1\n"
"\n"
"[generators]\n"
"BazelDeps\n"
"BazelToolchain\n"
"\n"
"[layout]\n"
"bazel_layout"
msgstr ""

#: ../../../examples/tools/google/bazeltoolchain/build_simple_bazel_project.rst:90
msgid ""
"Conan uses the :ref:`conan_tools_google_bazeltoolchain` to generate a "
"``conan_bzl.rc`` file which defines the ``conan-config`` bazel-build "
"configuration. This file and the configuration are passed as parameters to "
"the ``bazel build`` command. Apart from that, Conan uses the :ref:"
"`conan_tools_google_bazeldeps` generator to create all the bazel files "
"(*[DEP]/BUILD.bazel* and *dependencies.bzl*) which define all the "
"dependencies as public bazel targets. The *WORKSPACE* above is already ready "
"to load the *dependencies.bzl* which will tell the *main/BUILD* all the "
"information about the ``@fmt//:fmt`` bazel target."
msgstr ""

#: ../../../examples/tools/google/bazeltoolchain/build_simple_bazel_project.rst:97
msgid ""
"As the first step, we should install all the dependencies listed in the "
"``conanfile.txt``. The command :ref:`conan "
"install<reference_commands_install>` does not only install the ``fmt`` "
"package, it also builds it from sources in case your profile does not match "
"with a pre-built binary in your remotes. Furthermore, it will save all the "
"files created by the generators listed in the ``conanfile.txt`` in a folder "
"named *conan/* (default folder defined by the ``bazel_layout``)."
msgstr ""

#: ../../../examples/tools/google/bazeltoolchain/build_simple_bazel_project.rst:103
msgid ""
"$ conan install . --build=missing\n"
"# ...\n"
"======== Finalizing install (deploy, generators) ========\n"
"conanfile.txt: Writing generators to /Users/franchuti/develop/examples2/"
"examples/tools/google/bazeltoolchain/string_formatter/conan\n"
"conanfile.txt: Generator 'BazelDeps' calling 'generate()'\n"
"conanfile.txt: Generator 'BazelToolchain' calling 'generate()'\n"
"conanfile.txt: Generating aggregated env files\n"
"conanfile.txt: Generated aggregated env files: ['conanbuild.sh', 'conanrun."
"sh']\n"
"Install finished successfully"
msgstr ""

#: ../../../examples/tools/google/bazeltoolchain/build_simple_bazel_project.rst:115
msgid "Now we are ready to build and run our application:"
msgstr ""

#: ../../../examples/tools/google/bazeltoolchain/build_simple_bazel_project.rst:117
msgid ""
"$ bazel --bazelrc=./conan/conan_bzl.rc build --config=conan-config //main:"
"demo\n"
"Starting local Bazel server and connecting to it...\n"
"INFO: Analyzed target //main:demo (38 packages loaded, 272 targets "
"configured).\n"
"INFO: Found 1 target...\n"
"INFO: From Linking main/demo:\n"
"ld: warning: ignoring duplicate libraries: '-lc++'\n"
"Target //main:demo up-to-date:\n"
"  bazel-bin/main/demo\n"
"INFO: Elapsed time: 60.180s, Critical Path: 7.68s\n"
"INFO: 6 processes: 4 internal, 2 darwin-sandbox.\n"
"INFO: Build completed successfully, 6 total actions"
msgstr ""

#: ../../../examples/tools/google/bazeltoolchain/build_simple_bazel_project.rst:132
msgid ""
"$ ./bazel-bin/main/demo\n"
"Conan - The C++ Package Manager!"
msgstr ""
