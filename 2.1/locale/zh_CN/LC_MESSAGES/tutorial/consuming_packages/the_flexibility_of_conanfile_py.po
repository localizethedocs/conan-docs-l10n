# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:37+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:4
msgid "Understanding the flexibility of using conanfile.py vs conanfile.txt"
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:6
msgid ""
"In the previous examples, we declared our dependencies (*Zlib* and *CMake*) "
"in a *conanfile.txt* file. Let's have a look at that file:"
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:9
#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:49
msgid "**conanfile.txt**"
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:9
#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:49
msgid ""
"[requires]\n"
"zlib/1.2.11\n"
"\n"
"[tool_requires]\n"
"cmake/3.22.6\n"
"\n"
"[generators]\n"
"CMakeDeps\n"
"CMakeToolchain"
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:22
msgid ""
"Using a *conanfile.txt* to build your projects using Conan it's enough for "
"simple cases, but if you need more flexibility you should use a *conanfile."
"py* file where you can use Python code to make things such as adding "
"requirements dynamically, changing options depending on other options or "
"setting options for your requirements. Let's see an example on how to "
"migrate to a *conanfile.py* and use some of those features."
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:28
msgid ""
"Please, first clone the sources to recreate this project. You can find them "
"in the `examples2 repository <https://github.com/conan-io/examples2>`_ in "
"GitHub:"
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:31
msgid ""
"$ git clone https://github.com/conan-io/examples2.git\n"
"$ cd examples2/tutorial/consuming_packages/conanfile_py"
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:36
msgid ""
"Check the contents of the folder and note that the contents are the same "
"that in the previous examples but with a *conanfile.py* instead of a "
"*conanfile.txt*."
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:39
msgid ""
".\n"
"├── CMakeLists.txt\n"
"├── conanfile.py\n"
"└── src\n"
"    └── main.c"
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:47
msgid ""
"Remember that in the previous examples the *conanfile.txt* had this "
"information:"
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:62
msgid ""
"We will translate that same information to a *conanfile.py*. This file is "
"what is typically called a **\"Conan recipe\"**. It can be used for "
"consuming packages, like in this case, and also to create packages. For our "
"current case, it will define our requirements (both libraries and build "
"tools) and logic to modify options and set how we want to consume those "
"packages. In the case of using this file to create packages, it can define "
"(among other things) how to download the package’s source code, how to build "
"the binaries from those sources, how to package the binaries, and "
"information for future consumers on how to consume the package. We will "
"explain how to use Conan recipes to create packages in the :ref:`Creating "
"Packages<tutorial_creating_packages>` section later."
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:72
msgid ""
"The equivalent of the *conanfile.txt* in form of Conan recipe could look "
"like this:"
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:74
#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:179
#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:272
#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:303
#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:325
msgid "**conanfile.py**"
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:74
msgid ""
"from conan import ConanFile\n"
"\n"
"\n"
"class CompressorRecipe(ConanFile):\n"
"    settings = \"os\", \"compiler\", \"build_type\", \"arch\"\n"
"    generators = \"CMakeToolchain\", \"CMakeDeps\"\n"
"\n"
"    def requirements(self):\n"
"        self.requires(\"zlib/1.2.11\")\n"
"\n"
"    def build_requirements(self):\n"
"        self.tool_requires(\"cmake/3.22.6\")"
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:91
msgid ""
"To create the Conan recipe we declared a new class that inherits from the "
"``ConanFile`` class. This class has different class attributes and methods:"
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:94
msgid ""
"**settings** this class attribute defines the project-wide variables, like "
"the compiler, its version, or the OS itself that may change when we build "
"our project. This is related to how Conan manages binary compatibility as "
"these values will affect the value of the **package ID** for Conan packages. "
"We will explain how Conan uses this value to manage binary compatibility "
"later."
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:99
msgid ""
"**generators** this class attribute specifies which Conan generators will be "
"run when we call the :command:`conan install` command. In this case, we "
"added **CMakeToolchain** and **CMakeDeps** as in the *conanfile.txt*."
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:102
msgid ""
"**requirements()** in this method we use the ``self.requires()`` method to "
"declare the *zlib/1.2.11* dependency."
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:104
msgid ""
"**build_requirements()** in this method we use the ``self.tool_requires()`` "
"method to declare the *cmake/3.22.6* dependency."
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:109
msgid ""
"It's not strictly necessary to add the dependencies to the tools in "
"``build_requirements()``, as in theory everything within this method could "
"be done in the ``requirements()`` method. However, ``build_requirements()`` "
"provides a dedicated place to define ``tool_requires`` and "
"``test_requires``, which helps in keeping the structure organized and clear. "
"For more information, please check the :ref:"
"`requirements()<reference_conanfile_methods_requirements>` and :ref:"
"`build_requirements()<reference_conanfile_methods_build_requirements>` docs."
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:117
msgid ""
"You can check that running the same commands as in the previous examples "
"will lead to the same results as before."
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:120
#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:227
msgid "Windows"
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:120
msgid ""
"$ conan install . --output-folder=build --build=missing\n"
"$ cd build\n"
"$ conanbuild.bat\n"
"# assuming Visual Studio 15 2017 is your VS version and that it matches your "
"default profile\n"
"$ cmake .. -G \"Visual Studio 15 2017\" -"
"DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake\n"
"$ cmake --build . --config Release\n"
"...\n"
"Building with CMake version: 3.22.6\n"
"...\n"
"[100%] Built target compressor\n"
"\n"
"$ Release\\compressor.exe\n"
"Uncompressed size is: 233\n"
"Compressed size is: 147\n"
"ZLIB VERSION: 1.2.11\n"
"$ deactivate_conanbuild.bat"
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:140
#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:247
msgid "Linux, macOS"
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:140
msgid ""
"$ conan install . --output-folder build --build=missing\n"
"$ cd build\n"
"$ source conanbuild.sh\n"
"Capturing current environment in deactivate_conanbuildenv-release-x86_64.sh\n"
"Configuring environment variables\n"
"$ cmake .. -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -"
"DCMAKE_BUILD_TYPE=Release\n"
"$ cmake --build .\n"
"...\n"
"Building with CMake version: 3.22.6\n"
"...\n"
"[100%] Built target compressor\n"
"\n"
"$ ./compressor\n"
"Uncompressed size is: 233\n"
"Compressed size is: 147\n"
"ZLIB VERSION: 1.2.11\n"
"$ source deactivate_conanbuild.sh"
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:161
msgid ""
"So far we have achieved the same functionality we had using a *conanfile."
"txt*, let's see how we can take advantage of the capabilities of the "
"*conanfile.py* to define the project structure we want to follow and also to "
"add some logic using Conan settings and options."
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:168
msgid "Use the layout() method"
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:170
msgid ""
"In the previous examples, every time we executed a `conan install` command, "
"we had to use the `--output-folder` argument to define where we wanted to "
"create the files that Conan generates. There's a neater way to decide where "
"we want Conan to generate the files for the build system that will allow us "
"to decide, for example, if we want different output folders depending on the "
"type of CMake generator we are using. You can define this directly in the "
"`conanfile.py` inside the `layout()` method and make it work for every "
"platform without adding more changes."
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:179
msgid ""
"import os\n"
"\n"
"from conan import ConanFile\n"
"\n"
"\n"
"class CompressorRecipe(ConanFile):\n"
"    settings = \"os\", \"compiler\", \"build_type\", \"arch\"\n"
"    generators = \"CMakeToolchain\", \"CMakeDeps\"\n"
"\n"
"    def requirements(self):\n"
"        self.requires(\"zlib/1.2.11\")\n"
"        if self.settings.os == \"Windows\":\n"
"            self.requires(\"base64/0.4.0\")\n"
"\n"
"    def build_requirements(self):\n"
"        if self.settings.os != \"Windows\":\n"
"            self.tool_requires(\"cmake/3.22.6\")\n"
"\n"
"    def layout(self):\n"
"        # We make the assumption that if the compiler is msvc the\n"
"        # CMake generator is multi-config\n"
"        multi = True if self.settings.get_safe(\"compiler\") == \"msvc\" "
"else False\n"
"        if multi:\n"
"            self.folders.generators = os.path.join(\"build\", "
"\"generators\")\n"
"            self.folders.build = \"build\"\n"
"        else:\n"
"            self.folders.generators = os.path.join(\"build\", str(self."
"settings.build_type), \"generators\")\n"
"            self.folders.build = os.path.join(\"build\", str(self.settings."
"build_type))"
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:212
msgid ""
"As you can see, we defined the **self.folders.generators** attribute in the "
"`layout()` method. This is the folder where all the auxiliary files "
"generated by Conan (CMake toolchain and cmake dependencies files) will be "
"placed."
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:216
msgid ""
"Note that the definitions of the folders is different if it is a multi-"
"config generator (like Visual Studio), or a single-config generator (like "
"Unix Makefiles). In the first case, the folder is the same irrespective of "
"the build type, and the build system will manage the different build types "
"inside that folder. But single-config generators like Unix Makefiles, must "
"use a different folder for each different configuration (as a different "
"build_type Release/Debug). In this case we added a simple logic to consider "
"multi-config if the compiler name is `msvc`."
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:224
msgid ""
"Check that running the same commands as in the previous examples without the "
"`--output-folder` argument will lead to the same results as before:"
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:227
msgid ""
"$ conan install . --build=missing\n"
"$ cd build\n"
"$ generators\\conanbuild.bat\n"
"# assuming Visual Studio 15 2017 is your VS version and that it matches your "
"default profile\n"
"$ cmake .. -G \"Visual Studio 15 2017\" -"
"DCMAKE_TOOLCHAIN_FILE=generators\\conan_toolchain.cmake\n"
"$ cmake --build . --config Release\n"
"...\n"
"Building with CMake version: 3.22.6\n"
"...\n"
"[100%] Built target compressor\n"
"\n"
"$ Release\\compressor.exe\n"
"Uncompressed size is: 233\n"
"Compressed size is: 147\n"
"ZLIB VERSION: 1.2.11\n"
"$ generators\\deactivate_conanbuild.bat"
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:247
msgid ""
"$ conan install . --build=missing\n"
"$ cd build/Release\n"
"$ source ./generators/conanbuild.sh\n"
"Capturing current environment in deactivate_conanbuildenv-release-x86_64.sh\n"
"Configuring environment variables\n"
"$ cmake ../.. -DCMAKE_TOOLCHAIN_FILE=generators/conan_toolchain.cmake -"
"DCMAKE_BUILD_TYPE=Release\n"
"$ cmake --build .\n"
"...\n"
"Building with CMake version: 3.22.6\n"
"...\n"
"[100%] Built target compressor\n"
"\n"
"$ ./compressor\n"
"Uncompressed size is: 233\n"
"Compressed size is: 147\n"
"ZLIB VERSION: 1.2.11\n"
"$ source ./generators/deactivate_conanbuild.sh"
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:268
msgid ""
"There's no need to always write this logic in the `conanfile.py`. There are "
"some pre-defined layouts you can import and directly use in your recipe. For "
"example, for the CMake case, there's a :ref:`cmake_layout()<cmake_layout>` "
"already defined in Conan:"
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:272
msgid ""
"from conan import ConanFile\n"
"from conan.tools.cmake import cmake_layout\n"
"\n"
"\n"
"class CompressorRecipe(ConanFile):\n"
"    settings = \"os\", \"compiler\", \"build_type\", \"arch\"\n"
"    generators = \"CMakeToolchain\", \"CMakeDeps\"\n"
"\n"
"    def requirements(self):\n"
"        self.requires(\"zlib/1.2.11\")\n"
"\n"
"    def build_requirements(self):\n"
"        self.tool_requires(\"cmake/3.22.6\")\n"
"\n"
"    def layout(self):\n"
"        cmake_layout(self)"
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:294
msgid ""
"Use the validate() method to raise an error for non-supported configurations"
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:296
msgid ""
"The :ref:`validate() method<reference_conanfile_methods_validate>` is "
"evaluated when Conan loads the *conanfile.py* and you can use it to perform "
"checks of the input settings. If, for example, your project does not support "
"*armv8* architecture on macOS you can raise the `ConanInvalidConfiguration` "
"exception to make Conan return with a special error code. This will indicate "
"that the configuration used for settings or options is not supported."
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:303
msgid ""
"...\n"
"from conan.errors import ConanInvalidConfiguration\n"
"\n"
"class CompressorRecipe(ConanFile):\n"
"    ...\n"
"\n"
"    def validate(self):\n"
"        if self.settings.os == \"Macos\" and self.settings.arch == "
"\"armv8\":\n"
"            raise ConanInvalidConfiguration(\"ARM v8 not supported in "
"Macos\")"
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:318
msgid "Conditional requirements using a conanfile.py"
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:320
msgid ""
"You could add some logic to the :ref:`requirements() "
"method<reference_conanfile_methods_requirements>` to add or remove "
"requirements conditionally. Imagine, for example, that you want to add an "
"additional dependency in Windows or that you want to use the system's CMake "
"installation instead of using the Conan `tool_requires`:"
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:325
msgid ""
"from conan import ConanFile\n"
"\n"
"\n"
"class CompressorRecipe(ConanFile):\n"
"    # Binary configuration\n"
"    settings = \"os\", \"compiler\", \"build_type\", \"arch\"\n"
"    generators = \"CMakeToolchain\", \"CMakeDeps\"\n"
"\n"
"    def requirements(self):\n"
"        self.requires(\"zlib/1.2.11\")\n"
"\n"
"        # Add base64 dependency for Windows\n"
"        if self.settings.os == \"Windows\":\n"
"            self.requires(\"base64/0.4.0\")\n"
"\n"
"    def build_requirements(self):\n"
"        # Use the system's CMake for Windows\n"
"        if self.settings.os != \"Windows\":\n"
"            self.tool_requires(\"cmake/3.22.6\")"
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:352
msgid "Use the generate() method to copy resources from packages"
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:354
msgid ""
"In some scenarios, Conan packages include files that are useful or even "
"necessary for the consumption of the libraries they package. These files can "
"range from configuration files, assets, to specific files required for the "
"project to build or run correctly. Using the :ref:`generate() "
"method<reference_conanfile_methods_generate>` you can copy these files from "
"the Conan cache to your project's folder, ensuring that all required "
"resources are directly available for use."
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:361
msgid ""
"Here's an example that shows how to copy all resources from a dependency's "
"``resdirs`` directory to an ``assets`` directory within your project:"
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:365
msgid ""
"import os\n"
"from conan import ConanFile\n"
"from conan.tools.files import copy\n"
"\n"
"class MyProject(ConanFile):\n"
"\n"
"    ...\n"
"\n"
"    def generate(self):\n"
"        # Copy all resources from the dependency's resource directory\n"
"        # to the \"assets\" folder in the source directory of your project\n"
"        dep = self.dependencies[\"dep_name\"]\n"
"        copy(self, \"*\", dep.cpp_info.resdirs[0], os.path.join(self."
"source_folder, \"assets\"))"
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:382
msgid ""
"Then, after the ``conan install`` step, all those resource files will be "
"copied locally, allowing you to use them in your project's build process. "
"For a complete example of how to import files from a package in the "
"``generate()`` method, you can refer to the `blog post about using the Dear "
"ImGui library <https://blog.conan.io/2019/06/26/An-introduction-to-the-Dear-"
"ImGui-library.html>`, which demonstrates how to import bindings for the "
"library depending on the graphics API."
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:391
msgid ""
"It's important to clarify that copying libraries, whether static or shared, "
"is not necessary. Conan is designed to use the libraries from their "
"locations in the Conan local cache using :ref:`generators<conan_tools>` and :"
"ref:`environment tools<conan_tools_env_virtualrunenv>` without the need to "
"copy them to the local folder."
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:399
msgid ""
":ref:`Using \"cmake_layout\" + \"CMakeToolchain\" + \"CMakePresets feature\" "
"to build your project<examples-tools-cmake-toolchain-build-project-presets>`."
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:400
msgid ":ref:`Understanding the Conan Package layout<tutorial_package_layout>`."
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:401
msgid ""
":ref:`Documentation for all conanfile.py available "
"methods<reference_conanfile_methods>`."
msgstr ""

#: ../../../tutorial/consuming_packages/the_flexibility_of_conanfile_py.rst:402
msgid "Conditional generators in configure()"
msgstr ""
