# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:37+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/config_files/source_credentials.rst:4
msgid "source_credentials.json"
msgstr ""

#: ../../../common/experimental_warning.inc:3
msgid ""
"This feature is experimental and subject to breaking changes. See :ref:`the "
"Conan stability<stability>` section for more information."
msgstr ""

#: ../../../reference/config_files/source_credentials.rst:9
msgid ""
"When a ``conanfile.py`` recipe downloads some sources from other servers "
"with the ``download()`` or the ``get()`` helpers like:"
msgstr ""

#: ../../../reference/config_files/source_credentials.rst:11
msgid ""
"def source(self):\n"
"    # Immutable source .zip\n"
"    download(self, f\"https://server/that/need/credentials/files/tarballname-"
"{self.version}.zip\", \"downloaded.zip\")\n"
"    # Also the ``get()`` function, as it internally calls ``download()``"
msgstr ""

#: ../../../reference/config_files/source_credentials.rst:19
msgid ""
"These downloads would be typically anonymous for open-source third party "
"libraries in the internet, but it is also possible that some proprietary "
"code in a private organization or provided by a vendor would require some "
"kind of authentication."
msgstr ""

#: ../../../reference/config_files/source_credentials.rst:23
msgid ""
"For this purpose the ``source_credentials.json`` file can be provided in the "
"Conan cache. This file has the following format, in which every "
"``credentials`` entry should have a ``url`` that defines the URL that should "
"match the recipe one. If the recipe URL starts with the given one in the "
"credentials files, then the credentials will be injected. If the file "
"provides multiple credentials for multiple URLs, they will be evaluated in "
"order until the first match happens. If no match is found, no credentials "
"will be injected."
msgstr ""

#: ../../../reference/config_files/source_credentials.rst:29
msgid ""
"{\n"
"    \"credentials\": [\n"
"        {\n"
"            \"url\": \"https://server/that/need/credentials\",\n"
"            \"token\": \"mytoken\"\n"
"        }\n"
"    ]\n"
"}"
msgstr ""
"{\n"
"    \"credentials\": [\n"
"        {\n"
"            \"url\": \"https://server/that/need/credentials\",\n"
"            \"token\": \"mytoken\"\n"
"        }\n"
"    ]\n"
"}"

#: ../../../reference/config_files/source_credentials.rst:40
msgid ""
"Using the ``token`` field, will add an ``Authorization = Bearer {token}`` "
"header. This would be the preferred way of authentication, as it is "
"typically more secure than using user/password."
msgstr ""

#: ../../../reference/config_files/source_credentials.rst:43
msgid ""
"If for some reason HTTP-Basic auth with user/password is necessary it can be "
"provided with the ``user`` and ``password`` fields:"
msgstr ""

#: ../../../reference/config_files/source_credentials.rst:46
msgid ""
"{\n"
"    \"credentials\": [\n"
"        {\n"
"            \"url\": \"https://server/that/need/credentials\",\n"
"            \"user\": \"myuser\",\n"
"            \"password\": \"mypassword\"\n"
"        }\n"
"    ]\n"
"}"
msgstr ""
"{\n"
"    \"credentials\": [\n"
"        {\n"
"            \"url\": \"https://server/that/need/credentials\",\n"
"            \"user\": \"myuser\",\n"
"            \"password\": \"mypassword\"\n"
"        }\n"
"    ]\n"
"}"

#: ../../../reference/config_files/source_credentials.rst:58
msgid ""
"As a general rule, hardcoding secrets like passwords in files is strongly "
"discouraged. To avoid it, the ``source_credentials.json`` file is always "
"rendered as a jinja template, so it can do operations like getting "
"environment variables ``os.getenv()``, allowing the secrets to be configured "
"at the system or CI level:"
msgstr ""

#: ../../../reference/config_files/source_credentials.rst:63
msgid ""
"{% set mytk = os.getenv('mytoken') %}\n"
"{\n"
"    \"credentials\": [\n"
"        {\n"
"            \"url\": \"https://server/that/need/credentials\",\n"
"            \"token\": \"{{mytk}}\"\n"
"        }\n"
"    ]\n"
"}"
msgstr ""
"{% set mytk = os.getenv('mytoken') %}\n"
"{\n"
"    \"credentials\": [\n"
"        {\n"
"            \"url\": \"https://server/that/need/credentials\",\n"
"            \"token\": \"{{mytk}}\"\n"
"        }\n"
"    ]\n"
"}"

#: ../../../reference/config_files/source_credentials.rst:77
msgid "**Best practices**"
msgstr "**最佳實踐**"

#: ../../../reference/config_files/source_credentials.rst:79
msgid ""
"Avoid using URLs that encode tokens or user/password authentication in the "
"``conanfile.py`` recipes. These URLs can easily leak into logs, and can be "
"more difficult to fix in case of credentials changes (this is also valid for "
"Git repositories URLs and clones, better use other Git auth mechanisms like "
"ssh-keys)"
msgstr ""
