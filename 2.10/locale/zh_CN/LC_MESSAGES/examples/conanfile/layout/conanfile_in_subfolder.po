# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../examples/conanfile/layout/conanfile_in_subfolder.rst:4
msgid "Declaring the layout when the Conanfile is inside a subfolder"
msgstr ""

#: ../../../examples/conanfile/layout/conanfile_in_subfolder.rst:6
msgid ""
"Please, first clone the sources to recreate this project. You can find them "
"in the `examples2 repository <https://github.com/conan-io/examples2>`_ in "
"GitHub:"
msgstr ""

#: ../../../examples/conanfile/layout/conanfile_in_subfolder.rst:9
msgid ""
"$ git clone https://github.com/conan-io/examples2.git\n"
"$ cd examples2/examples/conanfile/layout/conanfile_in_subfolder"
msgstr ""

#: ../../../examples/conanfile/layout/conanfile_in_subfolder.rst:14
msgid ""
"If we have a project intended to package the code that is in the same repo "
"as the ``conanfile.py``, but the ``conanfile.py`` is not in the root of the "
"project:"
msgstr ""

#: ../../../examples/conanfile/layout/conanfile_in_subfolder.rst:17
msgid ""
".\n"
"├── CMakeLists.txt\n"
"├── conan\n"
"│   └── conanfile.py\n"
"├── include\n"
"│   └── say.h\n"
"└── src\n"
"    └── say.cpp"
msgstr ""

#: ../../../examples/conanfile/layout/conanfile_in_subfolder.rst:28
msgid "The ``conanfile.py`` would look like this:"
msgstr ""

#: ../../../examples/conanfile/layout/conanfile_in_subfolder.rst:30
msgid ""
"import os\n"
"from conan import ConanFile\n"
"from conan.tools.files import load, copy\n"
"from conan.tools.cmake import CMake\n"
"\n"
"\n"
"class PkgSay(ConanFile):\n"
"    name = \"say\"\n"
"    version = \"1.0\"\n"
"    settings = \"os\", \"compiler\", \"build_type\", \"arch\"\n"
"    generators = \"CMakeToolchain\"\n"
"\n"
"    def layout(self):\n"
"        # The root of the project is one level above\n"
"        self.folders.root = \"..\"\n"
"        # The source of the project (the root CMakeLists.txt) is the source "
"folder\n"
"        self.folders.source = \".\"\n"
"        self.folders.build = \"build\"\n"
"\n"
"    def export_sources(self):\n"
"        # The path of the CMakeLists.txt and sources we want to export are "
"one level above\n"
"        folder = os.path.join(self.recipe_folder, \"..\")\n"
"        copy(self, \"*.txt\", folder, self.export_sources_folder)\n"
"        copy(self, \"src/*.cpp\", folder, self.export_sources_folder)\n"
"        copy(self, \"include/*.h\", folder, self.export_sources_folder)\n"
"\n"
"    def source(self):\n"
"        # Check that we can see that the CMakeLists.txt is inside the source "
"folder\n"
"        cmake_file = load(self, \"CMakeLists.txt\")\n"
"\n"
"    def build(self):\n"
"        # Check that the build() method can also access the CMakeLists.txt "
"in the source folder\n"
"        path = os.path.join(self.source_folder, \"CMakeLists.txt\")\n"
"        cmake_file = load(self, path)\n"
"\n"
"        cmake = CMake(self)\n"
"        cmake.configure()\n"
"        cmake.build()\n"
"\n"
"    def package(self):\n"
"        cmake = CMake(self)\n"
"        cmake.install()"
msgstr ""

#: ../../../examples/conanfile/layout/conanfile_in_subfolder.rst:75
msgid "You can try and create the ``say`` package:"
msgstr ""

#: ../../../examples/conanfile/layout/conanfile_in_subfolder.rst:77
msgid ""
"$ cd conan\n"
"$ conan create ."
msgstr ""

#: ../../../examples/conanfile/layout/conanfile_in_subfolder.rst:84
msgid ":ref:`layout method<reference_conanfile_methods_layout>`"
msgstr ""

#: ../../../examples/conanfile/layout/conanfile_in_subfolder.rst:85
msgid ":ref:`how the package layout works<tutorial_package_layout>`."
msgstr ""
