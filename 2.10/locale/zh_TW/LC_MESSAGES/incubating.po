# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../incubating.rst:5
msgid "Incubating features"
msgstr ""

#: ../../../incubating.rst:7
msgid ""
"This section is dedicated to new features that are under development, "
"looking for user testing and feedback. They are generally behind a flag to "
"enable them to explicitly opt-in on this testing stage. They require the "
"very latest Conan version (sometimes recommended running from the "
"``develop2`` source branch), and explicitly setting those flags."
msgstr ""

#: ../../../incubating.rst:11
msgid "New CMakeDeps generator"
msgstr ""

#: ../../../incubating.rst:13
msgid ""
"This generator is designed as a replacement of the current ``CMakeDeps`` "
"generator, with multiple pending fixes and improvements that couldn't easily "
"be done in the current one without breaking:"
msgstr ""

#: ../../../incubating.rst:15
msgid ""
"Creates real SHARED/STATIC/INTERFACE IMPORTED targets, no more artificial "
"interface targets. The ``CONAN_LIB::`` and other similar targets do not "
"exist anymore."
msgstr ""

#: ../../../incubating.rst:16
msgid "Defines IMPORTED_CONFIGURATIONS for targets."
msgstr ""

#: ../../../incubating.rst:17
msgid ""
"CONFIG definition of dependencies matching the dependency ``Release/Debug/"
"etc`` ``build_type``, no longer using the consumer one."
msgstr ""

#: ../../../incubating.rst:18
msgid ""
"Definition of IMPORTED_LOCATION and IMPORTED_IMPLIB for library targets."
msgstr ""

#: ../../../incubating.rst:19
msgid ""
"Definition of LINK_LANGUAGES based on the recipe ``languages`` and "
"``cpp_info/component`` ``languages`` properties."
msgstr ""

#: ../../../incubating.rst:20
msgid ""
"All these allows better propagation of linkage requirement and visibility, "
"avoiding some linkage error of transitive shared libraries in Linux."
msgstr ""

#: ../../../incubating.rst:21
msgid ""
"Better definition of ``requires`` relationships accross components inside "
"the same package and with respect to other packages."
msgstr ""

#: ../../../incubating.rst:22
msgid ""
"It doesn't need any ``build_context_activated`` or ``build_context_suffix`` "
"to use ``tool_requires`` dependencies."
msgstr ""

#: ../../../incubating.rst:23
msgid ""
"Definition of ``cpp_info/component.exe`` information (should include the ``."
"location`` definition too), to define EXECUTABLE targets that can be run."
msgstr ""

#: ../../../incubating.rst:24
msgid ""
"Executables from ``requires`` can also be used in non cross-build scenarios. "
"When a ``tool_requires`` to the same depependency exists, then those "
"executables will have priority."
msgstr ""

#: ../../../incubating.rst:25
msgid ""
"Creation of a new ``conan_cmakedeps_paths.cmake`` that contains definitions "
"of ``<pkg>_DIR`` paths for direct finding of the dependencies. This file is "
"also planned to be used in ``cmake-conan`` to extend its usage and avoid "
"some current limitations due to the fact that a CMake driven installation "
"cannot inject a toolchain later."
msgstr ""

#: ../../../incubating.rst:27
msgid ""
"The new fields that can be defined in the ``cpp_info`` or ``cpp_info."
"components``, besides the already defined in :ref:"
"`CppInfo<conan_conanfile_model_cppinfo>` are:"
msgstr ""

#: ../../../incubating.rst:29
msgid ""
"# EXPERIMENTAL FIELDS, used exclusively by new CMakeDeps (-c tools.cmake."
"cmakedeps:new)\n"
"self.cpp_info.type  # The type of this artifact \"shared-library\", \"static-"
"library\", etc (same as package_type)\n"
"self.cpp_info.location # full location (path and filename with extension) of "
"the artifact\n"
"self.cpp_info.link_location  # Location of the import library for Windows ."
"lib associated to a dll\n"
"self.cpp_info.languages # same as \"languages\" attribute, it can be \"C\", "
"\"C++\"\n"
"self.cpp_info.exe  # Definition of an executable artifact"
msgstr ""

#: ../../../incubating.rst:38
msgid ""
"These fields will be auto-deduced from the other ``cpp_info`` and "
"``components`` definitions, like the ``libs`` or ``libdirs`` fields, but the "
"automatic deduction might have limitations. Defining them explicitly will "
"inhibit the auto deduction and use the value as provided by the recipe."
msgstr ""

#: ../../../incubating.rst:41
msgid ""
"This feature is enabled with the ``-c tools.cmake.cmakedeps:"
"new=will_break_next`` configuration. The value ``will_break_next`` will "
"change in next releases to emphasize the fact that this feature is not "
"suitable for usage beyond testing. Just by enabling this conf and forcing "
"the build of packages that use ``CMakeDeps`` will trigger the usage of the "
"new generator."
msgstr ""

#: ../../../incubating.rst:43
msgid "Known current limitations:"
msgstr ""

#: ../../../incubating.rst:45
msgid ""
"At the moment it is limited to ``xxx-config.cmake`` files. It will not "
"generate find modules yet."
msgstr ""

#: ../../../incubating.rst:46
msgid ""
"Some paths in ``conan_cmakedeps_paths.cmake`` might be missing yet, only "
"``CMAKE_PROGRAM_PATH`` is defined at the moment besides the packages "
"``<pkg>_DIR`` locations."
msgstr ""

#: ../../../incubating.rst:48 ../../../incubating.rst:126
msgid ""
"For any feedback, please open new tickets in https://github.com/conan-io/"
"conan."
msgstr ""

#: ../../../incubating.rst:51
msgid "Workspaces"
msgstr ""

#: ../../../incubating.rst:53
msgid ""
"The workspaces feature can be enabled defining the environment variable "
"``CONAN_WORKSPACE_ENABLE=will_break_next``. The value ``will_break_next`` is "
"used to emphasize that it will change in next releases, and this feature is "
"for testing only, it cannot be used in production."
msgstr ""

#: ../../../incubating.rst:56
msgid ""
"Once the feature is enabled, workspaces are defined by one or both ``conanws."
"yml`` and/or ``conanws.py`` files. By default, any Conan command will "
"traverse the file system from the current working directory until it finds "
"one of those files. That will define the \"root\" workspace folder."
msgstr ""

#: ../../../incubating.rst:59
msgid ""
"The ``conan workspace`` command allows to open, add, remove packages from "
"the current workspace. Check the ``conan workspace -h`` help and the help of "
"the subcommands to check their usage."
msgstr ""

#: ../../../incubating.rst:61
msgid ""
"Dependencies added to a workspace work as local ``editable`` dependencies. "
"They are only resolved as ``editable`` under the current workspace, if the "
"current directory is moved outside of it, those ``editable`` dependencies "
"won't be used anymore."
msgstr ""

#: ../../../incubating.rst:63
msgid ""
"The ``conanws.yml`` and ``conanws.py`` files act as a fallback, that is, by "
"default a workspace will look for an ``editables()`` function inside the "
"``conanws.py`` and use it if exists. Otherwise, it will fallback to the "
"``editables`` definition in the ``yml`` file."
msgstr ""

#: ../../../incubating.rst:65
msgid "A workspace could define editables dynamically for example:"
msgstr ""

#: ../../../incubating.rst:67
msgid "conanws.py"
msgstr ""

#: ../../../incubating.rst:67
msgid ""
"import os\n"
"name = \"myws\"\n"
"\n"
"workspace_folder = os.path.dirname(os.path.abspath(__file__))\n"
"\n"
"def editables():\n"
"   result = {}\n"
"   for f in os.listdir(workspace_folder):\n"
"      if os.path.isdir(os.path.join(workspace_folder, f)):\n"
"            name = open(os.path.join(workspace_folder, f, \"name.txt\"))."
"read().strip()\n"
"            version = open(os.path.join(workspace_folder, f,\n"
"                                       \"version.txt\")).read().strip()\n"
"            p = os.path.join(f, \"conanfile.py\").replace(\"\\\\\\\\\", \"/"
"\")\n"
"            result[f\"{name}/{version}\"] = {\"path\": p}\n"
"   return result"
msgstr ""

#: ../../../incubating.rst:87
msgid ""
"There is also a very preliminary api that could be used to load conanfiles "
"to reuse their ``set_version()`` methods, something like:"
msgstr ""

#: ../../../incubating.rst:89
msgid ""
"import os\n"
"name = \"myws\"\n"
"\n"
"def editables(*args, **kwargs):\n"
"      result = {}\n"
"      for f in os.listdir(workspace_api.folder):\n"
"         if os.path.isdir(os.path.join(workspace_api.folder, f)):\n"
"            f = os.path.join(f, \"conanfile.py\").replace(\"\\\\\\\\\", \"/"
"\")\n"
"            conanfile = workspace_api.load(f)\n"
"            result[f\"{conanfile.name}/{conanfile.version}\"] = {\"path\": "
"f}\n"
"      return result"
msgstr ""

#: ../../../incubating.rst:104
msgid ""
"Likewise, the ``home_folder``, to define an optional Conan cache location "
"for this workspace, will be a fallback. A variable in ``conanws.py`` can be "
"defined, and if it doesn't exist, it will fallback to the ``conanws.yml`` "
"one. The ``home_folder()`` can be a function too, that uses data from the "
"``conanws.yml`` and extends it dynamically, like:"
msgstr ""

#: ../../../incubating.rst:106
msgid ""
"def home_folder():\n"
"   # if the conanws.yml contains \"myfolder\", the Conan\n"
"   # cache will be in \"newmyfolder\" subfolder (relative\n"
"   # to the workspace root folder)\n"
"   return \"new\" + conanws_data[\"home_folder\"]"
msgstr ""

#: ../../../incubating.rst:115
msgid ""
"The new ``conan workspace open`` command implements a new concept. Those "
"packages containing an ``scm`` information in the ``conandata.yml`` (with "
"``git.coordinates_to_conandata()``) can be automatically cloned and checkout "
"inside the current workspace from their Conan recipe reference (including "
"recipe revision)."
msgstr ""

#: ../../../incubating.rst:118
msgid ""
"The paths in the ``conanws`` files are intended to be relative to be "
"relocatable if necessary, or could be committed to Git in mono-repo like "
"projects."
msgstr ""

#: ../../../incubating.rst:120
msgid "Limitations:"
msgstr ""

#: ../../../incubating.rst:122
msgid ""
"At the moment, the ``workspace`` feature only manages local editables "
"packages. It doesn't create any specific meta-project, or does any "
"orchestrated build."
msgstr ""

#: ../../../incubating.rst:123
msgid ""
"Note however, that the ``conan build . --build=editables`` can be used to do "
"orchestrated builds accross the workspace, as it will do builds of every "
"editable package in the workspace in the right order."
msgstr ""
