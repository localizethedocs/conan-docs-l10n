# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:32+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/extensions/deployers.rst:4
msgid "Deployers"
msgstr ""

#: ../../../reference/extensions/deployers.rst:6
msgid ""
"Deployers are a mechanism to facilitate copying files from one folder, "
"usually the Conan cache, to user folders. While Conan provides two built-in "
"ones (``full_deploy`` and ``direct_deploy``), users can easily manage their "
"own with ``conan config install``."
msgstr ""

#: ../../../reference/extensions/deployers.rst:10
msgid ""
"Deployers run before generators, and they can change the target folders. For "
"example, if the ``--deployer=full_deploy`` deployer runs before "
"``CMakeDeps``, the files generated by ``CMakeDeps`` will point to the local "
"copy in the user folder done by the ``full_deploy`` deployer, and not to the "
"Conan cache. Multiple deployers can be specified by supplying more than one "
"``--deployer=`` argument, and they will be ran in order of appearance."
msgstr ""

#: ../../../reference/extensions/deployers.rst:16
msgid ""
"Deployers can be multi-configuration. Running ``conan install . --"
"deployer=full_deploy`` repeatedly for different profiles can achieve a fully "
"self-contained project, including all the artifacts, binaries, and build "
"files. This project will be completely independent of Conan and no longer "
"require it at all to build. Use the ``--deployer-folder`` argument to change "
"the base folder output path for the deployer as desired."
msgstr ""

#: ../../../reference/extensions/deployers.rst:23
msgid "Built-in deployers"
msgstr ""

#: ../../../reference/extensions/deployers.rst:28
msgid "full_deploy"
msgstr ""

#: ../../../reference/extensions/deployers.rst:30
msgid ""
"Deploys each package folder of every dependency to your recipe's "
"``output_folder`` in a subfolder tree based on:"
msgstr ""

#: ../../../reference/extensions/deployers.rst:32
msgid "The build context"
msgstr ""

#: ../../../reference/extensions/deployers.rst:33
msgid "The dependency name and version"
msgstr ""

#: ../../../reference/extensions/deployers.rst:34
msgid "The build type"
msgstr ""

#: ../../../reference/extensions/deployers.rst:35
msgid "The build arch"
msgstr ""

#: ../../../reference/extensions/deployers.rst:37
msgid "Then every dependency will end up in a folder such as:"
msgstr ""

#: ../../../reference/extensions/deployers.rst:39
msgid "``[OUTPUT_FOLDER]/full_deploy/host/dep/0.1/Release/x86_64``"
msgstr ""

#: ../../../reference/extensions/deployers.rst:41
msgid ""
"See a full example of the usage of ``full_deploy`` deployer in :ref:"
"`examples_extensions_builtin_deployers_development`."
msgstr ""

#: ../../../reference/extensions/deployers.rst:46
msgid "direct_deploy"
msgstr ""

#: ../../../reference/extensions/deployers.rst:48
msgid ""
"Same as ``full_deploy``, but only processes your recipe's *direct* "
"dependencies. This deployer will output your dependencies in a tree folder "
"such as:"
msgstr ""

#: ../../../reference/extensions/deployers.rst:51
msgid "``[OUTPUT_FOLDER]/direct_deploy/dep``"
msgstr ""

#: ../../../reference/extensions/deployers.rst:55
msgid ""
"The built-in deployers are in **preview**. See :ref:`the Conan "
"stability<stability>` section for more information."
msgstr ""

#: ../../../reference/extensions/deployers.rst:60
msgid "configuration"
msgstr ""

#: ../../../reference/extensions/deployers.rst:62
msgid ""
"Both the ``full_deploy`` and the ``direct_deploy`` understand when the conf "
"``tools.deployer:symlinks`` is set to ``False`` to disable deployers copying "
"symlinks. This can be convenient in systems that do not support symlinks and "
"could fail if deploying packages that contain symlinks."
msgstr ""

#: ../../../reference/extensions/deployers.rst:68
msgid "Custom deployers"
msgstr ""

#: ../../../reference/extensions/deployers.rst:70
msgid ""
"Custom deployers can be managed via ``conan config install``. When looking "
"for a specific deployer, Conan will look in these locations for the deployer "
"in the following order:"
msgstr ""

#: ../../../reference/extensions/deployers.rst:73
msgid "Absolute paths"
msgstr ""

#: ../../../reference/extensions/deployers.rst:74
msgid "Relative to cwd"
msgstr ""

#: ../../../reference/extensions/deployers.rst:75
msgid "In the ``[CONAN_HOME]/extensions/deployers`` folder"
msgstr ""

#: ../../../reference/extensions/deployers.rst:76
msgid "As built-in deployers"
msgstr ""

#: ../../../reference/extensions/deployers.rst:78
msgid ""
"Conan will look for a ``deploy()`` method to call for each installed file. "
"The function signature of your custom deployers should be as follows:"
msgstr ""

#: ../../../reference/extensions/deployers.rst:82
msgid "**my_custom_deployer.py**"
msgstr ""

#: ../../../reference/extensions/deployers.rst:82
msgid "def deploy(graph, output_folder: str, **kwargs):"
msgstr ""

#: ../../../reference/extensions/deployers.rst:87
msgid ""
"(Note that the arguments are passed as named parameters, so both the "
"``graph`` and ``output_folder`` names are mandatory)"
msgstr ""

#: ../../../reference/extensions/deployers.rst:89
msgid ""
"The ``**kwargs`` is mandatory even if not used, as new arguments can be "
"added in future Conan versions, and those would break if ``**kwargs`` is not "
"defined."
msgstr ""

#: ../../../reference/extensions/deployers.rst:92
msgid ""
"You can access your conanfile object with ``graph.root.conanfile``. See :ref:"
"`ConanFile.dependencies<conan_conanfile_model_dependencies>` for information "
"on how to iterate over its dependencies. Your custom deployer can now be "
"invoked as if it were a built-in deployer using the filename in which it's "
"found, in this case ``conan install . --deployer=my_custom_deployer``. Note "
"that supplying the **.py** extension is optional."
msgstr ""

#: ../../../reference/extensions/deployers.rst:97
msgid ""
"See the :ref:`custom deployers<examples_extensions_deployers>` section for "
"examples on how to implement your own deployers."
msgstr ""
