# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:32+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../devops/versioning/resolve_prereleases.rst:4
msgid "Handling version ranges and pre-releases"
msgstr ""

#: ../../../devops/versioning/resolve_prereleases.rst:6
msgid ""
"When developing a package and using version ranges for defining our "
"dependencies, there might come a time when a new version of a dependency "
"gets a new pre-release version that we would like to test before it's "
"released to have a change to validate the new version ahead of time."
msgstr ""

#: ../../../devops/versioning/resolve_prereleases.rst:10
msgid ""
"At first glance, it could be expected that the new version matches our range "
"if it intersect it, but :ref:`as described in the version ranges "
"tutorial<tutorial_version_ranges_expressions>`, by default Conan does not "
"match pre-release versions to ranges that don't specify it. Conan provides "
"the :ref:`global.conf<reference_config_files_global_conf>` ``core."
"version_ranges:resolve_prereleases``, which when set to ``True``, enables "
"pre-release matching in version ranges. This avoids having to modify and "
"export the recipes of your dependency graph, which would become unfeasible "
"for large ones."
msgstr ""

#: ../../../devops/versioning/resolve_prereleases.rst:17
msgid ""
"This conf has the added benefit of affecting the whole dependency graph, so "
"that if any of our dependencies also define a requirement to our library of "
"interest, the new version will also be picked up by it."
msgstr ""

#: ../../../devops/versioning/resolve_prereleases.rst:20
msgid ""
"Let's see this in action. Imagine we have the following (summarized) "
"dependency graph, in which we depend on ``libpng`` and ``libmysqlclient``, "
"both of which depend on ``zlib`` via the ``[>1.2 <2]`` version range:"
msgstr ""

#: ../../../devops/versioning/resolve_prereleases.rst:34
msgid ""
"If ``zlib/1.3-pre`` is now published, using it is as easy as modifying your :"
"ref:`global.conf<reference_config_files_global_conf>` file and adding the "
"line ``core.version_ranges:resolve_prereleases=True`` (or adding the ``--"
"core-conf core.version_ranges:resolve_prereleases=True`` CLI argument to "
"your command invocations), after which, running ``conan create`` will now "
"output the expected prerelease version of ``zlib`` being used:"
msgstr ""

#: ../../../devops/versioning/resolve_prereleases.rst:39
msgid ""
"...\n"
"\n"
"======== Computing dependency graph ========\n"
"Graph root\n"
"   cli\n"
"Requirements\n"
"   libmysqlclient/8.1.0#493d36bd9641e15993479706dea3c341 - Cache\n"
"   libpng/1.6.40#2ba025f1324ff820cf68c9e9c94b7772 - Cache\n"
"   lz4/1.9.4#b572cad582ca4d39c0fccb5185fbb691 - Cache\n"
"   openssl/3.1.2#f2eb8e67d3f5513e8a9b5e3b62d87ea1 - Cache\n"
"   zlib/1.3-pre#f2eb8e6ve24ff825bca32bea494b77dd - Cache\n"
"   zstd/1.5.5#54d99a44717a7ff82e9d37f9b6ff415c - Cache\n"
"Build requirements\n"
"   cmake/3.27.1#de7930d308bf5edde100f2b1624841d9 - Cache\n"
"Resolved version ranges\n"
"   cmake/[>=3.18 <4]: cmake/3.27.1\n"
"   openssl/[>=1.1 <4]: openssl/3.1.2\n"
"   zlib/[>1.2 <2]: zlib/1.3-pre\n"
"..."
msgstr ""

#: ../../../devops/versioning/resolve_prereleases.rst:62
msgid ""
"Now our package can be tested and validated against this new version, and "
"the conf be afterwards removed once the testing is over to go back to the "
"usual Conan behaviour."
msgstr ""
