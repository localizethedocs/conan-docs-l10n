# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../examples/extensions/deployers/sources/custom_deployer_sources.rst:4
msgid "Copy sources from all your dependencies"
msgstr ""

#: ../../../examples/extensions/deployers/sources/custom_deployer_sources.rst:8
msgid ""
"Please, first clone the sources to recreate this project. You can find them "
"in the `examples2 repository <https://github.com/conan-io/examples2>`_ in "
"GitHub:"
msgstr ""

#: ../../../examples/extensions/deployers/sources/custom_deployer_sources.rst:11
msgid ""
"$ git clone https://github.com/conan-io/examples2.git\n"
"$ cd examples2/examples/extensions/deployers/sources"
msgstr ""

#: ../../../examples/extensions/deployers/sources/custom_deployer_sources.rst:17
msgid ""
"In this example we are going to see how to create and use a custom deployer. "
"This deployer copies all the source files from your dependencies and puts "
"them into a specific output folder"
msgstr ""

#: ../../../examples/extensions/deployers/sources/custom_deployer_sources.rst:22
msgid ""
"To better understand this example, it is highly recommended to have "
"previously read the :ref:`Deployers "
"<reference_extensions_deployer_direct_deploy>` reference."
msgstr ""

#: ../../../examples/extensions/deployers/sources/custom_deployer_sources.rst:26
msgid "Locate the deployer"
msgstr "定位部署器"

#: ../../../examples/extensions/deployers/sources/custom_deployer_sources.rst:28
msgid ""
"In this case, the deployer is located in the same directory as our example "
"conanfile, but as shown in :ref:`Deployers "
"<reference_extensions_deployer_direct_deploy>` reference, Conan will look "
"for the specified deployer in a few extra places in order, namely:"
msgstr ""

#: ../../../examples/extensions/deployers/sources/custom_deployer_sources.rst:32
msgid "Absolute paths"
msgstr "絕對路徑"

#: ../../../examples/extensions/deployers/sources/custom_deployer_sources.rst:33
msgid "Relative to cwd"
msgstr ""

#: ../../../examples/extensions/deployers/sources/custom_deployer_sources.rst:34
msgid "In the ``[CONAN_HOME]/extensions/deployers`` folder"
msgstr ""

#: ../../../examples/extensions/deployers/sources/custom_deployer_sources.rst:35
msgid "Built-in deployers"
msgstr ""

#: ../../../examples/extensions/deployers/sources/custom_deployer_sources.rst:39
msgid "Run it"
msgstr ""

#: ../../../examples/extensions/deployers/sources/custom_deployer_sources.rst:41
msgid ""
"For our example, we have a simple recipe that lists both ``zlib`` and "
"``mcap`` as requirements. With the help of the ``tools.build:"
"download_source=True`` conf, we can force the invocation of its ``source()`` "
"method, which will ensure that sources are available even if no build needs "
"to be carried out."
msgstr ""

#: ../../../examples/extensions/deployers/sources/custom_deployer_sources.rst:45
msgid ""
"Now, you should be able to use the new deployer in both ``conan install`` "
"and ``conan graph`` commands for any given recipe:"
msgstr ""

#: ../../../examples/extensions/deployers/sources/custom_deployer_sources.rst:47
msgid ""
"$ conan graph info . -c tools.build:download_source=True --"
"deployer=sources_deploy"
msgstr ""
"$ conan graph info . -c tools.build:download_source=True --"
"deployer=sources_deploy"

#: ../../../examples/extensions/deployers/sources/custom_deployer_sources.rst:52
msgid ""
"Inspecting the command output we can see that it copied the sources of our "
"direct dependencies ``zlib`` and ``mcap``, **plus** the sources of our "
"transitive dependencies, ``zstd`` and ``lz4`` to a ``dependencies_sources`` "
"folder. After this is done, extra preprocessing could be done to accomplish "
"more specific needs."
msgstr ""

#: ../../../examples/extensions/deployers/sources/custom_deployer_sources.rst:56
msgid ""
"Note that you can pass the ``--deployer-folder`` argument to change the base "
"folder output path for the deployer."
msgstr ""

#: ../../../examples/extensions/deployers/sources/custom_deployer_sources.rst:59
msgid "Code tour"
msgstr ""

#: ../../../examples/extensions/deployers/sources/custom_deployer_sources.rst:61
msgid "The **source_deploy.py** file has the following code:"
msgstr ""

#: ../../../examples/extensions/deployers/sources/custom_deployer_sources.rst:65
msgid "**sources_deploy.py**"
msgstr ""

#: ../../../examples/extensions/deployers/sources/custom_deployer_sources.rst:65
msgid ""
"from conan.tools.files import copy\n"
"import os\n"
"\n"
"\n"
"def deploy(graph, output_folder, **kwargs):\n"
"    # Note the kwargs argument is mandatory to be robust against future "
"changes.\n"
"    for name, dep in graph.root.conanfile.dependencies.items():\n"
"        if dep.folders is None or dep.folders.source_folder is None:\n"
"            raise ConanException(f\"Sources missing for {name} dependency."
"\\n\"\n"
"                                  \"This deployer needs the sources of every "
"dependency present to work, either building from source, \"\n"
"                                  \"or by using the 'tools.build:"
"download_source' conf.\")\n"
"        copy(graph.root.conanfile, \"*\", dep.folders.source_folder, os.path."
"join(output_folder, \"dependency_sources\", str(dep)))"
msgstr ""

#: ../../../examples/extensions/deployers/sources/custom_deployer_sources.rst:83
msgid "deploy()"
msgstr ""

#: ../../../examples/extensions/deployers/sources/custom_deployer_sources.rst:85
msgid ""
"The ``deploy()`` method is called by Conan, and gets both a dependency graph "
"and an output folder path as arguments. It iterates all the dependencies of "
"our recipe and copies every source file to their respective folders under "
"``dependencies_sources`` using :ref:`conan.tools."
"copy<conan_tools_files_copy>`."
msgstr ""

#: ../../../examples/extensions/deployers/sources/custom_deployer_sources.rst:92
msgid ""
"If you're using this deployer as an example for your own, remember that "
"``tools.build:download_source=True`` is necessary so that ``dep.folders."
"source_folder`` is defined for the dependencies. Without the conf, said "
"variable will not be defined for those dependencies that do not need to be "
"built from sources nor in those commands that do not require building, such "
"as :command:`conan graph`."
msgstr ""

#: ../../../examples/extensions/deployers/sources/custom_deployer_sources.rst:99
msgid ""
"If your custom deployer needs access to the full dependency graph, including "
"those libraries that might be skipped, use the ``tools.graph:"
"skip_binaries=False`` conf. This is useful for collecting, for example, all "
"the licenses in your graph."
msgstr ""
