# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:31+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:4
msgid "Build a simple CMake project using Conan"
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:6
msgid ""
"Let's get started with an example: We are going to create a string "
"compressor application that uses one of the most popular C++ libraries: "
"`Zlib <https://zlib.net/>`__."
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:9
msgid ""
"We'll use CMake as build system in this case but keep in mind that Conan "
"**works with any build system** and is not limited to using CMake. You can "
"check more examples with other build systems in the :ref:`Read More "
"section<consuming_packages_read_more>`."
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:15
msgid ""
"Please, first clone the sources to recreate this project, you can find them "
"in the `examples2 repository <https://github.com/conan-io/examples2>`_ in "
"GitHub:"
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:18
msgid ""
"$ git clone https://github.com/conan-io/examples2.git\n"
"$ cd examples2/tutorial/consuming_packages/simple_cmake_project"
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:24
msgid "We start from a very simple C language project with this structure:"
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:26
msgid ""
".\n"
"├── CMakeLists.txt\n"
"└── src\n"
"    └── main.c"
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:33
msgid ""
"This project contains a basic *CMakeLists.txt* including the **zlib** "
"dependency and the source code for the string compressor program in *main.c*."
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:36
msgid "Let's have a look at the *main.c* file:"
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:38
msgid "**main.c**"
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:38
msgid ""
"#include <stdlib.h>\n"
"#include <stdio.h>\n"
"#include <string.h>\n"
"\n"
"#include <zlib.h>\n"
"\n"
"int main(void) {\n"
"    char buffer_in [256] = {\"Conan is a MIT-licensed, Open Source package "
"manager for C and C++ development \"\n"
"                            \"for C and C++ development, allowing "
"development teams to easily and efficiently \"\n"
"                            \"manage their packages and dependencies across "
"platforms and build systems.\"};\n"
"    char buffer_out [256] = {0};\n"
"\n"
"    z_stream defstream;\n"
"    defstream.zalloc = Z_NULL;\n"
"    defstream.zfree = Z_NULL;\n"
"    defstream.opaque = Z_NULL;\n"
"    defstream.avail_in = (uInt) strlen(buffer_in);\n"
"    defstream.next_in = (Bytef *) buffer_in;\n"
"    defstream.avail_out = (uInt) sizeof(buffer_out);\n"
"    defstream.next_out = (Bytef *) buffer_out;\n"
"\n"
"    deflateInit(&defstream, Z_BEST_COMPRESSION);\n"
"    deflate(&defstream, Z_FINISH);\n"
"    deflateEnd(&defstream);\n"
"\n"
"    printf(\"Uncompressed size is: %lu\\n\", strlen(buffer_in));\n"
"    printf(\"Compressed size is: %lu\\n\", strlen(buffer_out));\n"
"\n"
"    printf(\"ZLIB VERSION: %s\\n\", zlibVersion());\n"
"\n"
"    return EXIT_SUCCESS;\n"
"}"
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:74
msgid "Also, the contents of *CMakeLists.txt* are:"
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:76
msgid "**CMakeLists.txt**"
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:76
msgid ""
"cmake_minimum_required(VERSION 3.15)\n"
"project(compressor C)\n"
"\n"
"find_package(ZLIB REQUIRED)\n"
"\n"
"add_executable(${PROJECT_NAME} src/main.c)\n"
"target_link_libraries(${PROJECT_NAME} ZLIB::ZLIB)"
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:87
msgid ""
"Our application relies on the **Zlib** library. Conan, by default, tries to "
"install libraries from a remote server called `ConanCenter <https://conan.io/"
"center/>`_. You can search there for libraries and also check the available "
"versions. In our case, after checking the available versions for `Zlib "
"<https://conan.io/center/zlib>`__ we choose to use one of the latest "
"versions: **zlib/1.2.11**."
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:93
msgid ""
"The easiest way to install the **Zlib** library and find it from our project "
"with Conan is using a *conanfile.txt* file. Let's create one with the "
"following content:"
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:96
msgid "**conanfile.txt**"
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:96
msgid ""
"[requires]\n"
"zlib/1.2.11\n"
"\n"
"[generators]\n"
"CMakeDeps\n"
"CMakeToolchain"
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:106
msgid ""
"As you can see we added two sections to this file with a syntax similar to "
"an *INI* file."
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:108
msgid ""
"**[requires]** section is where we declare the libraries we want to use in "
"the project, in this case, **zlib/1.2.11**."
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:111
msgid ""
"**[generators]** section tells Conan to generate the files that the "
"compilers or build systems will use to find the dependencies and build the "
"project. In this case, as our project is based in *CMake*, we will use :ref:"
"`CMakeDeps<conan_tools_cmakedeps>` to generate information about where the "
"**Zlib** library files are installed and :ref:"
"`CMakeToolchain<conan_tools_cmaketoolchain>` to pass build information to "
"*CMake* using a *CMake* toolchain file."
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:118
msgid ""
"Besides the *conanfile.txt*, we need a **Conan profile** to build our "
"project. Conan profiles allow users to define a configuration set for things "
"like the compiler, build configuration, architecture, shared or static "
"libraries, etc. Conan, by default, will not try to detect a profile "
"automatically, so we need to create one. To let Conan try to guess the "
"profile, based on the current operating system and installed tools, please "
"run:"
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:125
msgid "conan profile detect --force"
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:129
msgid ""
"This will detect the operating system, build architecture and compiler "
"settings based on the environment. It will also set the build configuration "
"as *Release* by default. The generated profile will be stored in the Conan "
"home folder with name *default* and will be used by Conan in all commands by "
"default unless another profile is specified via the command line. An example "
"of the output of this command for MacOS would be:"
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:135
msgid ""
"$ conan profile detect --force\n"
"Found apple-clang 14.0\n"
"apple-clang>=13, using the major as version\n"
"Detected profile:\n"
"[settings]\n"
"arch=x86_64\n"
"build_type=Release\n"
"compiler=apple-clang\n"
"compiler.cppstd=gnu17\n"
"compiler.libcxx=libc++\n"
"compiler.version=14\n"
"os=Macos"
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:150
msgid "**A note about the detected C++ standard by Conan**"
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:152
msgid ""
"Conan will always set the default C++ standard as the one that the detected "
"compiler version uses by default, except for the case of macOS using apple-"
"clang. In this case, for apple-clang>=11, it sets ``compiler.cppstd=gnu17``. "
"If you want to use a different C++ standard, you can edit the default "
"profile file directly. First, get the location of the default profile using:"
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:158
msgid ""
"$ conan profile path default\n"
"/Users/user/.conan2/profiles/default"
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:163
msgid ""
"Then open and edit the file and set ``compiler.cppstd`` to the C++ standard "
"you want to use."
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:166
msgid "**Using a compiler other than the auto-detected one**"
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:168
msgid ""
"If you want to change a Conan profile to use a compiler different from the "
"default one, you need to change the ``compiler`` setting and also tell Conan "
"explicitly where to find it using the :ref:`tools.build:compiler_executables "
"configuration<conan-cmake-toolchain_conf>`."
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:173
msgid ""
"We will use Conan to install **Zlib** and generate the files that CMake "
"needs to find this library and build our project. We will generate those "
"files in the folder *build*. To do that, run:"
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:177
msgid "$ conan install . --output-folder=build --build=missing"
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:182
msgid "You will get something similar to this as the output of that command:"
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:184
msgid ""
"$ conan install . --output-folder=build --build=missing\n"
"...\n"
"-------- Computing dependency graph ----------\n"
"zlib/1.2.11: Not found in local cache, looking in remotes...\n"
"zlib/1.2.11: Checking remote: conancenter\n"
"zlib/1.2.11: Trying with 'conancenter'...\n"
"Downloading conanmanifest.txt\n"
"Downloading conanfile.py\n"
"Downloading conan_export.tgz\n"
"Decompressing conan_export.tgz\n"
"zlib/1.2.11: Downloaded recipe revision f1fadf0d3b196dc0332750354ad8ab7b\n"
"Graph root\n"
"    conanfile.txt: /home/conan/examples2/tutorial/consuming_packages/"
"simple_cmake_project/conanfile.txt\n"
"Requirements\n"
"    zlib/1.2.11#f1fadf0d3b196dc0332750354ad8ab7b - Downloaded (conancenter)\n"
"\n"
"-------- Computing necessary packages ----------\n"
"Requirements\n"
"    zlib/1.2.11#f1fadf0d3b196dc0332750354ad8ab7b:"
"cdc9a35e010a17fc90bb845108cf86cfcbce64bf#dd7bf2a1ab4eb5d1943598c09b616121 - "
"Download (conancenter)\n"
"\n"
"-------- Installing packages ----------\n"
"\n"
"Installing (downloading, building) binaries...\n"
"zlib/1.2.11: Retrieving package cdc9a35e010a17fc90bb845108cf86cfcbce64bf "
"from remote 'conancenter'\n"
"Downloading conanmanifest.txt\n"
"Downloading conaninfo.txt\n"
"Downloading conan_package.tgz\n"
"Decompressing conan_package.tgz\n"
"zlib/1.2.11: Package installed cdc9a35e010a17fc90bb845108cf86cfcbce64bf\n"
"zlib/1.2.11: Downloaded package revision dd7bf2a1ab4eb5d1943598c09b616121\n"
"\n"
"-------- Finalizing install (deploy, generators) ----------\n"
"conanfile.txt: Generator 'CMakeToolchain' calling 'generate()'\n"
"conanfile.txt: Generator 'CMakeDeps' calling 'generate()'\n"
"conanfile.txt: Generating aggregated env files"
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:223
msgid ""
"As you can see in the output, there are a couple of things that happened:"
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:225
msgid ""
"Conan installed the *Zlib* library from the remote server, which should be "
"the Conan Center server by default if the library is available. This server "
"stores both the Conan recipes, which are the files that define how libraries "
"must be built, and the binaries that can be reused so we don't have to build "
"from sources every time."
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:229
msgid ""
"Conan generated several files under the **build** folder. Those files were "
"generated by both the ``CMakeToolchain`` and ``CMakeDeps`` generators we set "
"in the **conanfile.txt**. ``CMakeDeps`` generates files so that CMake finds "
"the Zlib library we have just downloaded. On the other side, "
"``CMakeToolchain`` generates a toolchain file for CMake so that we can "
"transparently build our project with CMake using the same settings that we "
"detected for our default profile."
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:237
msgid "Now we are ready to build and run our **compressor** app:"
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:239
msgid "Windows"
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:239
msgid ""
"$ cd build\n"
"# assuming Visual Studio 15 2017 is your VS version and that it matches your "
"default profile\n"
"$ cmake .. -G \"Visual Studio 15 2017\" -"
"DCMAKE_TOOLCHAIN_FILE=\"conan_toolchain.cmake\"\n"
"$ cmake --build . --config Release\n"
"...\n"
"[100%] Built target compressor\n"
"$ Release\\compressor.exe\n"
"Uncompressed size is: 233\n"
"Compressed size is: 147\n"
"ZLIB VERSION: 1.2.11"
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:253
msgid "Linux, macOS"
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:253
msgid ""
"$ cd build\n"
"$ cmake .. -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -"
"DCMAKE_BUILD_TYPE=Release\n"
"$ cmake --build .\n"
"...\n"
"[100%] Built target compressor\n"
"$ ./compressor\n"
"Uncompressed size is: 233\n"
"Compressed size is: 147\n"
"ZLIB VERSION: 1.2.11"
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:267
msgid ""
"Note that ``CMakeToolchain`` might generate CMake **presets** files, that "
"allows users with a modern CMake (``>=3.23``) to use them with ``cmake --"
"preset`` instead of passing the toolchain file argument. See :ref:`Building "
"with CMake presets<examples-tools-cmake-toolchain-build-project-presets>`"
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:276
msgid ""
":ref:`Building with CMake presets<examples-tools-cmake-toolchain-build-"
"project-presets>`"
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:277
msgid ""
":ref:`Getting started with "
"Autotools<examples_tools_autotools_autotools_toolchain_build_project_autotools_toolchain>`"
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:278
msgid ""
":ref:`Getting started with "
"Meson<examples_tools_meson_toolchain_build_simple_meson_project>`"
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:279
msgid ""
":ref:`Getting started with "
"Bazel<examples_tools_bazel_toolchain_build_simple_bazel_project>`"
msgstr ""

#: ../../../tutorial/consuming_packages/build_simple_cmake_project.rst:280
msgid ""
":ref:`Getting started with Bazel 7."
"x<examples_tools_bazel_7x_toolchain_build_simple_bazel_project>`"
msgstr ""
