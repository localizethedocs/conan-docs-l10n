# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../examples/conanfile/layout/editable_components.rst:4
msgid "Using components and editable packages"
msgstr ""

#: ../../../examples/conanfile/layout/editable_components.rst:6
msgid ""
"It is possible to define components in the ``layout()`` method, to support "
"the case of ``editable`` packages. That is, if we want to put a package in "
"``editable`` mode, and that package defines ``components``, it is necessary "
"to define the components layout correctly in the ``layout()`` method. Let's "
"see it in a real example."
msgstr ""

#: ../../../examples/conanfile/layout/editable_components.rst:11
msgid ""
"Please, first clone the sources to recreate this project. You can find them "
"in the `examples2 repository <https://github.com/conan-io/examples2>`_ in "
"GitHub:"
msgstr ""

#: ../../../examples/conanfile/layout/editable_components.rst:14
msgid ""
"$ git clone https://github.com/conan-io/examples2.git\n"
"$ cd examples2/examples/conanfile/layout/editable_components"
msgstr ""

#: ../../../examples/conanfile/layout/editable_components.rst:19
msgid ""
"There we find a ``greetings`` subfolder and package, that contains 2 "
"libraries, the ``hello`` library and the ``bye`` library. Each one is "
"modeled as a ``component`` inside the package recipe:"
msgstr ""

#: ../../../examples/conanfile/layout/editable_components.rst:22
msgid "greetings/conanfile.py"
msgstr ""

#: ../../../examples/conanfile/layout/editable_components.rst:22
msgid ""
"class GreetingsConan(ConanFile):\n"
"    name = \"greetings\"\n"
"    version = \"0.1\"\n"
"    settings = \"os\", \"compiler\", \"build_type\", \"arch\"\n"
"    generators = \"CMakeDeps\", \"CMakeToolchain\"\n"
"    exports_sources = \"src/*\"\n"
"\n"
"    def build(self):\n"
"        cmake = CMake(self)\n"
"        cmake.configure()\n"
"        cmake.build()\n"
"\n"
"    def layout(self):\n"
"        cmake_layout(self, src_folder=\"src\")\n"
"        # This \"includedirs\" starts in the source folder, which is "
"\"src\"\n"
"        # So the components include dirs is the \"src\" folder (includes "
"are\n"
"        # intended to be included as ``#include \"hello/hello.h\"``)\n"
"        self.cpp.source.components[\"hello\"].includedirs = [\".\"]\n"
"        self.cpp.source.components[\"bye\"].includedirs = [\".\"]\n"
"        # compiled libraries \"libdirs\" will be inside the \"build\" "
"folder, depending\n"
"        # on the platform they will be in \"build/Release\" or directly in "
"\"build\" folder\n"
"        bt = \".\" if self.settings.os != \"Windows\" else str(self.settings."
"build_type)\n"
"        self.cpp.build.components[\"hello\"].libdirs = [bt]\n"
"        self.cpp.build.components[\"bye\"].libdirs = [bt]\n"
"\n"
"    def package(self):\n"
"        copy(self, \"*.h\", src=self.source_folder,\n"
"             dst=join(self.package_folder, \"include\"))\n"
"        copy(self, \"*.lib\", src=self.build_folder,\n"
"             dst=join(self.package_folder, \"lib\"), keep_path=False)\n"
"        copy(self, \"*.a\", src=self.build_folder,\n"
"             dst=join(self.package_folder, \"lib\"), keep_path=False)\n"
"\n"
"    def package_info(self):\n"
"        self.cpp_info.components[\"hello\"].libs = [\"hello\"]\n"
"        self.cpp_info.components[\"bye\"].libs = [\"bye\"]\n"
"\n"
"        self.cpp_info.set_property(\"cmake_file_name\", \"MYG\")\n"
"        self.cpp_info.set_property(\"cmake_target_name\", \"MyGreetings::"
"MyGreetings\")\n"
"        self.cpp_info.components[\"hello\"]."
"set_property(\"cmake_target_name\", \"MyGreetings::MyHello\")\n"
"        self.cpp_info.components[\"bye\"]."
"set_property(\"cmake_target_name\", \"MyGreetings::MyBye\")"
msgstr ""

#: ../../../examples/conanfile/layout/editable_components.rst:67
msgid ""
"While the location of the ``hello`` and ``bye`` libraries in the final "
"package is in the final ``lib`` folder, then nothing special is needed in "
"the ``package_info()`` method, beyond the definition of the components. In "
"this case, the customization of the CMake generated filenames and targets is "
"also included, but it is not necessary for this example."
msgstr ""

#: ../../../examples/conanfile/layout/editable_components.rst:72
msgid ""
"The important part is the ``layout()`` definition. Besides the common "
"``cmake_layout``, it is necessary to define the location of the components "
"headers (``self.cpp.source`` as they are source code) and the location of "
"the locally built libraries. As the location of the libraries depends on the "
"platform, the final ``self.cpp.build.components[\"component\"].libdirs`` "
"depends on the platform."
msgstr ""

#: ../../../examples/conanfile/layout/editable_components.rst:77
msgid ""
"With this recipe we can put the package in editable mode and locally build "
"it with:"
msgstr ""

#: ../../../examples/conanfile/layout/editable_components.rst:79
msgid ""
"$ conan editable add greetings\n"
"$ conan build greetings\n"
"# we might want to also build the debug config"
msgstr ""

#: ../../../examples/conanfile/layout/editable_components.rst:86
msgid ""
"In the ``app`` folder we have a package recipe to build 2 executables, that "
"link with the ``greeting`` package components. The ``app/conanfile.py`` "
"recipe there is simple, the ``build()`` method builds and runs both "
"``example`` and ``example2`` executables that are built with ``CMakeLists."
"txt``:"
msgstr ""

#: ../../../examples/conanfile/layout/editable_components.rst:91
msgid ""
"# Note the MYG file name, not matching the package name,\n"
"# because the recipe defined \"cmake_file_name\"\n"
"find_package(MYG)\n"
"\n"
"add_executable(example example.cpp)\n"
"# Note the MyGreetings::MyGreetings target name, not matching the package "
"name,\n"
"# because the recipe defined \"cmake_target_name\"\n"
"# \"example\" is linking with the whole package, both \"hello\" and \"bye\" "
"components\n"
"target_link_libraries(example MyGreetings::MyGreetings)\n"
"\n"
"add_executable(example2 example2.cpp)\n"
"# \"example2\" is only using and linking \"hello\" component, but not "
"\"bye\"\n"
"target_link_libraries(example2 MyGreetings::MyHello)"
msgstr ""

#: ../../../examples/conanfile/layout/editable_components.rst:108
msgid ""
"$ conan build app\n"
"hello: Release!\n"
"bye: Release!"
msgstr ""

#: ../../../examples/conanfile/layout/editable_components.rst:115
msgid ""
"If you now go to the ``bye.cpp`` source file and modify the output message, "
"then build ``greetings`` and ``app`` locally, the final output message for "
"the \"bye\" component library should change:"
msgstr ""

#: ../../../examples/conanfile/layout/editable_components.rst:118
msgid ""
"$ conan build greetings\n"
"$ conan build app\n"
"hello: Release!\n"
"adios: Release!"
msgstr ""
