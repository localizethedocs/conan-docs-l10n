# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../tutorial/creating_packages/configure_options_settings.rst:4
msgid "Configure settings and options in recipes"
msgstr ""

#: ../../../tutorial/creating_packages/configure_options_settings.rst:6
msgid ""
"We already explained :ref:`Conan settings and "
"options<settings_and_options_difference>` and how to use them to build your "
"projects for different configurations like Debug, Release, with static or "
"shared libraries, etc. In this section, we explain how to configure these "
"settings and options in the case that one of them does not apply to a Conan "
"package. We will introduce briefly how Conan models binary compatibility and "
"how that relates to options and settings."
msgstr ""

#: ../../../tutorial/creating_packages/configure_options_settings.rst:13
msgid ""
"Please, first clone the sources to recreate this project. You can find them "
"in the `examples2 repository <https://github.com/conan-io/examples2>`_ on "
"GitHub:"
msgstr ""

#: ../../../tutorial/creating_packages/configure_options_settings.rst:16
msgid ""
"$ git clone https://github.com/conan-io/examples2.git\n"
"$ cd examples2/tutorial/creating_packages/configure_options_settings"
msgstr ""

#: ../../../tutorial/creating_packages/configure_options_settings.rst:21
msgid ""
"You will notice some changes in the **conanfile.py** file from the previous "
"recipe. Let's check the relevant parts:"
msgstr ""

#: ../../../tutorial/creating_packages/configure_options_settings.rst:24
msgid ""
"class helloRecipe(ConanFile):\n"
"    name = \"hello\"\n"
"    version = \"1.0\"\n"
"\n"
"    ...\n"
"    options = {\"shared\": [True, False],\n"
"               \"fPIC\": [True, False],\n"
"               \"with_fmt\": [True, False]}\n"
"\n"
"    default_options = {\"shared\": False,\n"
"                       \"fPIC\": True,\n"
"                       \"with_fmt\": True}\n"
"    ...\n"
"\n"
"    def config_options(self):\n"
"        if self.settings.os == \"Windows\":\n"
"            del self.options.fPIC\n"
"\n"
"    def configure(self):\n"
"        if self.options.shared:\n"
"            # If os=Windows, fPIC will have been removed in "
"config_options()\n"
"            # use rm_safe to avoid double delete errors\n"
"            self.options.rm_safe(\"fPIC\")\n"
"    ..."
msgstr ""

#: ../../../tutorial/creating_packages/configure_options_settings.rst:53
msgid ""
"You can see that we added a :ref:`configure() "
"method<reference_conanfile_methods_configure>` to the recipe. Let's explain "
"what's the objective of this method and how it's different from the "
"``config_options()`` method we already had defined in the recipe:"
msgstr ""

#: ../../../tutorial/creating_packages/configure_options_settings.rst:57
msgid ""
"``configure()``: use this method to configure which options or settings of "
"the recipe are available. For example, in this case, we **delete the fPIC "
"option**, because it should only be **True** if we are building the library "
"as shared (in fact, some build systems will add this flag automatically when "
"building a shared library)."
msgstr ""

#: ../../../tutorial/creating_packages/configure_options_settings.rst:63
msgid ""
"``config_options()``: This method is used to **constrain** the available "
"options in a package **before they take a value**. If a value is assigned to "
"a setting or option that is deleted inside this method, Conan will raise an "
"error. In this case we are **deleting the fPIC option** in Windows because "
"that option does not exist for that operating system. Note that this method "
"is executed before the ``configure()`` method."
msgstr ""

#: ../../../tutorial/creating_packages/configure_options_settings.rst:69
msgid ""
"Be aware that deleting an option using the ``config_options()`` method has a "
"different result from using the ``configure()`` method. Deleting the option "
"in ``config_options()`` **is like we never declared it in the recipe** which "
"will raise an exception saying that the option does not exist. However, if "
"we delete it in the ``configure()`` method we can pass the option but it "
"will have no effect. For example, if you try to pass a value to the ``fPIC`` "
"option in Windows, Conan will raise an error warning that the option does "
"not exist:"
msgstr ""

#: ../../../tutorial/creating_packages/configure_options_settings.rst:76
#: ../../../tutorial/creating_packages/configure_options_settings.rst:198
msgid "Windows"
msgstr ""

#: ../../../tutorial/creating_packages/configure_options_settings.rst:76
msgid ""
"$ conan create . --build=missing -o fPIC=True\n"
"...\n"
"-------- Computing dependency graph --------\n"
"ERROR: option 'fPIC' doesn't exist\n"
"Possible options are ['shared', 'with_fmt']"
msgstr ""

#: ../../../tutorial/creating_packages/configure_options_settings.rst:86
msgid ""
"As you have noticed, the ``configure()`` and ``config_options()`` methods "
"**delete an option** if certain conditions are met. Let's explain why we are "
"doing this and the implications of removing that option. It is related to "
"how Conan identifies packages that are binary compatible with the "
"configuration set in the profile. In the next section, we introduce the "
"concept of the **Conan package ID**."
msgstr ""

#: ../../../tutorial/creating_packages/configure_options_settings.rst:96
msgid "Conan packages binary compatibility: the **package ID**"
msgstr ""

#: ../../../tutorial/creating_packages/configure_options_settings.rst:98
msgid ""
"We used Conan in previous examples to build for different configurations "
"like *Debug* and *Release*. Each time you create the package for one of "
"those configurations, Conan will build a new binary. Each of them is related "
"to a **generated hash** called **the package ID**. The package ID is just a "
"way to convert a set of settings, options and information about the "
"requirements of the package to a unique identifier."
msgstr ""

#: ../../../tutorial/creating_packages/configure_options_settings.rst:104
msgid ""
"Let's build our package for *Release* and *Debug* configurations and check "
"the generated binaries package IDs."
msgstr ""

#: ../../../tutorial/creating_packages/configure_options_settings.rst:107
msgid ""
"$ conan create . --build=missing -s build_type=Release -tf=\"\" # -tf=\"\" "
"will skip ng the test_package\n"
"...\n"
"[ 50%] Building CXX object CMakeFiles/hello.dir/src/hello.cpp.o\n"
"[100%] Linking CXX static library libhello.a\n"
"[100%] Built target hello\n"
"hello/1.0: Package '738feca714b7251063cc51448da0cf4811424e7c' built\n"
"hello/1.0: Build folder /Users/user/.conan2/p/tmp/7fe7f5af0ef27552/b/build/"
"Release\n"
"hello/1.0: Generated conaninfo.txt\n"
"hello/1.0: Generating the package\n"
"hello/1.0: Temporary package folder /Users/user/.conan2/p/"
"tmp/7fe7f5af0ef27552/p\n"
"hello/1.0: Calling package()\n"
"hello/1.0: CMake command: cmake --install \"/Users/user/.conan2/p/"
"tmp/7fe7f5af0ef27552/b/build/Release\" --prefix \"/Users/user/.conan2/p/"
"tmp/7fe7f5af0ef27552/p\"\n"
"hello/1.0: RUN: cmake --install \"/Users/user/.conan2/p/tmp/7fe7f5af0ef27552/"
"b/build/Release\" --prefix \"/Users/user/.conan2/p/tmp/7fe7f5af0ef27552/p\"\n"
"-- Install configuration: \"Release\"\n"
"-- Installing: /Users/user/.conan2/p/tmp/7fe7f5af0ef27552/p/lib/libhello.a\n"
"-- Installing: /Users/user/.conan2/p/tmp/7fe7f5af0ef27552/p/include/hello.h\n"
"hello/1.0 package(): Packaged 1 '.h' file: hello.h\n"
"hello/1.0 package(): Packaged 1 '.a' file: libhello.a\n"
"hello/1.0: Package '738feca714b7251063cc51448da0cf4811424e7c' created\n"
"hello/1.0: Created package revision 3bd9faedc711cbb4fdf10b295268246e\n"
"hello/1.0: Full package reference: "
"hello/1.0#e6b11fb0cb64e3777f8d62f4543cd6b3:738feca714b7251063cc51448da0cf4811424e7c#3bd9faedc711cbb4fdf10b295268246e\n"
"hello/1.0: Package folder /Users/user/.conan2/p/5c497cbb5421cbda/p\n"
"\n"
"$ conan create . --build=missing -s build_type=Debug -tf=\"\" # -tf=\"\" "
"will skip building the test_package\n"
"...\n"
"[ 50%] Building CXX object CMakeFiles/hello.dir/src/hello.cpp.o\n"
"[100%] Linking CXX static library libhello.a\n"
"[100%] Built target hello\n"
"hello/1.0: Package '3d27635e4dd04a258d180fe03cfa07ae1186a828' built\n"
"hello/1.0: Build folder /Users/user/.conan2/p/tmp/19a2e552db727a2b/b/build/"
"Debug\n"
"hello/1.0: Generated conaninfo.txt\n"
"hello/1.0: Generating the package\n"
"hello/1.0: Temporary package folder /Users/user/.conan2/p/"
"tmp/19a2e552db727a2b/p\n"
"hello/1.0: Calling package()\n"
"hello/1.0: CMake command: cmake --install \"/Users/user/.conan2/p/"
"tmp/19a2e552db727a2b/b/build/Debug\" --prefix \"/Users/user/.conan2/p/"
"tmp/19a2e552db727a2b/p\"\n"
"hello/1.0: RUN: cmake --install \"/Users/user/.conan2/p/tmp/19a2e552db727a2b/"
"b/build/Debug\" --prefix \"/Users/user/.conan2/p/tmp/19a2e552db727a2b/p\"\n"
"-- Install configuration: \"Debug\"\n"
"-- Installing: /Users/user/.conan2/p/tmp/19a2e552db727a2b/p/lib/libhello.a\n"
"-- Installing: /Users/user/.conan2/p/tmp/19a2e552db727a2b/p/include/hello.h\n"
"hello/1.0 package(): Packaged 1 '.h' file: hello.h\n"
"hello/1.0 package(): Packaged 1 '.a' file: libhello.a\n"
"hello/1.0: Package '3d27635e4dd04a258d180fe03cfa07ae1186a828' created\n"
"hello/1.0: Created package revision 67b887a0805c2a535b58be404529c1fe\n"
"hello/1.0: Full package reference: "
"hello/1.0#e6b11fb0cb64e3777f8d62f4543cd6b3:3d27635e4dd04a258d180fe03cfa07ae1186a828#67b887a0805c2a535b58be404529c1fe\n"
"hello/1.0: Package folder /Users/user/.conan2/p/c7796386fcad5369/p"
msgstr ""

#: ../../../tutorial/creating_packages/configure_options_settings.rst:156
msgid "As you can see Conan generated two package IDs:"
msgstr ""

#: ../../../tutorial/creating_packages/configure_options_settings.rst:158
msgid "Package *738feca714b7251063cc51448da0cf4811424e7c* for Release"
msgstr ""

#: ../../../tutorial/creating_packages/configure_options_settings.rst:159
msgid "Package *3d27635e4dd04a258d180fe03cfa07ae1186a828* for Debug"
msgstr ""

#: ../../../tutorial/creating_packages/configure_options_settings.rst:161
msgid ""
"These two package IDs are calculated by taking the **set of settings, "
"options and some information about the requirements** (we will explain this "
"later in the documentation) and **calculating a hash** with them. So, for "
"example, in this case, they are the result of the information depicted in "
"the diagram below."
msgstr ""

#: ../../../tutorial/creating_packages/configure_options_settings.rst:170
msgid ""
"Those package IDs are different because the **build_type** is different. "
"Now, when you want to install a package, Conan will:"
msgstr ""

#: ../../../tutorial/creating_packages/configure_options_settings.rst:173
msgid ""
"Collect the settings and options applied, along with some information about "
"the requirements and calculate the hash for the corresponding package ID."
msgstr ""

#: ../../../tutorial/creating_packages/configure_options_settings.rst:176
msgid ""
"If that package ID matches one of the packages stored in the local Conan "
"cache Conan will use that. If not, and we have any Conan remote configured, "
"it will search for a package with that package ID in the remotes."
msgstr ""

#: ../../../tutorial/creating_packages/configure_options_settings.rst:180
msgid ""
"If that calculated package ID does not exist in the local cache and remotes, "
"Conan will fail with a \"missing binary\" error message, or will try to "
"build that package from sources (this depends on the value of the ``--"
"build`` argument). This build will generate a new package ID in the local "
"cache."
msgstr ""

#: ../../../tutorial/creating_packages/configure_options_settings.rst:185
msgid ""
"These steps are simplified, there is far more to package ID calculation than "
"what we explain here, recipes themselves can even adjust their package ID "
"calculations, we can have different recipe and package revisions besides "
"package IDs and there's also a built-in mechanism in Conan that can be "
"configured to declare that some packages with a certain package ID are "
"compatible with other."
msgstr ""

#: ../../../tutorial/creating_packages/configure_options_settings.rst:191
msgid ""
"Maybe you have now the intuition of why we delete settings or options in "
"Conan recipes. If you do that, those values will not be added to the "
"computation of the package ID, so even if you define them, the resulting "
"package ID will be the same. You can check this behaviour, for example with "
"the fPIC option that is deleted when we build with the option "
"``shared=True``. Regardless of the value you pass for the fPIC option the "
"generated package ID will be the same for the **hello/1.0** binary:"
msgstr ""

#: ../../../tutorial/creating_packages/configure_options_settings.rst:198
msgid "$ conan create . --build=missing -o shared=True -o fPIC=True -tf=\"\""
msgstr ""

#: ../../../tutorial/creating_packages/configure_options_settings.rst:203
msgid "Linux, macOS"
msgstr ""

#: ../../../tutorial/creating_packages/configure_options_settings.rst:203
msgid "$ conan create . --build=missing -o shared=True -o -tf=\"\""
msgstr ""

#: ../../../tutorial/creating_packages/configure_options_settings.rst:208
msgid ""
"...\n"
"hello/1.0 package(): Packaged 1 '.h' file: hello.h\n"
"hello/1.0 package(): Packaged 1 '.dylib' file: libhello.dylib\n"
"hello/1.0: Package '2a899fd0da3125064bf9328b8db681cd82899d56' created\n"
"hello/1.0: Created package revision f0d1385f4f90ae465341c15740552d7e\n"
"hello/1.0: Full package reference: "
"hello/1.0#e6b11fb0cb64e3777f8d62f4543cd6b3:2a899fd0da3125064bf9328b8db681cd82899d56#f0d1385f4f90ae465341c15740552d7e\n"
"hello/1.0: Package folder /Users/user/.conan2/p/8a55286c6595f662/p\n"
"\n"
"$ conan create . --build=missing -o shared=True -o fPIC=False -tf=\"\"\n"
"...\n"
"-------- Computing dependency graph --------\n"
"Graph root\n"
"    virtual\n"
"Requirements\n"
"    fmt/8.1.1#601209640bd378c906638a8de90070f7 - Cache\n"
"    hello/1.0#e6b11fb0cb64e3777f8d62f4543cd6b3 - Cache\n"
"\n"
"-------- Computing necessary packages --------\n"
"Requirements\n"
"    fmt/8.1.1#601209640bd378c906638a8de90070f7:"
"d1b3f3666400710fec06446a697f9eeddd1235aa#24a2edf207deeed4151bd87bca4af51c - "
"Skip\n"
"    hello/1.0#e6b11fb0cb64e3777f8d62f4543cd6b3:2a899fd0da3125064bf9328b8db681cd82899d56#f0d1385f4f90ae465341c15740552d7e "
"- Cache\n"
"\n"
"-------- Installing packages --------\n"
"\n"
"-------- Installing (downloading, building) binaries... --------\n"
"hello/1.0: Already installed!"
msgstr ""

#: ../../../tutorial/creating_packages/configure_options_settings.rst:237
msgid ""
"As you can see, the first run created the "
"``2a899fd0da3125064bf9328b8db681cd82899d56`` package, and the second one, "
"regardless of the different value of the fPIC option, said we already had "
"the ``2a899fd0da3125064bf9328b8db681cd82899d56`` package installed."
msgstr ""

#: ../../../tutorial/creating_packages/configure_options_settings.rst:242
msgid "C libraries"
msgstr ""

#: ../../../tutorial/creating_packages/configure_options_settings.rst:244
msgid ""
"There are other typical cases where you want to delete certain settings. "
"Imagine that you are packaging a C library. When you build this library, "
"there are settings like the compiler C++ standard (``self.settings.compiler."
"cppstd``) or the standard library used (``self.settings.compiler.libcxx``) "
"that won't affect the resulting binary at all. Then it does not make sense "
"that they affect to the package ID computation, so a typical pattern is to "
"delete them in the ``configure()`` method:"
msgstr ""

#: ../../../tutorial/creating_packages/configure_options_settings.rst:251
msgid ""
"def configure(self):\n"
"    self.settings.rm_safe(\"compiler.cppstd\")\n"
"    self.settings.rm_safe(\"compiler.libcxx\")"
msgstr ""

#: ../../../tutorial/creating_packages/configure_options_settings.rst:257
msgid ""
"Please, note that deleting these settings in the ``configure()`` method will "
"modify the package ID calculation but will also affect how the toolchain, "
"and the build system integrations work because the C++ settings do not exist."
msgstr ""

#: ../../../tutorial/creating_packages/configure_options_settings.rst:263
msgid ""
"From Conan 2.4, the above ``configure()`` is not necessary if defined "
"``languages = \"C\"`` recipe attribute (experimental)."
msgstr ""

#: ../../../tutorial/creating_packages/configure_options_settings.rst:267
msgid "Header-only libraries"
msgstr ""

#: ../../../tutorial/creating_packages/configure_options_settings.rst:269
msgid ""
"A similar case happens with packages that package :ref:`header-only "
"libraries<creating_packages_other_header_only>`. In that case, there's no "
"binary code we need to link with, but just some header files to add to our "
"project. In this cases the package ID of the Conan package should not be "
"affected by settings or options. For that case, there's a simplified way of "
"declaring that the generated package ID should not take into account "
"settings, options or any information from the requirements, which is using "
"the ``self.info.clear()`` method inside another recipe method called "
"``package_id()``:"
msgstr ""

#: ../../../tutorial/creating_packages/configure_options_settings.rst:278
msgid ""
"def package_id(self):\n"
"    self.info.clear()"
msgstr ""

#: ../../../tutorial/creating_packages/configure_options_settings.rst:284
msgid ""
"We will explain the ``package_id()`` method later and explain how you can "
"customize the way the package ID for the package is calculated. You can also "
"check the :ref:`Conanfile's methods reference<reference_conanfile_methods>` "
"if you want to know how this method works in more detail."
msgstr ""

#: ../../../tutorial/creating_packages/configure_options_settings.rst:291
msgid ":ref:`Header-only packages<creating_packages_other_header_only>`."
msgstr ""

#: ../../../tutorial/creating_packages/configure_options_settings.rst:292
msgid ""
"Check the binary compatibility :ref:`compatibility.py extension "
"<reference_extensions_binary_compatibility>`."
msgstr ""

#: ../../../tutorial/creating_packages/configure_options_settings.rst:293
msgid ""
"Conan :ref:`package types<reference_conanfile_attributes_package_type>`."
msgstr ""

#: ../../../tutorial/creating_packages/configure_options_settings.rst:294
msgid ""
":ref:`Setting package_id_mode for requirements "
"<reference_conanfile_methods_requirements_package_id_mode>`."
msgstr ""

#: ../../../tutorial/creating_packages/configure_options_settings.rst:295
msgid ""
"Read the :ref:`binary model reference<reference_binary_model>` for a full "
"view of the Conan binary model."
msgstr ""
