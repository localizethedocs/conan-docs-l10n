# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../tutorial/developing_packages.rst:4
msgid "Developing packages locally"
msgstr ""

#: ../../../tutorial/developing_packages.rst:6
msgid ""
"As we learned in :ref:`previous sections <tutorial_creating_packages>` of "
"the tutorial, the most straightforward way to work when developing a Conan "
"package is to run a :command:`conan create`. This means that every time it "
"is run, Conan performs a series of costly operations in the Conan cache, "
"such as downloading, decompressing, copying sources, and building the entire "
"library from scratch. Sometimes, especially with large libraries, while we "
"are developing the recipe, these operations cannot be performed every time."
msgstr ""

#: ../../../tutorial/developing_packages.rst:13
msgid ""
"This section will first show the **Conan local development flow**, that is, "
"working on packages in your local project directory without having to export "
"the contents of the package to the Conan cache first."
msgstr ""

#: ../../../tutorial/developing_packages.rst:17
msgid ""
"We will also cover how other packages can consume packages under development "
"using the **editable mode**."
msgstr ""

#: ../../../tutorial/developing_packages.rst:20
msgid ""
"Finally, we will explain the **Conan package layouts** in depth, the key "
"feature that makes it possible to work with Conan packages in the Conan "
"cache or locally without making any changes."
msgstr ""
