# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/extensions/command_wrapper.rst:4
msgid "Command wrapper"
msgstr ""

#: ../../../reference/extensions/command_wrapper.rst:6
msgid ""
"The ``cmd_wrapper.py`` extension plugin is a Python script that receives the "
"command line argument provided by ``self.run()`` recipe calls, and allows "
"intercepting them and returning a new one."
msgstr ""

#: ../../../reference/extensions/command_wrapper.rst:10
msgid ""
"This plugin must be located in the ``extensions/plugins`` cache folder, and "
"can be installed with the ``conan config install`` command."
msgstr ""

#: ../../../reference/extensions/command_wrapper.rst:13
msgid "For example:"
msgstr ""

#: ../../../reference/extensions/command_wrapper.rst:15
msgid ""
"def cmd_wrapper(cmd, **kwargs):\n"
"    return 'echo \"{}\"'.format(cmd)"
msgstr ""

#: ../../../reference/extensions/command_wrapper.rst:20
msgid ""
"Would just intercept the commands and display them to terminal, which means "
"that all commmands in all recipes ``self.run()`` will not execute, but just "
"be echoed."
msgstr ""

#: ../../../reference/extensions/command_wrapper.rst:23
msgid ""
"The ``**kwargs`` is a mandatory generic argument to be robust against future "
"changes and injection by Conan of new keyword arguments. Not adding it, even "
"if not used could make the extension fail in future Conan versions."
msgstr ""

#: ../../../reference/extensions/command_wrapper.rst:27
msgid ""
"A more common use case would be the injection of a parallelization tools "
"over some commands, which could look like:"
msgstr ""

#: ../../../reference/extensions/command_wrapper.rst:30
msgid ""
"def cmd_wrapper(cmd, **kwargs):\n"
"    # lets parallelize only CMake invocations\n"
"    if cmd.startswith(\"cmake\"):\n"
"        return 'parallel-build \"{}\"  --parallel-argument'.format(cmd)\n"
"    # otherwise return same command, not modified\n"
"    return cmd"
msgstr ""

#: ../../../reference/extensions/command_wrapper.rst:39
msgid ""
"The ``conanfile`` object is passed as an argument, so it is possible to "
"customize the behavior depending on the caller:"
msgstr ""

#: ../../../reference/extensions/command_wrapper.rst:42
msgid ""
"def cmd_wrapper(cmd, conanfile, **kwargs):\n"
"    # Let's parallelize only CMake invocations, for a few specific heavy "
"packages\n"
"    name = conanfile.ref.name\n"
"    heavy_pkgs = [\"qt\", \"boost\", \"abseil\", \"opencv\", \"ffmpeg\"]\n"
"    if cmd.startswith(\"cmake\") and name in heavy_pkgs:\n"
"        return 'parallel-build \"{}\"  --parallel-argument'.format(cmd)\n"
"    # otherwise return same command, not modified\n"
"    return cmd"
msgstr ""
