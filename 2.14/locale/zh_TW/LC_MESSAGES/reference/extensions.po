# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/extensions.rst:4
msgid "Extensions"
msgstr ""

#: ../../../reference/extensions.rst:6
msgid "Conan can be extended in a few ways, with custom user code:"
msgstr ""

#: ../../../reference/extensions.rst:8
msgid ""
"``python_requires`` allow to put common recipe code in a recipe package that "
"can be reused by other recipes by declaring a ``python_requires = "
"\"mypythoncode/version\"``"
msgstr ""

#: ../../../reference/extensions.rst:10
msgid ""
"You can create your own custom Conan commands to solve self-needs thanks to "
"Python and Conan public API powers altogether."
msgstr ""

#: ../../../reference/extensions.rst:12
msgid ""
"It's also possible to make your own custom Conan generators in case you are "
"using build systems that are not supported by the built-in Conan tools. "
"Those can be used from ``python_requires`` or installed globally."
msgstr ""

#: ../../../reference/extensions.rst:15
msgid ""
"``hooks`` are \"pre\" and \"post\" recipe methods (like ``pre_build()`` and "
"``post_build()``) extensions that can be used to complement recipes with "
"orthogonal functionality, like quality checks, binary analyzing, logging, "
"etc."
msgstr ""

#: ../../../reference/extensions.rst:18
msgid ""
"Binary compatibility ``compatibility.py`` extension allows to write custom "
"rules for defining custom binary compatibility across different settings and "
"options"
msgstr ""

#: ../../../reference/extensions.rst:20
msgid ""
"The ``cmd_wrapper.py`` extension allows to inject arbitrary command wrappers "
"to any ``self.run()`` recipe command invocation, which can be useful to "
"inject wrappers as parallelization tools"
msgstr ""

#: ../../../reference/extensions.rst:23
msgid ""
"The package signing extension allows to sign and verify packages at upload "
"and install time respectively"
msgstr ""

#: ../../../reference/extensions.rst:25
msgid ""
"Deployers, a mechanism to facilitate copying files from one folder, usually "
"the Conan cache, to user folders"
msgstr ""

#: ../../../reference/extensions.rst:30
msgid ""
"Besides the built-in Conan extensions listed in this document, there is a "
"repository that contains extensions for Conan, such as custom commands and "
"deployers, useful for different purposes like artifactory tasks, Conan "
"Center Index, etc."
msgstr ""

#: ../../../reference/extensions.rst:34
msgid ""
"You can find more information on how to use those extensions in `the GitHub "
"repository <https://github.com/conan-io/conan-extensions>`_."
msgstr ""

#: ../../../reference/extensions.rst:38
msgid "Contents:"
msgstr ""
