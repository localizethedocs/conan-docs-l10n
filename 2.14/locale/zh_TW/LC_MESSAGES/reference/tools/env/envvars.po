# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/tools/env/envvars.rst:2
msgid "EnvVars"
msgstr ""

#: ../../../reference/tools/env/envvars.rst:4
msgid ""
"``EnvVars`` is a class that represents an instance of environment variables "
"for a given system. It is obtained from the generic :ref:"
"`Environment<conan_tools_env_environment_model>` class."
msgstr ""

#: ../../../reference/tools/env/envvars.rst:7
msgid ""
"This class is used by other tools like the `conan.tools.gnu` autotools "
"helpers and the :ref:`VirtualBuildEnv<conan_tools_env_virtualbuildenv>` and :"
"ref:`VirtualRunEnv<conan_tools_env_virtualrunenv>` generator."
msgstr ""

#: ../../../reference/tools/env/envvars.rst:13
msgid "Creating environment files"
msgstr ""

#: ../../../reference/tools/env/envvars.rst:15
msgid ""
"``EnvVars`` object can generate environment files (shell, bat or powershell "
"scripts):"
msgstr ""

#: ../../../reference/tools/env/envvars.rst:17
msgid ""
"def generate(self):\n"
"    env1 = Environment()\n"
"    env1.define(\"foo\", \"var\")\n"
"    envvars = env1.vars(self)\n"
"    envvars.save_script(\"my_env_file\")"
msgstr ""

#: ../../../reference/tools/env/envvars.rst:26
msgid ""
"Although it potentially could be used in other methods, this functionality "
"is intended to work in the ``generate()`` method."
msgstr ""

#: ../../../reference/tools/env/envvars.rst:29
msgid ""
"It will generate automatically a ``my_env_file.bat`` for Windows systems or "
"``my_env_file.sh`` otherwise."
msgstr ""

#: ../../../reference/tools/env/envvars.rst:31
msgid ""
"It is possible to opt-in to generate PowerShell ``.ps1`` scripts instead of "
"``.bat`` ones, by using the configuration ``tools.env.virtualenv:"
"powershell``. This configuration should be set with the value corresponding "
"to the desired PowerShell executable: ``powershell.exe`` for versions up to "
"5.1, and ``pwsh`` for PowerShell versions starting from 7. Note that setting "
"``tools.env.virtualenv:powershell`` to ``True`` or ``False`` is deprecated "
"as of Conan 2.11.0."
msgstr ""

#: ../../../reference/tools/env/envvars.rst:38
msgid ""
"You can also include additional arguments in the ``tools.env.virtualenv:"
"powershell`` configuration. For example, you can set the value to "
"``powershell.exe -NoProfile`` or ``pwsh -NoProfile`` by including the "
"arguments as part of the configuration value. These arguments will be "
"considered when executing the generated ``.ps1`` launchers."
msgstr ""

#: ../../../reference/tools/env/envvars.rst:43
msgid ""
"Also, by default, Conan will automatically append that launcher file path to "
"a list that will be used to create a ``conanbuild.bat|sh|ps1`` file "
"aggregating all the launchers in order. The ``conanbuild.sh|bat|ps1`` "
"launcher will be created after the execution of the ``generate()`` method."
msgstr ""

#: ../../../reference/tools/env/envvars.rst:47
msgid ""
"The ``scope`` argument (``\"build\"`` by default) can be used to define "
"different scope of environment files, to aggregate them separately. For "
"example, using a ``scope=\"run\"``, like the ``VirtualRunEnv`` generator "
"does, will aggregate and create a ``conanrun.bat|sh|ps1`` script:"
msgstr ""

#: ../../../reference/tools/env/envvars.rst:51
msgid ""
"def generate(self):\n"
"    env1 = Environment()\n"
"    env1.define(\"foo\", \"var\")\n"
"    envvars = env1.vars(self, scope=\"run\")\n"
"    # Will append \"my_env_file\" to \"conanrun.bat|sh|ps1\"\n"
"    envvars.save_script(\"my_env_file\")"
msgstr ""

#: ../../../reference/tools/env/envvars.rst:61
msgid ""
"You can also use ``scope=None`` argument to avoid appending the script to "
"the aggregated ``conanbuild.bat|sh|ps1``:"
msgstr ""

#: ../../../reference/tools/env/envvars.rst:63
msgid ""
"env1 = Environment()\n"
"env1.define(\"foo\", \"var\")\n"
"# Will not append \"my_env_file\" to \"conanbuild.bat|sh|ps1\"\n"
"envvars = env1.vars(self, scope=None)\n"
"envvars.save_script(\"my_env_file\")"
msgstr ""

#: ../../../reference/tools/env/envvars.rst:73
msgid "Running with environment files"
msgstr ""

#: ../../../reference/tools/env/envvars.rst:75
msgid ""
"The ``conanbuild.bat|sh|ps1`` launcher will be executed by default before "
"calling every ``self.run()`` command. This would be typically done in the "
"``build()`` method."
msgstr ""

#: ../../../reference/tools/env/envvars.rst:78
msgid ""
"You can change the default launcher with the ``env`` argument of ``self."
"run()``:"
msgstr ""

#: ../../../reference/tools/env/envvars.rst:80
msgid ""
"...\n"
"def build(self):\n"
"    # This will automatically wrap the \"foo\" command with the correct "
"environment:\n"
"    # source my_env_file.sh && foo\n"
"    # my_env_file.bat && foo\n"
"    # powershell my_env_file.ps1 ; cmd c/ foo\n"
"    self.run(\"foo\", env=[\"my_env_file\"])"
msgstr ""

#: ../../../reference/tools/env/envvars.rst:92
msgid "Applying the environment variables"
msgstr ""

#: ../../../reference/tools/env/envvars.rst:94
msgid ""
"As an alternative to running a command, environments can be applied in the "
"python environment:"
msgstr ""

#: ../../../reference/tools/env/envvars.rst:96
msgid ""
"from conan.tools.env import Environment\n"
"\n"
"env1 = Environment()\n"
"env1.define(\"foo\", \"var\")\n"
"envvars = env1.vars(self)\n"
"with envvars.apply():\n"
"   # Here os.getenv(\"foo\") == \"var\"\n"
"   ..."
msgstr ""

#: ../../../reference/tools/env/envvars.rst:108
msgid "Iterating the variables"
msgstr ""

#: ../../../reference/tools/env/envvars.rst:110
msgid ""
"You can iterate the environment variables of an ``EnvVars`` object like this:"
msgstr ""

#: ../../../reference/tools/env/envvars.rst:112
msgid ""
"env1 = Environment()\n"
"env1.append(\"foo\", \"var\")\n"
"env1.append(\"foo\", \"var2\")\n"
"envvars = env1.vars(self)\n"
"for name, value in envvars.items():\n"
"    assert name == \"foo\":\n"
"    assert value == \"var var2\""
msgstr ""

#: ../../../reference/tools/env/envvars.rst:123
msgid ""
"The current value of the environment variable in the system is replaced in "
"the returned value. This happens when variables are appended or prepended. "
"If a placeholder is desired instead of the actual value, it is possible to "
"use the ``variable_reference`` argument with a jinja template syntax, so a "
"string with that resolved template will be returned instead:"
msgstr ""

#: ../../../reference/tools/env/envvars.rst:129
msgid ""
"env1 = Environment()\n"
"env1.append(\"foo\", \"var\")\n"
"envvars = env1.vars(self)\n"
"for name, value in envvars.items(variable_reference=\"$penv{{{name}}}\"\"):\n"
"    assert name == \"foo\":\n"
"    assert value == \"$penv{{foo}} var\""
msgstr ""

#: ../../../reference/tools/env/envvars.rst:140
msgid ""
"In Windows, there is a limit to the size of environment variables, a total "
"of 32K for the whole environment, but specifically the PATH variable has a "
"limit of 2048 characters. That means that the above utils could hit that "
"limit, for example for large dependency graphs where all packages contribute "
"to the PATH env-var."
msgstr ""

#: ../../../reference/tools/env/envvars.rst:144
msgid "This can be mitigated by:"
msgstr ""

#: ../../../reference/tools/env/envvars.rst:146
msgid "Putting the Conan cache closer to C:/ for shorter paths"
msgstr ""

#: ../../../reference/tools/env/envvars.rst:147
msgid ""
"Better definition of what dependencies can contribute to the PATH env-var"
msgstr ""

#: ../../../reference/tools/env/envvars.rst:148
msgid ""
"Other mechanisms for things like running with many shared libraries "
"dependencies with too many .dlls, like ``deployers``"
msgstr ""

#: ../../../reference/tools/env/envvars.rst:152
msgid "Reference"
msgstr ""

#: ../../../conan_sources/conan/tools/env/environment.py:docstring of
#: conan.tools.env.environment.EnvVars:1
msgid ""
"Represents an instance of environment variables for a given system. It is "
"obtained from the generic Environment class."
msgstr ""

#: ../../../conan_sources/conan/tools/env/environment.py:docstring of
#: conan.tools.env.environment.EnvVars.get:1
msgid "get the value of a env-var"
msgstr ""

#: ../../../conan_sources/conan/tools/env/environment.py:docstring of
#: conan.tools.env.environment.EnvVars.get:0
#: conan.tools.env.environment.EnvVars.items:0
#: conan.tools.env.environment.EnvVars.save_script:0
msgid "Parameters"
msgstr ""

#: ../../../conan_sources/conan/tools/env/environment.py:docstring of
#: conan.tools.env.environment.EnvVars.get:3
msgid "The name of the environment variable."
msgstr ""

#: ../../../conan_sources/conan/tools/env/environment.py:docstring of
#: conan.tools.env.environment.EnvVars.get:4
msgid "The returned value if the variable doesn't exist, by default None."
msgstr ""

#: ../../../conan_sources/conan/tools/env/environment.py:docstring of
#: conan.tools.env.environment.EnvVars.get:5
#: conan.tools.env.environment.EnvVars.items:3
msgid ""
"if specified, use a variable reference instead of the pre-existing value of "
"environment variable, where {name} can be used to refer to the name of the "
"variable."
msgstr ""

#: ../../../conan_sources/conan/tools/env/environment.py:docstring of
#: conan.tools.env.environment.EnvVars.items:1
msgid "returns {str: str} (varname: value)"
msgstr ""

#: ../../../conan_sources/conan/tools/env/environment.py:docstring of
#: conan.tools.env.environment.EnvVars.apply:1
msgid ""
"Context manager to apply the declared variables to the current ``os."
"environ`` restoring the original environment when the context ends."
msgstr ""

#: ../../../conan_sources/conan/tools/env/environment.py:docstring of
#: conan.tools.env.environment.EnvVars.save_script:1
msgid ""
"Saves a script file (bat, sh, ps1) with a launcher to set the environment. "
"If the conf \"tools.env.virtualenv:powershell\" is not an empty string it "
"will generate powershell launchers if Windows."
msgstr ""

#: ../../../conan_sources/conan/tools/env/environment.py:docstring of
#: conan.tools.env.environment.EnvVars.save_script:6
msgid ""
"Name of the file to generate. If the extension is provided, it will generate "
"the launcher script for that extension, otherwise the format will be deduced "
"checking if we are running inside Windows (checking also the subsystem) or "
"not."
msgstr ""
