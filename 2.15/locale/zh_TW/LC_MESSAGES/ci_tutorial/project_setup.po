# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.15\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:32+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../ci_tutorial/project_setup.rst:2
msgid "Project setup"
msgstr ""

#: ../../../ci_tutorial/project_setup.rst:4
msgid ""
"The code necessary for this tutorial is found in the ``examples2`` repo, "
"clone it and move to the folder:"
msgstr ""

#: ../../../ci_tutorial/project_setup.rst:8
msgid ""
"$ git clone https://github.com/conan-io/examples2.git\n"
"$ cd examples2/ci/game"
msgstr ""

#: ../../../ci_tutorial/project_setup.rst:15
msgid "Server repositories setup"
msgstr ""

#: ../../../ci_tutorial/project_setup.rst:17
msgid ""
"We need 3 different repositories in the same server. Make sure to have an "
"Artifactory running and available. You can download the free  :ref:"
"`Artifactory CE<artifactory_ce_cpp>` from the `downloads page <https://conan."
"io/downloads.html>`_ and run it in your own computer, or you can use docker:"
msgstr ""

#: ../../../ci_tutorial/project_setup.rst:20
msgid ""
"$ docker run --name artifactory -d -p 8081:8081 -p 8082:8082 releases-docker."
"jfrog.io/jfrog/artifactory-cpp-ce:7.63.12\n"
"# Can be stopped with \"docker stop artifactory\""
msgstr ""

#: ../../../ci_tutorial/project_setup.rst:25
msgid ""
"When you launch it, you can go to http://localhost:8081/ to check it (user: "
"\"admin\", password: \"password\"). If you have another available "
"Artifactory, it can be used too if you can create new repositories there."
msgstr ""

#: ../../../ci_tutorial/project_setup.rst:29
msgid ""
"As a first step, log into the web UI and **create 3 different local "
"repositories** called ``develop``, ``packages`` and ``products``."
msgstr ""

#: ../../../ci_tutorial/project_setup.rst:31
msgid ""
"Then according to the ``project_setup.py`` file, these are the necessary "
"environment variables to configure the server. Please define "
"``ARTIFACTORY_URL``, ``ARTIFACTORY_USER`` and/or ``ARTIFACTORY_PASSWORD`` if "
"necessary to adapt to your setup:"
msgstr ""

#: ../../../ci_tutorial/project_setup.rst:33
msgid ""
"# TODO: This must be configured by users\n"
"SERVER_URL = os.environ.get(\"ARTIFACTORY_URL\", \"http://localhost:8081/"
"artifactory/api/conan\")\n"
"USER = os.environ.get(\"ARTIFACTORY_USER\", \"admin\")\n"
"PASSWORD = os.environ.get(\"ARTIFACTORY_PASSWORD\", \"password\")"
msgstr ""

#: ../../../ci_tutorial/project_setup.rst:42
msgid "Initial dependency graph"
msgstr ""

#: ../../../ci_tutorial/project_setup.rst:46
msgid ""
"The initialization of the project will remove the contents of the 3 "
"``develop``, ``products`` and ``packages`` repositories in the server."
msgstr ""

#: ../../../ci_tutorial/project_setup.rst:47
msgid ""
"The ``examples2/ci/game`` folder contains a ``.conanrc`` file that defines a "
"local cache, so commands executed in this tutorial do not pollute or alter "
"your main Conan cache."
msgstr ""

#: ../../../ci_tutorial/project_setup.rst:50
msgid "$ python project_setup.py"
msgstr ""

#: ../../../ci_tutorial/project_setup.rst:54
msgid ""
"This will do several tasks, clean the server repos, create initial ``Debug`` "
"and ``Release`` binaries for the dependency graph and upload them to the "
"``develop`` repo, then clean the local cache. Note in this example we are "
"using ``Debug`` and ``Release`` as our different configurations for "
"convenience, but in real cases these would be different configurations such "
"as Windows/X86_64, Linux/x86_64, Linux/armv8, etc., running in different "
"computers."
msgstr ""

#: ../../../ci_tutorial/project_setup.rst:57
msgid ""
"After the setup, it can be checked that the 3 remotes are defined, but only "
"``develop`` remote is enabled, and there are no packages in the local cache:"
msgstr ""

#: ../../../ci_tutorial/project_setup.rst:59
msgid ""
"$ conan remote list\n"
"products: http://localhost:8081/artifactory/api/conan/products [Verify SSL: "
"True, Enabled: False]\n"
"develop: http://localhost:8081/artifactory/api/conan/develop [Verify SSL: "
"True, Enabled: True]\n"
"packages: http://localhost:8081/artifactory/api/conan/packages [Verify SSL: "
"True, Enabled: False]\n"
"\n"
"$ conan list *\n"
"Found 0 pkg/version recipes matching * in local cache\n"
"Local Cache\n"
"WARN: There are no matching recipe references"
msgstr ""

#: ../../../ci_tutorial/project_setup.rst:74
msgid ""
"The order of the remotes is important. If the ``products`` repository is "
"enabled, it will have higher priority than the ``develop`` one, so if it "
"contains new versions, they will be picked from there."
msgstr ""

#: ../../../ci_tutorial/project_setup.rst:78
msgid ""
"This dependency graph of packages in the ``develop`` repo is the starting "
"point for our tutorial, assumed as a functional and stable \"develop\" state "
"of the project that developers can ``conan install`` to work in any of the "
"different packages."
msgstr ""
