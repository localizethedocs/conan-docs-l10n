# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.15\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:32+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../examples/extensions/deployers/dev/development_deploy.rst:5
msgid "Creating a Conan-agnostic deploy of dependencies for developer use"
msgstr ""

#: ../../../examples/extensions/deployers/dev/development_deploy.rst:7
msgid ""
"With the ``full_deploy`` deployer it is possible to create a Conan-agnostic "
"copy of dependencies that can be used by developers without even having "
"Conan installed in their computers."
msgstr ""

#: ../../../examples/extensions/deployers/dev/development_deploy.rst:9
msgid ""
"The common and recommended flow for most cases is using Conan packages "
"directly from the Conan cache:"
msgstr ""

#: ../../../examples/extensions/deployers/dev/development_deploy.rst:14
msgid ""
"However, in some situations, it might be useful to be able to deploy a copy "
"of the dependencies into a user folder, so the dependencies can be located "
"there instead of in the Conan cache. This is possible using the Conan "
"deployers."
msgstr ""

#: ../../../examples/extensions/deployers/dev/development_deploy.rst:17
msgid ""
"Let's see it with an example. All the source code is in the `examples2.0 "
"Github repository <https://github.com/conan-io/examples2>`_"
msgstr ""

#: ../../../examples/extensions/deployers/dev/development_deploy.rst:20
msgid ""
"$ git clone https://github.com/conan-io/examples2.git\n"
"$ cd examples2/examples/extensions/deployers/development_deploy"
msgstr ""

#: ../../../examples/extensions/deployers/dev/development_deploy.rst:25
msgid "In the folder we can find the following ``conanfile.txt``:"
msgstr ""

#: ../../../examples/extensions/deployers/dev/development_deploy.rst:27
msgid ""
"[requires]\n"
"zlib/1.2.13\n"
"\n"
"[tool_requires]\n"
"cmake/3.25.3\n"
"\n"
"[generators]\n"
"CMakeDeps\n"
"CMakeToolchain\n"
"\n"
"[layout]\n"
"cmake_layout"
msgstr ""

#: ../../../examples/extensions/deployers/dev/development_deploy.rst:42
msgid ""
"The folder also contains a standard ``CMakeLists.txt`` and a ``main.cpp`` "
"source file that can create an executable that links with ``zlib`` library."
msgstr ""

#: ../../../examples/extensions/deployers/dev/development_deploy.rst:45
msgid ""
"We can install the Debug and Release dependencies, and deploy a local copy "
"of the packages with:"
msgstr ""

#: ../../../examples/extensions/deployers/dev/development_deploy.rst:47
msgid ""
"$ conan install . --deployer=full_deploy --build=missing\n"
"$ conan install . --deployer=full_deploy -s build_type=Debug --build=missing"
msgstr ""
"$ conan install . --deployer=full_deploy --build=missing\n"
"$ conan install . --deployer=full_deploy -s build_type=Debug --build=missing"

#: ../../../examples/extensions/deployers/dev/development_deploy.rst:52
msgid "This will create the following folders:"
msgstr ""

#: ../../../examples/extensions/deployers/dev/development_deploy.rst:54
msgid ""
"├──src\n"
"├──build\n"
"│   ├──generators\n"
"|         └── ZLibConfig.cmake\n"
"├──full_deploy\n"
"│   ├──build\n"
"│   │   └──cmake\n"
"│   │       └──3.25.3\n"
"│   │           └──x86_64\n"
"│   │               ├──bin\n"
"│   │\n"
"│   └──host\n"
"│       └──zlib\n"
"│           └──1.2.13\n"
"│               ├──Debug\n"
"│               │   └──x86_64\n"
"│               │       ├──include\n"
"│               │       ├──lib\n"
"│               └──Release\n"
"│                   └──x86_64\n"
"│                       ├──include\n"
"│                       ├──lib"
msgstr ""
"├──src\n"
"├──build\n"
"│   ├──generators\n"
"|         └── ZLibConfig.cmake\n"
"├──full_deploy\n"
"│   ├──build\n"
"│   │   └──cmake\n"
"│   │       └──3.25.3\n"
"│   │           └──x86_64\n"
"│   │               ├──bin\n"
"│   │\n"
"│   └──host\n"
"│       └──zlib\n"
"│           └──1.2.13\n"
"│               ├──Debug\n"
"│               │   └──x86_64\n"
"│               │       ├──include\n"
"│               │       ├──lib\n"
"│               └──Release\n"
"│                   └──x86_64\n"
"│                       ├──include\n"
"│                       ├──lib"

#: ../../../examples/extensions/deployers/dev/development_deploy.rst:80
msgid ""
"(Note that you could use the ``--deployer-folder`` argument to change the "
"base folder output path for the deployer)"
msgstr ""

#: ../../../examples/extensions/deployers/dev/development_deploy.rst:82
msgid ""
"This folder is fully self-contained. It contains both the necessary tools "
"(like ``cmake`` executable), the headers and compiled libraries of ``zlib`` "
"and the necessary files like ``ZLibConfig.cmake`` in the ``build/"
"generators`` folder, that point to the binaries inside ``full_deploy`` with "
"a relative path."
msgstr ""

#: ../../../examples/extensions/deployers/dev/development_deploy.rst:88
msgid ""
"The Conan cache can be removed, and even Conan uninstalled, then the folder "
"could be moved elsewhere in the computer or copied to another computer, "
"assuming it has the same configuration of OS, compiler, etc."
msgstr ""

#: ../../../examples/extensions/deployers/dev/development_deploy.rst:90
msgid ""
"$ cd ..\n"
"$ cp -R development_deploy /some/other/place\n"
"$ cd /some/other/place"
msgstr ""
"$ cd ..\n"
"$ cp -R development_deploy /some/other/place\n"
"$ cd /some/other/place"

#: ../../../examples/extensions/deployers/dev/development_deploy.rst:96
msgid "And the files could be used by developers as:"
msgstr ""

#: ../../../examples/extensions/deployers/dev/development_deploy.rst:98
msgid "Windows"
msgstr "Windows"

#: ../../../examples/extensions/deployers/dev/development_deploy.rst:98
msgid ""
"$ cd build\n"
"# Activate the environment to use CMake 3.25\n"
"$ generators\\conanbuild.bat\n"
"$ cmake --version\n"
"cmake version 3.25.3\n"
"# Configure, should match the settings used at install\n"
"$ cmake .. -G \\\"Visual Studio 17 2022\\\" -"
"DCMAKE_TOOLCHAIN_FILE=generators/conan_toolchain.cmake\n"
"$ cmake --build . --config Release\n"
"$ Release\\compressor.exe\n"
"ZLIB VERSION: 1.2.13"
msgstr ""

#: ../../../examples/extensions/deployers/dev/development_deploy.rst:113
msgid ""
"The environment scripts in Linux and OSX are not relocatable, because they "
"contain absolute paths and the ``sh`` shell `does not have any way to "
"provide access to the current script directory for sourced files <https://"
"stackoverflow.com/questions/29832037/how-to-get-script-directory-in-posix-"
"sh/29835459#29835459>`_."
msgstr ""

#: ../../../examples/extensions/deployers/dev/development_deploy.rst:115
msgid ""
"This shouldn't be a big blocker, as a \"search and replace\" with ``sed`` in "
"the generators folder can fix it:"
msgstr ""

#: ../../../examples/extensions/deployers/dev/development_deploy.rst:117
msgid "Linux"
msgstr ""

#: ../../../examples/extensions/deployers/dev/development_deploy.rst:117
msgid ""
"$ cd build/Release/generators\n"
"# Fix folders in Linux\n"
"$ sed -i 's,{old_folder},{new_folder},g' *\n"
"# Fix folders in MacOS\n"
"$ sed -i '' 's,{old_folder},{new_folder},g' *\n"
"$ source conanbuild.sh\n"
"$ cd ..\n"
"$ cmake --version\n"
"cmake version 3.25.3\n"
"$ cmake ../.. -DCMAKE_TOOLCHAIN_FILE=generators/conan_toolchain.cmake -"
"DCMAKE_BUILD_TYPE=Release\n"
"$ cmake --build .\n"
"$ ./compressor\n"
"ZLIB VERSION: 1.2.13"
msgstr ""

#: ../../../examples/extensions/deployers/dev/development_deploy.rst:137
msgid "**Best practices**"
msgstr "**最佳實踐**"

#: ../../../examples/extensions/deployers/dev/development_deploy.rst:139
msgid ""
"The fact that this flow is possible doesn't mean that it is recommended for "
"the majority of cases. It has some limitations:"
msgstr ""

#: ../../../examples/extensions/deployers/dev/development_deploy.rst:142
msgid "It is less efficient, requiring an extra copy of dependencies"
msgstr ""

#: ../../../examples/extensions/deployers/dev/development_deploy.rst:143
msgid ""
"Only ``CMakeDeps`` and ``CMakeToolchain`` are relocatable at this moment. "
"For other build system integrations, please create a ticket in Github"
msgstr ""

#: ../../../examples/extensions/deployers/dev/development_deploy.rst:144
msgid ""
"Linux and OSX shell scripts are not relocatable and require a manual ``sed``"
msgstr ""

#: ../../../examples/extensions/deployers/dev/development_deploy.rst:145
msgid ""
"The binary variability is limited to Release/Debug. The generated files are "
"exclusively for the current configuration, changing any other setting (os, "
"compiler, architecture) will require a different deploy"
msgstr ""

#: ../../../examples/extensions/deployers/dev/development_deploy.rst:147
msgid ""
"In the general case, normal usage of the cache is recommended. This "
"\"relocatable development deployment\" could be useful for distributing "
"final products that looks like an SDK, to consumers of a project not using "
"Conan."
msgstr ""
