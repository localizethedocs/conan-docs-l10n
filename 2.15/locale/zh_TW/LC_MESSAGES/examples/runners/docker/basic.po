# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.15\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:32+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../examples/runners/docker/basic.rst:4
msgid "Creating a Conan package using a Docker runner"
msgstr ""

#: ../../../common/experimental_warning.inc:3
msgid ""
"This feature is experimental and subject to breaking changes. See :ref:`the "
"Conan stability<stability>` section for more information."
msgstr ""

#: ../../../examples/runners/docker/basic.rst:8
msgid ""
"First of all you need to have the Docker daemon installed and running, plus "
"Conan and the ``docker`` Python package. This tutorial assumes that you are "
"running Conan inside a Python virtual environment, skip the first line if "
"you already have the ``docker`` Python package installed in your virtual "
"environment."
msgstr ""

#: ../../../examples/runners/docker/basic.rst:10
msgid ""
"# install docker in your virtual environment if you don't have it already "
"installed\n"
"$ pip install conan docker\n"
"$ docker ps\n"
"$ CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES"
msgstr ""

#: ../../../examples/runners/docker/basic.rst:18
msgid ""
"Now we are going to create create simple ``cmake_lib`` Conan template to "
"later run inside Docker using the runner feature. Let’s create the Conan "
"package and a Dockerfile inside our project folder."
msgstr ""

#: ../../../examples/runners/docker/basic.rst:20
msgid ""
"$ cd </my/runner/folder>\n"
"$ mkdir mylib\n"
"$ cd mylib\n"
"$ conan new cmake_lib -d name=mylib -d version=0.1\n"
"$ tree\n"
".\n"
"├── CMakeLists.txt\n"
"├── conanfile.py\n"
"├── include\n"
"│   └── mylib.h\n"
"├── src\n"
"│   └── mylib.cpp\n"
"└── test_package\n"
"    ├── CMakeLists.txt\n"
"    ├── conanfile.py\n"
"    └── src\n"
"        └── example.cpp"
msgstr ""
"$ cd </my/runner/folder>\n"
"$ mkdir mylib\n"
"$ cd mylib\n"
"$ conan new cmake_lib -d name=mylib -d version=0.1\n"
"$ tree\n"
".\n"
"├── CMakeLists.txt\n"
"├── conanfile.py\n"
"├── include\n"
"│   └── mylib.h\n"
"├── src\n"
"│   └── mylib.cpp\n"
"└── test_package\n"
"    ├── CMakeLists.txt\n"
"    ├── conanfile.py\n"
"    └── src\n"
"        └── example.cpp"

#: ../../../examples/runners/docker/basic.rst:40
msgid "``Dockerfile``"
msgstr "``Dockerfile``"

#: ../../../examples/runners/docker/basic.rst:42
msgid ""
"FROM ubuntu:22.04\n"
"RUN apt-get update \\\n"
"    && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-"
"recommends \\\n"
"        build-essential \\\n"
"        cmake \\\n"
"        python3 \\\n"
"        python3-pip \\\n"
"        python3-venv \\\n"
"    && rm -rf /var/lib/apt/lists/*\n"
"RUN pip install conan"
msgstr ""

#: ../../../examples/runners/docker/basic.rst:55
msgid ""
"$ cd </my/runner/folder>/mylib\n"
"$ tree\n"
".\n"
"...\n"
"├── Dockerfile\n"
"..."
msgstr ""

#: ../../../examples/runners/docker/basic.rst:64
msgid ""
"Now, we need to define two new profiles inside the conan ``profiles`` "
"folder. Replace ``</my/runner/folder>`` with your real project folder path."
msgstr ""

#: ../../../examples/runners/docker/basic.rst:66
msgid "``docker_example_host`` profile"
msgstr ""

#: ../../../examples/runners/docker/basic.rst:68
msgid ""
"[settings]\n"
"build_type=Release\n"
"arch=x86_64\n"
"compiler=gcc\n"
"compiler.cppstd=gnu17\n"
"compiler.libcxx=libstdc++11\n"
"compiler.version=11\n"
"os=Linux\n"
"\n"
"[runner]\n"
"type=docker\n"
"dockerfile=</my/runner/folder>/mylib\n"
"cache=copy\n"
"remove=true\n"
"platform=linux/amd64"
msgstr ""

#: ../../../examples/runners/docker/basic.rst:89
msgid ""
"Users are free to configure architecture and platform on the host profile. "
"Conan docker integration will build and run the image using the specified "
"platform."
msgstr ""

#: ../../../examples/runners/docker/basic.rst:93
msgid ""
"For example, if you are using a Mac Silicon, you can set the platform to "
"``linux/arm64/v8`` to build the image using the armv8 architecture."
msgstr ""

#: ../../../examples/runners/docker/basic.rst:96
msgid ""
"[settings]\n"
"arch=armv8\n"
"# ...\n"
"\n"
"[runner]\n"
"platform=linux/arm64/v8"
msgstr ""

#: ../../../examples/runners/docker/basic.rst:107
msgid "``docker_example_build`` profile"
msgstr ""

#: ../../../examples/runners/docker/basic.rst:109
msgid ""
"[settings]\n"
"arch=x86_64\n"
"build_type=Release\n"
"compiler=gcc\n"
"compiler.cppstd=gnu17\n"
"compiler.libcxx=libstdc++11\n"
"compiler.version=11\n"
"os=Linux"
msgstr ""

#: ../../../examples/runners/docker/basic.rst:120
msgid ""
"We are going to start from a totally clean environment, without any "
"containers, images or conan package."
msgstr ""

#: ../../../examples/runners/docker/basic.rst:122
msgid ""
"$ conan list \"*:*\"\n"
"Found 0 pkg/version recipes matching * in local cache"
msgstr ""

#: ../../../examples/runners/docker/basic.rst:128
#: ../../../examples/runners/docker/basic.rst:372
msgid ""
"$ docker ps --all\n"
"CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES"
msgstr ""
"$ docker ps --all\n"
"CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES"

#: ../../../examples/runners/docker/basic.rst:134
msgid ""
"$ docker images\n"
"REPOSITORY   TAG       IMAGE ID   CREATED   SIZE"
msgstr ""
"$ docker images\n"
"REPOSITORY   TAG       IMAGE ID   CREATED   SIZE"

#: ../../../examples/runners/docker/basic.rst:139
msgid ""
"Now, it's time to create our library ``mylib`` using our new runner "
"definition."
msgstr ""

#: ../../../examples/runners/docker/basic.rst:141
msgid "$ conan create . -pr:h docker_example_host -pr:b docker_example_build"
msgstr ""

#: ../../../examples/runners/docker/basic.rst:145
msgid ""
"If we split and analyze the command output, we can see what is happening and "
"where the commands are being executed."
msgstr ""

#: ../../../examples/runners/docker/basic.rst:147
msgid "**1.** Standard conan execution."
msgstr ""

#: ../../../examples/runners/docker/basic.rst:149
msgid ""
"======== Exporting recipe to the cache ========\n"
"mylib/0.1: Exporting package recipe: </my/runner/folder>/mylib/conanfile.py\n"
"mylib/0.1: Copied 1 '.py' file: conanfile.py\n"
"mylib/0.1: Copied 1 '.txt' file: CMakeLists.txt\n"
"mylib/0.1: Copied 1 '.h' file: mylib.h\n"
"mylib/0.1: Copied 1 '.cpp' file: mylib.cpp\n"
"mylib/0.1: Exported to cache folder: /Users/<user>/.conan2/p/"
"mylib4abd06a04bdaa/e\n"
"mylib/0.1: Exported: mylib/0.1#8760bf5a311f01cc26f3b95428203210 (2024-07-08 "
"12:22:01 UTC)\n"
"\n"
"======== Input profiles ========\n"
"Profile host:\n"
"[settings]\n"
"arch=x86_64\n"
"build_type=Release\n"
"compiler=gcc\n"
"compiler.cppstd=gnu17\n"
"compiler.libcxx=libstdc++11\n"
"compiler.version=11\n"
"os=Linux\n"
"\n"
"Profile build:\n"
"[settings]\n"
"arch=x86_64\n"
"build_type=Release\n"
"compiler=gcc\n"
"compiler.cppstd=gnu17\n"
"compiler.libcxx=libstdc++11\n"
"compiler.version=11\n"
"os=Linux"
msgstr ""

#: ../../../examples/runners/docker/basic.rst:181
msgid "**2.** Build docker image"
msgstr ""

#: ../../../examples/runners/docker/basic.rst:183
msgid ""
"Building the Docker image: conan-runner-default\n"
"Dockerfile path: '</my/runner/folder>/mylib/Dockerfile'\n"
"Docker build context: '</my/runner/folder>/mylib'\n"
"\n"
"Step 1/3 : FROM ubuntu:22.04\n"
"\n"
"---> 97271d29cb79\n"
"Step 2/3 : RUN apt-get update     && DEBIAN_FRONTEND=noninteractive apt-get "
"install -y --no-install-recommends         build-essential         "
"cmake         python3         python3-pip         python3-venv         g++-"
"x86-64-linux-gnu     && rm -rf /var/lib/apt/lists/*\n"
"\n"
"...\n"
"\n"
"---> 2bcf70201cce\n"
"Successfully built 2bcf70201cce\n"
"Successfully tagged conan-runner-default:latest"
msgstr ""

#: ../../../examples/runners/docker/basic.rst:200
msgid "**3.** Save the local cache running ``conan cache save``."
msgstr ""

#: ../../../examples/runners/docker/basic.rst:202
msgid ""
"Save host cache in: /Users/<user>/sources/test/mylib/.conanrunner/"
"local_cache_save.tgz\n"
"Found 1 pkg/version recipes matching * in local cache\n"
"Saving mylib/0.1: mylib4abd06a04bdaa"
msgstr ""

#: ../../../examples/runners/docker/basic.rst:208
msgid "**4.** Create and initialize the docker container."
msgstr ""

#: ../../../examples/runners/docker/basic.rst:210
msgid ""
"Creating the docker container\n"
"Container conan-runner-docker running"
msgstr ""

#: ../../../examples/runners/docker/basic.rst:215
msgid ""
"**5.** Check if the container has a conan version with the runner feature."
msgstr ""

#: ../../../examples/runners/docker/basic.rst:217
msgid ""
"conan-runner-docker | $ conan --version\n"
"conan-runner-docker | Conan version 2.12.1"
msgstr ""

#: ../../../examples/runners/docker/basic.rst:222
msgid ""
"**6.** Initialize the container conan cache using the host copy running "
"``conan cache restore``."
msgstr ""

#: ../../../examples/runners/docker/basic.rst:224
msgid ""
"conan-runner-docker | $ conan cache restore \"/root/conanrunner/mylib/."
"conanrunner/local_cache_save.tgz\"\n"
"conan-runner-docker | Restore: mylib/0.1 in mylib4abd06a04bdaa\n"
"conan-runner-docker | Local Cache\n"
"conan-runner-docker |   mylib\n"
"conan-runner-docker |     mylib/0.1\n"
"conan-runner-docker |       revisions\n"
"conan-runner-docker |         8760bf5a311f01cc26f3b95428203210 (2025-01-31 "
"12:34:25 UTC)\n"
"conan-runner-docker |           packages\n"
"conan-runner-docker |           recipe_folder: mylib4abd06a04bdaa"
msgstr ""

#: ../../../examples/runners/docker/basic.rst:236
msgid "**7.** Run the conan create inside the container and build \"mylib\"."
msgstr ""

#: ../../../examples/runners/docker/basic.rst:238
msgid ""
"   conan-runner-docker | $ conan create /root/conanrunner/mylib -pr:h "
"docker_param_example_host -pr:b docker_param_example_build\n"
"-f json > create.json\n"
"   conan-runner-docker |\n"
"   conan-runner-docker | ======== Exporting recipe to the cache ========\n"
"   conan-runner-docker | mylib/0.1: Exporting package recipe: /root/"
"conanrunner/mylib/conanfile.py\n"
"   conan-runner-docker | mylib/0.1: Copied 1 '.py' file: conanfile.py\n"
"   conan-runner-docker | mylib/0.1: Copied 1 '.txt' file: CMakeLists.txt\n"
"   conan-runner-docker | mylib/0.1: Copied 1 '.h' file: mylib.h\n"
"   conan-runner-docker | mylib/0.1: Copied 1 '.cpp' file: mylib.cpp\n"
"   conan-runner-docker | mylib/0.1: Exported to cache folder: /root/.conan2/"
"p/mylib4abd06a04bdaa/e\n"
"   conan-runner-docker | mylib/0.1: Exported: "
"mylib/0.1#8760bf5a311f01cc26f3b95428203210 (2025-01-31 12:34:26 UTC)\n"
"   conan-runner-docker |\n"
"   conan-runner-docker | ======== Input profiles ========\n"
"   conan-runner-docker | Profile host:\n"
"   conan-runner-docker | [settings]\n"
"   conan-runner-docker | arch=x86_64\n"
"   conan-runner-docker | build_type=Release\n"
"   conan-runner-docker | compiler=gcc\n"
"   conan-runner-docker | compiler.cppstd=gnu17\n"
"   conan-runner-docker | compiler.libcxx=libstdc++11\n"
"   conan-runner-docker | compiler.version=11\n"
"   conan-runner-docker | os=Linux\n"
"   conan-runner-docker |\n"
"   conan-runner-docker | Profile build:\n"
"   conan-runner-docker | [settings]\n"
"   conan-runner-docker | arch=x86_64\n"
"   conan-runner-docker | build_type=Release\n"
"   conan-runner-docker | compiler=gcc\n"
"   conan-runner-docker | compiler.cppstd=gnu17\n"
"   conan-runner-docker | compiler.libcxx=libstdc++11\n"
"   conan-runner-docker | compiler.version=11\n"
"   conan-runner-docker | os=Linux\n"
"   conan-runner-docker |\n"
"   conan-runner-docker |\n"
"   conan-runner-docker | ======== Computing dependency graph ========\n"
"   conan-runner-docker | Graph root\n"
"   conan-runner-docker |     cli\n"
"   conan-runner-docker | Requirements\n"
"   conan-runner-docker |     mylib/0.1#8760bf5a311f01cc26f3b95428203210 - "
"Cache\n"
"   conan-runner-docker |\n"
"   conan-runner-docker | ======== Computing necessary packages ========\n"
"   conan-runner-docker | mylib/0.1: Forced build from source\n"
"   conan-runner-docker | Requirements\n"
"   conan-runner-docker |     "
"mylib/0.1#8760bf5a311f01cc26f3b95428203210:8631cf963dbbb4d7a378a64a6fd1dc57558bc2fe "
"- Build\n"
"   conan-runner-docker |\n"
"\n"
"   ...\n"
"\n"
"   conan-runner-docker | [ 50%] Building CXX object CMakeFiles/example.dir/"
"src/example.cpp.o\n"
"   conan-runner-docker | [100%] Linking CXX executable example\n"
"   conan-runner-docker | [100%] Built target example\n"
"   conan-runner-docker |\n"
"   conan-runner-docker |\n"
"   conan-runner-docker | ======== Testing the package: Executing test "
"========\n"
"   conan-runner-docker | mylib/0.1 (test package): Running test()\n"
"   conan-runner-docker | mylib/0.1 (test package): RUN: ./example\n"
"   conan-runner-docker | mylib/0.1: Hello World Release!\n"
"   conan-runner-docker | mylib/0.1: __x86_64__ defined\n"
"   conan-runner-docker | mylib/0.1: _GLIBCXX_USE_CXX11_ABI 1\n"
"   conan-runner-docker | mylib/0.1: __cplusplus201703\n"
"   conan-runner-docker | mylib/0.1: __GNUC__11\n"
"   conan-runner-docker | mylib/0.1: __GNUC_MINOR__4\n"
"   conan-runner-docker | mylib/0.1 test_package"
msgstr ""

#: ../../../examples/runners/docker/basic.rst:305
msgid ""
"**8.** Copy just the package created inside the container using the "
"``pkglist.json`` info from the previous ``conan create``, restore this new "
"package inside the host cache running a ``conan cache save`` and remove the "
"container."
msgstr ""

#: ../../../examples/runners/docker/basic.rst:307
msgid ""
"conan-runner-docker | $ conan cache save --list=pkglist.json --file \"/root/"
"conanrunner/mylib\"/.conanrunner/docker_cache_save.tgz\n"
"conan-runner-docker | Saving mylib/0.1: mylib4abd06a04bdaa\n"
"conan-runner-docker | Saving "
"mylib/0.1:8631cf963dbbb4d7a378a64a6fd1dc57558bc2fe: b/mylib11242e0a7e627/p\n"
"conan-runner-docker | Saving "
"mylib/0.1:8631cf963dbbb4d7a378a64a6fd1dc57558bc2fe metadata: b/"
"mylib11242e0a7e627/d/metadata\n"
"conan-runner-docker | Local Cache\n"
"conan-runner-docker |   mylib\n"
"conan-runner-docker |     mylib/0.1\n"
"conan-runner-docker |       revisions\n"
"conan-runner-docker |         8760bf5a311f01cc26f3b95428203210 (2025-01-31 "
"12:34:26 UTC)\n"
"conan-runner-docker |           packages\n"
"conan-runner-docker |             8631cf963dbbb4d7a378a64a6fd1dc57558bc2fe\n"
"conan-runner-docker |               revisions\n"
"conan-runner-docker |                 ded6547554ff2306db5250451340fa43\n"
"conan-runner-docker |                   package_folder: b/mylib11242e0a7e627/"
"p\n"
"conan-runner-docker |                   metadata_folder: b/"
"mylib11242e0a7e627/d/metadata\n"
"conan-runner-docker |               info\n"
"conan-runner-docker |                 settings\n"
"conan-runner-docker |                   os: Linux\n"
"conan-runner-docker |                   arch: x86_64\n"
"conan-runner-docker |                   compiler: gcc\n"
"conan-runner-docker |                   compiler.cppstd: gnu17\n"
"conan-runner-docker |                   compiler.libcxx: libstdc++11\n"
"conan-runner-docker |                   compiler.version: 11\n"
"conan-runner-docker |                   build_type: Release\n"
"conan-runner-docker |                 options\n"
"conan-runner-docker |                   fPIC: True\n"
"conan-runner-docker |                   shared: False\n"
"conan-runner-docker |           recipe_folder: mylib4abd06a04bdaa\n"
"conan-runner-docker |\n"
"Restore host cache from: /Users/<user>/sources/test/mylib/.conanrunner/"
"docker_cache_save.tgz\n"
"Restore: mylib/0.1 in mylib4abd06a04bdaa\n"
"Restore: mylib/0.1:8631cf963dbbb4d7a378a64a6fd1dc57558bc2fe in b/"
"mylib11242e0a7e627/p\n"
"Restore: mylib/0.1:8631cf963dbbb4d7a378a64a6fd1dc57558bc2fe metadata in b/"
"mylib11242e0a7e627/d/metadata\n"
"Stopping container\n"
"Removing container"
msgstr ""

#: ../../../examples/runners/docker/basic.rst:346
msgid ""
"If we now check the status of our conan and docker cache, we will see the "
"new mylib package compile for Linux and the new docker image but we don’t "
"have any container because we define ``remove=true``"
msgstr ""

#: ../../../examples/runners/docker/basic.rst:348
msgid ""
"$ conan list \"*:*\"\n"
"Found 1 pkg/version recipes matching * in local cache\n"
"Local Cache\n"
"mylib\n"
"    mylib/0.1\n"
"    revisions\n"
"        8760bf5a311f01cc26f3b95428203210 (2024-07-08 12:33:28 UTC)\n"
"        packages\n"
"            8631cf963dbbb4d7a378a64a6fd1dc57558bc2fe\n"
"            info\n"
"                settings\n"
"                arch: x86_64\n"
"                build_type: Release\n"
"                compiler: gcc\n"
"                compiler.cppstd: gnu17\n"
"                compiler.libcxx: libstdc++11\n"
"                compiler.version: 11\n"
"                os: Linux\n"
"                options\n"
"                fPIC: True\n"
"                shared: False"
msgstr ""

#: ../../../examples/runners/docker/basic.rst:377
msgid ""
"$ docker images\n"
"REPOSITORY        TAG       IMAGE ID       CREATED          SIZE\n"
"my-conan-runner   latest    2bcf70201cce   11 minutes ago   531MB"
msgstr ""

#: ../../../examples/runners/docker/basic.rst:383
msgid ""
"What we have just done is to compile a library from scratch inside a Docker "
"container without running any Docker command and retrieve the generated "
"packages in a totally transparent and easily debuggable way thanks to our "
"terminal output."
msgstr ""

#: ../../../examples/runners/docker/basic.rst:385
msgid ""
"In this way, we can work as we have always done regardless of whether it is "
"on our machine or in a container, without several open terminals and having "
"the result of each operation in the same cache, being able to reuse the "
"compiled packages from a previous compilation in another container "
"automatically and transparently."
msgstr ""
