# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.15\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:32+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/tools/files/basic.rst:2
msgid "conan.tools.files basic operations"
msgstr ""

#: ../../../reference/tools/files/basic.rst:7
msgid "conan.tools.files.copy()"
msgstr ""

#: ../../../conan_sources/conan/tools/files/copy_pattern.py:docstring of
#: conan.tools.files.copy_pattern.copy:1
msgid ""
"Copy the files matching the pattern (fnmatch) at the src folder to a dst "
"folder."
msgstr ""

#: ../../../conan_sources/conan/tools/files/conandata.py:docstring of
#: conan.tools.files.conandata.update_conandata:0
#: ../../../conan_sources/conan/tools/files/copy_pattern.py:docstring
#: conan.tools.files.copy_pattern.copy:0
#: ../../../conan_sources/conan/tools/files/files.py:docstring
#: conan.tools.files.files.chdir:0 conan.tools.files.files.chmod:11
#: conan.tools.files.files.collect_libs:0 conan.tools.files.files.load:0
#: conan.tools.files.files.mkdir:0 conan.tools.files.files.rename:0
#: conan.tools.files.files.replace_in_file:0 conan.tools.files.files.rm:0
#: conan.tools.files.files.save:0 conan.tools.files.files.unzip:0
msgid "Parameters"
msgstr ""

#: ../../../conan_sources/conan/tools/files/conandata.py:docstring of
#: conan.tools.files.conandata.update_conandata:8
#: ../../../conan_sources/conan/tools/files/copy_pattern.py:docstring
#: conan.tools.files.copy_pattern.copy:3
#: ../../../conan_sources/conan/tools/files/files.py:docstring
#: conan.tools.files.files.chdir:3 conan.tools.files.files.chmod:13
#: conan.tools.files.files.collect_libs:9 conan.tools.files.files.load:4
#: conan.tools.files.files.mkdir:4 conan.tools.files.files.rename:7
#: conan.tools.files.files.replace_in_file:3 conan.tools.files.files.rm:3
#: conan.tools.files.files.save:4 conan.tools.files.files.unzip:3
msgid "The current recipe object. Always use ``self``."
msgstr ""

#: ../../../conan_sources/conan/tools/files/copy_pattern.py:docstring of
#: conan.tools.files.copy_pattern.copy:4
msgid ""
"(Required) An fnmatch file pattern of the files that should be copied. It "
"must not start with ``..`` relative path or an exception will be raised."
msgstr ""

#: ../../../conan_sources/conan/tools/files/copy_pattern.py:docstring of
#: conan.tools.files.copy_pattern.copy:6
msgid ""
"(Required) Source folder in which those files will be searched. This folder "
"will be stripped from the dst parameter. E.g., lib/Debug/x86."
msgstr ""

#: ../../../conan_sources/conan/tools/files/copy_pattern.py:docstring of
#: conan.tools.files.copy_pattern.copy:8
msgid ""
"(Required) Destination local folder. It must be different from src value or "
"an exception will be raised."
msgstr ""

#: ../../../conan_sources/conan/tools/files/copy_pattern.py:docstring of
#: conan.tools.files.copy_pattern.copy:10
msgid ""
"(Optional, defaulted to ``True``) Means if you want to keep the relative "
"path when you copy the files from the src folder to the dst one."
msgstr ""

#: ../../../conan_sources/conan/tools/files/copy_pattern.py:docstring of
#: conan.tools.files.copy_pattern.copy:12
msgid ""
"(Optional, defaulted to ``None``) A tuple/list of fnmatch patterns or even a "
"single one to be excluded from the copy."
msgstr ""

#: ../../../conan_sources/conan/tools/files/copy_pattern.py:docstring of
#: conan.tools.files.copy_pattern.copy:14
msgid ""
"(Optional, defaulted to ``True``) If enabled, it will do a case-insensitive "
"pattern matching. will do a case-insensitive pattern matching when ``True``"
msgstr ""

#: ../../../conan_sources/conan/tools/files/copy_pattern.py:docstring of
#: conan.tools.files.copy_pattern.copy:17
msgid ""
"(Optional, default ``False``). If the file to be copied already exists in "
"the destination folder, only really copy it if it seems different (different "
"size, different modification time)"
msgstr ""

#: ../../../conan_sources/conan/tools/files/copy_pattern.py:docstring of
#: conan.tools.files.copy_pattern.copy:0
#: ../../../conan_sources/conan/tools/files/files.py:docstring
#: conan.tools.files.files.chmod:37 conan.tools.files.files.collect_libs:0
#: conan.tools.files.files.load:0 conan.tools.files.files.replace_in_file:0
msgid "Returns"
msgstr ""

#: ../../../conan_sources/conan/tools/files/copy_pattern.py:docstring of
#: conan.tools.files.copy_pattern.copy:20
msgid "list of copied files"
msgstr ""

#: ../../../reference/tools/files/basic.rst:13
#: ../../../reference/tools/files/basic.rst:42
#: ../../../reference/tools/files/basic.rst:59
#: ../../../reference/tools/files/basic.rst:77
#: ../../../reference/tools/files/basic.rst:97
#: ../../../reference/tools/files/basic.rst:147
#: ../../../reference/tools/files/basic.rst:166
#: ../../../reference/tools/files/basic.rst:185
#: ../../../reference/tools/files/basic.rst:289
#: ../../../reference/tools/files/basic.rst:319
msgid "Usage:"
msgstr ""

#: ../../../reference/tools/files/basic.rst:15
msgid ""
"def package(self):\n"
"    copy(self, \"*.h\", self.source_folder, os.path.join(self."
"package_folder, \"include\"))\n"
"    copy(self, \"*.lib\", self.build_folder, os.path.join(self."
"package_folder, \"lib\"))"
msgstr ""

#: ../../../reference/tools/files/basic.rst:24
msgid ""
"The files that are **symlinks to files** or **symlinks to folders** with be "
"treated like any other file, so they will only be copied if the specified "
"pattern matches with the file."
msgstr ""

#: ../../../reference/tools/files/basic.rst:27
msgid ""
"At the destination folder, the symlinks will be created pointing to the "
"exact same file or folder, absolute or relative, being the responsibility of "
"the user to manipulate the symlink to, for example, transform the symlink "
"into a relative path before copying it so it points to the destination "
"folder."
msgstr ""

#: ../../../reference/tools/files/basic.rst:31
msgid ""
"Check :ref:`here<conan_tools_files_symlinks>` the reference of tools to "
"manage symlinks."
msgstr ""

#: ../../../reference/tools/files/basic.rst:35
msgid "conan.tools.files.load()"
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.load:1
msgid ""
"Utility function to load files in one line. It will manage the open and "
"close of the file, and load binary encodings. Returns the content of the "
"file."
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.load:5
msgid "Path to the file to read"
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.load:6
msgid ""
"(Optional, Defaulted to ``utf-8``): Specifies the input file text encoding."
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.load:7
msgid "The contents of the file"
msgstr ""

#: ../../../reference/tools/files/basic.rst:44
msgid ""
"from conan.tools.files import load\n"
"\n"
"content = load(self, \"myfile.txt\")"
msgstr ""

#: ../../../reference/tools/files/basic.rst:53
msgid "conan.tools.files.save()"
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.save:1
msgid ""
"Utility function to save files in one line. It will manage the open and "
"close of the file and creating directories if necessary."
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.save:5
msgid "Path of the file to be created."
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.save:6
msgid "Content (str or bytes) to be write to the file."
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.save:7
msgid ""
"(Optional, Defaulted to False): If ``True`` the contents will be appended to "
"the existing one."
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.save:9
msgid ""
"(Optional, Defaulted to utf-8): Specifies the output file text encoding."
msgstr ""

#: ../../../reference/tools/files/basic.rst:61
msgid ""
"from conan.tools.files import save\n"
"\n"
"save(self, \"path/to/otherfile.txt\", \"contents of the file\")"
msgstr ""

#: ../../../reference/tools/files/basic.rst:71
msgid "conan.tools.files.rename()"
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.rename:1
msgid ""
"Utility functions to rename a file or folder src to dst with retrying. ``os."
"rename()`` frequently raises “Access is denied” exception on Windows. This "
"function renames file or folder using robocopy to avoid the exception on "
"Windows."
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.rename:8
msgid "Path to be renamed."
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.rename:9
msgid "Path to be renamed to."
msgstr ""

#: ../../../reference/tools/files/basic.rst:79
msgid ""
"from conan.tools.files import rename\n"
"\n"
"def source(self):\n"
"    rename(self, \"lib-sources-abe2h9fe\", \"sources\")  # renaming a folder"
msgstr ""

#: ../../../reference/tools/files/basic.rst:90
msgid "conan.tools.files.replace_in_file()"
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.replace_in_file:1
msgid ""
"Replace a string ``search`` in the contents of the file ``file_path`` with "
"the string replace."
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.replace_in_file:4
msgid "File path of the file to perform the replacing."
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.replace_in_file:5
msgid "String you want to be replaced."
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.replace_in_file:6
msgid "String to replace the searched string."
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.replace_in_file:7
msgid ""
"(Optional, Defaulted to ``True``) If ``True``, it raises an error if the "
"searched string is not found, so nothing is actually replaced."
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.replace_in_file:9
msgid ""
"(Optional, Defaulted to utf-8): Specifies the input and output files text "
"encoding."
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.replace_in_file:11
msgid ""
"``True`` if the pattern was found, ``False`` otherwise if `strict` is "
"``False``."
msgstr ""

#: ../../../reference/tools/files/basic.rst:99
msgid ""
"from conan.tools.files import replace_in_file\n"
"\n"
"replace_in_file(self, os.path.join(self.source_folder, \"folder\", \"file."
"txt\"), \"foo\", \"bar\")"
msgstr ""

#: ../../../reference/tools/files/basic.rst:107
msgid "conan.tools.files.chmod()"
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.chmod:1
msgid "Change file or directory permissions cross-platform."
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.chmod:5
msgid ""
"This function is a simple wrapper around the chmod Unix command, but it is "
"cross-platform supported. It is indicated to use it instead of os.stat + os."
"chmod, as it only changes the permissions of the directory or file for the "
"owner and avoids issues with the umask. On Windows is limited to changing "
"write permission only."
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.chmod:12
msgid "conanfile"
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.chmod:-1
msgid "object"
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.chmod:14
msgid "path"
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.chmod:-1
msgid "str"
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.chmod:15
msgid "Path to the file or directory whose permissions will be changed."
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.chmod:19
msgid "read"
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.chmod:-1
msgid "bool, optional"
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.chmod:17
msgid ""
"If ``True``, the file or directory will be given read permissions for owner "
"user. If ``False``, the read permission will be removed. If ``None``, the "
"read permission will be left unchanged. Defaults to None."
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.chmod:24
msgid "write"
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.chmod:22
msgid ""
"If ``True``, the file or directory will be given write permissions for owner "
"user. If ``False``, the write permission will be removed. If ``None``, the "
"file or directory will not be changed. Defaults to None."
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.chmod:29
msgid "execute"
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.chmod:27
msgid ""
"If ``True``, the file or directory will be given execute permissions for "
"owner user. If ``False``, the execution permission will be removed. If "
"``None``, the file or directory will not be changed. Defaults to None."
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.chmod:34
msgid "recursive"
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.chmod:-1
msgid "bool"
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.chmod:32
msgid ""
"If ``True``, the permissions will be applied recursively to all files and "
"directories inside the specified directory. If ``False``, only the specified "
"file or directory will be changed. Defaults to False."
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.chmod:38
msgid "None"
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.chmod:41
msgid "Examples"
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.chmod:42
msgid "Add execution permission to a packaged bash script"
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.chmod:42
msgid ""
"from conan.tools.files import chmod\n"
"chmod(self, os.path.join(self.package_folder, \"bin\", \"script.sh\"), "
"execute=True)"
msgstr ""

#: ../../../reference/tools/files/basic.rst:115
msgid "conan.tools.files.rm()"
msgstr ""

#: ../../../reference/tools/files/basic.rst:117
msgid ""
"This function removes files from the filesystem. It can be used to remove a "
"single file or a pattern based on fnmatch. It's indicated to use it instead "
"of ``os.remove`` because it's cross-platform and may avoid permissions "
"issues."
msgstr ""

#: ../../../reference/tools/files/basic.rst:120
msgid "*Remove all files finished in .tmp in build_folder and recursively*"
msgstr ""

#: ../../../reference/tools/files/basic.rst:120
msgid ""
"from conan.tools.files import rm\n"
"\n"
"rm(self, \"*.tmp\", self.build_folder, recursive=True)"
msgstr ""

#: ../../../reference/tools/files/basic.rst:127
msgid "*Remove all files from bin_folder, except for any finished by .dll*"
msgstr ""

#: ../../../reference/tools/files/basic.rst:127
msgid ""
"from conan.tools.files import rm\n"
"\n"
"rm(self, \"*\", self.bin_folder, recursive=False, excludes=\"*.dll\")"
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.rm:1
msgid ""
"Utility functions to remove files matching a ``pattern`` in a ``folder``."
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.rm:4
msgid "Pattern that the files to be removed have to match (fnmatch)."
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.rm:5
msgid "Folder to search/remove the files."
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.rm:6
msgid "If ``recursive`` is specified it will search in the subfolders."
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.rm:7
msgid ""
"(Optional, defaulted to None) A tuple/list of fnmatch patterns or even a "
"single one to be excluded from the remove pattern."
msgstr ""

#: ../../../reference/tools/files/basic.rst:140
msgid "conan.tools.files.mkdir()"
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.mkdir:1
msgid ""
"Utility functions to create a directory. The existence of the specified "
"directory is checked, so mkdir() will do nothing if the directory already "
"exists."
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.mkdir:5
msgid "Path to the folder to be created."
msgstr ""

#: ../../../reference/tools/files/basic.rst:149
msgid ""
"from conan.tools.files import mkdir\n"
"\n"
"mkdir(self, \"mydir\") # Creates mydir if it does not already exist\n"
"mkdir(self, \"mydir\") # Does nothing"
msgstr ""

#: ../../../reference/tools/files/basic.rst:159
msgid "conan.tools.files.rmdir()"
msgstr ""

#: ../../../reference/tools/files/basic.rst:168
msgid ""
"from conan.tools.files import rmdir\n"
"\n"
"rmdir(self, \"mydir\") # Remove mydir if it exist\n"
"rmdir(self, \"mydir\") # Does nothing"
msgstr ""

#: ../../../reference/tools/files/basic.rst:179
msgid "conan.tools.files.chdir()"
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.chdir:1
msgid ""
"This is a context manager that allows to temporary change the current "
"directory in your conanfile"
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.chdir:4
msgid "Directory path name to change the current directory."
msgstr ""

#: ../../../reference/tools/files/basic.rst:187
msgid ""
"from conan.tools.files import chdir\n"
"\n"
"def build(self):\n"
"    with chdir(self, \"./subdir\"):\n"
"        do_something()"
msgstr ""

#: ../../../reference/tools/files/basic.rst:198
msgid "conan.tools.files.unzip()"
msgstr ""

#: ../../../reference/tools/files/basic.rst:200
msgid ""
"This function extract different compressed formats (``.tar``, ``.tar.gz``, "
"``.tgz``, ``.tar.bz2``, ``.tbz2``, ``.tar.xz``, ``.txz``, and ``.zip``) into "
"the given destination folder."
msgstr ""

#: ../../../reference/tools/files/basic.rst:203
msgid ""
"It also accepts gzipped files, with extension ``.gz`` (not matching any of "
"the above), and it will unzip them into a file with the same name but "
"without the extension, or to a filename defined by the ``destination`` "
"argument."
msgstr ""

#: ../../../reference/tools/files/basic.rst:206
msgid ""
"from conan.tools.files import unzip\n"
"\n"
"unzip(self, \"myfile.zip\")\n"
"# or to extract in \"myfolder\" sub-folder\n"
"unzip(self, \"myfile.zip\", \"myfolder\")"
msgstr ""

#: ../../../reference/tools/files/basic.rst:214
msgid ""
"You can keep the permissions of the files using the "
"``keep_permissions=True`` parameter."
msgstr ""

#: ../../../reference/tools/files/basic.rst:216
msgid ""
"from conan.tools.files import unzip\n"
"\n"
"unzip(self, \"myfile.zip\", \"myfolder\", keep_permissions=True)"
msgstr ""

#: ../../../reference/tools/files/basic.rst:222
msgid ""
"Use the ``pattern`` argument if you want to filter specific files and paths "
"to decompress from the archive."
msgstr ""

#: ../../../reference/tools/files/basic.rst:224
msgid ""
"from conan.tools.files import unzip\n"
"\n"
"# Extract only files inside relative folder \"small\"\n"
"unzip(self, \"bigfile.zip\", pattern=\"small/*\")\n"
"# Extract only txt files\n"
"unzip(self, \"bigfile.zip\", pattern=\"*.txt\")"
msgstr ""

#: ../../../reference/tools/files/basic.rst:236
msgid ""
"In Conan 2.8 ``unzip()`` provides a new ``extract_filter=None`` argument and "
"a new ``tools.files.unzip:filter`` configuration was added to prepare for "
"future Python 3.14 breaking changes, in which the ``data`` filter for "
"extracting tar archives will be made the default. The recommendation is to "
"start using the ``data`` filter as soon as possible (the conf can be defined "
"in ``global.conf``, or it can be explicitly added as argument in recipes "
"``unzip()`` and ``get()`` helpers) as that is the current security "
"recommendation while downloading sources from the internet."
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.unzip:1
msgid "Extract different compressed formats"
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.unzip:4
msgid "Path to the compressed file."
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.unzip:5
msgid ""
"(Optional, Defaulted to ``.``) Destination folder (or file for .gz files)"
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.unzip:6
msgid ""
"(Optional, Defaulted to ``False``) Keep the zip permissions. WARNING: Can be "
"dangerous if the zip was not created in a NIX system, the bits could produce "
"undefined permission schema. Use this option only if you are sure that the "
"zip was created correctly."
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.unzip:10
msgid ""
"(Optional, Defaulted to ``None``) Extract only paths matching the pattern. "
"This should be a Unix shell-style wildcard, see fnmatch documentation for "
"more details."
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.unzip:12
msgid ""
"(Optional, Defaulted to False) If True, and all the unzipped contents are in "
"a single folder it will flat the folder moving all the contents to the "
"parent folder."
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.unzip:14
msgid ""
"(Optional, defaulted to None). When extracting a tar file, use the tar "
"extracting filters define by Python in https://docs.python.org/3/library/"
"tarfile.html"
msgstr ""

#: ../../../reference/tools/files/basic.rst:250
msgid "conan.tools.files.update_conandata()"
msgstr ""

#: ../../../reference/tools/files/basic.rst:252
msgid ""
"This function reads the ``conandata.yml`` inside the exported folder in the "
"conan cache, if it exists. If the ``conandata.yml`` does not exist, it will "
"create it. Then, it updates the conandata dictionary with the provided "
"``data`` one, which is updated recursively, prioritizing the ``data`` "
"values, but keeping other existing ones. Finally the ``conandata.yml`` is "
"saved in the same place."
msgstr ""

#: ../../../reference/tools/files/basic.rst:258
msgid ""
"This helper can only be used within the ``export()`` method, it can raise "
"otherwise. One application is to capture in the ``conandata.yml`` the scm "
"coordinates (like Git remote url and commit), to be able to recover it later "
"in the ``source()`` method and have reproducible recipes that can build from "
"sources without actually storing the sources in the recipe."
msgstr ""

#: ../../../conan_sources/conan/tools/files/conandata.py:docstring of
#: conan.tools.files.conandata.update_conandata:1
msgid ""
"Tool to modify the ``conandata.yml`` once it is exported. It can be used, "
"for example:"
msgstr ""

#: ../../../conan_sources/conan/tools/files/conandata.py:docstring of
#: conan.tools.files.conandata.update_conandata:3
msgid "To add additional data like the \"commit\" and \"url\" for the scm."
msgstr ""

#: ../../../conan_sources/conan/tools/files/conandata.py:docstring of
#: conan.tools.files.conandata.update_conandata:4
msgid ""
"To modify the contents cleaning the data that belong to other versions "
"(different from the exported) to avoid changing the recipe revision when the "
"changed data doesn't belong to the current version."
msgstr ""

#: ../../../conan_sources/conan/tools/files/conandata.py:docstring of
#: conan.tools.files.conandata.update_conandata:9
msgid "(Required) A dictionary (can be nested), of values to update"
msgstr ""

#: ../../../reference/tools/files/basic.rst:269
msgid "conan.tools.files.trim_conandata()"
msgstr ""

#: ../../../conan_sources/conan/tools/files/conandata.py:docstring of
#: conan.tools.files.conandata.trim_conandata:1
msgid ""
"Tool to modify the ``conandata.yml`` once it is exported, to limit it to the "
"current version only"
msgstr ""

#: ../../../reference/tools/files/basic.rst:278
msgid ""
"The ``conan.tools.files.trim_conandata()`` function is in **preview**. See :"
"ref:`the Conan stability<stability>` section for more information."
msgstr ""

#: ../../../reference/tools/files/basic.rst:282
msgid ""
"This function modifies the ``conandata.yml`` inside the exported folder in "
"the conan cache, if it exists, and keeps only the information related to the "
"currently built version."
msgstr ""

#: ../../../reference/tools/files/basic.rst:285
msgid ""
"This helper can only be used within the ``export()`` method or "
"``post_export()`` :ref:`hook<reference_extensions_hooks>`, it may raise in "
"the future otherwise. One application is to ensure changes in the "
"``conandata.yml`` file related to some versions do not affect the generated "
"recipe revisions of the rest."
msgstr ""

#: ../../../reference/tools/files/basic.rst:291
msgid ""
"from conan import ConanFile\n"
"from conan.tools.files import trim_conandata\n"
"\n"
"class Pkg(ConanFile):\n"
"    name = \"pkg\"\n"
"\n"
"    def export(self):\n"
"        # any change to other versions in the conandata.yml\n"
"        # won't affect the revision of the version that is built\n"
"        trim_conandata(self)"
msgstr ""

#: ../../../reference/tools/files/basic.rst:308
msgid "conan.tools.files.collect_libs()"
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.collect_libs:1
msgid ""
"Returns a sorted list of library names from the libraries (files with "
"extensions *.so*, *.lib*, *.a* and *.dylib*) located inside the ``conanfile."
"cpp_info.libdirs`` (by default) or the **folder** directory relative to the "
"package folder. Useful to collect not inter-dependent libraries or with "
"complex names like ``libmylib-x86-debug-en.lib``."
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.collect_libs:6
msgid ""
"For UNIX libraries staring with **lib**, like *libmath.a*, this tool will "
"collect the library name **math**."
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.collect_libs:10
msgid ""
"(Optional, Defaulted to ``None``): String indicating the subfolder name "
"inside ``conanfile.package_folder`` where the library files are."
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.collect_libs:12
msgid "A list with the library names"
msgstr ""

#: ../../../reference/tools/files/basic.rst:316
msgid ""
"This tool collects the libraries searching directly inside the package "
"folder and returns them in no specific order. If libraries are inter-"
"dependent, then ``package_info()`` method should order them to achieve "
"correct linking order."
msgstr ""

#: ../../../reference/tools/files/basic.rst:321
msgid ""
"from conan.tools.files import collect_libs\n"
"\n"
"def package_info(self):\n"
"    self.cpp_info.libdirs = [\"lib\", \"other_libdir\"]  # Default value is "
"'lib'\n"
"    self.cpp_info.libs = collect_libs(self)"
msgstr ""

#: ../../../reference/tools/files/basic.rst:329
msgid ""
"For UNIX libraries starting with **lib**, like *libmath.a*, this tool will "
"collect the library name **math**. Regarding symlinks, this tool will keep "
"only the \"most generic\" file among the resolved real file and all symlinks "
"pointing to this real file. For example among files below, this tool will "
"select *libmath.dylib* file and therefore only append *math* in the returned "
"list:"
msgstr ""

#: ../../../reference/tools/files/basic.rst:335
msgid ""
"-rwxr-xr-x libmath.1.0.0.dylib lrwxr-xr-x libmath.1.dylib -> libmath.1.0.0."
"dylib\n"
"lrwxr-xr-x libmath.dylib -> libmath.1.dylib"
msgstr ""
