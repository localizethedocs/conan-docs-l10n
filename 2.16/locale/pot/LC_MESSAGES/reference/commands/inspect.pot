# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.16\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:31+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/commands/inspect.rst:4
msgid "conan inspect"
msgstr ""

#: ../../../common/experimental_warning.inc:3
msgid ""
"This feature is experimental and subject to breaking changes. See :ref:`the "
"Conan stability<stability>` section for more information."
msgstr ""

#: ../../../reference/commands/inspect.rst:-1
msgid ""
"$ conan inspect -h\n"
"usage: conan inspect [-h] [-v [V]] [-cc CORE_CONF] [-f FORMAT]\n"
"                     [--out-file OUT_FILE] [-r REMOTE | -nr] [-l LOCKFILE]\n"
"                     [--lockfile-partial]\n"
"                     path\n"
"\n"
"Inspect a conanfile.py to return its public fields.\n"
"\n"
"positional arguments:\n"
"  path                  Path to a folder containing a recipe (conanfile.py)\n"
"\n"
"options:\n"
"  -h, --help            show this help message and exit\n"
"  -v [V]                Level of detail of the output. Valid options from "
"less\n"
"                        verbose to more verbose: -vquiet, -verror, -"
"vwarning,\n"
"                        -vnotice, -vstatus, -v or -vverbose, -vv or -"
"vdebug,\n"
"                        -vvv or -vtrace\n"
"  -cc CORE_CONF, --core-conf CORE_CONF\n"
"                        Define core configuration, overwriting global.conf\n"
"                        values. E.g.: -cc core:non_interactive=True\n"
"  -f FORMAT, --format FORMAT\n"
"                        Select the output format: json\n"
"  --out-file OUT_FILE   Write the output of the command to the specified "
"file\n"
"                        instead of stdout.\n"
"  -r REMOTE, --remote REMOTE\n"
"                        Remote names. Accepts wildcards ('*' means all the\n"
"                        remotes available)\n"
"  -nr, --no-remote      Do not use remote, resolve exclusively in the cache\n"
"  -l LOCKFILE, --lockfile LOCKFILE\n"
"                        Path to a lockfile. Use --lockfile=\"\" to avoid\n"
"                        automatic use of existing 'conan.lock' file\n"
"  --lockfile-partial    Do not raise an error if some dependency is not "
"found\n"
"                        in lockfile\n"
"\n"
msgstr ""

#: ../../../reference/commands/inspect.rst:12
msgid ""
"The :command:`conan inspect` command shows the public attributes of any "
"recipe (`conanfile.py`) as follows:"
msgstr ""

#: ../../../reference/commands/inspect.rst:14
msgid ""
"$ conan inspect .\n"
"default_options:\n"
"    shared: False\n"
"    fPIC: True\n"
"    neon: True\n"
"    msa: True\n"
"    sse: True\n"
"    vsx: True\n"
"    api_prefix:\n"
"description: libpng is the official PNG file format reference library.\n"
"generators: []\n"
"homepage: http://www.libpng.org\n"
"label:\n"
"license: libpng-2.0\n"
"name: libpng\n"
"options:\n"
"    api_prefix:\n"
"    fPIC: True\n"
"    msa: True\n"
"    neon: True\n"
"    shared: False\n"
"    sse: True\n"
"    vsx: True\n"
"options_definitions:\n"
"    shared: ['True', 'False']\n"
"    fPIC: ['True', 'False']\n"
"    neon: ['True', 'check', 'False']\n"
"    msa: ['True', 'False']\n"
"    sse: ['True', 'False']\n"
"    vsx: ['True', 'False']\n"
"    api_prefix: ['ANY']\n"
"package_type: None\n"
"requires: []\n"
"revision_mode: hash\n"
"settings: ['os', 'arch', 'compiler', 'build_type']\n"
"topics: ['png', 'graphics', 'image']\n"
"url: https://github.com/conan-io/conan-center-index"
msgstr ""

#: ../../../reference/commands/inspect.rst:55
msgid ""
"``conan inspect`` evaluates recipe methods such as ``set_name()`` and "
"``set_version()``, and is capable of resolving ``python_requires`` "
"dependencies (which can be locked with the ``--lockfile`` argument), so its "
"base methods will also be properly executed."
msgstr ""

#: ../../../reference/commands/inspect.rst:60
msgid ""
"The ``--remote`` argument is used *only* for fetching remote "
"``python_requires`` in cases where they are needed, **not** to inspect "
"recipes from a remote. Use :ref:`conan graph info<reference_graph_info>` for "
"such cases."
msgstr ""

#: ../../../reference/commands/inspect.rst:64
msgid ""
"The :command:`conan inspect ... --format=json` returns a JSON output format "
"in ``stdout`` (which can be redirected to a file) with the following "
"structure:"
msgstr ""

#: ../../../reference/commands/inspect.rst:66
msgid ""
"$ conan inspect . --format=json\n"
"{\n"
"    \"name\": \"libpng\",\n"
"    \"url\": \"https://github.com/conan-io/conan-center-index\",\n"
"    \"license\": \"libpng-2.0\",\n"
"    \"description\": \"libpng is the official PNG file format reference "
"library.\",\n"
"    \"homepage\": \"http://www.libpng.org\",\n"
"    \"revision_mode\": \"hash\",\n"
"    \"default_options\": {\n"
"        \"shared\": false,\n"
"        \"fPIC\": true,\n"
"        \"neon\": true,\n"
"        \"msa\": true,\n"
"        \"sse\": true,\n"
"        \"vsx\": true,\n"
"        \"api_prefix\": \"\"\n"
"    },\n"
"    \"topics\": [\n"
"        \"png\",\n"
"        \"graphics\",\n"
"        \"image\"\n"
"    ],\n"
"    \"package_type\": \"None\",\n"
"    \"settings\": [\n"
"        \"os\",\n"
"        \"arch\",\n"
"        \"compiler\",\n"
"        \"build_type\"\n"
"    ],\n"
"    \"options\": {\n"
"        \"api_prefix\": \"\",\n"
"        \"fPIC\": \"True\",\n"
"        \"msa\": \"True\",\n"
"        \"neon\": \"True\",\n"
"        \"shared\": \"False\",\n"
"        \"sse\": \"True\",\n"
"        \"vsx\": \"True\"\n"
"    },\n"
"    \"options_definitions\": {\n"
"        \"shared\": [\n"
"            \"True\",\n"
"            \"False\"\n"
"        ],\n"
"        \"fPIC\": [\n"
"            \"True\",\n"
"            \"False\"\n"
"        ],\n"
"        \"neon\": [\n"
"            \"True\",\n"
"            \"check\",\n"
"            \"False\"\n"
"        ],\n"
"        \"msa\": [\n"
"            \"True\",\n"
"            \"False\"\n"
"        ],\n"
"        \"sse\": [\n"
"            \"True\",\n"
"            \"False\"\n"
"        ],\n"
"        \"vsx\": [\n"
"            \"True\",\n"
"            \"False\"\n"
"        ],\n"
"        \"api_prefix\": [\n"
"            \"ANY\"\n"
"        ]\n"
"    },\n"
"    \"generators\": [],\n"
"    \"requires\": [],\n"
"    \"source_folder\": null,\n"
"    \"build_folder\": null,\n"
"    \"generators_folder\": null,\n"
"    \"package_folder\": null,\n"
"    \"label\": \"\"\n"
"}"
msgstr ""

#: ../../../reference/commands/inspect.rst:146
msgid ""
"``conan inspect`` does not list any requirements listed in the "
"``requirements()`` method, only those present in the ``requires`` attribute "
"will be shown."
msgstr ""
