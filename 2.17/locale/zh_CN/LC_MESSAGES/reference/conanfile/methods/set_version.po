# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.17\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/conanfile/methods/set_version.rst:5
msgid "set_version()"
msgstr ""

#: ../../../reference/conanfile/methods/set_version.rst:7
msgid ""
"Dynamically define ``version`` attribute. This method might be needed when "
"the same recipe is being used to create different versions of the same "
"package, and such version is defined elsewhere, like in the git branch or in "
"a text or build script file. This would be a common situation."
msgstr ""

#: ../../../reference/conanfile/methods/set_version.rst:10
msgid ""
"This method is executed only when the recipe is exported to the cache "
"``conan create`` and ``conan export``, and when the recipe is being locally "
"used, like with ``conan install .``. In all other cases, the version of the "
"package is fully defined, and ``set_version()`` will not be called, so do "
"not rely on it for any other functionality different than defining the "
"``self.version`` value."
msgstr ""

#: ../../../reference/conanfile/methods/set_version.rst:14
msgid ""
"If the current package version was defined in a *version.txt* file, it would "
"be possible to do:"
msgstr ""

#: ../../../reference/conanfile/methods/set_version.rst:16
msgid ""
"from conan import ConanFile\n"
"from conan.tools.files import load\n"
"\n"
"class Pkg(ConanFile):\n"
"    def set_version(self):\n"
"        # This will execute relatively to the current user directory "
"(version.txt in cwd)\n"
"        self.version = load(self, \"version.txt\")\n"
"        # if \"version.txt\" is located relative to the conanfile.py better "
"do:\n"
"        self.version = load(self, os.path.join(self.recipe_folder, \"version."
"txt\"))"
msgstr ""

#: ../../../reference/conanfile/methods/set_version.rst:28
msgid ""
"The package version can also be defined in command line for some commands "
"with ``--version=xxxx`` argument. If we want to prioritize the command line "
"argument we should do:"
msgstr ""

#: ../../../reference/conanfile/methods/set_version.rst:31
msgid ""
"from conan import ConanFile\n"
"from conan.tools.files import load\n"
"\n"
"class Pkg(ConanFile):\n"
"    def set_version(self):\n"
"        # Command line ``--version=xxxx`` will be assigned first to self."
"version and have priority\n"
"        self.version = self.version or load(self, \"version.txt\")"
msgstr ""

#: ../../../reference/conanfile/methods/set_version.rst:41
msgid ""
"A common use case could be to define the ``version`` dynamically from some "
"version control mechanism, like the current git tag. This could be done with:"
msgstr ""

#: ../../../reference/conanfile/methods/set_version.rst:44
msgid ""
"from conan import ConanFile\n"
"from conan.tools.scm import Git\n"
"\n"
"class Pkg(ConanFile):\n"
"    name = \"pkg\"\n"
"\n"
"    def set_version(self):\n"
"        git = Git(self, self.recipe_folder)\n"
"        self.version = git.run(\"describe --tags\")"
msgstr ""

#: ../../../reference/conanfile/methods/set_version.rst:57
msgid ""
"The ``set_version()`` method can decide to define the ``version`` value, "
"irrespective of the potential ``--version=xxx`` command line argument, that "
"can be even completely ignored by ``set_version()``. It is the "
"responsibility of the developer to provide a correct ``set_version()``:"
msgstr ""

#: ../../../reference/conanfile/methods/set_version.rst:61
msgid ""
"def set_version(self):\n"
"    # This will always assign \"2.1\" as version, ignoring ``--version`` "
"command line argument\n"
"    # and without erroring or warning\n"
"    self.version = \"2.1\""
msgstr ""

#: ../../../reference/conanfile/methods/set_version.rst:69
msgid ""
"If a command line argument ``--version=xxx`` is provided, it will be "
"initialized in the ``self.version`` attribute, so ``set_version()`` method "
"can read and use it:"
msgstr ""

#: ../../../reference/conanfile/methods/set_version.rst:72
msgid ""
"def set_version(self):\n"
"    # Takes the provided command line ``--version`` argument and creates a "
"version appending to\n"
"    # it the \".extra\" string\n"
"    self.version = self.version + \".extra\""
msgstr ""

#: ../../../reference/conanfile/methods/set_version.rst:82
msgid ""
"The ``set_version()`` method is an alternative to the ``version`` attribute. "
"It is not advised or supported to define both a ``version`` class attribute "
"and a ``set_version()`` method."
msgstr ""
