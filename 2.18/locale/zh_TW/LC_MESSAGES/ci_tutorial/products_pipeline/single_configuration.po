# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.18\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:31+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../ci_tutorial/products_pipeline/single_configuration.rst:2
msgid "Products pipeline: single configuration"
msgstr ""

#: ../../../ci_tutorial/products_pipeline/single_configuration.rst:4
msgid ""
"In this section we will implement a very basic products pipeline, without "
"distributing the build, without using lockfiles or building multiple "
"configurations."
msgstr ""

#: ../../../ci_tutorial/products_pipeline/single_configuration.rst:6
msgid ""
"The main idea is to illustrate the need to rebuild some packages because "
"there is a new ``ai/1.1.0`` version that can be integrated by our main "
"products. This new ``ai`` version is in the ``products`` repository, as it "
"was already succesfully built by the \"packages pipeline\". Let's start by "
"making sure we have a clean environment with the right repositories defined:"
msgstr ""

#: ../../../ci_tutorial/products_pipeline/single_configuration.rst:9
msgid ""
"# First clean the local \"build\" folder\n"
"$ pwd  # should be <path>/examples2/ci/game\n"
"$ rm -rf build  # clean the temporary build folder\n"
"$ mkdir build && cd build # To put temporary files\n"
"\n"
"# Now clean packages and define remotes\n"
"$ conan remove \"*\" -c  # Make sure no packages from last run\n"
"# NOTE: The products repo is first, it will have higher priority.\n"
"$ conan remote enable products"
msgstr ""

#: ../../../ci_tutorial/products_pipeline/single_configuration.rst:22
msgid ""
"Recall that the ``products`` repo has higher priority than the ``develop`` "
"repo. It means Conan will resolve first in the ``products`` repo, if it "
"finds a valid version for the defined version ranges, it will stop there and "
"return that version, without checking the ``develop`` repo (checking all "
"repositories can be done with ``--update``, but that would be slower and "
"with the right repository ordering, it is not necessary)."
msgstr ""

#: ../../../ci_tutorial/products_pipeline/single_configuration.rst:25
msgid ""
"As we have already defined, our main products are ``game/1.0`` and "
"``mapviewer/1.0``, let's start by trying to install and use "
"``mapviewer/1.0``:"
msgstr ""

#: ../../../ci_tutorial/products_pipeline/single_configuration.rst:28
msgid ""
"$ conan install --requires=mapviewer/1.0\n"
"...\n"
"Requirements\n"
"    graphics/1.0#24b395ba17da96288766cc83accc98f5 - Downloaded (develop)\n"
"    mapviewer/1.0#c4660fde083a1d581ac554e8a026d4ea - Downloaded (develop)\n"
"    mathlib/1.0#f2b05681ed843bf50d8b7b7bdb5163ea - Downloaded (develop)\n"
"...\n"
"Install finished successfully\n"
"\n"
"# Activate the environment and run the executable\n"
"# Use \"conanbuild.bat && mapviewer\" in Windows\n"
"$ source conanrun.sh && mapviewer\n"
"...\n"
"graphics/1.0: Checking if things collide (Release)!\n"
"mapviewer/1.0:serving the game (Release)!"
msgstr ""

#: ../../../ci_tutorial/products_pipeline/single_configuration.rst:47
msgid ""
"As we can see, ``mapviewer/1.0`` doesn't really depend on ``ai`` package at "
"all, not any version. So if we install it, we would already have a pre-"
"compiled binary for it and everything works."
msgstr ""

#: ../../../ci_tutorial/products_pipeline/single_configuration.rst:50
msgid "But if we now try the same with ``game/1.0``:"
msgstr ""

#: ../../../ci_tutorial/products_pipeline/single_configuration.rst:52
msgid ""
"$ conan install --requires=game/1.0\n"
"...\n"
"======== Computing necessary packages ========\n"
"...\n"
"ERROR: Missing binary: game/1.0:bac7cd2fe1592075ddc715563984bbe000059d4c\n"
"\n"
"game/1.0: WARN: Cant find a game/1.0 package binary "
"bac7cd2fe1592075ddc715563984bbe000059d4c for the configuration:\n"
"...\n"
"[requires]\n"
"ai/1.1.0#01a885b003190704f7617f8c13baa630"
msgstr ""

#: ../../../ci_tutorial/products_pipeline/single_configuration.rst:65
msgid ""
"It will fail, because it will get ``ai/1.1.0`` from the ``products`` repo, "
"and there will be no pre-compiled binary for ``game/1.0`` against this new "
"version of ``ai``. This is correct, ``ai`` is a static library, so we need "
"to re-build ``game/1.0`` against it, let's do it using the ``--"
"build=missing`` argument:"
msgstr ""

#: ../../../ci_tutorial/products_pipeline/single_configuration.rst:67
msgid ""
"$ conan install --requires=game/1.0 --build=missing\n"
"...\n"
"======== Computing necessary packages ========\n"
"Requirements\n"
"    ai/1.1.0:8b108997a4947ec6a0487a0b6bcbc0d1072e95f3 - Download (products)\n"
"    engine/1.0:de738ff5d09f0359b81da17c58256c619814a765 - Build\n"
"    game/1.0:bac7cd2fe1592075ddc715563984bbe000059d4c - Build\n"
"    graphics/1.0:8b108997a4947ec6a0487a0b6bcbc0d1072e95f3 - Download "
"(develop)\n"
"    mathlib/1.0:4d8ab52ebb49f51e63d5193ed580b5a7672e23d5 - Download "
"(develop)\n"
"\n"
"-------- Installing package engine/1.0 (4 of 5) --------\n"
"engine/1.0: Building from source\n"
"...\n"
"engine/1.0: Package de738ff5d09f0359b81da17c58256c619814a765 created\n"
"-------- Installing package game/1.0 (5 of 5) --------\n"
"game/1.0: Building from source\n"
"...\n"
"game/1.0: Package bac7cd2fe1592075ddc715563984bbe000059d4c created\n"
"Install finished successfully"
msgstr ""

#: ../../../ci_tutorial/products_pipeline/single_configuration.rst:89
msgid ""
"Note the ``--build=missing`` knows that ``engine/1.0`` also needs a new "
"binary as a result of its dependency to the new ``ai/1.1.0`` version. Then, "
"Conan proceeds to build the packages in the right order, first "
"``engine/1.0`` has to be built, because ``game/1.0`` depends on it. After "
"the build we can list the new built binaries and see how they depend on the "
"new versions:"
msgstr ""

#: ../../../ci_tutorial/products_pipeline/single_configuration.rst:91
msgid ""
"$ conan list engine:*\n"
"Local Cache\n"
"  engine\n"
"    engine/1.0\n"
"      revisions\n"
"        fba6659c9dd04a4bbdc7a375f22143cb (2024-09-30 12:19:54 UTC)\n"
"          packages\n"
"            de738ff5d09f0359b81da17c58256c619814a765\n"
"              info\n"
"                ...\n"
"                requires\n"
"                  ai/1.1.Z\n"
"                  graphics/1.0.Z\n"
"                  mathlib/1.0.Z\n"
"\n"
"$ conan list game:*\n"
"Local Cache\n"
"  game\n"
"    game/1.0\n"
"      revisions\n"
"        1715574045610faa2705017c71d0000e (2024-09-30 12:19:55 UTC)\n"
"          packages\n"
"            bac7cd2fe1592075ddc715563984bbe000059d4c\n"
"              info\n"
"                ...\n"
"                requires\n"
"                  ai/1.1.0#01a885b003190704f7617f8c13baa630:8b108997a4947ec6a0487a0b6bcbc0d1072e95f3\n"
"                  engine/1.0#fba6659c9dd04a4bbdc7a375f22143cb:"
"de738ff5d09f0359b81da17c58256c619814a765\n"
"                  graphics/1.0#24b395ba17da96288766cc83accc98f5:8b108997a4947ec6a0487a0b6bcbc0d1072e95f3\n"
"                  mathlib/1.0#f2b05681ed843bf50d8b7b7bdb5163ea:4d8ab52ebb49f51e63d5193ed580b5a7672e23d5"
msgstr ""

#: ../../../ci_tutorial/products_pipeline/single_configuration.rst:124
msgid ""
"The new ``engine/1.0:de738ff5d09f0359b81da17c58256c619814a765`` binary "
"depends on ``ai/1.1.Z``, because as it is a static library it will only "
"require re-builds for changes in the minor version, but not patches. While "
"the ``game/1.0`` new binary will depend on the full exact "
"``ai/1.1.0#revision:package_id``, and also on the new ``engine/1.0:"
"de738ff5d09f0359b81da17c58256c619814a765`` new binary that depends on "
"``ai/1.1.Z``."
msgstr ""

#: ../../../ci_tutorial/products_pipeline/single_configuration.rst:126
msgid "Now the game can be executed:"
msgstr ""

#: ../../../ci_tutorial/products_pipeline/single_configuration.rst:128
msgid ""
"# Activate the environment and run the executable\n"
"# Use \"conanbuild.bat && game\" in Windows\n"
"$ source conanrun.sh && game\n"
"mathlib/1.0: mathlib maths (Release)!\n"
"ai/1.1.0: SUPER BETTER Artificial Intelligence for aliens (Release)!\n"
"ai/1.1.0: Intelligence level=50\n"
"graphics/1.0: Checking if things collide (Release)!\n"
"engine/1.0: Computing some game things (Release)!\n"
"game/1.0:fun game (Release)!"
msgstr ""

#: ../../../ci_tutorial/products_pipeline/single_configuration.rst:140
msgid ""
"We can see that the new ``game/1.0`` binary incorporates the improvements in "
"``ai/1.1.0``, and links correctly with the new binary for ``engine/1.0``."
msgstr ""

#: ../../../ci_tutorial/products_pipeline/single_configuration.rst:142
msgid ""
"And this is a basic \"products pipeline\", we manage to build and test our "
"main products when necessary (recall that ``mapviewer`` wasn't really "
"affected, so no rebuilds were necessary at all). In general, a production "
"\"products pipeline\" will finish uploading the built packages to the "
"repository and running a new promotion to the ``develop`` repo. But as this "
"was a very basic and simple pipeline, let's wait a bit for that, and let's "
"continue with more advanced scenarios."
msgstr ""
