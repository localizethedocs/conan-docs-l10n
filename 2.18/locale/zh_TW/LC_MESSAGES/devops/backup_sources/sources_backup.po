# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.18\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:31+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../devops/backup_sources/sources_backup.rst:4
msgid "Backing up third-party sources with Conan"
msgstr ""

#: ../../../devops/backup_sources/sources_backup.rst:6
msgid ""
"For recipes and build scripts for open source, publicly available libraries, "
"it is common practice to download the sources from a canonical source, like "
"Github releases, or project download web pages. Keeping a record of the "
"origin of these files is useful for traceability purposes, however, it is "
"often not guaranteed that the files will be available in the long term, and "
"a user in the future building the same recipe from source may encounter a "
"problem. Conan can thus be configured to transparently retrieve sources from "
"a configured mirror, without modifying the recipes or `conandata.yml`. "
"Additionally, these sources can be transparently uploaded alongside the "
"packages via :command:`conan upload`."
msgstr ""

#: ../../../devops/backup_sources/sources_backup.rst:15
msgid ""
"The *sources backup* feature is intended for storing the downloaded recipe "
"sources in a file server in your own infrastructure, allowing future "
"reproducibility of your builds even in the case where the original download "
"URLs are no longer accessible."
msgstr ""

#: ../../../devops/backup_sources/sources_backup.rst:18
msgid ""
"The backup is triggered for calls to the :ref:"
"`download<conan_tools_files_get>` and :ref:`get<conan_tools_files_get>` "
"methods when a ``sha256`` file signature is provided."
msgstr ""

#: ../../../devops/backup_sources/sources_backup.rst:25
msgid "Configuration overview"
msgstr "組態概覽"

#: ../../../devops/backup_sources/sources_backup.rst:27
msgid ""
"This feature is controlled by a few :ref:`global."
"conf<reference_config_files_global_conf>` items:"
msgstr ""

#: ../../../devops/backup_sources/sources_backup.rst:29
msgid ""
"``core.sources:download_cache``: Local path to store the sources backups to. "
"*If not set, the default Conan home cache path will be used.*"
msgstr ""

#: ../../../devops/backup_sources/sources_backup.rst:31
msgid ""
"``core.sources:download_urls``: Ordered list of URLs that Conan will try to "
"download the sources from, where ``origin`` represents the original URL "
"passed to ``get``/``download`` from `conandata.yml`. This allows to control "
"the fetch order, either ``[\"origin\", \"https://your.backup/remote/\"]`` to "
"look into and fetch from your backup remote only if and when the original "
"source is not present, or ``[\"https://your.backup/remote/\", \"origin\"]`` "
"to prefer your backup server ahead of the recipes' canonical links. Being a "
"list, multiple remotes are also possible. ``[\"origin\"]`` *by default*"
msgstr ""

#: ../../../devops/backup_sources/sources_backup.rst:37
msgid ""
"``core.sources:upload_url``: URL of the remote to upload the backups to when "
"calling :command:`conan upload`, which might or might not be different from "
"any of the URLs defined for download. *Empty by default*"
msgstr ""

#: ../../../devops/backup_sources/sources_backup.rst:39
msgid ""
"``core.sources:exclude_urls``: List of origins to skip backing up. If the "
"URL passed to ``get``/``download`` starts with any of the origins included "
"in this list, the source won't be uploaded to the backup remote when "
"calling :command:`conan upload`. *Empty by default*"
msgstr ""

#: ../../../devops/backup_sources/sources_backup.rst:45
msgid "Usage"
msgstr ""

#: ../../../devops/backup_sources/sources_backup.rst:47
msgid ""
"Let's overview how the feature works by providing an example usage from "
"beginning to end:"
msgstr ""

#: ../../../devops/backup_sources/sources_backup.rst:49
msgid "In summary, it looks something like:"
msgstr ""

#: ../../../devops/backup_sources/sources_backup.rst:51
msgid ""
"A remote backup repository is set up. This should allow ``PUT`` and ``GET`` "
"HTTP methods to modify and fetch its contents. If access credentials are "
"desired (which is strongly recommended for uploading permissions), you can "
"use the :ref:`source_credentials."
"json<reference_config_files_source_credentials>` feature. :ref:`See "
"below<backup_sources_setup_remote>` if you are in need for configuring your "
"own."
msgstr ""

#: ../../../devops/backup_sources/sources_backup.rst:55
msgid ""
"The remote's URL can then be set in ``core.sources:download_urls`` and "
"``core.sources:upload_url``."
msgstr ""

#: ../../../devops/backup_sources/sources_backup.rst:56
msgid ""
"In your recipe's ``source()`` method, ensure the relevant ``get``/"
"``download`` calls supply the ``sha256`` signature of the downloaded files."
msgstr ""

#: ../../../devops/backup_sources/sources_backup.rst:58
msgid ""
"Set ``core.sources:download_cache`` in your :ref:`global."
"conf<reference_config_files_global_conf>` file if a custom location is "
"desired, else the default cache folder will be used"
msgstr ""

#: ../../../devops/backup_sources/sources_backup.rst:60
msgid "Run Conan normally, creating packages etc."
msgstr ""

#: ../../../devops/backup_sources/sources_backup.rst:63
msgid ""
"Once some sources have been locally downloaded, the folder pointed to by "
"``core.sources:download_cache`` will contain, for each downloaded file:"
msgstr ""

#: ../../../devops/backup_sources/sources_backup.rst:62
msgid ""
"A blob file (no extensions) with the name of the ``sha256`` signature "
"provided in ``get``/``download``."
msgstr ""

#: ../../../devops/backup_sources/sources_backup.rst:63
msgid ""
"A ``.json`` file which will also have the name of the ``sha256`` signature, "
"that will contain information about which references and which mirrors this "
"blob belongs to."
msgstr ""

#: ../../../devops/backup_sources/sources_backup.rst:65
msgid ""
"Calling ``conan upload`` will now optionally upload the backups for the "
"matching references if ``core.sources:upload_url`` is set."
msgstr ""

#: ../../../devops/backup_sources/sources_backup.rst:69
msgid ""
":ref:`See below<backup_sources_setup_remote>` for a guide on how to "
"configure your own backup server"
msgstr ""

#: ../../../devops/backup_sources/sources_backup.rst:73
msgid "Setting up the necessary configs"
msgstr ""

#: ../../../devops/backup_sources/sources_backup.rst:75
msgid ""
"The :ref:`global.conf<reference_config_files_global_conf>` file should "
"contain the ``core.sources:download_urls`` if downloading from a custom "
"backup source remote is desired, and ``core.sources:download_cache`` if a "
"custom local cache path to download the backups to is desired."
msgstr ""

#: ../../../devops/backup_sources/sources_backup.rst:79
msgid "global.conf"
msgstr ""

#: ../../../devops/backup_sources/sources_backup.rst:79
msgid ""
"core.sources:download_urls=[\"https://myteam.myorg.com/artifactory/backup-"
"sources/\", \"origin\"]\n"
"core.sources:download_cache=/path/to/backup/sources"
msgstr ""

#: ../../../devops/backup_sources/sources_backup.rst:87
msgid ""
"Either ``core.sources:download_urls`` or ``core.sources:download_cache`` "
"should be defined for the feature to be enabled."
msgstr ""

#: ../../../devops/backup_sources/sources_backup.rst:89
msgid ""
"You might want to add extra confs based on your use case, as described :ref:"
"`in the beginning of this document<backup_sources_config>`."
msgstr ""

#: ../../../devops/backup_sources/sources_backup.rst:93
msgid ""
"The recommended approach for dealing with the configuration of CI workers "
"and developers in your organization is to install the configs using the "
"``conan config install`` command on a repository. Read more :ref:"
"`here<reference_commands_conan_config_install>`"
msgstr ""

#: ../../../devops/backup_sources/sources_backup.rst:98
msgid "Run Conan as normal"
msgstr ""

#: ../../../devops/backup_sources/sources_backup.rst:100
msgid ""
"With the above steps completed, Conan can now be used as normal, and for "
"every downloaded source, Conan will first look into the folder indicated in "
"``core.sources:download_cache``, and if not found there, will traverse "
"``core.sources:download_urls`` until it find the file or fails, and store a "
"local copy in the same ``core.sources:download_cache`` location."
msgstr ""

#: ../../../devops/backup_sources/sources_backup.rst:105
msgid ""
"When the backup is fetched from the the backup remote, a message like what "
"follows will be shown to the user:"
msgstr ""

#: ../../../devops/backup_sources/sources_backup.rst:107
msgid ""
"The client will now print information regarding from which remote it was "
"capable of downloading the sources"
msgstr ""

#: ../../../devops/backup_sources/sources_backup.rst:107
msgid ""
"$ conan create . --version=1.3\n"
"\n"
"...\n"
"\n"
"======== Installing packages ========\n"
"zlib/1.3: Calling source() in /Users/ruben/.conan2/p/zlib0f4e45286ecd1/s/"
"src\n"
"zlib/1.3: Sources for ['https://zlib.net/fossils/zlib-1.3.tar.gz', 'https://"
"github.com/madler/zlib/releases/download/v1.3/zlib-1.3.tar.gz']\n"
"          found in remote backup https://myteam.myorg.com/artifactory/backup-"
"sources\n"
"\n"
"-------- Installing package zlib/1.3 (1 of 1) --------\n"
"\n"
"..."
msgstr ""

#: ../../../devops/backup_sources/sources_backup.rst:124
msgid ""
"If we now again try to run this, we'll find that no download is performed "
"and the locally stored version of the files is used."
msgstr ""

#: ../../../devops/backup_sources/sources_backup.rst:128
msgid "Upload the packages"
msgstr "上傳軟體包"

#: ../../../devops/backup_sources/sources_backup.rst:130
msgid ""
"Once a package has been created as shown above, when a call to ``conan "
"upload zlib/1.3 -c`` is performed to upload the resulting binary to your "
"Conan repository, it will also upload the source backups for that same "
"reference to your backups remote if configured to do so, and future source "
"downloads of this recipe will use the newly updated contents when necessary."
msgstr ""

#: ../../../devops/backup_sources/sources_backup.rst:137
msgid ""
"See :ref:`the packages list feature<examples_commands_pkglists>` for a way "
"to only upload the packages that have been built"
msgstr ""

#: ../../../devops/backup_sources/sources_backup.rst:140
msgid ""
"In case there's a need to upload backups for sources not linked to any "
"package, or for packages that are already on the remote and would therefore "
"be skipped during upload, the :command:`conan cache backup-upload` command "
"can be used to address this scenario."
msgstr ""

#: ../../../devops/backup_sources/sources_backup.rst:145
msgid "Creating the backup repository"
msgstr "建立備份儲存庫"

#: ../../../devops/backup_sources/sources_backup.rst:147
msgid ""
"You can also set up your own remote backup repository instead of relying on "
"an already available one. While an Artifactory generic repository (available "
"for free with Artifactory CE) is recommend for this purpose, any simple "
"server that allows ``PUT`` and ``GET`` HTTP methods to modify and fetch its "
"contents is sufficient."
msgstr ""

#: ../../../devops/backup_sources/sources_backup.rst:151
msgid ""
"Read the following section for instructions on how to create a generic "
"Artifactory backup repo and how to give it public read permissions, while "
"keeping write access only for authorized agents"
msgstr ""
