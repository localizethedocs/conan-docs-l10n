# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.18\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:31+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../examples/tools/autotools/llvm_clang.rst:4
msgid "AutoTools: Using LLVM/Clang Windows compiler"
msgstr ""

#: ../../../examples/tools/autotools/llvm_clang.rst:6
msgid ""
"The Clang compiler in Windows can come from 2 different installations or "
"distributions:"
msgstr ""

#: ../../../examples/tools/autotools/llvm_clang.rst:8
msgid "The LLVM/Clang compiler, that uses the MSVC runtime"
msgstr ""

#: ../../../examples/tools/autotools/llvm_clang.rst:9
msgid "The Msys2 Clang compiler that uses the Msys2 runtime (libstdc++6.dll)"
msgstr ""

#: ../../../examples/tools/autotools/llvm_clang.rst:11
msgid ""
"This example explains the LLVM/Clang with the MSVC runtime. This Clang "
"distribution can in turn be used in two different ways:"
msgstr ""

#: ../../../examples/tools/autotools/llvm_clang.rst:14
msgid ""
"Using the LLVM/Clang downloaded compiler (it still uses the MSVC runtime), "
"via the GNU-like frontend ``clang``"
msgstr ""

#: ../../../examples/tools/autotools/llvm_clang.rst:15
msgid ""
"Using the LLVM/Clang downloaded compiler (it still uses the MSVC runtime), "
"via the MSVC-like frontend ``clang-cl``"
msgstr ""

#: ../../../examples/tools/autotools/llvm_clang.rst:18
msgid "Let's start from a simple ``autotools_exe`` template:"
msgstr ""

#: ../../../examples/tools/autotools/llvm_clang.rst:20
msgid "$ conan new autotools_exe -d name=mypkg -d version=0.1"
msgstr ""

#: ../../../examples/tools/autotools/llvm_clang.rst:24
msgid ""
"This creates a simple Autotools based project and Conan package recipe that "
"uses ``AutotoolsToolchain``."
msgstr ""

#: ../../../examples/tools/autotools/llvm_clang.rst:28
msgid "Autotools: LLVM/Clang with ``clang`` GNU-like frontend"
msgstr ""

#: ../../../examples/tools/autotools/llvm_clang.rst:30
#: ../../../examples/tools/autotools/llvm_clang.rst:107
msgid "To build this configuration we will use the following profile:"
msgstr ""

#: ../../../examples/tools/autotools/llvm_clang.rst:32
msgid "llvm_clang"
msgstr ""

#: ../../../examples/tools/autotools/llvm_clang.rst:32
msgid ""
"[settings]\n"
"os=Windows\n"
"arch=x86_64\n"
"build_type=Release\n"
"compiler=clang\n"
"compiler.version=18\n"
"compiler.cppstd=14\n"
"compiler.runtime=dynamic\n"
"compiler.runtime_type=Release\n"
"compiler.runtime_version=v144\n"
"\n"
"[buildenv]\n"
"PATH=+(path)C:\\ws\\LLVM\\18.1\\bin\n"
"\n"
"[conf]\n"
"tools.compilation:verbosity=verbose\n"
"tools.build:compiler_executables = {\"c\": \"clang\", \"cpp\": \"clang++\"}\n"
"tools.microsoft.bash:subsystem=msys2\n"
"tools.microsoft.bash:path=C:\\ws\\msys64\\usr\\bin\\bash.exe"
msgstr ""

#: ../../../examples/tools/autotools/llvm_clang.rst:56
msgid "Quick explanation of the profile:"
msgstr ""

#: ../../../examples/tools/autotools/llvm_clang.rst:58
msgid ""
"The ``compiler.runtime`` definition is the important differentiator to "
"distinguish between Msys2-Clang and LLVM/Clang with the MSVC runtime. The "
"LLVM/Clang defines this ``compiler.runtime``, while the Msys2-Clang doesn't."
msgstr ""

#: ../../../examples/tools/autotools/llvm_clang.rst:60
msgid ""
"The MSVC runtime can be either dynamic or static. It is important also to "
"define the runtime version (toolset version ``v144``) of this runtime, as it "
"is possible to use different ones."
msgstr ""

#: ../../../examples/tools/autotools/llvm_clang.rst:62
msgid ""
"The ``[buildenv]`` allows to point to the LLVM/Clang compiler, in case it is "
"not already in the path. **Note** the ``PATH=+(path)`` syntax, to "
"**prepend** that path, so it has higher priority"
msgstr ""

#: ../../../examples/tools/autotools/llvm_clang.rst:64
msgid ""
"While defining ``tools.microsoft.bash:path``, the full path to the ``msys2`` "
"``bash.exe`` has been used. Otherwise, it is possible that it can find "
"another ``bash.exe`` in the Windows system that will not be valid."
msgstr ""

#: ../../../examples/tools/autotools/llvm_clang.rst:68
#: ../../../examples/tools/autotools/llvm_clang.rst:142
msgid "Let's build it:"
msgstr ""

#: ../../../examples/tools/autotools/llvm_clang.rst:70
msgid ""
"$ conan build . -pr=llvm_clang\n"
"...\n"
"conanfile.py (mypkg/0.1): Calling build()\n"
"conanfile.py (mypkg/0.1): RUN: autoreconf --force --install\n"
"conanfile.py (mypkg/0.1): RUN: \"/c/projectpath/clang/configure\" --prefix=/ "
"--bindir=${prefix}/bin --sbindir=${prefix}/bin --libdir=${prefix}/lib --"
"includedir=${prefix}/include --oldincludedir=${prefix}/include\n"
"conanfile.py (mypkg/0.1): RUN: make -j8\n"
"...\n"
"clang++ -DPACKAGE_NAME=\\\"mypkg\\\" -DPACKAGE_TARNAME=\\\"mypkg\\\" -"
"DPACKAGE_VERSION=\\\"0.1\\\" -DPACKAGE_STRING=\\\"mypkg\\ 0.1\\\" -"
"DPACKAGE_BUGREPORT=\\\"\\\" -DPACKAGE_URL=\\\"\\\" -DPACKAGE=\\\"mypkg\\\" -"
"DVERSION=\\\"0.1\\\" -I. -I/c/projectpath/clang/src   -DNDEBUG  -std=c++14 -"
"D_DLL -D_MT -Xclang --dependent-lib=msvcrt -O3 -c -o main.o /c/projectpath/"
"clang/src/main.cpp\n"
"source='/c/projectpath/clang/src/mypkg.cpp' object='mypkg.o' libtool=no \\\n"
"DEPDIR=.deps depmode=none /bin/sh /c/projectpath/clang/depcomp \\\n"
"clang++ -DPACKAGE_NAME=\\\"mypkg\\\" -DPACKAGE_TARNAME=\\\"mypkg\\\" -"
"DPACKAGE_VERSION=\\\"0.1\\\" -DPACKAGE_STRING=\\\"mypkg\\ 0.1\\\" -"
"DPACKAGE_BUGREPORT=\\\"\\\" -DPACKAGE_URL=\\\"\\\" -DPACKAGE=\\\"mypkg\\\" -"
"DVERSION=\\\"0.1\\\" -I. -I/c/projectpath/clang/src   -DNDEBUG  -std=c++14 -"
"D_DLL -D_MT -Xclang --dependent-lib=msvcrt -O3 -c -o mypkg.o /c/projectpath/"
"clang/src/mypkg.cpp\n"
"clang++  -std=c++14 -D_DLL -D_MT -Xclang --dependent-lib=msvcrt -O3  -fuse-"
"ld=lld-link -o mypkg.exe main.o mypkg.o"
msgstr ""

#: ../../../examples/tools/autotools/llvm_clang.rst:85
msgid ""
"Note how the ``clang++`` compiler is used, the runtime is selected with ``-"
"D_DLL -D_MT -Xclang --dependent-lib=msvcrt``."
msgstr ""

#: ../../../examples/tools/autotools/llvm_clang.rst:88
#: ../../../examples/tools/autotools/llvm_clang.rst:159
msgid ""
"We can run our executable, and see how the Clang compiler version and the "
"MSVC runtime match the defined ones:"
msgstr ""

#: ../../../examples/tools/autotools/llvm_clang.rst:90
msgid ""
"$ build-release\\src\\mypkg.exe\n"
"mypkg/0.1: Hello World Release!\n"
"    mypkg/0.1: _M_X64 defined\n"
"    mypkg/0.1: __x86_64__ defined\n"
"    mypkg/0.1: MSVC runtime: MultiThreadedDLL\n"
"    mypkg/0.1: _MSC_VER1943\n"
"    mypkg/0.1: _MSVC_LANG201402\n"
"    mypkg/0.1: __cplusplus201402\n"
"    mypkg/0.1: __clang_major__18\n"
"    mypkg/0.1: __clang_minor__1"
msgstr ""

#: ../../../examples/tools/autotools/llvm_clang.rst:105
msgid "Autotools: LLVM/Clang with ``clang-cl`` MSVC-like frontend"
msgstr ""

#: ../../../examples/tools/autotools/llvm_clang.rst:109
msgid "llvm_clang_cl"
msgstr ""

#: ../../../examples/tools/autotools/llvm_clang.rst:109
msgid ""
"[settings]\n"
"os=Windows\n"
"arch=x86_64\n"
"build_type=Release\n"
"compiler=clang\n"
"compiler.version=18\n"
"compiler.cppstd=14\n"
"compiler.runtime=dynamic\n"
"compiler.runtime_type=Release\n"
"compiler.runtime_version=v144\n"
"\n"
"[buildenv]\n"
"PATH=+(path)C:/ws/LLVM/18.1/bin\n"
"\n"
"[conf]\n"
"tools.compilation:verbosity=verbose\n"
"tools.microsoft.bash:subsystem=msys2\n"
"tools.build:compiler_executables = {\"c\": \"clang-cl\", \"cpp\": \"clang-"
"cl\"}\n"
"tools.microsoft.bash:path=C:\\ws\\msys64\\usr\\bin\\bash.exe"
msgstr ""

#: ../../../examples/tools/autotools/llvm_clang.rst:132
msgid ""
"The profile is almost identical to the above one, the main difference is the "
"definition of ``tools.build:compiler_executables``, defining the ``clang-"
"cl`` compiler."
msgstr ""

#: ../../../examples/tools/autotools/llvm_clang.rst:137
msgid ""
"The definition of ``tools.build:compiler_executables`` using the ``clang-"
"cl`` compiler is what is used by Conan to differentiate among the frontends, "
"also in other build systems. This frontend is not a ``setting``, because the "
"compiler is still the same, and the resulting binary should be binary "
"compatible."
msgstr ""

#: ../../../examples/tools/autotools/llvm_clang.rst:144
msgid ""
"$ conan build . -pr=llvm_clang_cl\n"
"...\n"
"clang-cl -DPACKAGE_NAME=\\\"mypkg\\\" -DPACKAGE_TARNAME=\\\"mypkg\\\" -"
"DPACKAGE_VERSION=\\\"0.1\\\" -DPACKAGE_STRING=\\\"mypkg\\ 0.1\\\" -"
"DPACKAGE_BUGREPORT=\\\"\\\" -DPACKAGE_URL=\\\"\\\" -DPACKAGE=\\\"mypkg\\\" -"
"DVERSION=\\\"0.1\\\" -I. -I/c/projectpath/clang/src   -DNDEBUG  -std:c++14 -"
"MD -O2 -c -o main.obj `cygpath -w '/c/projectpath/clang/src/main.cpp'`\n"
"source='/c/projectpath/clang/src/mypkg.cpp' object='mypkg.obj' libtool=no "
"\\\n"
"DEPDIR=.deps depmode=msvc7msys /bin/sh /c/projectpath/clang/depcomp \\\n"
"clang-cl -DPACKAGE_NAME=\\\"mypkg\\\" -DPACKAGE_TARNAME=\\\"mypkg\\\" -"
"DPACKAGE_VERSION=\\\"0.1\\\" -DPACKAGE_STRING=\\\"mypkg\\ 0.1\\\" -"
"DPACKAGE_BUGREPORT=\\\"\\\" -DPACKAGE_URL=\\\"\\\" -DPACKAGE=\\\"mypkg\\\" -"
"DVERSION=\\\"0.1\\\" -I. -I/c/projectpath/clang/src   -DNDEBUG  -std:c++14 -"
"MD -O2 -c -o mypkg.obj `cygpath -w '/c/projectpath/clang/src/mypkg.cpp'`\n"
"clang-cl  -std:c++14 -MD -O2   -o mypkg.exe main.obj mypkg.obj\n"
"..."
msgstr ""

#: ../../../examples/tools/autotools/llvm_clang.rst:156
msgid ""
"See how the desired ``clang-cl`` is used, and how the ``MSVC-like`` command "
"line syntax is used, like ``-std:c++14``. This MSVC-like syntax uses the ``-"
"MD/-MT`` flags to differentiate across the dynamic/static MSVC runtimes."
msgstr ""

#: ../../../examples/tools/autotools/llvm_clang.rst:161
msgid ""
"$ build\\Release\\mypkg.exe\n"
"mypkg/0.1: Hello World Release!\n"
"    mypkg/0.1: _M_X64 defined\n"
"    mypkg/0.1: __x86_64__ defined\n"
"    mypkg/0.1: MSVC runtime: MultiThreadedDLL\n"
"    mypkg/0.1: _MSC_VER1943\n"
"    mypkg/0.1: _MSVC_LANG201402\n"
"    mypkg/0.1: __cplusplus201402\n"
"    mypkg/0.1: __clang_major__18\n"
"    mypkg/0.1: __clang_minor__1"
msgstr ""

#: ../../../examples/tools/autotools/llvm_clang.rst:174
msgid ""
"As expected, the output is identical to the previous one, as nothing changed "
"except the compiler frontend."
msgstr ""

#: ../../../examples/tools/autotools/llvm_clang.rst:179
msgid ""
"It might be possible to build using the ``clang-cl`` distributed as a Visual "
"Studio component for autotools-like projects. But it is necessary to provide "
"the full path to that Clang component within the Visual Studio installed "
"folder, so it can be found, via ``[buildenv]`` and or ``tools.build:"
"compiler_executables``, because it is basically an LLVM/Clang compiler, "
"packaged and distributed by the Visual Studio installer."
msgstr ""
