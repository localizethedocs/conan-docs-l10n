# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.18\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:31+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/conanfile/methods/build_id.rst:4
msgid "build_id()"
msgstr ""

#: ../../../reference/conanfile/methods/build_id.rst:6
msgid ""
"The ``build_id()`` method allows to re-use the same build to create "
"different binary packages in the cache, potentially saving build time as it "
"can avoid some unnecessary re-builds. It is therefore an optimization method."
msgstr ""

#: ../../../reference/conanfile/methods/build_id.rst:9
msgid ""
"In the general case, there is one build folder for each binary package, with "
"the exact same ``package_id`` of the package. However this behavior can be "
"changed, there are a couple of scenarios that this might be useful:"
msgstr ""

#: ../../../reference/conanfile/methods/build_id.rst:12
msgid ""
"The package build scripts generate several different configurations at once "
"(like both debug and release artifacts) in the same run, without the "
"possibility of building each configuration separately."
msgstr ""

#: ../../../reference/conanfile/methods/build_id.rst:13
msgid ""
"The package build scripts generate one binary configuration, but different "
"artifacts that can be packaged separately. For example if there are some "
"test executables, you might want to create two packages: one just containing "
"the library for general usage, and another one also containing the tests "
"(for compliance, later reproducibility, debugging, etc)."
msgstr ""

#: ../../../reference/conanfile/methods/build_id.rst:15
msgid "In the first case, we could for example write:"
msgstr ""

#: ../../../reference/conanfile/methods/build_id.rst:17
msgid ""
"settings = \"os\", \"compiler\", \"arch\", \"build_type\"\n"
"\n"
"def build_id(self):\n"
"    self.info_build.settings.build_type = \"Any\""
msgstr ""

#: ../../../reference/conanfile/methods/build_id.rst:24
msgid ""
"This recipe will generate a final different package with a different "
"``package_id`` for debug and release configurations. But as the "
"``build_id()`` will generate the same ``build_id`` for any ``build_type``, "
"then just one folder and one ``build()`` will be done, building both debug "
"and release artifacts, and then the ``package()`` method will be called for "
"each configuration, and it should package the artifacts conditionally to the "
"``self.settings.build_type`` value. Different builds will still be executed "
"if using different compilers or architectures."
msgstr ""

#: ../../../reference/conanfile/methods/build_id.rst:29
msgid "Other information like custom package options can also be changed:"
msgstr ""

#: ../../../reference/conanfile/methods/build_id.rst:31
msgid ""
"def build_id(self):\n"
"    self.info_build.options.myoption = 'MyValue' # any value possible\n"
"    self.info_build.options.fullsource = 'Always'"
msgstr ""

#: ../../../reference/conanfile/methods/build_id.rst:37
msgid ""
"If the ``build_id()`` method does not modify the ``info_build`` data, and it "
"still produces a different id than the ``package_id``, then the standard "
"behavior will be applied. Consider the following:"
msgstr ""

#: ../../../reference/conanfile/methods/build_id.rst:40
msgid ""
"settings = \"os\", \"compiler\", \"arch\", \"build_type\"\n"
"\n"
"def build_id(self):\n"
"    if self.settings.os == \"Windows\":\n"
"        self.info_build.settings.build_type = \"Any\""
msgstr ""

#: ../../../reference/conanfile/methods/build_id.rst:48
msgid ""
"This will only produce a different ``build_id`` if the package is for "
"Windows, thus running ``build()`` just once for all ``build_type`` values. "
"The behavior in any other OS will be the standard one, as if the "
"``build_id()`` method was not defined, running one different ``build()`` for "
"each ``build_type``."
msgstr ""

#: ../../../reference/conanfile/methods/build_id.rst:56
msgid "**Best practices**"
msgstr ""

#: ../../../reference/conanfile/methods/build_id.rst:58
msgid ""
"Conan strongly recommends to use one package binary with its own "
"``package_id`` for each different configuration. The goal of the "
"``build_id()`` method is to deal with legacy build scripts that cannot "
"easily be changed to do the build of one configuration each time."
msgstr ""
