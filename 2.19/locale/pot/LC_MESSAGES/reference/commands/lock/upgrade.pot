# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.19\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/commands/lock/upgrade.rst:2
msgid "conan lock upgrade"
msgstr ""

#: ../../../common/experimental_warning.inc:3
msgid ""
"This feature is experimental and subject to breaking changes. See :ref:`the "
"Conan stability<stability>` section for more information."
msgstr ""

#: ../../../reference/commands/lock/upgrade.rst:-1
msgid ""
"$ conan lock upgrade -h\n"
"usage: conan lock upgrade [-h] [--out-file OUT_FILE] [-v [V]] [-cc "
"CORE_CONF]\n"
"                          [--name NAME] [--version VERSION] [--user USER]\n"
"                          [--channel CHANNEL] [--requires REQUIRES]\n"
"                          [--tool-requires TOOL_REQUIRES] [-b BUILD]\n"
"                          [-r REMOTE | -nr] [-u [UPDATE]] [-pr PROFILE]\n"
"                          [-pr:b PROFILE_BUILD] [-pr:h PROFILE_HOST]\n"
"                          [-pr:a PROFILE_ALL] [-o OPTIONS]\n"
"                          [-o:b OPTIONS_BUILD] [-o:h OPTIONS_HOST]\n"
"                          [-o:a OPTIONS_ALL] [-s SETTINGS]\n"
"                          [-s:b SETTINGS_BUILD] [-s:h SETTINGS_HOST]\n"
"                          [-s:a SETTINGS_ALL] [-c CONF] [-c:b CONF_BUILD]\n"
"                          [-c:h CONF_HOST] [-c:a CONF_ALL] [-l LOCKFILE]\n"
"                          [--lockfile-partial] [--lockfile-out "
"LOCKFILE_OUT]\n"
"                          [--lockfile-clean]\n"
"                          [--lockfile-overrides LOCKFILE_OVERRIDES]\n"
"                          [--update-requires UPDATE_REQUIRES]\n"
"                          [--update-build-requires UPDATE_BUILD_REQUIRES]\n"
"                          [--update-python-requires UPDATE_PYTHON_REQUIRES]\n"
"                          [--update-config-requires UPDATE_CONFIG_REQUIRES]\n"
"                          [--build-require]\n"
"                          [path]\n"
"\n"
"(Experimental) Upgrade requires, build-requires or python-requires from an\n"
"existing lockfile given a conanfile or a reference.\n"
"\n"
"positional arguments:\n"
"  path                  Path to a folder containing a recipe (conanfile.py "
"or\n"
"                        conanfile.txt) or to a recipe file. e.g.,\n"
"                        ./my_project/conanfile.txt.\n"
"\n"
"options:\n"
"  -h, --help            show this help message and exit\n"
"  --out-file OUT_FILE   Write the output of the command to the specified "
"file\n"
"                        instead of stdout.\n"
"  -v [V]                Level of detail of the output. Valid options from "
"less\n"
"                        verbose to more verbose: -vquiet, -verror, -"
"vwarning,\n"
"                        -vnotice, -vstatus, -v or -vverbose, -vv or -"
"vdebug,\n"
"                        -vvv or -vtrace\n"
"  -cc CORE_CONF, --core-conf CORE_CONF\n"
"                        Define core configuration, overwriting global.conf\n"
"                        values. E.g.: -cc core:non_interactive=True\n"
"  --name NAME           Provide a package name if not specified in "
"conanfile\n"
"  --version VERSION     Provide a package version if not specified in\n"
"                        conanfile\n"
"  --user USER           Provide a user if not specified in conanfile\n"
"  --channel CHANNEL     Provide a channel if not specified in conanfile\n"
"  --requires REQUIRES   Directly provide requires instead of a conanfile\n"
"  --tool-requires TOOL_REQUIRES\n"
"                        Directly provide tool-requires instead of a "
"conanfile\n"
"  -b BUILD, --build BUILD\n"
"                        Optional, specify which packages to build from "
"source.\n"
"                        Combining multiple '--build' options on one command\n"
"                        line is allowed. Possible values: --build=never\n"
"                        Disallow build for all packages, use binary "
"packages\n"
"                        or fail if a binary package is not found, it cannot "
"be\n"
"                        combined with other '--build' options. --"
"build=missing\n"
"                        Build packages from source whose binary package is "
"not\n"
"                        found. --build=cascade Build packages from source "
"that\n"
"                        have at least one dependency being built from "
"source.\n"
"                        --build=[pattern] Build packages from source whose\n"
"                        package reference matches the pattern. The pattern\n"
"                        uses 'fnmatch' style wildcards, so '--build=\"*\"' "
"will\n"
"                        build everything from source. --build=~[pattern]\n"
"                        Excluded packages, which will not be built from the\n"
"                        source, whose package reference matches the "
"pattern.\n"
"                        The pattern uses 'fnmatch' style wildcards.\n"
"                        --build=missing:[pattern] Build from source if a\n"
"                        compatible binary does not exist, only for packages\n"
"                        matching pattern. --build=compatible:[pattern]\n"
"                        (Experimental) Build from source if a compatible\n"
"                        binary does not exist, and the requested package is\n"
"                        invalid, the closest package binary following the\n"
"                        defined compatibility policies (method and\n"
"                        compatibility.py)\n"
"  -r REMOTE, --remote REMOTE\n"
"                        Look in the specified remote or remotes server\n"
"  -nr, --no-remote      Do not use remote, resolve exclusively in the cache\n"
"  -u [UPDATE], --update [UPDATE]\n"
"                        Will install newer versions and/or revisions in the\n"
"                        local cache for the given reference name, or all\n"
"                        references in the graph if no argument is supplied.\n"
"                        When using version ranges, it will install the "
"latest\n"
"                        version that satisfies the range. It will update to\n"
"                        the latest revision for the resolved version range.\n"
"  -pr PROFILE, --profile PROFILE\n"
"                        Apply the specified profile. By default, or if\n"
"                        specifying -pr:h (--profile:host), it applies to "
"the\n"
"                        host context. Use -pr:b (--profile:build) to "
"specify\n"
"                        the build context, or -pr:a (--profile:all) to "
"specify\n"
"                        both contexts at once\n"
"  -pr:b PROFILE_BUILD, --profile:build PROFILE_BUILD\n"
"  -pr:h PROFILE_HOST, --profile:host PROFILE_HOST\n"
"  -pr:a PROFILE_ALL, --profile:all PROFILE_ALL\n"
"  -o OPTIONS, --options OPTIONS\n"
"                        Apply the specified options. By default, or if\n"
"                        specifying -o:h (--options:host), it applies to the\n"
"                        host context. Use -o:b (--options:build) to specify\n"
"                        the build context, or -o:a (--options:all) to "
"specify\n"
"                        both contexts at once. Example:\n"
"                        -o=\"pkg/*:with_qt=True\"\n"
"  -o:b OPTIONS_BUILD, --options:build OPTIONS_BUILD\n"
"  -o:h OPTIONS_HOST, --options:host OPTIONS_HOST\n"
"  -o:a OPTIONS_ALL, --options:all OPTIONS_ALL\n"
"  -s SETTINGS, --settings SETTINGS\n"
"                        Apply the specified settings. By default, or if\n"
"                        specifying -s:h (--settings:host), it applies to "
"the\n"
"                        host context. Use -s:b (--settings:build) to "
"specify\n"
"                        the build context, or -s:a (--settings:all) to "
"specify\n"
"                        both contexts at once. Example: -s=\"compiler=gcc\"\n"
"  -s:b SETTINGS_BUILD, --settings:build SETTINGS_BUILD\n"
"  -s:h SETTINGS_HOST, --settings:host SETTINGS_HOST\n"
"  -s:a SETTINGS_ALL, --settings:all SETTINGS_ALL\n"
"  -c CONF, --conf CONF  Apply the specified conf. By default, or if "
"specifying\n"
"                        -c:h (--conf:host), it applies to the host context.\n"
"                        Use -c:b (--conf:build) to specify the build "
"context,\n"
"                        or -c:a (--conf:all) to specify both contexts at "
"once.\n"
"                        Example:\n"
"                        -c=\"tools.cmake.cmaketoolchain:generator=Xcode\"\n"
"  -c:b CONF_BUILD, --conf:build CONF_BUILD\n"
"  -c:h CONF_HOST, --conf:host CONF_HOST\n"
"  -c:a CONF_ALL, --conf:all CONF_ALL\n"
"  -l LOCKFILE, --lockfile LOCKFILE\n"
"                        Path to a lockfile. Use --lockfile=\"\" to avoid\n"
"                        automatic use of existing 'conan.lock' file\n"
"  --lockfile-partial    Do not raise an error if some dependency is not "
"found\n"
"                        in lockfile\n"
"  --lockfile-out LOCKFILE_OUT\n"
"                        Filename of the updated lockfile\n"
"  --lockfile-clean      Remove unused entries from the lockfile\n"
"  --lockfile-overrides LOCKFILE_OVERRIDES\n"
"                        Overwrite lockfile overrides\n"
"  --update-requires UPDATE_REQUIRES\n"
"                        Update requires from lockfile\n"
"  --update-build-requires UPDATE_BUILD_REQUIRES\n"
"                        Update build-requires from lockfile\n"
"  --update-python-requires UPDATE_PYTHON_REQUIRES\n"
"                        Update python-requires from lockfile\n"
"  --update-config-requires UPDATE_CONFIG_REQUIRES\n"
"                        Update config-requires from lockfile\n"
"  --build-require       Whether the provided reference is a build-require\n"
"\n"
msgstr ""

#: ../../../reference/commands/lock/upgrade.rst:10
msgid ""
"The ``conan lock upgrade`` command is able to upgrade ``requires``, "
"``build_requires``, ``python_requires`` or ``config_requires`` items from an "
"existing lockfile."
msgstr ""

#: ../../../reference/commands/lock/upgrade.rst:12
msgid "For example, if we have the following ``conan.lock``:"
msgstr ""

#: ../../../reference/commands/lock/upgrade.rst:14
msgid ""
"$ cat conan.lock\n"
"{\n"
"    \"version\": \"0.5\",\n"
"    \"requires\": [\n"
"        \"package/1.0#b0546195fd5bf19a0e6742510fff8855%1740472377.653885\"\n"
"    ],\n"
"    \"build_requires\": [\n"
"        \"cmake/1.0#85d927a4a067a531b1a9c7619522c015%1702683583.3411012\",\n"
"    ]\n"
"}"
msgstr ""

#: ../../../reference/commands/lock/upgrade.rst:28
msgid "And these packages available in the cache:"
msgstr ""

#: ../../../reference/commands/lock/upgrade.rst:30
msgid ""
"$ conan list \"*\" --format=compact\n"
"\n"
"Found 9 pkg/version recipes matching * in local cache\n"
"Local Cache\n"
"  package/1.0\n"
"  package/1.9\n"
"  cmake/3.29.0\n"
"  cmake/3.30.5"
msgstr ""

#: ../../../reference/commands/lock/upgrade.rst:42
msgid ""
"Using the ``conan lock upgrade`` command with the appropiate ``--update-**`` "
"arguments:"
msgstr ""

#: ../../../reference/commands/lock/upgrade.rst:44
msgid ""
"$ conan lock upgrade --requires=package/[>=1.0 <2] --update-requires=package/"
"[*]"
msgstr ""

#: ../../../reference/commands/lock/upgrade.rst:48
#: ../../../reference/commands/lock/upgrade.rst:101
msgid "Will result in the following ``conan.lock``:"
msgstr ""

#: ../../../reference/commands/lock/upgrade.rst:50
msgid ""
"$ cat conan.lock\n"
"{\n"
"    \"version\": \"0.5\",\n"
"    \"requires\": [\n"
"        \"package/1.9#b0546195fd5bf19a0e6742510fff8855%1740484122.108484\"\n"
"    ],\n"
"    \"build_requires\": [\n"
"        \"cmake/3.29.0#85d927a4a067a531b1a9c7619522c015%1702683583.3411012\",\n"
"    ]\n"
"}"
msgstr ""

#: ../../../reference/commands/lock/upgrade.rst:63
msgid "The same can be done for ``build_requires`` and ``python_requires``."
msgstr ""

#: ../../../reference/commands/lock/upgrade.rst:66
msgid ""
"The command will upgrade existing locked references that match the same "
"package name with versions that match the version ranges provided by "
"required arguments."
msgstr ""

#: ../../../reference/commands/lock/upgrade.rst:71
msgid ""
"The ``conan lock upgrade`` command may also be able to upgrade ``requires``, "
"``build_requires``, ``python_requires`` from a conanfile. This use case "
"enhances the functionality of version ranges."
msgstr ""

#: ../../../reference/commands/lock/upgrade.rst:74
msgid "Let's consider the following conanfile:"
msgstr ""

#: ../../../reference/commands/lock/upgrade.rst:76
msgid ""
"from conan import ConanFile\n"
"class HelloConan(ConanFile):\n"
"    requires = (\"math/[>=1.0 <2]\")\n"
"    tool_requires = \"ninja/[>=1.0]\""
msgstr ""

#: ../../../reference/commands/lock/upgrade.rst:83
msgid ""
"$ conan list \"*\" --format=compact\n"
"\n"
"Found 9 pkg/version recipes matching * in local cache\n"
"Local Cache\n"
"  math/1.0\n"
"  math/2.0\n"
"  ninja/1.0\n"
"  ninja/1.1"
msgstr ""

#: ../../../reference/commands/lock/upgrade.rst:94
msgid ""
"Starting from the same environment and ``conan.lock`` file from previous "
"example. Running the following command:"
msgstr ""

#: ../../../reference/commands/lock/upgrade.rst:97
msgid ""
"$ conan lock upgrade . --update-requires=math/1.0 --update-build-"
"requires=ninja/[*]"
msgstr ""

#: ../../../reference/commands/lock/upgrade.rst:103
msgid ""
"{\n"
"    \"version\": \"0.5\",\n"
"    \"requires\": [\n"
"        \"math/1.0#b0546195fd5bf19a0e6742510fff8855%1740488410.356828\"\n"
"    ],\n"
"    \"build_requires\": [\n"
"        \"ninja/1.1#dc77a17d3e566df710241e3b1f380b8c%1740488410.371875\"\n"
"    ]\n"
"}"
msgstr ""

#: ../../../reference/commands/lock/upgrade.rst:115
msgid ""
"``math`` package have not been updated due to the version range specified in "
"the conanfile, but ``ninja`` has been updated to the latest version "
"available in the cache."
msgstr ""

#: ../../../reference/commands/lock/upgrade.rst:119
msgid ""
"If a dependency is updated and in the new revision, a transitive dependency "
"is added, the ``lock upgrade`` command will reflect the new transitive "
"dependency in the lockfile. E.g."
msgstr ""

#: ../../../reference/commands/lock/upgrade.rst:123
msgid "``liba/1.0`` depends on ``libb/1.0``"
msgstr ""

#: ../../../reference/commands/lock/upgrade.rst:124
msgid "``libb/1.0`` depends on ``libc/1.0``"
msgstr ""

#: ../../../reference/commands/lock/upgrade.rst:126
msgid "If ``libb/2.0`` depends also on ``libd/1.0``:"
msgstr ""

#: ../../../reference/commands/lock/upgrade.rst:128
msgid "$ conan lock upgrade --requires=libb/[>=2] --update-requires=libb/*"
msgstr ""

#: ../../../reference/commands/lock/upgrade.rst:132
msgid "The resulting lockfile will contain both ``libc/1.0`` and ``libd/1.0``."
msgstr ""

#: ../../../reference/commands/lock/upgrade.rst:136
msgid ""
"Updating transitive dependencies is not supported yet. This is an "
"experimental feature and it may change in the future."
msgstr ""
