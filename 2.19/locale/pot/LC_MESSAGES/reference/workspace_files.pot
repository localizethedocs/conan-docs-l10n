# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.19\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/workspace_files.rst:4
msgid "Workspace files"
msgstr ""

#: ../../../common/incubating_warning.inc:3
msgid ""
"This feature is part of the new incubating features. This means that it is "
"under development, and looking for user testing and feedback. For more info "
"see :ref:`Incubating section<incubating>`."
msgstr ""

#: ../../../reference/workspace_files.rst:8
msgid ""
"Workspaces are defined by the ``conanws.yml`` and/or ``conanws.py`` files "
"that will define the \"root\" workspace folder."
msgstr ""

#: ../../../reference/workspace_files.rst:11
#: ../../../reference/workspace_files.rst:16
#: ../../../reference/workspace_files.rst:28
msgid "conanws.yml"
msgstr ""

#: ../../../reference/workspace_files.rst:13
msgid ""
"The most basic implementation of a workspace is a ``conanws.yml`` file. It "
"defines the workspace's ``packages`` (editable packages). For instance, a "
"workspace ``conanws.yml`` defining 2 ``packages`` could be:"
msgstr ""

#: ../../../reference/workspace_files.rst:16
msgid ""
"packages:\n"
"   - path: dep1\n"
"     ref: dep1/0.1\n"
"   - path: dep2\n"
"     ref: dep2/0.1"
msgstr ""

#: ../../../reference/workspace_files.rst:26
msgid ""
"Moreover, it could not have the ``ref`` field, and let Conan read the *name/"
"version* from the respective *path/conanfile.py*:"
msgstr ""

#: ../../../reference/workspace_files.rst:28
msgid ""
"packages:\n"
"   - path: dep1\n"
"   - path: dep2"
msgstr ""

#: ../../../reference/workspace_files.rst:37
#: ../../../reference/workspace_files.rst:43
#: ../../../reference/workspace_files.rst:66
msgid "conanws.py"
msgstr ""

#: ../../../reference/workspace_files.rst:39
msgid ""
"A ``conanws.yml`` can be extended with a way more powerful ``conanws.py`` "
"that follows the same relationship as a ``ConanFile`` does with its "
"``conandata.yml``. If we want to dynamically define the ``packages``, for "
"example based on the existence of some ``name.txt`` and ``version.txt`` "
"files in folders, the packages could be defined in ``conanws.py`` as:"
msgstr ""

#: ../../../reference/workspace_files.rst:43
msgid ""
"import os\n"
"from conan import Workspace\n"
"\n"
"class MyWorkspace(Workspace):\n"
"\n"
"   def packages(self):\n"
"      result = []\n"
"      for f in os.listdir(self.folder):\n"
"         if os.path.isdir(os.path.join(self.folder, f)):\n"
"            with open(os.path.join(self.folder, f, \"name.txt\")) as fname:\n"
"               name = fname.read().strip()\n"
"            with open(os.path.join(self.folder, f, \"version.txt\")) as "
"fversion:\n"
"               version = fversion.read().strip()\n"
"            result.append({\"path\": f, \"ref\": f\"{name}/{version}\"})\n"
"      return result"
msgstr ""

#: ../../../reference/workspace_files.rst:63
msgid ""
"It is also possible to re-use the ``conanfile.py`` logic in ``set_name()`` "
"and ``set_version()`` methods, using the ``Workspace.load_conanfile()`` "
"helper:"
msgstr ""

#: ../../../reference/workspace_files.rst:66
msgid ""
"import os\n"
"from conan import Workspace\n"
"\n"
"class MyWorkspace(Workspace):\n"
"   def packages(self):\n"
"      result = []\n"
"      for f in os.listdir(self.folder):\n"
"         if os.path.isdir(os.path.join(self.folder, f)):\n"
"            conanfile = self.load_conanfile(f)\n"
"            result.append({\"path\": f, \"ref\": f\"{conanfile.name}/"
"{conanfile.version}\"})\n"
"      return result"
msgstr ""

#: ../../../reference/workspace_files.rst:84
msgid "Read :ref:`the Workspace tutorial<tutorial_workspaces>` section."
msgstr ""
