# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.19\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../tutorial/creating_packages/define_package_information.rst:4
msgid "Define information for consumers: the package_info() method"
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:6
msgid ""
"In the previous tutorial section, we explained how to store the headers and "
"binaries of a library in a Conan package using the :ref:`package "
"method<creating_packages_package_method>`. Consumers that depend on that "
"package will reuse those files, but we have to provide some additional "
"information so that Conan can pass that to the build system and consumers "
"can use the package."
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:12
msgid ""
"For instance, in our example, we are building a static library named *hello* "
"that will result in a *libhello.a* file in Linux and macOS or a *hello.lib* "
"file in Windows. Also, we are packaging a header file *hello.h* with the "
"declaration of the library functions. The Conan package ends up with the "
"following structure in the Conan local cache:"
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:17
msgid ""
".\n"
"├── include\n"
"│   └── hello.h\n"
"└── lib\n"
"    └── libhello.a"
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:25
msgid ""
"Then, consumers that want to link against this library will need some "
"information:"
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:27
msgid ""
"The location of the *include* folder in the Conan local cache to search for "
"the *hello.h* file."
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:29
msgid ""
"The name of the library file to link against it (*libhello.a* or *hello.lib*)"
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:30
msgid ""
"The location of the *lib* folder in the Conan local cache to search for the "
"library file."
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:33
msgid ""
"Conan provides an abstraction over all the information consumers may need in "
"the :ref:`cpp_info<conan_conanfile_model_cppinfo>` attribute of the "
"ConanFile. The information for this attribute must be set in the :ref:"
"`package_info() method<reference_conanfile_methods_package_info>`. Let's "
"have a look at the ``package_info()`` method of our *hello/1.0* Conan "
"package:"
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:38
#: ../../../tutorial/creating_packages/define_package_information.rst:65
#: ../../../tutorial/creating_packages/define_package_information.rst:152
#: ../../../tutorial/creating_packages/define_package_information.rst:245
msgid "*conanfile.py*"
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:38
msgid ""
"...\n"
"\n"
"class helloRecipe(ConanFile):\n"
"    name = \"hello\"\n"
"    version = \"1.0\"\n"
"\n"
"    ...\n"
"\n"
"    def package_info(self):\n"
"        self.cpp_info.libs = [\"hello\"]"
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:52
msgid "We can see a couple of things:"
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:54
msgid ""
"We are adding a *hello* library to the ``libs`` property of the ``cpp_info`` "
"to tell consumers that they should link the libraries from that list."
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:57
msgid ""
"We are **not adding** information about the *lib* or *include* folders where "
"the library and header files are packaged. The ``cpp_info`` object provides "
"the ``.includedirs`` and ``.libdirs`` properties to define those locations "
"but Conan sets their value as ``lib`` and ``include`` by default so it's not "
"needed to add those in this case. If you were copying the package files to a "
"different location then you have to set those explicitly. The declaration of "
"the ``package_info`` method in our Conan package would be equivalent to this "
"one:"
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:65
msgid ""
"...\n"
"\n"
"class helloRecipe(ConanFile):\n"
"    name = \"hello\"\n"
"    version = \"1.0\"\n"
"\n"
"    ...\n"
"\n"
"    def package_info(self):\n"
"        self.cpp_info.libs = [\"hello\"]\n"
"        # conan sets libdirs = [\"lib\"] and includedirs = [\"include\"] by "
"default\n"
"        self.cpp_info.libdirs = [\"lib\"]\n"
"        self.cpp_info.includedirs = [\"include\"]"
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:84
msgid "Setting information in the package_info() method"
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:86
msgid ""
"Besides what we explained above about the information you can set in the "
"``package_info()`` method, there are some typical use cases:"
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:89
#: ../../../tutorial/creating_packages/define_package_information.rst:107
msgid "Define information for consumers depending on settings or options"
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:90
msgid ""
"Customizing certain information that generators provide to consumers, like "
"the target names for CMake or the generated file names for pkg-config, for "
"example"
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:92
msgid "Propagating configuration values to consumers"
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:93
msgid "Propagating environment information to consumers"
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:94
#: ../../../tutorial/creating_packages/define_package_information.rst:336
msgid "Define components for Conan packages that provide multiple libraries"
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:96
msgid ""
"Let's see some of those in action. First, clone the project sources if you "
"haven't done so yet. You can find them in the `examples2 repository <https://"
"github.com/conan-io/examples2>`_ on GitHub:"
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:100
msgid ""
"$ git clone https://github.com/conan-io/examples2.git\n"
"$ cd examples2/tutorial/creating_packages/package_information"
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:109
msgid ""
"For this section of the tutorial we introduced some changes in the library "
"and recipe. Let's check the relevant parts:"
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:114
msgid "Changes introduced in the library sources"
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:116
msgid ""
"First, please note that we are using `another branch <https://github.com/"
"conan-io/libhello/tree/package_info>`_ from the **libhello** library. Let's "
"check the library's *CMakeLists.txt*:"
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:121
msgid "*CMakeLists.txt*"
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:121
msgid ""
"cmake_minimum_required(VERSION 3.15)\n"
"project(hello CXX)\n"
"\n"
"...\n"
"\n"
"add_library(hello src/hello.cpp)\n"
"\n"
"if (BUILD_SHARED_LIBS)\n"
"    set_target_properties(hello PROPERTIES OUTPUT_NAME hello-shared)\n"
"else()\n"
"    set_target_properties(hello PROPERTIES OUTPUT_NAME hello-static)\n"
"endif()\n"
"\n"
"..."
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:140
msgid ""
"As you can see, we are setting the output name for the library depending on "
"whether we are building the library as static (*hello-static*) or as shared "
"(*hello-shared*). Now let's see how to translate these changes to the Conan "
"recipe."
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:146
msgid "Changes introduced in the recipe"
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:148
msgid ""
"To update our recipe according to the changes in the library's *CMakeLists."
"txt*, we have to conditionally set the library name depending on the ``self."
"options.shared`` option in the ``package_info()`` method:"
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:152
msgid ""
"class helloRecipe(ConanFile):\n"
"    ...\n"
"\n"
"    def source(self):\n"
"        git = Git(self)\n"
"        git.clone(url=\"https://github.com/conan-io/libhello.git\", "
"target=\".\")\n"
"        # Please, be aware that using the head of the branch instead of an "
"immutable tag\n"
"        # or commit is not a good practice in general\n"
"        git.checkout(\"package_info\")\n"
"\n"
"    ...\n"
"\n"
"    def package_info(self):\n"
"        if self.options.shared:\n"
"            self.cpp_info.libs = [\"hello-shared\"]\n"
"        else:\n"
"            self.cpp_info.libs = [\"hello-static\"]"
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:175
msgid ""
"Now, let's create the Conan package with ``shared=False`` (that's the "
"default so no need to set it explicitly) and check that we are packaging the "
"correct library (*libhello-static.a* or *hello-static.lib*) and that we are "
"linking the correct library in the *test_package*."
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:180
msgid ""
"$ conan create . --build=missing\n"
"...\n"
"-- Install configuration: \"Release\"\n"
"-- Installing: /Users/user/.conan2/p/tmp/a311fcf8a63f3206/p/lib/libhello-"
"static.a\n"
"-- Installing: /Users/user/.conan2/p/tmp/a311fcf8a63f3206/p/include/hello.h\n"
"hello/1.0 package(): Packaged 1 '.h' file: hello.h\n"
"hello/1.0 package(): Packaged 1 '.a' file: libhello-static.a\n"
"hello/1.0: Package 'fd7c4113dad406f7d8211b3470c16627b54ff3af' created\n"
"...\n"
"-- Build files have been written to: /Users/user/.conan2/p/tmp/"
"a311fcf8a63f3206/b/build/Release\n"
"hello/1.0: CMake command: cmake --build \"/Users/user/.conan2/p/tmp/"
"a311fcf8a63f3206/b/build/Release\" -- -j16\n"
"hello/1.0: RUN: cmake --build \"/Users/user/.conan2/p/tmp/a311fcf8a63f3206/b/"
"build/Release\" -- -j16\n"
"[ 25%] Building CXX object CMakeFiles/hello.dir/src/hello.cpp.o\n"
"[ 50%] Linking CXX static library libhello-static.a\n"
"[ 50%] Built target hello\n"
"[ 75%] Building CXX object tests/CMakeFiles/test_hello.dir/test.cpp.o\n"
"[100%] Linking CXX executable test_hello\n"
"[100%] Built target test_hello\n"
"hello/1.0: RUN: tests/test_hello\n"
"...\n"
"[ 50%] Building CXX object CMakeFiles/example.dir/src/example.cpp.o\n"
"[100%] Linking CXX executable example\n"
"[100%] Built target example\n"
"\n"
"-------- Testing the package: Running test() --------\n"
"hello/1.0 (test package): Running test()\n"
"hello/1.0 (test package): RUN: ./example\n"
"hello/1.0: Hello World Release! (with color!)"
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:212
msgid ""
"As you can see both the tests for the library and the Conan *test_package* "
"linked against the *libhello-static.a* library successfully."
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:218
msgid "Properties model: setting information for specific generators"
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:220
msgid ""
"The :ref:`CppInfo<conan_conanfile_model_cppinfo_attributes>` object provides "
"the ``set_property`` method to set information specific to each generator. "
"For example, in this tutorial, we use the :ref:"
"`CMakeDeps<conan_tools_cmakedeps>` generator to generate the information "
"that CMake needs to build a project that requires our library. "
"``CMakeDeps``, by default, will set a target name for the library using the "
"same name as the Conan package. If you have a look at that *CMakeLists.txt* "
"from the *test_package*:"
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:227
#: ../../../tutorial/creating_packages/define_package_information.rst:264
msgid "test_package *CMakeLists.txt*"
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:227
msgid ""
"cmake_minimum_required(VERSION 3.15)\n"
"project(PackageTest CXX)\n"
"\n"
"find_package(hello CONFIG REQUIRED)\n"
"\n"
"add_executable(example src/example.cpp)\n"
"target_link_libraries(example hello::hello)"
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:239
msgid ""
"You can see that we are linking with the target name ``hello::hello``. Conan "
"sets this target name by default, but we can change it using the *properties "
"model*. Let's try to change it to the name ``hello::myhello``. To do this, "
"we have to set the property ``cmake_target_name`` in the ``package_info`` "
"method of our *hello/1.0* Conan package:"
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:245
msgid ""
"class helloRecipe(ConanFile):\n"
"    ...\n"
"\n"
"    def package_info(self):\n"
"        if self.options.shared:\n"
"            self.cpp_info.libs = [\"hello-shared\"]\n"
"        else:\n"
"            self.cpp_info.libs = [\"hello-static\"]\n"
"\n"
"        self.cpp_info.set_property(\"cmake_target_name\", \"hello::myhello\")"
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:261
msgid ""
"Then, change the target name we are using in the *CMakeLists.txt* in the "
"*test_package* folder to ``hello::myhello``:"
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:264
msgid ""
"cmake_minimum_required(VERSION 3.15)\n"
"project(PackageTest CXX)\n"
"# ...\n"
"target_link_libraries(example hello::myhello)"
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:273
msgid "And re-create the package:"
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:275
msgid ""
"$ conan create . --build=missing\n"
"Exporting the recipe\n"
"hello/1.0: Exporting package recipe\n"
"hello/1.0: Using the exported files summary hash as the recipe revision: "
"44d78a68b16b25c5e6d7e8884b8f58b8\n"
"hello/1.0: A new conanfile.py version was exported\n"
"hello/1.0: Folder: /Users/user/.conan2/p/a8cb81b31dc10d96/e\n"
"hello/1.0: Exported revision: 44d78a68b16b25c5e6d7e8884b8f58b8\n"
"...\n"
"-------- Testing the package: Building --------\n"
"hello/1.0 (test package): Calling build()\n"
"...\n"
"-- Detecting CXX compile features\n"
"-- Detecting CXX compile features - done\n"
"-- Conan: Target declared 'hello::myhello'\n"
"...\n"
"[100%] Linking CXX executable example\n"
"[100%] Built target example\n"
"\n"
"-------- Testing the package: Running test() --------\n"
"hello/1.0 (test package): Running test()\n"
"hello/1.0 (test package): RUN: ./example\n"
"hello/1.0: Hello World Release! (with color!)"
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:301
msgid ""
"You can see how Conan now declares the target ``hello::myhello`` instead of "
"the default ``hello::hello`` and the *test_package* builds successfully."
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:304
msgid ""
"The target name is not the only property you can set in the ``CMakeDeps`` "
"generator. For a complete list of properties that affect the ``CMakeDeps`` "
"generator behaviour, please check the :ref:`reference<CMakeDeps Properties>`."
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:309
msgid "Propagating environment or configuration information to consumers"
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:311
msgid ""
"You can provide environment information to consumers in the "
"``package_info()``. To do so, you can use the ConanFile's :ref:"
"`runenv_info<conan_conanfile_attributes_runenv_info>` and :ref:"
"`buildenv_info<conan_conanfile_attributes_buildenv_info>` properties:"
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:315
msgid ""
"``runenv_info`` :ref:`Environment<conan_tools_env_environment_model>` object "
"that defines environment information that consumers that use the package may "
"need when **running**."
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:319
msgid ""
"``buildenv_info`` :ref:`Environment<conan_tools_env_environment_model>` "
"object that defines environment information that consumers that use the "
"package may need when **building**."
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:323
msgid ""
"Please note that it's not necessary to add ``cpp_info.bindirs`` to ``PATH`` "
"or ``cpp_info.libdirs`` to ``LD_LIBRARY_PATH``, those are automatically "
"added by the :ref:`VirtualBuildEnv<conan_tools_env_virtualbuildenv>` and :"
"ref:`VirtualRunEnv<conan_tools_env_virtualrunenv>`."
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:328
msgid ""
"You can also define configuration values in the ``package_info()`` so that "
"consumers can use that information. To do this, set the :ref:"
"`conf_info<conan_conanfile_model_conf_info>` property of the ``ConanFile``."
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:332
msgid ""
"To learn more about this use case, please check the :ref:`corresponding "
"example<examples_conanfile_package_info_conf_and_env>`."
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:338
msgid ""
"There are cases in which a Conan package may provide multiple libraries, for "
"these cases you can set the separate information for each of those libraries "
"using the components attribute from the :ref:"
"`CppInfo<conan_conanfile_model_cppinfo_attributes>` object."
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:342
msgid ""
"To know more about this use case, please check the :ref:`components "
"example<examples_conanfile_package_info_components>` in the examples section."
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:348
msgid ""
"`JFrog Academy Conan 2 Essentials: The package() And package_info() Methods "
"<https://academy.jfrog.com/conan-2-essentials/2218963?"
"utm_source=Conan+Docs>`__"
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:349
msgid ""
":ref:`Propagating environment and configuration information to consumers "
"example<examples_conanfile_package_info_conf_and_env>`"
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:350
msgid ""
":ref:`Define components for Conan packages that provide multiple libraries "
"example<examples_conanfile_package_info_components>`"
msgstr ""

#: ../../../tutorial/creating_packages/define_package_information.rst:351
msgid ""
":ref:`package_info() reference<reference_conanfile_methods_package_info>`"
msgstr ""
