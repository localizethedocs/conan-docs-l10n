# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:31+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../tutorial/consuming_packages/cross_building_with_conan.rst:4
msgid ""
"How to cross-compile your applications using Conan: host and build contexts"
msgstr ""

#: ../../../tutorial/consuming_packages/cross_building_with_conan.rst:6
msgid ""
"Please, first clone the sources to recreate this project. You can find them "
"in the `examples2 repository <https://github.com/conan-io/examples2>`_ on "
"GitHub:"
msgstr ""

#: ../../../tutorial/consuming_packages/cross_building_with_conan.rst:9
msgid ""
"$ git clone https://github.com/conan-io/examples2.git\n"
"$ cd examples2/tutorial/consuming_packages/cross_building"
msgstr ""

#: ../../../tutorial/consuming_packages/cross_building_with_conan.rst:15
msgid ""
"In the previous examples, we learned how to use a *conanfile.py* or "
"*conanfile.txt* to build an application that compresses strings using the "
"*Zlib* and *CMake* Conan packages. Also, we explained that you can set "
"information like the operating system, compiler or build configuration in a "
"file called the Conan profile. You can use that profile as an argument (:"
"command:`--profile`) to invoke the :command:`conan install`. We also "
"explained that not specifying that profile is equivalent to using the :"
"command:`--profile=default` argument."
msgstr ""

#: ../../../tutorial/consuming_packages/cross_building_with_conan.rst:22
msgid ""
"For all those examples, we used the same platform for building and running "
"the application. But, what if you want to build the application on your "
"machine running Ubuntu Linux and then run it on another platform like a "
"Raspberry Pi? Conan can model that case using two different profiles, one "
"for the machine that **builds** the application (Ubuntu Linux) and another "
"for the machine that **runs** the application (Raspberry Pi). We will "
"explain this \"two profiles\" approach in the next section."
msgstr ""

#: ../../../tutorial/consuming_packages/cross_building_with_conan.rst:31
msgid "Conan two profiles model: build and host profiles"
msgstr ""

#: ../../../tutorial/consuming_packages/cross_building_with_conan.rst:33
msgid ""
"Even if you specify only one :command:`--profile` argument when invoking "
"Conan, Conan will internally use two profiles. One for the machine that "
"**builds** the binaries (called the **build** profile) and another for the "
"machine that **runs** those binaries (called the **host** profile). Calling "
"this command:"
msgstr ""

#: ../../../tutorial/consuming_packages/cross_building_with_conan.rst:38
msgid "$ conan install . --build=missing --profile=someprofile"
msgstr ""

#: ../../../tutorial/consuming_packages/cross_building_with_conan.rst:42
msgid "Is equivalent to:"
msgstr ""

#: ../../../tutorial/consuming_packages/cross_building_with_conan.rst:44
msgid ""
"$ conan install . --build=missing --profile:host=someprofile --profile:"
"build=default"
msgstr ""

#: ../../../tutorial/consuming_packages/cross_building_with_conan.rst:49
msgid "As you can see we used two new arguments:"
msgstr ""

#: ../../../tutorial/consuming_packages/cross_building_with_conan.rst:51
msgid ""
"``profile:host``: This is the profile that defines the platform where the "
"built binaries will run. For our string compressor application this profile "
"would be the one applied for the *Zlib* library that will run in a "
"**Raspberry Pi**."
msgstr ""

#: ../../../tutorial/consuming_packages/cross_building_with_conan.rst:54
msgid ""
"``profile:build``: This is the profile that defines the platform where the "
"binaries will be built. For our string compressor application, this profile "
"would be the one used by the *CMake* tool that will compile it on the "
"**Ubuntu Linux** machine."
msgstr ""

#: ../../../tutorial/consuming_packages/cross_building_with_conan.rst:57
msgid ""
"Note that when you just use one argument for the profile ``--profile`` is "
"equivalent to ``--profile:host``. If you don't specify the ``--profile:"
"build`` argument, Conan will use the *default* profile internally."
msgstr ""

#: ../../../tutorial/consuming_packages/cross_building_with_conan.rst:61
msgid ""
"So, if we want to build the compressor application in the Ubuntu Linux "
"machine but run it in a Raspberry Pi, we should use two different profiles. "
"For the **build** machine we could use the default profile, that in our case "
"looks like this:"
msgstr ""

#: ../../../tutorial/consuming_packages/cross_building_with_conan.rst:65
msgid "<conan home>/profiles/default"
msgstr ""

#: ../../../tutorial/consuming_packages/cross_building_with_conan.rst:65
msgid ""
"[settings]\n"
"os=Linux\n"
"arch=x86_64\n"
"build_type=Release\n"
"compiler=gcc\n"
"compiler.cppstd=gnu14\n"
"compiler.libcxx=libstdc++11\n"
"compiler.version=9"
msgstr ""

#: ../../../tutorial/consuming_packages/cross_building_with_conan.rst:77
msgid "And the profile for the Raspberry Pi that is the **host** machine:"
msgstr ""

#: ../../../tutorial/consuming_packages/cross_building_with_conan.rst:79
msgid "<local folder>/profiles/raspberry"
msgstr ""

#: ../../../tutorial/consuming_packages/cross_building_with_conan.rst:79
msgid ""
"[settings]\n"
"os=Linux\n"
"arch=armv7hf\n"
"compiler=gcc\n"
"build_type=Release\n"
"compiler.cppstd=gnu14\n"
"compiler.libcxx=libstdc++11\n"
"compiler.version=9\n"
"[buildenv]\n"
"CC=arm-linux-gnueabihf-gcc-9\n"
"CXX=arm-linux-gnueabihf-g++-9\n"
"LD=arm-linux-gnueabihf-ld"
msgstr ""

#: ../../../tutorial/consuming_packages/cross_building_with_conan.rst:98
msgid ""
"Please, take into account that in order to build this example successfully, "
"you should have installed a toolchain that includes the compiler and all the "
"tools to build the application for the proper architecture. In this case the "
"host machine is a Raspberry Pi 3 with *armv7hf* architecture operating "
"system and we have the *arm-linux-gnueabihf* toolchain installed in the "
"Ubuntu machine."
msgstr ""

#: ../../../tutorial/consuming_packages/cross_building_with_conan.rst:104
msgid ""
"If you have a look at the *raspberry* profile, there is a section named "
"``[buildenv]``. This section is used to set the environment variables that "
"are needed to build the application. In this case we declare the ``CC``, "
"``CXX`` and ``LD`` variables pointing to the cross-build toolchain compilers "
"and linker, respectively. Adding this section to the profile will invoke the "
"VirtualBuildEnv generator everytime we do a :command:`conan install`. This "
"generator will add that environment information to the ``conanbuild.sh`` "
"script that we will source before building with CMake so that it can use the "
"cross-build toolchain."
msgstr ""

#: ../../../tutorial/consuming_packages/cross_building_with_conan.rst:115
msgid ""
"In some cases, you don't have the toolchain available on the build platform. "
"For those cases, you can use a Conan package for the cross-compiler and add "
"it to the ``[tool_requires]`` section of the profile. For an example of "
"cross-building using a toolchain package, please check :ref:`this example "
"<example_cross_build_toolchain_package_use>`."
msgstr ""

#: ../../../tutorial/consuming_packages/cross_building_with_conan.rst:123
msgid "Build and host contexts"
msgstr ""

#: ../../../tutorial/consuming_packages/cross_building_with_conan.rst:125
msgid ""
"Now that we have our two profiles prepared, let's have a look at our "
"*conanfile.py*:"
msgstr ""

#: ../../../tutorial/consuming_packages/cross_building_with_conan.rst:127
msgid "**conanfile.py**"
msgstr ""

#: ../../../tutorial/consuming_packages/cross_building_with_conan.rst:127
msgid ""
"from conan import ConanFile\n"
"from conan.tools.cmake import cmake_layout\n"
"\n"
"class CompressorRecipe(ConanFile):\n"
"    settings = \"os\", \"compiler\", \"build_type\", \"arch\"\n"
"    generators = \"CMakeToolchain\", \"CMakeDeps\"\n"
"\n"
"    def requirements(self):\n"
"        self.requires(\"zlib/1.2.11\")\n"
"\n"
"    def build_requirements(self):\n"
"        self.tool_requires(\"cmake/3.22.6\")\n"
"\n"
"    def layout(self):\n"
"        cmake_layout(self)"
msgstr ""

#: ../../../tutorial/consuming_packages/cross_building_with_conan.rst:146
msgid ""
"As you can see, this is practically the same *conanfile.py* we used in the :"
"ref:`previous example<consuming_packages_flexibility_of_conanfile_py>`. We "
"will require **zlib/1.2.11** as a regular dependency and **cmake/3.22.6** as "
"a tool needed for building the application."
msgstr ""

#: ../../../tutorial/consuming_packages/cross_building_with_conan.rst:151
msgid ""
"We will need the application to build for the Raspberry Pi with the cross-"
"build toolchain and also link the **zlib/1.2.11** library built for the same "
"platform. On the other side, we need the **cmake/3.22.6** binary to run in "
"Ubuntu Linux. Conan manages this internally in the dependency graph "
"differentiating between what we call the \"build context\" and the \"host "
"context\":"
msgstr ""

#: ../../../tutorial/consuming_packages/cross_building_with_conan.rst:157
msgid ""
"The **host context** is populated with the root package (the one specified "
"in the :command:`conan install` or :command:`conan create` command) and all "
"its requirements added via ``self.requires()``. In this case, this includes "
"the compressor application and the **zlib/1.2.11** dependency."
msgstr ""

#: ../../../tutorial/consuming_packages/cross_building_with_conan.rst:162
msgid ""
"The **build context** contains the tool requirements used in the build "
"machine. This category typically includes all the developer tools like "
"CMake, compilers and linkers. In this case, this includes the "
"**cmake/3.22.6** tool."
msgstr ""

#: ../../../tutorial/consuming_packages/cross_building_with_conan.rst:167
msgid ""
"These contexts define how Conan will manage each one of the dependencies. "
"For example, as **zlib/1.2.11** belongs to the **host context**, the "
"``[buildenv]`` build environment we defined in the **raspberry** profile "
"(profile host) will only apply to the **zlib/1.2.11** library when building "
"and won't affect anything that belongs to the **build context** like the "
"**cmake/3.22.6** dependency."
msgstr ""

#: ../../../tutorial/consuming_packages/cross_building_with_conan.rst:173
msgid ""
"Now, let's build the application. First, call :command:`conan install` with "
"the profiles for the build and host platforms. This will install the  "
"**zlib/1.2.11** dependency built for *armv7hf* architecture and a "
"**cmake/3.22.6** version that runs for 64-bit architecture."
msgstr ""

#: ../../../tutorial/consuming_packages/cross_building_with_conan.rst:178
msgid ""
"$ conan install . --build missing -pr:b=default -pr:h=./profiles/raspberry"
msgstr ""

#: ../../../tutorial/consuming_packages/cross_building_with_conan.rst:182
msgid ""
"Then, let's call CMake to build the application. As we did in the previous "
"example we have to activate the **build environment** running ``source "
"Release/generators/conanbuild.sh``. That will set the environment variables "
"needed to locate the cross-build toolchain and build the application."
msgstr ""

#: ../../../tutorial/consuming_packages/cross_building_with_conan.rst:187
msgid ""
"$ cd build\n"
"$ source Release/generators/conanbuild.sh\n"
"Capturing current environment in deactivate_conanbuildenv-release-armv7hf."
"sh\n"
"Configuring environment variables\n"
"$ cmake .. -DCMAKE_TOOLCHAIN_FILE=Release/generators/conan_toolchain.cmake -"
"DCMAKE_BUILD_TYPE=Release\n"
"$ cmake --build .\n"
"...\n"
"-- Conan toolchain: C++ Standard 14 with extensions ON\n"
"-- The C compiler identification is GNU 9.4.0\n"
"-- Detecting C compiler ABI info\n"
"-- Detecting C compiler ABI info - done\n"
"-- Check for working C compiler: /usr/bin/arm-linux-gnueabihf-gcc-9 - "
"skipped\n"
"-- Detecting C compile features\n"
"-- Detecting C compile features - done    [100%] Built target compressor\n"
"...\n"
"$ source Release/generators/deactivate_conanbuild.sh"
msgstr ""

#: ../../../tutorial/consuming_packages/cross_building_with_conan.rst:206
msgid ""
"You could check that we built the application for the correct architecture "
"by running the ``file`` Linux utility:"
msgstr ""

#: ../../../tutorial/consuming_packages/cross_building_with_conan.rst:209
msgid ""
"$ file compressor\n"
"compressor: ELF 32-bit LSB shared object, ARM, EABI5 version 1 (SYSV), "
"dynamically\n"
"linked, interpreter /lib/ld-linux-armhf.so.3,\n"
"BuildID[sha1]=2a216076864a1b1f30211debf297ac37a9195196, for GNU/Linux 3.2.0, "
"not\n"
"stripped"
msgstr ""

#: ../../../tutorial/consuming_packages/cross_building_with_conan.rst:221
msgid ""
":ref:`Creating a Conan package for a "
"toolchain<example_cross_build_toolchain_package>`"
msgstr ""

#: ../../../tutorial/consuming_packages/cross_building_with_conan.rst:222
msgid ""
":ref:`Cross building to Android with the "
"NDK<examples_cross_build_android_ndk>`"
msgstr ""

#: ../../../tutorial/consuming_packages/cross_building_with_conan.rst:223
msgid ":ref:`VirtualBuildEnv reference <conan_tools_env_virtualbuildenv>`"
msgstr ""

#: ../../../tutorial/consuming_packages/cross_building_with_conan.rst:224
msgid "Cross-build using a tool_requires"
msgstr ""

#: ../../../tutorial/consuming_packages/cross_building_with_conan.rst:225
msgid ""
":ref:`How to require test frameworks like gtest: using test_requires "
"<reference_conanfile_methods_build_requirements_test_requires>`"
msgstr ""

#: ../../../tutorial/consuming_packages/cross_building_with_conan.rst:226
msgid "Using Conan to build for iOS"
msgstr ""
