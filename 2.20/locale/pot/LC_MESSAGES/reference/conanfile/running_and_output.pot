# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.20\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-23 08:25+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/conanfile/running_and_output.rst:5
msgid "Running and output"
msgstr ""

#: ../../../reference/conanfile/running_and_output.rst:8
msgid "Output text from recipes"
msgstr ""

#: ../../../reference/conanfile/running_and_output.rst:10
msgid ""
"Use the ``self.output`` attribute to output text from the recipes. Do "
"**not** use Python's ``print()`` function."
msgstr ""

#: ../../../conan_sources/conan/api/output.py:docstring of
#: conan.api.output.ConanOutput.error:1
msgid ""
"Indicates that a serious issue has occurred that prevents the system or "
"application from continuing to function correctly."
msgstr ""

#: ../../../conan_sources/conan/api/output.py:docstring of
#: conan.api.output.ConanOutput.error:4
msgid ""
"Typically, this represents a failure in the normal flow of execution, such "
"as a service crash or a critical exception. Notice that if the user has set "
"the ``core:warnings_as_errors`` configuration, this will raise an exception "
"when the output is printed, so that the error does not pass unnoticed."
msgstr ""

#: ../../../conan_sources/conan/api/output.py:docstring of
#: conan.api.output.ConanOutput.warning:1
msgid ""
"Highlights a potential issue that, while not stopping the system, could "
"cause problems in the future or under certain conditions."
msgstr ""

#: ../../../conan_sources/conan/api/output.py:docstring of
#: conan.api.output.ConanOutput.warning:4
msgid ""
"Warnings signal abnormal situations that should be reviewed but don’t "
"necessarily cause an immediate halt in operations. Notice that if the tag "
"matches the pattern in the ``core:warnings_as_errors`` configuration, and is "
"not skipped, this will be upgraded to an error, and raise an exception when "
"the output is printed, so that the error does not pass unnoticed."
msgstr ""

#: ../../../conan_sources/conan/api/output.py:docstring of
#: conan.api.output.ConanOutput.success:1
msgid "Shows that an operation has been completed successfully."
msgstr ""

#: ../../../conan_sources/conan/api/output.py:docstring of
#: conan.api.output.ConanOutput.success:3
msgid ""
"This type of message is useful to confirm that key processes or tasks have "
"finished correctly, which is essential for good application monitoring."
msgstr ""

#: ../../../conan_sources/conan/api/output.py:docstring of
#: conan.api.output.ConanOutput.highlight:1
msgid ""
"Marks or emphasizes important events or processes that need to stand out but "
"don’t necessarily indicate success or error."
msgstr ""

#: ../../../conan_sources/conan/api/output.py:docstring of
#: conan.api.output.ConanOutput.highlight:4
msgid ""
"These messages draw attention to key points that may be relevant for the "
"user or administrator."
msgstr ""

#: ../../../conan_sources/conan/api/output.py:docstring of
#: conan.api.output.ConanOutput.status:1
msgid "Provides general information about the system or ongoing operations."
msgstr ""

#: ../../../conan_sources/conan/api/output.py:docstring of
#: conan.api.output.ConanOutput.status:3
msgid ""
"Info messages are basic and used to inform about common events, like the "
"start or completion of processes, without implying specific problems or "
"achievements."
msgstr ""

#: ../../../reference/conanfile/running_and_output.rst:19
msgid ""
"The following three methods are not shown by default and are usually "
"reserved for scenarios that require a higher level of verbosity. You can "
"display them using the arguments ``-v``, ``-vv``, and ``-vvv`` respectively."
msgstr ""

#: ../../../conan_sources/conan/api/output.py:docstring of
#: conan.api.output.ConanOutput.verbose:1
msgid ""
"Displays additional and detailed information that, while not critical, can "
"be useful for better understanding how the system is working."
msgstr ""

#: ../../../conan_sources/conan/api/output.py:docstring of
#: conan.api.output.ConanOutput.verbose:4
msgid ""
"This message won't be printed unless the user has set the log level to "
"verbose (e.g., using the ``-v`` option in the command line)."
msgstr ""

#: ../../../conan_sources/conan/api/output.py:docstring of
#: conan.api.output.ConanOutput.verbose:7
msgid ""
"It’s appropriate for gaining more context without overloading the logs with "
"excessive detail. Useful when more clarity is needed than a simple info."
msgstr ""

#: ../../../conan_sources/conan/api/output.py:docstring of
#: conan.api.output.ConanOutput.debug:1
msgid "With a high level of detail, it is mainly used for debugging code."
msgstr ""

#: ../../../conan_sources/conan/api/output.py:docstring of
#: conan.api.output.ConanOutput.debug:3
msgid ""
"This message won't be printed unless the user has set the log level to debug "
"(e.g., using the ``-vv`` option in the command line)."
msgstr ""

#: ../../../conan_sources/conan/api/output.py:docstring of
#: conan.api.output.ConanOutput.debug:6
msgid ""
"These messages provide useful information for developers, such as variable "
"values or execution flow details, to trace errors or analyze the program's "
"behavior."
msgstr ""

#: ../../../conan_sources/conan/api/output.py:docstring of
#: conan.api.output.ConanOutput.trace:1
msgid "This is the most extreme level of detail."
msgstr ""

#: ../../../conan_sources/conan/api/output.py:docstring of
#: conan.api.output.ConanOutput.trace:3
msgid ""
"Trace messages log every little step the system takes, including function "
"entries and exits, variable changes, and other very specific events."
msgstr ""

#: ../../../conan_sources/conan/api/output.py:docstring of
#: conan.api.output.ConanOutput.trace:6
msgid ""
"This message won't be printed unless the user has set the log level to trace "
"(e.g., using the ``-vvv`` option in the command line)."
msgstr ""

#: ../../../conan_sources/conan/api/output.py:docstring of
#: conan.api.output.ConanOutput.trace:9
msgid ""
"It’s used when full visibility of everything happening in the system is "
"required, but should be used carefully due to the large amount of "
"information it can generate."
msgstr ""

#: ../../../reference/conanfile/running_and_output.rst:26
msgid ""
"These output functions will only output if the verbosity level with which "
"Conan was launched is the same or higher than the message, so running with "
"``-vwarning`` will output calls to ``warning()`` and ``error()``, but not "
"``info()`` (Additionally, the ``highlight()`` and ``success()`` methods have "
"a ``-vnotice`` verbosity level)"
msgstr ""

#: ../../../reference/conanfile/running_and_output.rst:30
msgid ""
"Note that these methods return the output object again, so that you can "
"chain output calls if needed."
msgstr ""

#: ../../../reference/conanfile/running_and_output.rst:32
msgid ""
"Using the ``core:warnings_as_errors`` conf, you can make Conan raise an "
"exception when either errors or a tagged warning matching any of the given "
"patterns is printed. This is useful to make sure that recipes are not "
"printing unexpected warnings or errors. Additionally, you can skip which "
"warnings trigger an exception :ref:`with the core:skip_warnings "
"conf<reference_config_files_global_conf_skip_warnings>`."
msgstr ""

#: ../../../reference/conanfile/running_and_output.rst:36
msgid ""
"# Raise an exception if any warning or error is printed\n"
"core:warnings_as_errors=['*']\n"
"# But skip the deprecation warnings\n"
"core:skip_warnings=['deprecated']"
msgstr ""

#: ../../../reference/conanfile/running_and_output.rst:43
msgid ""
"Both confs accept a list of patterns to match against the warning tags. A "
"special ``unknown`` value can be used to match any warning without a tag."
msgstr ""

#: ../../../reference/conanfile/running_and_output.rst:46
msgid ""
"To tag a warning, use the ``warn_tag`` argument of the ``warning()`` method "
"in your recipes:"
msgstr ""

#: ../../../reference/conanfile/running_and_output.rst:48
msgid "self.output.warning(\"Extra warning\", warn_tag=\"custom_tag\")"
msgstr ""

#: ../../../reference/conanfile/running_and_output.rst:55
msgid ""
"Custom commands and tools are free to instantiate their own ``ConanOutput`` "
"object."
msgstr ""

#: ../../../reference/conanfile/running_and_output.rst:58
msgid ""
"Some methods have optional ``fg`` and ``bg`` arguments, these are colour "
"codes for the foreground and background of the text, available in the "
"``conan.api.output.Color`` class."
msgstr ""

#: ../../../reference/conanfile/running_and_output.rst:61
msgid "self.output.info(\"This is a message\", fg=Color.BLUE, bg=Color.YELLOW)"
msgstr ""

#: ../../../reference/conanfile/running_and_output.rst:69
msgid "Running commands"
msgstr ""

#: ../../../reference/conanfile/running_and_output.rst:71
msgid ""
"Recipes and helpers can use the ``self.run()`` method to run system commands "
"while injecting the calls to activate the appropriate environment, and throw "
"exceptions when errors occur so that command errors do not pass unnoticed. "
"It also wraps the commands with the results of the :ref:`command wrapper "
"plugin<reference_extensions_command_wrapper>`."
msgstr ""

#: ../../../conan_sources/conan/internal/model/conan_file.py:docstring of
#: conan.internal.model.conan_file.ConanFile.run:1
msgid "Run a command in the current package context."
msgstr ""

#: ../../../conan_sources/conan/internal/model/conan_file.py:docstring of
#: conan.internal.model.conan_file.ConanFile.run:0
msgid "Parameters"
msgstr ""

#: ../../../conan_sources/conan/internal/model/conan_file.py:docstring of
#: conan.internal.model.conan_file.ConanFile.run:3
msgid "The command to run."
msgstr ""

#: ../../../conan_sources/conan/internal/model/conan_file.py:docstring of
#: conan.internal.model.conan_file.ConanFile.run:4
msgid ""
"The output stream to write the command output. If ``None``, it defaults to "
"the standard output stream."
msgstr ""

#: ../../../conan_sources/conan/internal/model/conan_file.py:docstring of
#: conan.internal.model.conan_file.ConanFile.run:6
msgid ""
"The error output stream to write the command error output. If ``None``, it "
"defaults to the standard error stream."
msgstr ""

#: ../../../conan_sources/conan/internal/model/conan_file.py:docstring of
#: conan.internal.model.conan_file.ConanFile.run:8
msgid "The current working directory to run the command in."
msgstr ""

#: ../../../conan_sources/conan/internal/model/conan_file.py:docstring of
#: conan.internal.model.conan_file.ConanFile.run:9
msgid ""
"If ``True``, do not raise an error if the command returns a non-zero exit "
"code."
msgstr ""

#: ../../../conan_sources/conan/internal/model/conan_file.py:docstring of
#: conan.internal.model.conan_file.ConanFile.run:11
msgid ""
"The environment file to use. If empty, it defaults to ``\"conanbuild\"`` for "
"when ``scope`` is ``build`` or ``\"conanrun\"`` for ``run``. If set to "
"``None`` explicitly, no environment file will be applied, which is useful "
"for commands that do not require any environment."
msgstr ""

#: ../../../conan_sources/conan/internal/model/conan_file.py:docstring of
#: conan.internal.model.conan_file.ConanFile.run:15
msgid "If ``True``, suppress the output of the command."
msgstr ""

#: ../../../conan_sources/conan/internal/model/conan_file.py:docstring of
#: conan.internal.model.conan_file.ConanFile.run:16
msgid ""
"If ``True``, run the command in a shell. This is passed to the underlying "
"``Popen`` function."
msgstr ""

#: ../../../conan_sources/conan/internal/model/conan_file.py:docstring of
#: conan.internal.model.conan_file.ConanFile.run:18
msgid "The scope of the command, either ``\"build\"`` or ``\"run\"``."
msgstr ""

#: ../../../reference/conanfile/running_and_output.rst:77
msgid ""
"Use the ``stdout`` and ``stderr`` arguments to redirect the output of the "
"command to a file-like object instead of the console."
msgstr ""

#: ../../../reference/conanfile/running_and_output.rst:79
msgid ""
"# Redirect stdout to a file\n"
"with open(\"ninja_stdout.log\", \"w\") as stdout:\n"
"    # Redirect stderr to a StringIO object to be able to read it later\n"
"    stderr = StringIO()\n"
"    self.run(\"ninja ...\", stdout=stdout, stderr=stderr)"
msgstr ""
