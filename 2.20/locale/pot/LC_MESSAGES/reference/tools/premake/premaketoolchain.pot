# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.20\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-23 08:25+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/tools/premake/premaketoolchain.rst:4
msgid "PremakeToolchain"
msgstr ""

#: ../../../common/experimental_warning.inc:3
msgid ""
"This feature is experimental and subject to breaking changes. See :ref:`the "
"Conan stability<stability>` section for more information."
msgstr ""

#: ../../../reference/tools/premake/premaketoolchain.rst:10
msgid ""
"This class will generate files that are only compatible with Premake "
"versions >= 5.0.0"
msgstr ""

#: ../../../reference/tools/premake/premaketoolchain.rst:12
msgid "The ``PremakeToolchain`` generator can be used by name in conanfiles:"
msgstr ""

#: ../../../reference/tools/premake/premaketoolchain.rst:14
msgid "conanfile.py"
msgstr ""

#: ../../../reference/tools/premake/premaketoolchain.rst:14
msgid ""
"class Pkg(ConanFile):\n"
"    generators = \"PremakeToolchain\""
msgstr ""

#: ../../../reference/tools/premake/premaketoolchain.rst:21
msgid "conanfile.txt"
msgstr ""

#: ../../../reference/tools/premake/premaketoolchain.rst:21
msgid ""
"[generators]\n"
"PremakeToolchain"
msgstr ""

#: ../../../reference/tools/premake/premaketoolchain.rst:27
msgid ""
"And it can also be fully instantiated in the conanfile ``generate()`` method:"
msgstr ""

#: ../../../reference/tools/premake/premaketoolchain.rst:29
msgid "**Usage Example:**"
msgstr ""

#: ../../../reference/tools/premake/premaketoolchain.rst:31
msgid ""
"from conan.tools.premake import PremakeToolchain\n"
"\n"
"class Pkg(ConanFile):\n"
"    settings = \"os\", \"compiler\", \"build_type\", \"arch\"\n"
"\n"
"    def generate(self):\n"
"        tc = PremakeToolchain(self)\n"
"        tc.extra_defines = [\"VALUE=2\"]                      # Add define "
"to main premake workspace\n"
"        tc.extra_cflags = [\"-Wextra\"]                       # Add cflags "
"to main premake workspace\n"
"        tc.extra_cxxflags = [\"-Wall\", \"-Wextra\"]            # Add "
"cxxflags to main premake workspace\n"
"        tc.extra_ldflags = [\"-lm\"]                          # Add ldflags "
"to main premake workspace\n"
"        tc.project(\"main\").extra_defines = [\"TEST=False\"]   # Add define "
"to \"main\" project (overriding possible value)\n"
"        tc.project(\"main\").extra_cxxflags = [\"-FS\"]         # Add "
"cxxflags to \"main\" project\n"
"        tc.project(\"test\").disable = True                   # A way of "
"disabling \"test\" project compilation\n"
"        tc.project(\"foo\").kind = \"StaticLib\"                # Override "
"library type of \"foo\"\n"
"        tc.generate()"
msgstr ""

#: ../../../reference/tools/premake/premaketoolchain.rst:51
msgid "Generated files"
msgstr ""

#: ../../../reference/tools/premake/premaketoolchain.rst:53
msgid ""
"The ``PremakeToolchain`` generates ``conantoolchain.premake5.lua`` file "
"after a :command:`conan install` (or when building the package in the cache) "
"with the information provided in the ``generate()`` method as well as "
"information translated from the current ``settings``, ``conf``, etc."
msgstr ""

#: ../../../reference/tools/premake/premaketoolchain.rst:57
msgid ""
"Premake does not expose any kind of API to interact inject/modify the build "
"scripts. Furthermore, premake does not have a concept of toolchain so "
"following premake maintainers instructions, (see `premake discussion "
"<https://github.com/premake/premake-core/discussions/2441>`_) as premake is "
"built in top of Lua scripts, Conan generated file is a Lua script that will "
"override the original premake script adding the following information:"
msgstr ""

#: ../../../reference/tools/premake/premaketoolchain.rst:63
msgid "Detection of ``buildtype`` from Conan settings."
msgstr ""

#: ../../../reference/tools/premake/premaketoolchain.rst:65
msgid "Definition of the C++ standard as necessary."
msgstr ""

#: ../../../reference/tools/premake/premaketoolchain.rst:67
msgid "Definition of the C standard as necessary."
msgstr ""

#: ../../../reference/tools/premake/premaketoolchain.rst:69
msgid "Detection of the premake ``action`` based on conan profile and OS."
msgstr ""

#: ../../../reference/tools/premake/premaketoolchain.rst:71
msgid ""
"Definition of the build folder in order to avoid default premake behavior of "
"creating build folder and object files in the source repository (which goes "
"against conan good practices)."
msgstr ""

#: ../../../reference/tools/premake/premaketoolchain.rst:75
msgid ""
"Definition of compiler and linker flags and defines based on user "
"configuration values."
msgstr ""

#: ../../../reference/tools/premake/premaketoolchain.rst:77
msgid "Definition of proper target architecture when cross building."
msgstr ""

#: ../../../reference/tools/premake/premaketoolchain.rst:79
msgid "Definition of ``fPIC`` flag based on conan options."
msgstr ""

#: ../../../reference/tools/premake/premaketoolchain.rst:81
msgid ""
"Based on ``shared`` conan option, ``PremakeToolchain`` will set the ``kind`` "
"of the ``workspace`` to ``SharedLib`` or ``StaticLib``."
msgstr ""

#: ../../../reference/tools/premake/premaketoolchain.rst:85
msgid ""
"``PremakeToolchain`` is not able to override the ``kind`` of a project if "
"that project has already define the ``kind`` attribute (typical case). It "
"can only override top-level ``workspace.kind``, which will only affect "
"projects without a defined ``kind``."
msgstr ""

#: ../../../reference/tools/premake/premaketoolchain.rst:88
msgid ""
"**Recomendation**: as premake does not offer any mechanism like CMake's "
"`BUILD_SHARED_LIBS <https://cmake.org/cmake/help/latest/variable/"
"BUILD_SHARED_LIBS.html#variable:BUILD_SHARED_LIBS>`_ to externally manage "
"the creation type of libraries, it is recommended while using conan to "
"**AVOID** defining the ``kind`` attribute on library project."
msgstr ""

#: ../../../reference/tools/premake/premaketoolchain.rst:94
msgid "Reference"
msgstr ""

#: ../../../conan_sources/conan/tools/premake/toolchain.py:docstring of
#: conan.tools.premake.toolchain.PremakeToolchain:1
msgid "PremakeToolchain generator"
msgstr ""

#: ../../../conan_sources/conan/tools/premake/toolchain.py:docstring of
#: conan.tools.premake.toolchain.PremakeToolchain:0
msgid "Parameters"
msgstr ""

#: ../../../conan_sources/conan/tools/premake/toolchain.py:docstring of
#: conan.tools.premake.toolchain.PremakeToolchain:3
msgid ""
"``< ConanFile object >`` The current recipe object. Always use ``self``."
msgstr ""

#: ../../../docstring of conan.tools.premake.PremakeToolchain.extra_cxxflags:1
msgid "List of extra ``CXX`` flags. Added to ``buildoptions``."
msgstr ""

#: ../../../docstring of conan.tools.premake.PremakeToolchain.extra_cflags:1
msgid "List of extra ``C`` flags. Added to ``buildoptions``."
msgstr ""

#: ../../../docstring of conan.tools.premake.PremakeToolchain.extra_ldflags:1
msgid "List of extra linker flags. Added to ``linkoptions``."
msgstr ""

#: ../../../docstring of conan.tools.premake.PremakeToolchain.extra_defines:1
msgid "List of extra preprocessor definitions. Added to ``defines``."
msgstr ""

#: ../../../conan_sources/conan/tools/premake/toolchain.py:docstring of
#: conan.tools.premake.toolchain.PremakeToolchain.project:1
msgid ""
"The returned object will also have the same properties as the workspace but "
"will only affect the project with the name. :param project_name: The name of "
"the project inside the workspace to be updated. :return: "
"``<PremakeProject>`` object which allow to set project specific flags."
msgstr ""

#: ../../../conan_sources/conan/tools/premake/toolchain.py:docstring of
#: conan.tools.premake.toolchain.PremakeToolchain.generate:1
msgid ""
"Creates a ``conantoolchain.premake5.lua`` file which will properly configure "
"build paths, binary paths, configuration settings and compiler/linker flags "
"based on toolchain configuration."
msgstr ""
