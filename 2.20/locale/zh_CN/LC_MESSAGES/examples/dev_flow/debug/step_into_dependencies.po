# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.20\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:31+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../examples/dev_flow/debug/step_into_dependencies.rst:6
msgid "Debugging and stepping into dependencies"
msgstr ""

#: ../../../examples/dev_flow/debug/step_into_dependencies.rst:8
msgid ""
"Sometimes, when developing and debugging your own code, it could be useful "
"to be able to step-into the dependencies source code too. There are a couple "
"of things to take into account:"
msgstr ""

#: ../../../examples/dev_flow/debug/step_into_dependencies.rst:11
msgid ""
"Recipes and packages from ConanCenter do not package always all the debug "
"artifacts necessary to debug. For example in Windows, the ``*.pdb`` files "
"are not packaged, because they are very heavy, and in practice barely used. "
"It is possible to have your own packages to package the PDB files if you "
"want, but that still won't solve the next point."
msgstr ""

#: ../../../examples/dev_flow/debug/step_into_dependencies.rst:12
msgid ""
"Debug artifacts are often not relocatable, that means that such artifacts "
"can only be used in the location they were built from sources. But packages "
"that are uploaded to a server and downloaded to a different machine can put "
"those artifacts in a different folder. Then, the debug artifacts might not "
"correctly locate the source code, the symbols, etc."
msgstr ""

#: ../../../examples/dev_flow/debug/step_into_dependencies.rst:16
msgid "Building from source"
msgstr ""

#: ../../../examples/dev_flow/debug/step_into_dependencies.rst:18
msgid ""
"The recommended approach for debugging dependencies is building them from "
"source in the local cache. This approach should work out of the box for most "
"recipes, including ConanCenter recipes."
msgstr ""

#: ../../../examples/dev_flow/debug/step_into_dependencies.rst:20
msgid ""
"We can reuse the code from the very first example in the tutorial for this "
"use case. Please, first clone the sources to recreate this project. You can "
"find them in the `examples2 repository <https://github.com/conan-io/"
"examples2>`_ in GitHub:"
msgstr ""

#: ../../../examples/dev_flow/debug/step_into_dependencies.rst:23
msgid ""
"$ git clone https://github.com/conan-io/examples2.git\n"
"$ cd examples2/tutorial/consuming_packages/simple_cmake_project"
msgstr ""

#: ../../../examples/dev_flow/debug/step_into_dependencies.rst:28
msgid "Then, lets make sure the dependency is built from source:"
msgstr ""

#: ../../../examples/dev_flow/debug/step_into_dependencies.rst:30
msgid ""
"$ conan install . -s build_type=Debug --build=\"zlib/*\"\n"
"...\n"
"Install finished successfully"
msgstr ""

#: ../../../examples/dev_flow/debug/step_into_dependencies.rst:36
msgid ""
"Assuming that we have CMake>=3.23, we can use the presets (otherwise, please "
"use the ``-DCMAKE_TOOLCHAIN_FILE`` arguments):"
msgstr ""

#: ../../../examples/dev_flow/debug/step_into_dependencies.rst:38
msgid "$ cmake . --preset conan-default"
msgstr ""

#: ../../../examples/dev_flow/debug/step_into_dependencies.rst:43
msgid "This will create our project, that we can start building and debugging."
msgstr ""

#: ../../../examples/dev_flow/debug/step_into_dependencies.rst:47
msgid "Step into a dependency with Visual Studio"
msgstr ""

#: ../../../examples/dev_flow/debug/step_into_dependencies.rst:49
msgid ""
"Once the project is created, in Visual Studio, we can double-click on the "
"``compressor.sln`` file, or open the file from the open Visual Studio IDE."
msgstr ""

#: ../../../examples/dev_flow/debug/step_into_dependencies.rst:51
msgid ""
"Once the project is open, the first step is building it, making sure the "
"``Debug`` configuration is the active one, going to ``Build -> Build "
"Solution`` will do it. Then we can define ``compressor`` as the \"Startup "
"project\" in project view."
msgstr ""

#: ../../../examples/dev_flow/debug/step_into_dependencies.rst:53
msgid ""
"Going to the ``compressor/main.c`` source file, we can introduce a "
"breakpoint in some line there:"
msgstr ""

#: ../../../examples/dev_flow/debug/step_into_dependencies.rst:55
msgid "main.c"
msgstr ""

#: ../../../examples/dev_flow/debug/step_into_dependencies.rst:55
msgid ""
"int main(void) {\n"
"    ...\n"
"\n"
"    // add a breakpoint in deflateInit line in your IDE\n"
"    deflateInit(&defstream, Z_BEST_COMPRESSION);\n"
"    deflate(&defstream, Z_FINISH);"
msgstr ""

#: ../../../examples/dev_flow/debug/step_into_dependencies.rst:65
msgid ""
"Clicking on the ``Debug -> Start Debugging`` (or F5), the program will start "
"debugging and stop at the ``deflateInit()`` line. Clicking on the ``Debug -> "
"Step Into``, the IDE should be able to navigate to the ``deflate.c`` source "
"code. If we check this file, its path will be inside the Conan cache, like "
"``C:\\Users\\<myuser>\\.conan2\\p\\b\\zlib4f7275ba0a71f\\b\\src\\deflate.c``"
msgstr ""

#: ../../../examples/dev_flow/debug/step_into_dependencies.rst:67
msgid "deflate.c"
msgstr ""

#: ../../../examples/dev_flow/debug/step_into_dependencies.rst:67
msgid ""
"int ZEXPORT deflateInit_(strm, level, version, stream_size)\n"
" z_streamp strm;\n"
" int level;\n"
" const char *version;\n"
" int stream_size;\n"
" {\n"
"     return deflateInit2_(strm, level, Z_DEFLATED, MAX_WBITS, "
"DEF_MEM_LEVEL,\n"
"                         Z_DEFAULT_STRATEGY, version, stream_size);\n"
"     /* To do: ignore strm->next_in if we use it as window */\n"
" }"
msgstr ""

#: ../../../examples/dev_flow/debug/step_into_dependencies.rst:84
msgid ""
"Modifying the dependency source code while debugging is not possible with "
"this approach. If that is the intended flow, the recommended approach is to "
"use :ref:`editable package<editable_packages>`."
msgstr ""
