# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.20\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:31+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/commands/config.rst:2
msgid "conan config"
msgstr ""

#: ../../../reference/commands/config.rst:4
msgid "Manage the Conan configuration in the Conan home."
msgstr ""

#: ../../../reference/commands/config.rst:8
msgid "conan config home"
msgstr ""

#: ../../../reference/commands/config.rst:-1
msgid ""
"$ conan config home -h\n"
"usage: conan config home [-h] [--out-file OUT_FILE] [-v [V]] [-cc "
"CORE_CONF]\n"
"\n"
"Show the Conan home folder.\n"
"\n"
"options:\n"
"  -h, --help            show this help message and exit\n"
"  --out-file OUT_FILE   Write the output of the command to the specified "
"file\n"
"                        instead of stdout.\n"
"  -v [V]                Level of detail of the output. Valid options from "
"less\n"
"                        verbose to more verbose: -vquiet, -verror, -"
"vwarning,\n"
"                        -vnotice, -vstatus, -v or -vverbose, -vv or -"
"vdebug,\n"
"                        -vvv or -vtrace\n"
"  -cc CORE_CONF, --core-conf CORE_CONF\n"
"                        Define core configuration, overwriting global.conf\n"
"                        values. E.g.: -cc core:non_interactive=True\n"
"\n"
msgstr ""

#: ../../../reference/commands/config.rst:14
msgid ""
"The ``conan config home`` command returns the path of the Conan home folder."
msgstr ""

#: ../../../reference/commands/config.rst:16
msgid ""
"$ conan config home\n"
"\n"
"/home/user/.conan2"
msgstr ""

#: ../../../reference/commands/config.rst:26
msgid "conan config install"
msgstr ""

#: ../../../reference/commands/config.rst:-1
msgid ""
"$ conan config install -h\n"
"usage: conan config install [-h] [--out-file OUT_FILE] [-v [V]]\n"
"                            [-cc CORE_CONF] [--verify-ssl [VERIFY_SSL] |\n"
"                            --insecure] [-t {git,dir,file,url}] [-a ARGS]\n"
"                            [-sf SOURCE_FOLDER] [-tf TARGET_FOLDER]\n"
"                            item\n"
"\n"
"Install the configuration (remotes, profiles, conf), from git, http or a\n"
"folder, into the Conan home folder.\n"
"\n"
"positional arguments:\n"
"  item                  git repository, local file or folder or zip file\n"
"                        (local or http) where the configuration is stored\n"
"\n"
"options:\n"
"  -h, --help            show this help message and exit\n"
"  --out-file OUT_FILE   Write the output of the command to the specified "
"file\n"
"                        instead of stdout.\n"
"  -v [V]                Level of detail of the output. Valid options from "
"less\n"
"                        verbose to more verbose: -vquiet, -verror, -"
"vwarning,\n"
"                        -vnotice, -vstatus, -v or -vverbose, -vv or -"
"vdebug,\n"
"                        -vvv or -vtrace\n"
"  -cc CORE_CONF, --core-conf CORE_CONF\n"
"                        Define core configuration, overwriting global.conf\n"
"                        values. E.g.: -cc core:non_interactive=True\n"
"  --verify-ssl [VERIFY_SSL]\n"
"                        Verify SSL connection when downloading file\n"
"  --insecure            Allow insecure server connections when using SSL.\n"
"                        Equivalent to --verify-ssl=False\n"
"  -t {git,dir,file,url}, --type {git,dir,file,url}\n"
"                        Type of remote config\n"
"  -a ARGS, --args ARGS  String with extra arguments for \"git clone\"\n"
"  -sf SOURCE_FOLDER, --source-folder SOURCE_FOLDER\n"
"                        Install files only from a source subfolder from the\n"
"                        specified origin\n"
"  -tf TARGET_FOLDER, --target-folder TARGET_FOLDER\n"
"                        Install to that path in the conan cache\n"
"\n"
msgstr ""

#: ../../../reference/commands/config.rst:32
msgid ""
"The ``conan config install`` command is intended to install in the current "
"home a common shared Conan configuration, like the definitions of "
"``remotes``, ``profiles``, ``settings``, ``hooks``, ``extensions``, etc."
msgstr ""

#: ../../../reference/commands/config.rst:35
msgid "The command can use as source any of the following:"
msgstr ""

#: ../../../reference/commands/config.rst:37
msgid "A URL pointing to a zip archive containing the configuration files"
msgstr ""

#: ../../../reference/commands/config.rst:38
msgid "A git repository containing the files"
msgstr ""

#: ../../../reference/commands/config.rst:39
msgid "A local folder"
msgstr ""

#: ../../../reference/commands/config.rst:40
msgid "Just one file"
msgstr ""

#: ../../../reference/commands/config.rst:42
msgid ""
"Files in the current Conan home will be replaced by the ones from the "
"installation source. All the configuration files can be shared and installed "
"this way:"
msgstr ""

#: ../../../reference/commands/config.rst:45
msgid "``remotes.json`` for the definition of remotes"
msgstr ""

#: ../../../reference/commands/config.rst:46
msgid "Any custom profile files inside a ``profiles`` subfolder"
msgstr ""

#: ../../../reference/commands/config.rst:47
msgid "Custom ``settings.yml``"
msgstr ""

#: ../../../reference/commands/config.rst:48
msgid "Custom ``global.conf``"
msgstr ""

#: ../../../reference/commands/config.rst:49
msgid "All the extensions, including plugins, hooks."
msgstr ""

#: ../../../reference/commands/config.rst:50
msgid "Custom user commands."
msgstr ""

#: ../../../reference/commands/config.rst:52
msgid ""
"This command reads a ``.conanignore`` file which, if present, filters which "
"files and folders are copied over to the user's Conan home folder. This file "
"uses `fnmatch <https://docs.python.org/3/library/fnmatch.html>`_ patterns to "
"match over the folder contents, excluding those entries that match from the "
"config installation. See `conan-io/command-extensions's .conanignore "
"<https://github.com/conan-io/command-extensions/blob/main/.conanignore>`_ "
"for an example of such a file. You can force certain files to be copied over "
"by using the ``!`` negation syntax:"
msgstr ""

#: ../../../reference/commands/config.rst:59
msgid ""
"# Ignore all files\n"
"*\n"
"# But copy the file named \"settings.yml\"\n"
"!settings.yml"
msgstr ""

#: ../../../reference/commands/config.rst:67
msgid "**Examples**:"
msgstr ""

#: ../../../reference/commands/config.rst:69
msgid "Install the configuration from a URL:"
msgstr ""

#: ../../../reference/commands/config.rst:71
msgid "$ conan config install http://url/to/some/config.zip"
msgstr ""

#: ../../../reference/commands/config.rst:76
msgid ""
"Install the configuration from a URL, but only getting the files inside a "
"*origin* folder inside the zip file, and putting them inside a *target* "
"folder in the local cache:"
msgstr ""

#: ../../../reference/commands/config.rst:79
msgid ""
"$ conan config install http://url/to/some/config.zip -sf=origin -tf=target"
msgstr ""

#: ../../../reference/commands/config.rst:83
msgid ""
"Install configuration from 2 different zip files from 2 different urls, "
"using different source and target folders for each one, then update all:"
msgstr ""

#: ../../../reference/commands/config.rst:86
msgid ""
"$ conan config install http://url/to/some/config.zip -sf=origin -tf=target\n"
"$ conan config install http://url/to/some/config.zip -sf=origin2 -"
"tf=target2\n"
"$ conan config install http://other/url/to/other.zip -sf=hooks -tf=hooks"
msgstr ""

#: ../../../reference/commands/config.rst:92
msgid "Install the configuration from a Git repository with submodules:"
msgstr ""

#: ../../../reference/commands/config.rst:94
msgid ""
"$ conan config install http://github.com/user/conan_config/.git --args=\"--"
"recursive\""
msgstr ""

#: ../../../reference/commands/config.rst:98
msgid ""
"You can also force the git download by using :command:`--type git` (in case "
"it is not deduced from the URL automatically):"
msgstr ""

#: ../../../reference/commands/config.rst:100
msgid ""
"$ conan config install http://github.com/user/conan_config/.git --type git"
msgstr ""

#: ../../../reference/commands/config.rst:104
msgid "Install from a URL skipping SSL verification:"
msgstr ""

#: ../../../reference/commands/config.rst:106
msgid "$ conan config install http://url/to/some/config.zip --verify-ssl=False"
msgstr ""

#: ../../../reference/commands/config.rst:110
msgid "This will disable the SSL check of the certificate."
msgstr ""

#: ../../../reference/commands/config.rst:112
msgid "Install a specific file from a local path:"
msgstr ""

#: ../../../reference/commands/config.rst:114
msgid "$ conan config install my_settings/settings.yml"
msgstr ""

#: ../../../reference/commands/config.rst:118
msgid "Install the configuration from a local path:"
msgstr ""

#: ../../../reference/commands/config.rst:120
msgid "$ conan config install /path/to/some/config.zip"
msgstr ""

#: ../../../reference/commands/config.rst:128
msgid "conan config install-pkg"
msgstr ""

#: ../../../common/experimental_warning.inc:3
msgid ""
"This feature is experimental and subject to breaking changes. See :ref:`the "
"Conan stability<stability>` section for more information."
msgstr ""

#: ../../../reference/commands/config.rst:-1
msgid ""
"$ conan config install-pkg -h\n"
"usage: conan config install-pkg [-h] [--out-file OUT_FILE] [-v [V]]\n"
"                                [-cc CORE_CONF] [-l LOCKFILE]\n"
"                                [--lockfile-partial]\n"
"                                [--lockfile-out LOCKFILE_OUT] [-f] [--url "
"URL]\n"
"                                [-pr PROFILE] [-s SETTINGS] [-o OPTIONS]\n"
"                                item\n"
"\n"
"(Experimental) Install the configuration (remotes, profiles, conf), from a\n"
"Conan package\n"
"\n"
"positional arguments:\n"
"  item                  Conan require\n"
"\n"
"options:\n"
"  -h, --help            show this help message and exit\n"
"  --out-file OUT_FILE   Write the output of the command to the specified "
"file\n"
"                        instead of stdout.\n"
"  -v [V]                Level of detail of the output. Valid options from "
"less\n"
"                        verbose to more verbose: -vquiet, -verror, -"
"vwarning,\n"
"                        -vnotice, -vstatus, -v or -vverbose, -vv or -"
"vdebug,\n"
"                        -vvv or -vtrace\n"
"  -cc CORE_CONF, --core-conf CORE_CONF\n"
"                        Define core configuration, overwriting global.conf\n"
"                        values. E.g.: -cc core:non_interactive=True\n"
"  -l LOCKFILE, --lockfile LOCKFILE\n"
"                        Path to a lockfile. Use --lockfile=\"\" to avoid\n"
"                        automatic use of existing 'conan.lock' file\n"
"  --lockfile-partial    Do not raise an error if some dependency is not "
"found\n"
"                        in lockfile\n"
"  --lockfile-out LOCKFILE_OUT\n"
"                        Filename of the updated lockfile\n"
"  -f, --force           Force the re-installation of configuration\n"
"  --url URL             (Experimental) Provide Conan repository URL (for "
"first\n"
"                        install without remotes)\n"
"  -pr PROFILE, --profile PROFILE\n"
"                        Profile to install config\n"
"  -s SETTINGS, --settings SETTINGS\n"
"                        Settings to install config\n"
"  -o OPTIONS, --options OPTIONS\n"
"                        Options to install config\n"
"\n"
msgstr ""

#: ../../../reference/commands/config.rst:137
msgid ""
"This command allows to install configuration from a Conan package stored in "
"a Conan server."
msgstr ""

#: ../../../reference/commands/config.rst:139
msgid "The packages containing configuration follow some special rules:"
msgstr ""

#: ../../../reference/commands/config.rst:141
msgid "They must define the ``package_type = \"configuration\"``"
msgstr ""

#: ../../../reference/commands/config.rst:142
msgid ""
"The configuration files must be packaged in the final \"binary\" package, "
"following the same layout as they would for other ``conan config install`` "
"cases."
msgstr ""

#: ../../../reference/commands/config.rst:143
msgid ""
"They cannot be used as ``requires`` of other packages, because that would "
"result in a chicken-and-egg problem."
msgstr ""

#: ../../../reference/commands/config.rst:144
msgid "They cannot contain ``requires`` to other packages"
msgstr ""

#: ../../../reference/commands/config.rst:145
msgid ""
"The configuration packages are created with ``conan create`` and ``conan "
"export-pkg`` as other packages, and uploaded to the servers with ``conan "
"upload``"
msgstr ""

#: ../../../reference/commands/config.rst:147
msgid ""
"To install configuration from a Conan configuration package, it is possible:"
msgstr ""

#: ../../../reference/commands/config.rst:149
msgid ""
"To generate a lockfile file with ``--lockfile-out``. This lockfile file can "
"be passed to ``conan config install-pkg --lockfile`` (it will automatically "
"loaded it if is named ``conan.lock`` and found in the current directory) in "
"the future to guarantee the same exact version."
msgstr ""

#: ../../../reference/commands/config.rst:150
msgid ""
"Version ranges can be used ``conan config install-pkg \"myconf/[>=1.0 "
"<2]\"`` is correct, and it will install the latest one in that range."
msgstr ""

#: ../../../reference/commands/config.rst:151
msgid ""
"``conan config install-pkg`` always look in the server for the latest "
"version or revision."
msgstr ""

#: ../../../reference/commands/config.rst:152
msgid ""
"If the same version and revision was downloaded and installed from the "
"server, ``conan config install-pkg`` will be a no-op unless ``--force`` is "
"used, in this case the configuration will be overwritten."
msgstr ""

#: ../../../reference/commands/config.rst:154
msgid ""
"It is also possible to make the version of the configuration affect all "
"packages ``package_id`` and be part of the binary model, by activating the "
"``core.package_id:config_mode`` conf (this is also experimental), to any "
"available mode, like ``minor_mode``."
msgstr ""

#: ../../../reference/commands/config.rst:156
msgid ""
"As the ``conan config install-pkg`` command downloads the package from a "
"Conan remote server, it can download from an already existing remote, or it "
"can download from a Conan remote directly specifying the repository URL:"
msgstr ""

#: ../../../reference/commands/config.rst:159
msgid "$ conan config install-pkg myconf/version --url=<url/conan/remote/repo>"
msgstr ""

#: ../../../reference/commands/config.rst:164
msgid ""
"Conan configuration packages can also be parameterized depending on "
"profiles, settings and options. For example, if some organization would like "
"to manage their configuration slightly differently for Windows and other "
"platforms they could do:"
msgstr ""

#: ../../../reference/commands/config.rst:167
msgid ""
"import os\n"
"from conan import ConanFile\n"
"from conan.tools.files import copy\n"
"\n"
"class Conf(ConanFile):\n"
"    name = \"myconf\"\n"
"    version = \"0.1\"\n"
"    settings = \"os\"\n"
"    package_type = \"configuration\"\n"
"    def package(self):\n"
"        f = \"win\" if self.settings.os == \"Windows\" else \"nix\"\n"
"        copy(self, \"*.conf\", src=os.path.join(self.build_folder, f), "
"dst=self.package_folder)"
msgstr ""

#: ../../../reference/commands/config.rst:183
msgid ""
"And if they had a layout with different ``global.conf`` for the different "
"platforms, like:"
msgstr ""

#: ../../../reference/commands/config.rst:185
msgid ""
"conanfile.py\n"
"win/global.conf\n"
"nix/global.conf"
msgstr ""

#: ../../../reference/commands/config.rst:192
msgid "They, they could create and upload their configuration package as:"
msgstr ""

#: ../../../reference/commands/config.rst:194
msgid ""
"$ conan export-pkg . -s os=Windows\n"
"$ conan export-pkg . -s os=Linux\n"
"$ conan upload \"*\" -r=remote -c"
msgstr ""

#: ../../../reference/commands/config.rst:201
msgid "Then, developers could do:"
msgstr ""

#: ../../../reference/commands/config.rst:203
msgid ""
"$ conan config install-pkg \"myconf/[*]\" -s os=Linux\n"
"# or even implicitly, if they default build profile defines os=Linux\n"
"$ conan config install-pkg \"myconf/[*]\""
msgstr ""

#: ../../../reference/commands/config.rst:210
msgid "And they will get the correct configuration for their platform."
msgstr ""

#: ../../../reference/commands/config.rst:214
msgid "conan config list"
msgstr ""

#: ../../../reference/commands/config.rst:-1
msgid ""
"$ conan config list -h\n"
"usage: conan config list [-h] [-f FORMAT] [--out-file OUT_FILE] [-v [V]]\n"
"                         [-cc CORE_CONF]\n"
"                         [pattern]\n"
"\n"
"Show all the Conan available configurations: core and tools.\n"
"\n"
"positional arguments:\n"
"  pattern               Filter configuration items that matches this "
"pattern\n"
"\n"
"options:\n"
"  -h, --help            show this help message and exit\n"
"  -f FORMAT, --format FORMAT\n"
"                        Select the output format: json\n"
"  --out-file OUT_FILE   Write the output of the command to the specified "
"file\n"
"                        instead of stdout.\n"
"  -v [V]                Level of detail of the output. Valid options from "
"less\n"
"                        verbose to more verbose: -vquiet, -verror, -"
"vwarning,\n"
"                        -vnotice, -vstatus, -v or -vverbose, -vv or -"
"vdebug,\n"
"                        -vvv or -vtrace\n"
"  -cc CORE_CONF, --core-conf CORE_CONF\n"
"                        Define core configuration, overwriting global.conf\n"
"                        values. E.g.: -cc core:non_interactive=True\n"
"\n"
msgstr ""

#: ../../../reference/commands/config.rst:220
msgid "Displays all the Conan built-in configurations. There are 2 groups:"
msgstr ""

#: ../../../reference/commands/config.rst:222
msgid ""
"``core.xxxx``: These can only be defined in ``global.conf`` and are used by "
"Conan internally"
msgstr ""

#: ../../../reference/commands/config.rst:223
msgid ""
"``tools.xxxx``: These can be defined both in ``global.conf`` and profiles, "
"and will be used by recipes and tools used within recipes, like "
"``CMakeToolchain``"
msgstr ""

#: ../../../reference/commands/config.rst:-1
msgid ""
"$ conan config list\n"
"core.cache:storage_path: Absolute path where the packages and database are "
"stored\n"
"core.download:download_cache: Define path to a file download cache\n"
"core.download:parallel: Number of concurrent threads to download packages\n"
"core.download:retry: Number of retries in case of failure when downloading "
"from Conan server\n"
"core.download:retry_wait: Seconds to wait between download attempts from "
"Conan server\n"
"core.gzip:compresslevel: The Gzip compression level for Conan artifacts "
"(default=9)\n"
"core.net.http:cacert_path: Path containing a custom Cacert file\n"
"core.net.http:clean_system_proxy: If defined, the proxies system env-vars "
"will be discarded\n"
"core.net.http:client_cert: Path or tuple of files containing a client cert "
"(and key)\n"
"core.net.http:max_retries: Maximum number of connection retries (requests "
"library)\n"
"core.net.http:no_proxy_match: List of urls to skip from proxies "
"configuration\n"
"core.net.http:proxies: Dictionary containing the proxy configuration\n"
"core.net.http:timeout: Number of seconds without response to timeout "
"(requests library)\n"
"core.package_id:config_mode: How the 'config_version' affects binaries. By "
"default 'None'\n"
"core.package_id:default_build_mode: By default, 'None'\n"
"core.package_id:default_embed_mode: By default, 'full_mode'\n"
"core.package_id:default_non_embed_mode: By default, 'minor_mode'\n"
"core.package_id:default_python_mode: By default, 'minor_mode'\n"
"core.package_id:default_unknown_mode: By default, 'semver_mode'\n"
"core.scm:excluded: List of excluded patterns for builtin git dirty checks\n"
"core.scm:local_url: By default allows to store local folders as remote url, "
"but not upload them. Use 'allow' for allowing upload and 'block' to "
"completely forbid it\n"
"core.sources.patch:extra_path: Extra path to search for patch files for "
"conan create\n"
"core.sources:download_cache: Folder to store the sources backup\n"
"core.sources:download_urls: List of URLs to download backup sources from\n"
"core.sources:exclude_urls: URLs which will not be backed up\n"
"core.sources:upload_url: Remote URL to upload backup sources to\n"
"core.upload:parallel: Number of concurrent threads to upload packages\n"
"core.upload:retry: Number of retries in case of failure when uploading to "
"Conan server\n"
"core.upload:retry_wait: Seconds to wait between upload attempts to Conan "
"server\n"
"core.version_ranges:resolve_prereleases: Whether version ranges can resolve "
"to pre-releases or not\n"
"core:allow_uppercase_pkg_names: Temporarily (will be removed in 2.X) allow "
"uppercase names\n"
"core:default_build_profile: Defines the default build profile ('default' by "
"default)\n"
"core:default_profile: Defines the default host profile ('default' by "
"default)\n"
"core:non_interactive: Disable interactive user input, raises error if input "
"necessary\n"
"core:required_conan_version: Raise if current version does not match the "
"defined range.\n"
"core:skip_warnings: Do not show warnings matching any of the patterns in "
"this list. Current warning tags are 'network', 'deprecated', 'experimental'\n"
"core:update_policy: (Legacy). If equal 'legacy' when multiple remotes, "
"update based on order of remotes, only the timestamp of the first occurrence "
"of each revision counts.\n"
"core:warnings_as_errors: Treat warnings matching any of the patterns in this "
"list as errors and then raise an exception. Current warning tags are "
"'network', 'deprecated'\n"
"tools.android:cmake_legacy_toolchain: Define to explicitly pass "
"ANDROID_USE_LEGACY_TOOLCHAIN_FILE in CMake toolchain\n"
"tools.android:ndk_path: Argument for the CMAKE_ANDROID_NDK\n"
"tools.apple:enable_arc: (boolean) Enable/Disable ARC Apple Clang flags\n"
"tools.apple:enable_bitcode: (boolean) Enable/Disable Bitcode Apple Clang "
"flags\n"
"tools.apple:enable_visibility: (boolean) Enable/Disable Visibility Apple "
"Clang flags\n"
"tools.apple:sdk_path: Path to the SDK to be used\n"
"tools.build.cross_building:can_run: (boolean) Indicates whether is possible "
"to run a non-native app on the same architecture. It's used by 'can_run' "
"tool\n"
"tools.build.cross_building:cross_build: (boolean) Decides whether cross-"
"building or not regardless of arch/OS settings. Used by 'cross_building' "
"tool\n"
"tools.build:cflags: List of extra C flags used by different toolchains like "
"CMakeToolchain, AutotoolsToolchain and MesonToolchain\n"
"tools.build:compiler_executables: Defines a Python dict-like with the "
"compilers path to be used. Allowed keys {'c', 'cpp', 'cuda', 'objc', "
"'objcxx', 'rc', 'fortran', 'asm', 'hip', 'ispc'}\n"
"tools.build:cxxflags: List of extra CXX flags used by different toolchains "
"like CMakeToolchain, AutotoolsToolchain and MesonToolchain\n"
"tools.build:defines: List of extra definition flags used by different "
"toolchains like CMakeToolchain, AutotoolsToolchain and MesonToolchain\n"
"tools.build:download_source: Force download of sources for every package\n"
"tools.build:exelinkflags: List of extra flags used by different toolchains "
"like CMakeToolchain, AutotoolsToolchain and MesonToolchain\n"
"tools.build:install_strip: (boolean) Strip the binaries when installing them "
"with CMake, Meson and Autotools\n"
"tools.build:jobs: Default compile jobs number -jX Ninja, Make, /MP VS "
"(default: max CPUs)\n"
"tools.build:linker_scripts: List of linker script files to pass to the "
"linker used by different toolchains like CMakeToolchain, AutotoolsToolchain, "
"and MesonToolchain\n"
"tools.build:sharedlinkflags: List of extra flags used by different "
"toolchains like CMakeToolchain, AutotoolsToolchain and MesonToolchain\n"
"tools.build:skip_test: Do not execute CMake.test() and Meson.test() when "
"enabled\n"
"tools.build:sysroot: Pass the --sysroot=<tools.build:sysroot> flag if "
"available. (None by default)\n"
"tools.build:verbosity: Verbosity of build systems if set. Possible values "
"are 'quiet' and 'verbose'\n"
"tools.cmake.cmake_layout:build_folder: (Experimental) Allow configuring the "
"base folder of the build for local builds\n"
"tools.cmake.cmake_layout:build_folder_vars: Settings and Options that will "
"produce a different build folder and different CMake presets names\n"
"tools.cmake.cmake_layout:test_folder: (Experimental) Allow configuring the "
"base folder of the build for test_package\n"
"tools.cmake.cmakedeps:new: Use the new CMakeDeps generator\n"
"tools.cmake.cmaketoolchain:enabled_blocks: Select the specific blocks to use "
"in the conan_toolchain.cmake\n"
"tools.cmake.cmaketoolchain:extra_variables: Dictionary with variables to be "
"injected in CMakeToolchain (potential override of CMakeToolchain defined "
"variables)\n"
"tools.cmake.cmaketoolchain:find_package_prefer_config: Argument for the "
"CMAKE_FIND_PACKAGE_PREFER_CONFIG\n"
"tools.cmake.cmaketoolchain:generator: User defined CMake generator to use "
"instead of default\n"
"tools.cmake.cmaketoolchain:presets_environment: String to define wether to "
"add or not the environment section to the CMake presets. Empty by default, "
"will generate the environment section in CMakePresets. Can take values: "
"'disabled'.\n"
"tools.cmake.cmaketoolchain:system_name: Define CMAKE_SYSTEM_NAME in "
"CMakeToolchain\n"
"tools.cmake.cmaketoolchain:system_processor: Define CMAKE_SYSTEM_PROCESSOR "
"in CMakeToolchain\n"
"tools.cmake.cmaketoolchain:system_version: Define CMAKE_SYSTEM_VERSION in "
"CMakeToolchain\n"
"tools.cmake.cmaketoolchain:toolchain_file: Use other existing file rather "
"than conan_toolchain.cmake one\n"
"tools.cmake.cmaketoolchain:toolset_arch: Toolset architecture to be used as "
"part of CMAKE_GENERATOR_TOOLSET in CMakeToolchain\n"
"tools.cmake.cmaketoolchain:toolset_cuda: (Experimental) Path to a CUDA "
"toolset to use, or version if installed at the system level\n"
"tools.cmake.cmaketoolchain:user_presets: (Experimental) Select a different "
"name instead of CMakeUserPresets.json, empty to disable\n"
"tools.cmake.cmaketoolchain:user_toolchain: Inject existing user toolchains "
"at the beginning of conan_toolchain.cmake\n"
"tools.cmake:cmake_program: Path to CMake executable\n"
"tools.cmake:install_strip: (Deprecated) Add --strip to cmake.install(). Use "
"tools.build:install_strip instead\n"
"tools.compilation:verbosity: Verbosity of compilation tools if set. Possible "
"values are 'quiet' and 'verbose'\n"
"tools.deployer:symlinks: Set to False to disable deployers copying symlinks\n"
"tools.env.virtualenv:powershell: If specified, it generates PowerShell "
"launchers (.ps1). Use this configuration setting the PowerShell executable "
"you want to use (e.g., 'powershell.exe' or 'pwsh'). Setting it to True or "
"False is deprecated as of Conan 2.11.0.\n"
"tools.files.download:retry: Number of retries in case of failure when "
"downloading\n"
"tools.files.download:retry_wait: Seconds to wait between download attempts\n"
"tools.files.download:verify: If set, overrides recipes on whether to perform "
"SSL verification for their downloaded files. Only recommended to be set "
"while testing\n"
"tools.files.unzip:filter: Define tar extraction filter: 'fully_trusted', "
"'tar', 'data'\n"
"tools.gnu:build_triplet: Custom build triplet to pass to Autotools scripts\n"
"tools.gnu:define_libcxx11_abi: Force definition of GLIBCXX_USE_CXX11_ABI=1 "
"for libstdc++11\n"
"tools.gnu:extra_configure_args: List of extra arguments to pass to configure "
"when using AutotoolsToolchain and GnuToolchain\n"
"tools.gnu:host_triplet: Custom host triplet to pass to Autotools scripts\n"
"tools.gnu:make_program: Indicate path to make program\n"
"tools.gnu:pkg_config: Path to pkg-config executable used by PkgConfig build "
"helper\n"
"tools.google.bazel:bazelrc_path: List of paths to bazelrc files to be used "
"as 'bazel --bazelrc=rcpath1 ... build'\n"
"tools.google.bazel:configs: List of Bazel configurations to be used as "
"'bazel build --config=config1 ...'\n"
"tools.graph:skip_binaries: Allow the graph to skip binaries not needed in "
"the current configuration (True by default)\n"
"tools.graph:skip_build: (Experimental) Do not expand build/tool_requires\n"
"tools.graph:skip_test: (Experimental) Do not expand test_requires. If "
"building it might need 'tools.build:skip_test=True'\n"
"tools.graph:vendor: (Experimental) If 'build', enables the computation of "
"dependencies of vendoring packages to build them\n"
"tools.info.package_id:confs: List of existing configuration to be part of "
"the package ID\n"
"tools.intel:installation_path: Defines the Intel oneAPI installation root "
"path\n"
"tools.intel:setvars_args: Custom arguments to be passed onto the setvars.sh|"
"bat script from Intel oneAPI\n"
"tools.meson.mesontoolchain:backend: Any Meson backend: ninja, vs, vs2010, "
"vs2012, vs2013, vs2015, vs2017, vs2019, xcode\n"
"tools.meson.mesontoolchain:extra_machine_files: List of paths for any "
"additional native/cross file references to be appended to the existing Conan "
"ones\n"
"tools.microsoft.bash:active: Set True only when Conan runs in a POSIX Bash "
"(MSYS2/Cygwin) where Python's subprocess (shell=True) uses a POSIX-"
"compatible shell (e.g., /bin/sh). Do not set when using Conan from cmd/"
"PowerShell or with native Windows Python ('win32').\n"
"tools.microsoft.bash:path: The path to the shell to run when conanfile."
"win_bash==True\n"
"tools.microsoft.bash:subsystem: The subsystem to be used when conanfile."
"win_bash==True. Possible values: msys2, msys, cygwin, wsl, sfu\n"
"tools.microsoft.msbuild:installation_path: VS install path, to avoid auto-"
"detect via vswhere, like C:/Program Files (x86)/Microsoft Visual Studio/2019/"
"Community. Use empty string to disable\n"
"tools.microsoft.msbuild:max_cpu_count: Argument for the /m when running msvc "
"to build parallel projects\n"
"tools.microsoft.msbuild:vs_version: Defines the IDE version (15, 16, 17) "
"when using the msvc compiler. Necessary if compiler.version specifies a "
"toolset that is not the IDE default\n"
"tools.microsoft.msbuilddeps:exclude_code_analysis: Suppress MSBuild code "
"analysis for patterns\n"
"tools.microsoft.msbuildtoolchain:compile_options: Dictionary with MSBuild "
"compiler options\n"
"tools.microsoft:msvc_update: Force the specific update irrespective of "
"compiler.update (CMakeToolchain and VCVars)\n"
"tools.microsoft:winsdk_version: Use this winsdk_version in vcvars\n"
"tools.system.package_manager:mode: Mode for package_manager tools: 'check', "
"'report', 'report-installed' or 'install'\n"
"tools.system.package_manager:sudo: Use 'sudo' when invoking the package "
"manager tools in Linux (False by default)\n"
"tools.system.package_manager:sudo_askpass: Use the '-A' argument if using "
"sudo in Linux to invoke the system package manager (False by default)\n"
"tools.system.package_manager:tool: Default package manager tool: 'apk', 'apt-"
"get', 'yum', 'dnf', 'brew', 'pacman', 'choco', 'zypper', 'pkg' or 'pkgutil'\n"
"\n"
msgstr ""

#: ../../../reference/commands/config.rst:230
msgid ""
"It is possible to list only the configurations that match a given pattern, "
"like:"
msgstr ""

#: ../../../reference/commands/config.rst:232
msgid ""
"$  conan config list proxy\n"
"core.net.http:clean_system_proxy: If defined, the proxies system env-vars "
"will be discarded\n"
"core.net.http:no_proxy_match: List of urls to skip from proxies "
"configuration\n"
"core.net.http:proxies: Dictionary containing the proxy configuration"
msgstr ""

#: ../../../reference/commands/config.rst:242
msgid ""
"These configurations can be defined in ``global.conf``, profile files and "
"command line, see :ref:`Conan configuration files <reference_config_files>`"
msgstr ""

#: ../../../reference/commands/config.rst:247
msgid "conan config show"
msgstr ""

#: ../../../reference/commands/config.rst:-1
msgid ""
"$ conan config show -h\n"
"usage: conan config show [-h] [-f FORMAT] [--out-file OUT_FILE] [-v [V]]\n"
"                         [-cc CORE_CONF]\n"
"                         pattern\n"
"\n"
"Get the value of the specified conf\n"
"\n"
"positional arguments:\n"
"  pattern               Conf item(s) pattern for which to query their value\n"
"\n"
"options:\n"
"  -h, --help            show this help message and exit\n"
"  -f FORMAT, --format FORMAT\n"
"                        Select the output format: json\n"
"  --out-file OUT_FILE   Write the output of the command to the specified "
"file\n"
"                        instead of stdout.\n"
"  -v [V]                Level of detail of the output. Valid options from "
"less\n"
"                        verbose to more verbose: -vquiet, -verror, -"
"vwarning,\n"
"                        -vnotice, -vstatus, -v or -vverbose, -vv or -"
"vdebug,\n"
"                        -vvv or -vtrace\n"
"  -cc CORE_CONF, --core-conf CORE_CONF\n"
"                        Define core configuration, overwriting global.conf\n"
"                        values. E.g.: -cc core:non_interactive=True\n"
"\n"
msgstr ""

#: ../../../reference/commands/config.rst:253
msgid "Shows the values of the conf items that match the given pattern."
msgstr ""

#: ../../../reference/commands/config.rst:255
msgid "For a *global.conf* consisting of"
msgstr ""

#: ../../../reference/commands/config.rst:257
msgid ""
"tools.build:jobs=42\n"
"tools.files.download:retry_wait=10\n"
"tools.files.download:retry=7\n"
"core.net.http:timeout=30\n"
"core.net.http:max_retries=5\n"
"zlib*/:tools.files.download:retry_wait=100\n"
"zlib*/:tools.files.download:retry=5"
msgstr ""

#: ../../../reference/commands/config.rst:267
msgid "You can get all the values:"
msgstr ""

#: ../../../reference/commands/config.rst:269
msgid ""
"$ conan config show \"*\"\n"
"\n"
"core.net.http:max_retries: 5\n"
"core.net.http:timeout: 30\n"
"tools.files.download:retry: 7\n"
"tools.files.download:retry_wait: 10\n"
"tools.build:jobs: 42\n"
"zlib*/:tools.files.download:retry: 5\n"
"zlib*/:tools.files.download:retry_wait: 100"
msgstr ""

#: ../../../reference/commands/config.rst:281
msgid "Or just those referring to the ``tools.files`` section:"
msgstr ""

#: ../../../reference/commands/config.rst:283
msgid ""
"$ conan config show \"*tools.files*\"\n"
"\n"
"tools.files.download:retry: 7\n"
"tools.files.download:retry_wait: 10\n"
"zlib*/:tools.files.download:retry: 5\n"
"zlib*/:tools.files.download:retry_wait: 100"
msgstr ""

#: ../../../reference/commands/config.rst:292
msgid ""
"Notice the first ``*`` in the pattern. This will match all the package "
"patterns. Removing it will make the command only show global confs:"
msgstr ""

#: ../../../reference/commands/config.rst:295
msgid ""
"$ conan config show \"tools.files*\"\n"
"\n"
"tools.files.download:retry: 7\n"
"tools.files.download:retry_wait: 10"
msgstr ""

#: ../../../reference/commands/config.rst:304
msgid "conan config clean"
msgstr ""

#: ../../../reference/commands/config.rst:-1
msgid ""
"$ conan config clean -h\n"
"usage: conan config clean [-h] [--out-file OUT_FILE] [-v [V]] [-cc "
"CORE_CONF]\n"
"\n"
"(Experimental) Clean the configuration files in the Conan home folder, "
"while\n"
"keeping installed packages\n"
"\n"
"options:\n"
"  -h, --help            show this help message and exit\n"
"  --out-file OUT_FILE   Write the output of the command to the specified "
"file\n"
"                        instead of stdout.\n"
"  -v [V]                Level of detail of the output. Valid options from "
"less\n"
"                        verbose to more verbose: -vquiet, -verror, -"
"vwarning,\n"
"                        -vnotice, -vstatus, -v or -vverbose, -vv or -"
"vdebug,\n"
"                        -vvv or -vtrace\n"
"  -cc CORE_CONF, --core-conf CORE_CONF\n"
"                        Define core configuration, overwriting global.conf\n"
"                        values. E.g.: -cc core:non_interactive=True\n"
"\n"
msgstr ""

#: ../../../reference/commands/config.rst:309
msgid ""
"Removes all the custom configuration from the Conan home, such as ``remotes."
"json``, profiles, settings, plugins, extensions, etc. This does not remove "
"packages, only the configuration files."
msgstr ""
