# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.20\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:31+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/tools/microsoft/nmake.rst:5
msgid "NMakeDeps"
msgstr ""

#: ../../../reference/tools/microsoft/nmake.rst:7
#: ../../../reference/tools/microsoft/nmake.rst:37
msgid "This generator can be used as:"
msgstr ""

#: ../../../reference/tools/microsoft/nmake.rst:9
msgid ""
"from conan import ConanFile\n"
"\n"
"class Pkg(ConanFile):\n"
"    settings = \"os\", \"compiler\", \"build_type\", \"arch\"\n"
"\n"
"    requires = \"mydep/1.0\"\n"
"    # attribute declaration\n"
"    generators = \"NMakeDeps\"\n"
"\n"
"    # OR explicit usage in the generate() method\n"
"    def generate(self):\n"
"        deps = NMakeDeps(self)\n"
"        deps.generate()\n"
"\n"
"    def build(self):\n"
"        self.run(f\"nmake /f makefile\")"
msgstr ""

#: ../../../reference/tools/microsoft/nmake.rst:28
msgid ""
"The generator will create a ``conannmakedeps.bat`` environment script that "
"defines ``CL``, ``LIB`` and ``_LINK_`` environment variables, injecting "
"necessary flags to locate and link the dependencies declared in "
"``requires``. This generator should most likely be used together with "
"``NMakeToolchain`` one."
msgstr ""

#: ../../../reference/tools/microsoft/nmake.rst:35
msgid "NMakeToolchain"
msgstr ""

#: ../../../reference/tools/microsoft/nmake.rst:39
msgid ""
"from conan import ConanFile\n"
"\n"
"class Pkg(ConanFile):\n"
"    settings = \"os\", \"compiler\", \"build_type\", \"arch\"\n"
"    generators = \"NMakeToolchain\"\n"
"\n"
"    def build(self):\n"
"        self.run(\"nmake /f makefile\")"
msgstr ""

#: ../../../reference/tools/microsoft/nmake.rst:50
msgid "Or it can be fully instantiated in the conanfile ``generate()`` method:"
msgstr ""

#: ../../../reference/tools/microsoft/nmake.rst:52
msgid ""
"from conan import ConanFile\n"
"from conan.tools.microsoft import NMakeToolchain\n"
"\n"
"class Pkg(ConanFile):\n"
"    settings = \"os\", \"arch\", \"compiler\", \"build_type\"\n"
"\n"
"    def generate(self):\n"
"        tc = NMakeToolchain(self)\n"
"        tc.generate()\n"
"\n"
"    def build(self):\n"
"        self.run(\"nmake /f makefile\")"
msgstr ""

#: ../../../reference/tools/microsoft/nmake.rst:67
msgid ""
"NMakeToolchain generator will create a ``conannmaketoolchain.bat`` "
"environment script injecting flags deduced from profile (build_type, "
"runtime, cppstd, build flags from conf) into environment variables NMake can "
"understand: ``CL`` and ``_LINK_``. It will also generate a ``conanvcvars."
"bat`` script that activates the correct VS prompt matching the Conan host "
"settings ``arch``, ``compiler`` and ``compiler.version``, and build settings "
"``arch``."
msgstr ""

#: ../../../reference/tools/microsoft/nmake.rst:74
msgid "constructor"
msgstr ""

#: ../../../reference/tools/microsoft/nmake.rst:76
msgid "def __init__(self, conanfile):"
msgstr ""

#: ../../../reference/tools/microsoft/nmake.rst:80
msgid "``conanfile``: the current recipe object. Always use ``self``."
msgstr ""

#: ../../../reference/tools/microsoft/nmake.rst:83
msgid "Attributes"
msgstr ""

#: ../../../reference/tools/microsoft/nmake.rst:85
msgid ""
"You can change some attributes before calling the ``generate()`` method if "
"you want to inject more flags:"
msgstr ""

#: ../../../reference/tools/microsoft/nmake.rst:87
msgid ""
"from conan import ConanFile\n"
"from conan.tools.microsoft import NMakeToolchain\n"
"\n"
"class Pkg(ConanFile):\n"
"    settings = \"os\", \"arch\", \"compiler\", \"build_type\"\n"
"\n"
"    def generate(self):\n"
"        tc = NMakeToolchain(self)\n"
"        tc.extra_cflags.append(\"/my_flag\")\n"
"        tc.extra_defines.append(\"FOO=BAR\")\n"
"        tc.generate()"
msgstr ""

#: ../../../reference/tools/microsoft/nmake.rst:101
msgid "**extra_cflags** (Defaulted to ``[]``): Additional cflags."
msgstr ""

#: ../../../reference/tools/microsoft/nmake.rst:102
msgid "**extra_cxxflags** (Defaulted to ``[]``): Additional cxxflags."
msgstr ""

#: ../../../reference/tools/microsoft/nmake.rst:103
msgid "**extra_defines** (Defaulted to ``[]``): Additional defines."
msgstr ""

#: ../../../reference/tools/microsoft/nmake.rst:104
msgid "**extra_ldflags** (Defaulted to ``[]``): Additional ldflags."
msgstr ""

#: ../../../reference/tools/microsoft/nmake.rst:107
msgid "conf"
msgstr ""

#: ../../../reference/tools/microsoft/nmake.rst:109
msgid "``NMaketoolchain`` is affected by these ``[conf]`` variables:"
msgstr ""

#: ../../../reference/tools/microsoft/nmake.rst:111
msgid ""
"``tools.build:cflags`` list of extra pure C flags that will be used by "
"``CL``."
msgstr ""

#: ../../../reference/tools/microsoft/nmake.rst:112
msgid ""
"``tools.build:cxxflags`` list of extra C++ flags that will be used by ``CL``."
msgstr ""

#: ../../../reference/tools/microsoft/nmake.rst:113
msgid ""
"``tools.build:defines`` list of preprocessor definitions that will be used "
"by ``CL``."
msgstr ""

#: ../../../reference/tools/microsoft/nmake.rst:114
msgid ""
"``tools.build:sharedlinkflags`` list of extra linker flags that will be used "
"by ``_LINK_``."
msgstr ""

#: ../../../reference/tools/microsoft/nmake.rst:115
msgid ""
"``tools.build:exelinkflags`` list of extra linker flags that will be used by "
"``_LINK_``."
msgstr ""

#: ../../../reference/tools/microsoft/nmake.rst:116
msgid ""
"``tools.build:compiler_executables`` dict-like Python object which specifies "
"the compiler as key and the compiler executable path as value. Those keys "
"will be mapped as follows:"
msgstr ""

#: ../../../reference/tools/microsoft/nmake.rst:119
msgid "``asm``: will set ``AS`` in *conannmaketoolchain.sh|bat* script."
msgstr ""

#: ../../../reference/tools/microsoft/nmake.rst:120
msgid "``c``: will set ``CC`` in *conannmaketoolchain.sh|bat* script."
msgstr ""

#: ../../../reference/tools/microsoft/nmake.rst:121
msgid ""
"``cpp``: will set ``CPP`` and ``CXX`` in *conannmaketoolchain.sh|bat* script."
msgstr ""

#: ../../../reference/tools/microsoft/nmake.rst:122
msgid "``rc``: will set ``RC`` in *conannmaketoolchain.sh|bat* script."
msgstr ""

#: ../../../reference/tools/microsoft/nmake.rst:125
msgid "Customizing the environment"
msgstr ""

#: ../../../reference/tools/microsoft/nmake.rst:127
msgid ""
"If your ``Makefile`` script needs some other environment variable rather "
"than ``CL`` and ``_LINK_``, you can customize it before calling the "
"``generate()`` method. Call the ``environment()`` method to calculate the "
"mentioned variables and then add the variables that you need. The "
"``environment()`` method returns an :ref:"
"`Environment<conan_tools_env_environment_model>` object:"
msgstr ""

#: ../../../reference/tools/microsoft/nmake.rst:132
msgid ""
"from conan import ConanFile\n"
"from conan.tools.microsoft import NMakeToolchain\n"
"\n"
"class Pkg(ConanFile):\n"
"    settings = \"os\", \"arch\", \"compiler\", \"build_type\"\n"
"\n"
"    def generate(self):\n"
"        tc = NMakeToolchain(self)\n"
"        env = tc.environment()\n"
"        env.define(\"FOO\", \"BAR\")\n"
"        tc.generate(env)"
msgstr ""

#: ../../../reference/tools/microsoft/nmake.rst:146
msgid ""
"You can also inspect default environment variables NMakeToolchain will "
"inject in *conannmaketoolchain.sh|bat* script:"
msgstr ""

#: ../../../reference/tools/microsoft/nmake.rst:148
msgid ""
"from conan import ConanFile\n"
"from conan.tools.microsoft import NMakeToolchain\n"
"\n"
"class Pkg(ConanFile):\n"
"    settings = \"os\", \"arch\", \"compiler\", \"build_type\"\n"
"\n"
"    def generate(self):\n"
"        tc = NMakeToolchain(self)\n"
"        env_vars = tc.vars()\n"
"        cl_env_var = env_vars.get(\"CL\")"
msgstr ""
