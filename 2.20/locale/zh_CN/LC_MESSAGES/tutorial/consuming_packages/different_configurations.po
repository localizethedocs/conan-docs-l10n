# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.20\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-23 08:25+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../tutorial/consuming_packages/different_configurations.rst:4
msgid "Building for multiple configurations: Release, Debug, Static and Shared"
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:6
msgid ""
"Please, first clone the sources to recreate this project. You can find them "
"in the `examples2 repository <https://github.com/conan-io/examples2>`_ in "
"GitHub:"
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:9
msgid ""
"$ git clone https://github.com/conan-io/examples2.git\n"
"$ cd examples2/tutorial/consuming_packages/different_configurations"
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:15
msgid ""
"So far, we built a simple CMake project that depended on the **zlib** "
"library and learned about ``tool_requires``, a special type of "
"``requirements`` for build-tools like CMake. In both cases, we did not "
"specify anywhere that we wanted to build the application in *Release* or "
"*Debug* mode, or if we wanted to link against *static* or *shared* "
"libraries. That is because Conan, if not instructed otherwise, will use a "
"default configuration declared in the 'default profile'. This default "
"profile was created in the first example when we run the :command:`conan "
"profile detect` command. Conan stores this file in the **/profiles** folder, "
"located in the Conan user home. You can check the contents of your default "
"profile by running the :command:`conan config home` command to get the "
"location of the Conan user home and then showing the contents of the default "
"profile in the **/profiles** folder:"
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:27
msgid ""
"$ conan config home\n"
"Current Conan home: /Users/tutorial_user/.conan2\n"
"\n"
"# output the file contents\n"
"$ cat /Users/tutorial_user/.conan2/profiles/default\n"
"[settings]\n"
"os=Macos\n"
"arch=x86_64\n"
"compiler=apple-clang\n"
"compiler.version=14.0\n"
"compiler.libcxx=libc++\n"
"compiler.cppstd=gnu11\n"
"build_type=Release\n"
"[options]\n"
"[tool_requires]\n"
"[env]\n"
"\n"
"# The default profile can also be checked with the command \"conan profile "
"show\""
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:49
msgid ""
"As you can see, the profile has different sections. The ``[settings]`` "
"section is the one that has information about things like the operating "
"system, architecture, compiler, and build configuration."
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:53
msgid ""
"When you call a Conan command setting the ``--profile`` argument, Conan will "
"take all the information from the profile and apply it to the packages you "
"want to build or install. If you don't specify that argument it's equivalent "
"to call it with ``--profile=default``. These two commands will behave the "
"same:"
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:58
msgid ""
"$ conan install . --build=missing\n"
"$ conan install . --build=missing --profile=default"
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:64
msgid ""
"You can store different profiles and use them to build for different "
"settings. For example, to use a ``build_type=Debug``, or adding a "
"``tool_requires`` to all the packages you build with that profile. We will "
"create a *debug* profile to try building with different configurations:"
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:68
msgid "<conan home>/profiles/debug"
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:68
msgid ""
"[settings]\n"
"os=Macos\n"
"arch=x86_64\n"
"compiler=apple-clang\n"
"compiler.version=14.0\n"
"compiler.libcxx=libc++\n"
"compiler.cppstd=gnu11\n"
"build_type=Debug"
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:85
msgid ""
"Modifying settings: use Debug configuration for the application and its "
"dependencies"
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:87
msgid ""
"Using profiles is not the only way to set the configuration you want to use. "
"You can also override the profile settings in the Conan command using the "
"``--settings`` argument. For example, you can build the project from the "
"previous examples in *Debug* configuration instead of *Release*."
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:92
msgid ""
"Before building, please check that we modified the source code from the "
"previous example to show the build configuration the sources were built with:"
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:95
msgid ""
"#include <stdlib.h>\n"
"...\n"
"\n"
"int main(void) {\n"
"    ...\n"
"    #ifdef NDEBUG\n"
"    printf(\"Release configuration!\\n\");\n"
"    #else\n"
"    printf(\"Debug configuration!\\n\");\n"
"    #endif\n"
"\n"
"    return EXIT_SUCCESS;\n"
"}"
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:112
msgid "Now let's build our project for *Debug* configuration:"
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:114
msgid ""
"$ conan install . --output-folder=build --build=missing --"
"settings=build_type=Debug"
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:119
msgid ""
"As we explained above, this is the equivalent of having *debug* profile and "
"running these command using the ``--profile=debug`` argument instead of the "
"``--settings=build_type=Debug`` argument."
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:123
msgid ""
"This :command:`conan install` command will check if we already have the "
"required libraries in the local cache (Zlib) for Debug configuration and "
"obtain them if not. It will also update the build configuration in the "
"``conan_toolchain.cmake`` and ``CMakePresets.json`` files that the "
"``CMakeToolchain`` generator creates so that when we build the application "
"it's built in *Debug* configuration. Now build your project as you did in "
"the previous examples and check in the output how it was built in *Debug* "
"configuration:"
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:130
#: ../../../tutorial/consuming_packages/different_configurations.rst:189
#: ../../../tutorial/consuming_packages/different_configurations.rst:212
#: ../../../tutorial/consuming_packages/different_configurations.rst:250
#: ../../../tutorial/consuming_packages/different_configurations.rst:274
msgid "Windows"
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:130
msgid ""
"# assuming Visual Studio 15 2017 is your VS version and that it matches your "
"default profile\n"
"$ cd build\n"
"$ cmake .. -G \"Visual Studio 15 2017\" -"
"DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake\n"
"$ cmake --build . --config Debug\n"
"$ Debug\\compressor.exe\n"
"Uncompressed size is: 233\n"
"Compressed size is: 147\n"
"ZLIB VERSION: 1.2.11\n"
"Debug configuration!"
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:144
#: ../../../tutorial/consuming_packages/different_configurations.rst:199
#: ../../../tutorial/consuming_packages/different_configurations.rst:259
#: ../../../tutorial/consuming_packages/different_configurations.rst:279
msgid "Linux, macOS"
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:144
msgid ""
"$ cd build\n"
"$ cmake .. -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -"
"DCMAKE_BUILD_TYPE=Debug\n"
"$ cmake --build .\n"
"$ ./compressor\n"
"Uncompressed size is: 233\n"
"Compressed size is: 147\n"
"ZLIB VERSION: 1.2.11\n"
"Debug configuration!"
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:161
msgid ""
"Modifying options: linking the application dependencies as shared libraries"
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:163
msgid ""
"So far, we have been linking *Zlib* statically in our application. That's "
"because in the Zlib's Conan package there's an attribute set to build in "
"that mode by default. We can change from **static** to **shared** linking by "
"setting the ``shared`` option to ``True`` using the ``--options`` argument. "
"To do so, please run:"
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:169
msgid ""
"$ conan install . --output-folder=build --build=missing --options=zlib/1.3.1:"
"shared=True"
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:174
msgid ""
"Doing this, Conan will install the *Zlib* shared libraries, generate the "
"files to build with them and, also the necessary files to locate those "
"dynamic libraries when running the application."
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:180
msgid ""
"Options are defined per-package. In this case we were defining that we "
"wanted that specific version of zlib/1.3.1 as a shared library. If we had "
"other dependencies and we want all of our dependencies (whenever possible) "
"as shared libraries, we would use ``-o *:shared=True``, with the ``*`` "
"pattern that matches all package references."
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:186
msgid ""
"Let's build the application again after configuring it to link *Zlib* as a "
"shared library:"
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:189
msgid ""
"$ cd build\n"
"# assuming Visual Studio 15 2017 is your VS version and that it matches your "
"default profile\n"
"$ cmake .. -G \"Visual Studio 15 2017\" -"
"DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake\n"
"$ cmake --build . --config Release\n"
"...\n"
"[100%] Built target compressor"
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:199
msgid ""
"$ cd build\n"
"$ cmake .. -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -"
"DCMAKE_BUILD_TYPE=Release\n"
"$ cmake --build .\n"
"...\n"
"[100%] Built target compressor"
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:209
msgid ""
"Now, if you try to run the compiled executable you will see an error because "
"the executable can't find the shared libraries for *Zlib* that we just "
"installed."
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:212
msgid ""
"$ Release\\compressor.exe\n"
"(on a pop-up window) The code execution cannot proceed because zlib1.dll was "
"not found. Reinstalling the program may fix this problem.\n"
"# This error depends on the console being used and may not always pop up.\n"
"# It could run correctly if the console gets the zlib dll from a different "
"path."
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:220
msgid "Linux"
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:220
msgid ""
"$ ./compressor\n"
"./compressor: error while loading shared libraries: libz.so.1: cannot open "
"shared object file: No such file or directory"
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:226
msgid "Macos"
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:226
msgid ""
"$ ./compressor\n"
"./compressor: dyld[41259]: Library not loaded: @rpath/libz.1.dylib"
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:233
msgid ""
"This is because shared libraries (*.dll* in windows, *.dylib* in macOS and *."
"so* in Linux), are loaded at runtime. That means that the application "
"executable needs to know where the required shared libraries are when it "
"runs. On Windows, the dynamic linker will search in the same directory, then "
"in the *PATH* directories. On macOS, it will search in the directories "
"declared in *DYLD_LIBRARY_PATH*, and on Linux it will use *LD_LIBRARY_PATH*."
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:239
msgid ""
"Conan provides a mechanism to define those variables and make it possible, "
"for executables, to find and load these shared libraries. This mechanism is "
"the ``VirtualRunEnv`` generator. If you check the output folder, you will "
"see that Conan generated a new file called ``conanrun.sh/bat``. This is the "
"result of automatically invoking that ``VirtualRunEnv`` generator when we "
"activated the ``shared`` option when doing the :command:`conan install`. "
"This generated script will set the *PATH*, *LD_LIBRARY_PATH*, "
"*DYLD_LIBRARY_PATH* and *DYLD_FRAMEWORK_PATH* environment variables so that "
"executables can find the shared libraries."
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:248
msgid "Activate the virtual environment, and run the executables again:"
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:250
msgid ""
"$ conanrun.bat\n"
"$ Release\\compressor.exe\n"
"Uncompressed size is: 233\n"
"Compressed size is: 147\n"
"..."
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:259
msgid ""
"$ source conanrun.sh\n"
"$ ./compressor\n"
"Uncompressed size is: 233\n"
"Compressed size is: 147\n"
"..."
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:269
msgid ""
"Just as in the previous example with the ``VirtualBuildEnv`` generator, when "
"we run the ``conanrun.sh/bat`` script, a deactivation script called "
"``deactivate_conanrun.sh/bat`` is created to restore the environment. Source "
"or run it to do so:"
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:274
msgid "$ deactivate_conanrun.bat"
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:279
msgid "$ source deactivate_conanrun.sh"
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:287
msgid "Difference between settings and options"
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:289
msgid ""
"You may have noticed that for changing between *Debug* and *Release* "
"configuration we used a Conan **setting**, but when we set *shared* mode for "
"our executable we used a Conan **option**. Please note the difference "
"between **settings** and **options**:"
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:293
msgid ""
"**settings** are typically a project-wide configuration defined by the "
"client machine. Things like the operating system, compiler or build "
"configuration that will be common to several Conan packages and would not "
"make sense to define one default value for only one of them. For example, it "
"doesn’t make sense for a Conan package to declare “Visual Studio” as a "
"default compiler because that is something defined by the end consumer, and "
"unlikely to make sense if they are working in Linux."
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:300
msgid ""
"**options** are intended for package-specific configuration that can be set "
"to a default value in the recipe. For example, one package can define that "
"its default linkage is static, and this is the linkage that should be used "
"if consumers don’t specify otherwise."
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:306
msgid "Introducing the concept of Package ID"
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:308
msgid ""
"When consuming packages like Zlib with different `settings` and `options`, "
"you might wonder how Conan determines which binary to retrieve from the "
"remote. The answer lies in the concept of the `package_id`."
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:312
msgid ""
"The `package_id` is an identifier that Conan uses to determine the binary "
"compatibility of packages. It is computed based on several factors, "
"including the package's `settings`, `options`, and dependencies. When you "
"modify any of these factors, Conan computes a new `package_id` to reference "
"the corresponding binary."
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:317
msgid "Here's a breakdown of the process:"
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:319
msgid ""
"**Determine Settings and Options**: Conan first retrieves the user's input "
"settings and options. These can come from the command line or profiles like "
"`--settings=build_type=Debug` or `--profile=debug`."
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:322
msgid ""
"**Compute the Package ID**: With the current values for `settings`, "
"`options`, and dependencies, Conan computes a hash. This hash serves as the "
"`package_id`, representing the binary package's unique identity."
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:325
msgid ""
"**Fetch the Binary**: Conan then checks its cache or the specified remote "
"for a binary package with the computed `package_id`. If it finds a match, it "
"retrieves that binary. If not, Conan can build the package from source or "
"indicate that the binary is missing."
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:329
msgid ""
"In the context of our tutorial, when we consumed Zlib with different "
"`settings` and `options`, Conan used the `package_id` to ensure that it "
"fetched the correct binary that matched our specified configuration."
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:336
msgid ""
"`JFrog Academy Conan 2 Essentials: Building For Multiple Configurations With "
"Conan And CMake Presets <https://academy.jfrog.com/conan-2-"
"essentials/2131740?utm_source=Conan+Docs>`__"
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:337
msgid ":ref:`VirtualRunEnv reference <conan_tools_env_virtualrunenv>`"
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:338
msgid ""
":ref:`Cross-compiling using --profile:build and --profile:host "
"<consuming_packages_cross_building_with_conan>`"
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:339
msgid ":ref:`creating_packages_configure_options_settings`"
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:340
msgid ""
":ref:`Installing configurations with conan config install "
"<reference_commands_conan_config_install>`"
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:341
msgid "VS Multi-config"
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:342
msgid ""
":ref:`How settings and options influence the package id "
"<reference_binary_model_settings_options>`"
msgstr ""

#: ../../../tutorial/consuming_packages/different_configurations.rst:343
msgid ""
":ref:`Using patterns for settings and options "
"<reference_config_files_profile_patterns>`"
msgstr ""
