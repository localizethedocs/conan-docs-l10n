# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.20\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-23 08:25+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../examples/tools/system/system_package/package_manager.rst:4
msgid "Wrapping system requirements in a Conan package"
msgstr ""

#: ../../../examples/tools/system/system_package/package_manager.rst:6
msgid ""
"Conan can manage system packages, allowing you to install platform-specific "
"dependencies easily. This is useful when you need to install platform-"
"specific system packages. For example, you may need to install a package "
"that provides a specific driver or graphics library that only works on a "
"specific platform."
msgstr ""

#: ../../../examples/tools/system/system_package/package_manager.rst:10
msgid ""
"Conan provides a way to install system packages using the :ref:`system "
"package manager<conan_tools_system_package_manager>` tool."
msgstr ""

#: ../../../examples/tools/system/system_package/package_manager.rst:12
msgid ""
"In this example, we are going to explore the steps needed to create a "
"wrapper package around a system library and what is needed to consume it in "
"a Conan package. Note that the package will not contain the binary "
"artifacts, it will just manage to check/install them calling "
"``system_requirements()`` and the respective system package managers (e.g "
"Apt, Yum). In this example, we are going to create a Conan package to wrap "
"the system `ncurses <https://invisible-island.net/ncurses/>`_ requirement "
"and then show how to use this requirement in an application."
msgstr ""

#: ../../../examples/tools/system/system_package/package_manager.rst:17
msgid ""
"Please, first clone the sources to recreate this project. You can find them "
"in the `examples2 repository <https://github.com/conan-io/examples2>`_ on "
"GitHub:"
msgstr ""

#: ../../../examples/tools/system/system_package/package_manager.rst:20
msgid ""
"$ git clone https://github.com/conan-io/examples2.git\n"
"$ cd examples2/examples/tools/system/package_manager/"
msgstr ""
"$ git clone https://github.com/conan-io/examples2.git\n"
"$ cd examples2/examples/tools/system/package_manager/"

#: ../../../examples/tools/system/system_package/package_manager.rst:26
msgid "You will find the following tree structure:"
msgstr ""

#: ../../../examples/tools/system/system_package/package_manager.rst:28
msgid ""
".\n"
"├── conanfile.py\n"
"└── consumer\n"
"    ├── CMakeLists.txt\n"
"    ├── conanfile.py\n"
"    └── ncurses_version.c"
msgstr ""
".\n"
"├── conanfile.py\n"
"└── consumer\n"
"    ├── CMakeLists.txt\n"
"    ├── conanfile.py\n"
"    └── ncurses_version.c"

#: ../../../examples/tools/system/system_package/package_manager.rst:38
msgid ""
"The ``conanfile.py`` file is the recipe that wraps the ncurses system "
"library. Finally, the **consumer** directory contains a simple C application "
"that uses the ncurses library, we will visit it later."
msgstr ""

#: ../../../examples/tools/system/system_package/package_manager.rst:41
msgid ""
"When wrapping a pre-built system library, we do not need to build the "
"project from source, only install the system library and package its "
"information. In this case, we are going to check the **conanfile.py** file "
"that packages the ncurses library first:"
msgstr ""

#: ../../../examples/tools/system/system_package/package_manager.rst:45
msgid ""
"from conan import ConanFile\n"
"from conan.tools.system import package_manager\n"
"from conan.tools.gnu import PkgConfig\n"
"from conan.errors import ConanInvalidConfiguration\n"
"\n"
"required_conan_version = \">=2.0\"\n"
"\n"
"\n"
"class SysNcursesConan(ConanFile):\n"
"    name = \"ncurses\"\n"
"    version = \"system\"\n"
"    description = \"A textual user interfaces that work across a wide "
"variety of terminals\"\n"
"    topics = (\"curses\", \"terminal\", \"toolkit\")\n"
"    homepage = \"https://invisible-mirror.net/archives/ncurses/\"\n"
"    license = \"MIT\"\n"
"    package_type = \"shared-library\"\n"
"    settings = \"os\", \"arch\", \"compiler\", \"build_type\"\n"
"\n"
"    def package_id(self):\n"
"        self.info.clear()\n"
"\n"
"    def validate(self):\n"
"        supported_os = [\"Linux\", \"Macos\", \"FreeBSD\"]\n"
"        if self.settings.os not in supported_os:\n"
"            raise ConanInvalidConfiguration(f\"{self.ref} wraps a system "
"package only supported by {supported_os}.\")\n"
"\n"
"    def system_requirements(self):\n"
"        dnf = package_manager.Dnf(self)\n"
"        dnf.install([\"ncurses-devel\"], update=True, check=True)\n"
"\n"
"        yum = package_manager.Yum(self)\n"
"        yum.install([\"ncurses-devel\"], update=True, check=True)\n"
"\n"
"        apt = package_manager.Apt(self)\n"
"        apt.install([\"libncurses-dev\"], update=True, check=True)\n"
"\n"
"        pacman = package_manager.PacMan(self)\n"
"        pacman.install([\"ncurses\"], update=True, check=True)\n"
"\n"
"        zypper = package_manager.Zypper(self)\n"
"        zypper.install([\"ncurses\"], update=True, check=True)\n"
"\n"
"        brew = package_manager.Brew(self)\n"
"        brew.install([\"ncurses\"], update=True, check=True)\n"
"\n"
"        pkg = package_manager.Pkg(self)\n"
"        pkg.install([\"ncurses\"], update=True, check=True)\n"
"\n"
"    def package_info(self):\n"
"        self.cpp_info.bindirs = []\n"
"        self.cpp_info.includedirs = []\n"
"        self.cpp_info.libdirs = []\n"
"\n"
"        self.cpp_info.set_property(\"cmake_file_name\", \"Curses\")\n"
"        self.cpp_info.set_property(\"cmake_target_name\", \"Curses::"
"Curses\")\n"
"        self.cpp_info.set_property(\"cmake_additional_variables_prefixes\", "
"[\"CURSES\",])\n"
"\n"
"        pkg_config = PkgConfig(self, 'ncurses')\n"
"        pkg_config.fill_cpp_info(self.cpp_info, is_system=True)"
msgstr ""

#: ../../../examples/tools/system/system_package/package_manager.rst:108
msgid ""
"In this **conanfile.py** file, we are using the :ref:`system package "
"manager<conan_tools_system_package_manager>` tool to install the ncurses "
"library based on different package managers, under the :ref:"
"`system_requirements<reference_conanfile_methods_system_requirements>` "
"method. It's important to note that the ``system_requirements`` method is "
"called always, when building, or even if the package is already installed. "
"This is useful to ensure that the package is installed in the system."
msgstr ""

#: ../../../examples/tools/system/system_package/package_manager.rst:114
msgid ""
"Each package manager may vary the package name used to install the ncurses "
"library, so we need to check the package manager documentation to find the "
"correct package name first."
msgstr ""

#: ../../../examples/tools/system/system_package/package_manager.rst:117
msgid ""
"Another important detail is the **package_info** method. In this method, we "
"are using the :ref:`PkgConfig<conan_tools_gnu_pkgconfig>` tool to fill the "
"**cpp_info** data, based on the file ``ncurses.pc`` installed by the system "
"package manager."
msgstr ""

#: ../../../examples/tools/system/system_package/package_manager.rst:121
msgid "Now, let's install the ncurses library using the **conanfile.py** file:"
msgstr ""

#: ../../../examples/tools/system/system_package/package_manager.rst:123
msgid ""
"$ conan create . --build=missing -c tools.system.package_manager:"
"mode=install -c tools.system.package_manager:sudo=true"
msgstr ""
"$ conan create . --build=missing -c tools.system.package_manager:"
"mode=install -c tools.system.package_manager:sudo=true"

#: ../../../examples/tools/system/system_package/package_manager.rst:127
msgid ""
"Note that we are using the :ref:`Conan "
"configuration<conan_tools_system_package_manager_config>` ``tools.system."
"package_manager:mode`` as **install**, otherwise, Conan will not install the "
"system package, but check if it is installed only. The same for ``tools."
"system.package_manager:sudo`` as **True** to run the package manager with "
"root privileges. As a result of this command, you should be able to see the "
"**ncurses** library installed in your system, in case not been installed yet."
msgstr ""

#: ../../../examples/tools/system/system_package/package_manager.rst:132
msgid ""
"Now, let's check the **consumer** directory. This directory contains a "
"simple C application that uses the ncurses library."
msgstr ""

#: ../../../examples/tools/system/system_package/package_manager.rst:134
msgid "The **conanfile.py** file in the **consumer** directory is:"
msgstr ""

#: ../../../examples/tools/system/system_package/package_manager.rst:136
msgid ""
"from conan import ConanFile\n"
"from conan.tools.build import can_run\n"
"from conan.tools.cmake import cmake_layout, CMake\n"
"import os\n"
"\n"
"\n"
"class AppNCursesVersionConan(ConanFile):\n"
"    settings = \"os\", \"compiler\", \"build_type\", \"arch\"\n"
"    generators = \"CMakeDeps\", \"CMakeToolchain\"\n"
"    package_type = \"application\"\n"
"    exports_sources = \"CMakeLists.txt\", \"ncurses_version.c\"\n"
"\n"
"    def requirements(self):\n"
"        if self.settings.os in [\"Linux\", \"Macos\", \"FreeBSD\"]:\n"
"            self.requires(\"ncurses/system\")\n"
"\n"
"    def layout(self):\n"
"        cmake_layout(self)\n"
"\n"
"    def build(self):\n"
"        cmake = CMake(self)\n"
"        cmake.configure()\n"
"        cmake.build()\n"
"\n"
"        app_path = os.path.join(self.build_folder, \"ncurses_version\")\n"
"        self.output.info(f\"The example application has been successfully "
"built.\\nPlease run the executable using: '{app_path}'\")"
msgstr ""

#: ../../../examples/tools/system/system_package/package_manager.rst:165
msgid ""
"The recipe is simple. It requires the **ncurses** package we just created "
"and uses the **CMake** tool to build the application. Once the application "
"is built, it shows the **ncurses_version** application path, so you can run "
"it manually as you wish and check its output."
msgstr ""

#: ../../../examples/tools/system/system_package/package_manager.rst:168
msgid ""
"The **ncurses_version.c** file is a simple C application that uses the "
"ncurses library to print the ncurses version, but using white background and "
"blue text:"
msgstr ""

#: ../../../examples/tools/system/system_package/package_manager.rst:171
msgid ""
"#include <stdlib.h>\n"
"#include <stdio.h>\n"
"#include <string.h>\n"
"\n"
"#include <ncurses.h>\n"
"\n"
"\n"
"int main(void) {\n"
"    int max_y, max_x;\n"
"    char message [256] = {0};\n"
"\n"
"    initscr();\n"
"\n"
"    start_color();\n"
"    init_pair(1, COLOR_BLUE, COLOR_WHITE);\n"
"    getmaxyx(stdscr, max_y, max_x);\n"
"\n"
"    snprintf(message, sizeof(message), \"Conan 2.x Examples - Installed "
"ncurses version: %s\\n\", curses_version());\n"
"    attron(COLOR_PAIR(1));\n"
"    mvprintw(max_y / 2, max_x / 2 - (strlen(message) / 2), \"%s\", "
"message);\n"
"    attroff(COLOR_PAIR(1));\n"
"\n"
"    refresh();\n"
"\n"
"    return EXIT_SUCCESS;\n"
"}"
msgstr ""

#: ../../../examples/tools/system/system_package/package_manager.rst:200
msgid ""
"The **CMakeLists.txt** file is a simple CMake file that builds the "
"**ncurses_version** application:"
msgstr ""

#: ../../../examples/tools/system/system_package/package_manager.rst:202
msgid ""
"cmake_minimum_required(VERSION 3.15)\n"
"project(ncurses_version C)\n"
"\n"
"find_package(Curses CONFIG REQUIRED)\n"
"\n"
"add_executable(${PROJECT_NAME} ncurses_version.c)\n"
"target_link_libraries(${PROJECT_NAME} PRIVATE Curses::Curses)"
msgstr ""

#: ../../../examples/tools/system/system_package/package_manager.rst:212
msgid ""
"The CMake target **Curses::Curses** is provided by the **ncurses** package "
"we just created. It follows the official CMake module for `FindCurses "
"<https://cmake.org/cmake/help/latest/module/FindCurses.html>`_. The "
"information about libraries and include directories is now available in the "
"**cpp_info** object, as we filled it using the **PkgConfig** tool."
msgstr ""

#: ../../../examples/tools/system/system_package/package_manager.rst:215
msgid "Now, let's build the application:"
msgstr ""

#: ../../../examples/tools/system/system_package/package_manager.rst:217
msgid ""
"$ cd consumer/\n"
"$ conan build . --name=ncurses-version --version=0.1.0\n"
"  ...\n"
"  conanfile.py (ncurses-version/0.1.0): The example application has been "
"successfully built.\n"
"  Please run the executable using: '/tmp/consumer/build/Release/"
"ncurses_version'"
msgstr ""
"$ cd consumer/\n"
"$ conan build . --name=ncurses-version --version=0.1.0\n"
"  ...\n"
"  conanfile.py (ncurses-version/0.1.0): The example application has been "
"successfully built.\n"
"  Please run the executable using: '/tmp/consumer/build/Release/"
"ncurses_version'"

#: ../../../examples/tools/system/system_package/package_manager.rst:225
msgid ""
"After building the application, it will show the executable path. You can "
"run it to check the output:"
msgstr ""

#: ../../../examples/tools/system/system_package/package_manager.rst:227
msgid ""
"$ /tmp/consumer/build/Release/ncurses_version\n"
"\n"
"Conan 2.x Examples - Installed ncurses version: ncurses 6.0.20160213"
msgstr ""

#: ../../../examples/tools/system/system_package/package_manager.rst:233
msgid ""
"Don't worry if the displayed version is different from the one shown here or "
"the executable path different. It depends on the version installed in your "
"system and where you built the application."
msgstr ""

#: ../../../examples/tools/system/system_package/package_manager.rst:236
msgid ""
"That's it! You have successfully packaged a system library and consumed it "
"in a Conan package."
msgstr ""
