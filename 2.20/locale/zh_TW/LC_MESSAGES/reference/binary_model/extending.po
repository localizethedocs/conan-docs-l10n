# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.20\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:31+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/binary_model/extending.rst:2
msgid "Extending the binary model"
msgstr ""

#: ../../../reference/binary_model/extending.rst:4
msgid "There are a few mechanisms to extend the default Conan binary model:"
msgstr ""

#: ../../../reference/binary_model/extending.rst:7
msgid "Custom settings"
msgstr ""

#: ../../../reference/binary_model/extending.rst:9
msgid ""
"It is possible to add new settings or subsettings in the  *settings.yml* "
"file, something like:"
msgstr ""

#: ../../../reference/binary_model/extending.rst:11
msgid ""
"os:\n"
"    Windows:\n"
"        new_subsetting: [null, \"subvalue1\", \"subvalue2\"]\n"
"new_root_setting: [null, \"value1\", \"value2\"]"
msgstr ""

#: ../../../reference/binary_model/extending.rst:19
msgid ""
"Where the ``null`` value allows leaving the setting undefined in profiles. "
"If not including, it will be mandatory that profiles define a value for them."
msgstr ""

#: ../../../reference/binary_model/extending.rst:21
msgid ""
"The custom settings will be used explicitly or implictly in recipes and "
"packages:"
msgstr ""

#: ../../../reference/binary_model/extending.rst:23
msgid ""
"class Pkg(ConanFile):\n"
"    # If we explicilty want this package binaries to vary according to "
"'new_root_setting'\n"
"    settings = \"os\", \"compiler\", \"build_type\", \"arch\", "
"\"new_root_setting\"\n"
"    # While all packages with 'os=Windows' will implicitly vary according to "
"'new_subsetting'"
msgstr ""

#: ../../../reference/binary_model/extending.rst:32
msgid ""
"For the full reference of how ``settings.yml`` file can be customized :ref:"
"`visit the settings section<reference_config_files_customizing_settings>`. "
"In practice, it is not necessary to modify the ``settings.yml`` file, and "
"instead, it is possible to provide ``settings_user.yml`` file to extend the "
"existing settings. See :ref:`the settings_user.yml "
"documentation<examples_config_files_settings_user>`."
msgstr ""

#: ../../../reference/binary_model/extending.rst:37
msgid "Custom options"
msgstr ""

#: ../../../reference/binary_model/extending.rst:38
msgid ""
"``Options`` are custom to every recipe, there is no global definition of "
"options like the ``settings.yml`` one."
msgstr ""

#: ../../../reference/binary_model/extending.rst:40
msgid ""
"Package ``conanfile.py`` recipes define their own options, with their own "
"range of valid values and their own defaults:"
msgstr ""

#: ../../../reference/binary_model/extending.rst:42
msgid ""
"class MyPkg(ConanFile):\n"
"    ...\n"
"    options = {\"build_tests\": [True, False],\n"
"               \"option2\": [\"ANY\"]}\n"
"    default_options = {\"build_tests\": True,\n"
"                        \"option1\": 42,\n"
"                        \"z*:shared\": True}"
msgstr ""

#: ../../../reference/binary_model/extending.rst:53
msgid ""
"The options ``shared``, ``fPIC`` and ``header_only`` have special meaning "
"for Conan, and are considered automatically by most built-in build system "
"integrations. They are also the recommended default to represent when a "
"library is shared, static or header-only."
msgstr ""

#: ../../../reference/binary_model/extending.rst:58
msgid ":ref:`documentation for options<conan_conanfile_properties_options>`"
msgstr ""

#: ../../../reference/binary_model/extending.rst:59
msgid ""
":ref:`documentation for "
"default_options<conan_conanfile_properties_default_options>`."
msgstr ""

#: ../../../reference/binary_model/extending.rst:60
msgid ""
":ref:`Defining options for dependencies in recipes does not have strong "
"guarantees<faq_different_options_values>`"
msgstr ""

#: ../../../reference/binary_model/extending.rst:64
msgid "Settings vs options vs conf"
msgstr ""

#: ../../../reference/binary_model/extending.rst:66
msgid "When to use settings or options or configuration?"
msgstr ""

#: ../../../reference/binary_model/extending.rst:68
msgid ""
"**Settings** are a project-wide configuration, something that typically "
"affects the whole project that is being built and affects the resulting "
"package binaries. For example, the operating system or the architecture "
"would be naturally the same for all packages in a dependency graph, linking "
"a Linux library to build a Windows app, or mixing architectures is "
"impossible. Settings cannot be defaulted in a package recipe. A recipe for a "
"given library cannot say that its default is ``os=Windows``. The ``os`` will "
"be given by the environment in which that recipe is processed. It is a "
"mandatory input to be defined in the input profiles."
msgstr ""

#: ../../../reference/binary_model/extending.rst:75
msgid ""
"On the other hand, **options** are a package-specific configuration that "
"affects the resulting package binaries. Static or shared library are not "
"settings that apply to all packages. Some can be header only libraries while "
"other packages can be just data, or package executables. For example, "
"``shared`` is a common option (the default for specifying if a library can "
"be static or shared), but packages can define and use any options they want. "
"Options are defined in the package ``conanfile.py`` recipe, including their "
"supported and default values with ``options`` and ``default_options``."
msgstr ""

#: ../../../reference/binary_model/extending.rst:80
msgid ""
"Configuration via ``conf`` is intended for configuration that does not "
"affect the resulting package binaries in the general case. For example, "
"building one library with the ``tools.cmake.cmaketoolchain:generator=Ninja`` "
"shouldn't result in a binary different than if built with Visual Studio "
"(just a typically faster build thanks to Ninja)."
msgstr ""

#: ../../../reference/binary_model/extending.rst:84
msgid ""
"There are some exceptions to the above. For example, settings can be defined "
"per-package using the ``<pattern:>setting=value``, both in profiles and "
"command line:"
msgstr ""

#: ../../../reference/binary_model/extending.rst:87
msgid "$ conan install . -s mypkg/*:compiler=gcc -s compiler=clang .."
msgstr ""

#: ../../../reference/binary_model/extending.rst:91
msgid ""
"This will use ``gcc`` for \"mypkg\" and ``clang`` for the rest of the "
"dependencies (in most cases it is recommended to use the same compiler for "
"the whole dependency graph, but some scenarios when strong binary "
"compatibility is guaranteed, it is possible to mix libraries built with "
"different compilers)."
msgstr ""

#: ../../../reference/binary_model/extending.rst:93
msgid ""
"There are situations whereby many packages use the same option value, "
"thereby allowing you to set its value once using patterns, like:"
msgstr ""

#: ../../../reference/binary_model/extending.rst:95
msgid "$ conan install . -o *:shared=True"
msgstr ""

#: ../../../reference/binary_model/extending.rst:101
msgid "Custom configuration"
msgstr ""

#: ../../../reference/binary_model/extending.rst:103
msgid ""
"As commented above, the Conan ``conf`` configuration system is intended to "
"tune some of the tools and behaviors, but without really affecting the "
"resulting package binaries. Some typical ``conf`` items are activating "
"parallel builds, configuring \"retries\" when uploading to servers, or "
"changing the CMake generator. Read more about :ref:`the Conan configuration "
"system in this section<reference_config_files_global_conf>`."
msgstr ""

#: ../../../reference/binary_model/extending.rst:106
msgid ""
"There is also the possibility to define ``user.xxxx:conf=value`` for user-"
"defined configuration, that in the same spirit as core and tools built-in "
"configurations, do not affect the ``package_id`` of binaries."
msgstr ""

#: ../../../reference/binary_model/extending.rst:108
msgid ""
"But there might be some special situations in which it is really desired "
"that some ``conf`` defines different ``package_ids``, creating different "
"package binaries. It is possible to do this in two different places:"
msgstr ""

#: ../../../reference/binary_model/extending.rst:110
msgid ""
"Locally, in the recipe's ``package_id`` method, via the ``self.info.conf`` "
"attribute:"
msgstr ""

#: ../../../reference/binary_model/extending.rst:112
msgid ""
"def package_id(self):\n"
"    # We can get the value from the actual current conf value, or define a "
"new value\n"
"    value = self.conf.get(\"user.myconf:myitem\")\n"
"    # This ``self.info.conf`` will become part of the ``package_id``\n"
"    self.info.conf.define(\"user.myconf:myitem\", value)"
msgstr ""

#: ../../../reference/binary_model/extending.rst:120
msgid ""
"Globally, with the ``tools.info.package_id:confs`` configuration, receiving "
"as argument a list of existing configuration to be part of the package ID, "
"so you can define in profiles:"
msgstr ""

#: ../../../reference/binary_model/extending.rst:122
msgid "tools.info.package_id:confs=[\"tools.build:cxxflags\", ...]"
msgstr ""

#: ../../../reference/binary_model/extending.rst:126
msgid ""
"The value of the ``package_id`` will contain the value provided in the "
"``tools.build:cxxflags`` and other configurations. Note that this value is "
"managed as a string, changing the string, will produce a different result "
"and a different ``package_id``, so if this approach is used, it is very "
"important to be very consistent with the provided values for different "
"configurations like ``tools.build:cxxflags``."
msgstr ""

#: ../../../reference/binary_model/extending.rst:128
msgid ""
"It is also possible to use regex expressions to match several ``confs``, "
"instead of listing all of them, for example ``.*cmake`` could match any "
"configuration that contains \"cmake\" in its name (not that this is "
"recommended, see best practices below)."
msgstr ""

#: ../../../reference/binary_model/extending.rst:132
msgid "**Best practices**"
msgstr ""

#: ../../../reference/binary_model/extending.rst:134
msgid ""
"In general, defining variability of binaries ``package_id`` via ``conf`` "
"should be reserved for special situations and always managed with care. "
"Passing many different ``confs`` to the ``tools.info.package_id:confs`` can "
"easily result in issues like missing binaries or unnecessarily building too "
"many binaries. If that is the case, consider building higher level "
"abstraction over your binaries with new custom settings or options."
msgstr ""

#: ../../../reference/binary_model/extending.rst:140
msgid "Cross build target settings"
msgstr ""

#: ../../../reference/binary_model/extending.rst:142
msgid ""
"The ``self.settings_target`` is a ``conanfile.py`` attribute that becomes "
"relevant in cross-compilation scenarios for the ``tool_requires`` tools in "
"the \"build\" context. When we have a ``tool_requires`` like CMake, lets say "
"the ``cmake/3.25.3``, the package binary is independent of the possible "
"platform that cross-compiling will target, it is the same ``cmake`` "
"executable for all different target platforms. The ``settings`` for a cross-"
"building from Windows-X64 to Linux-armv8 scenario for the ``cmake`` "
"conanfile recipe would be:"
msgstr ""

#: ../../../reference/binary_model/extending.rst:144
msgid ""
"``self.settings``: The settings where the current ``cmake/3.25.3`` will run. "
"As it is a tool-require, it will run in the Windows machine, so ``self."
"settings.os = Windows`` and ``self.settings.arch = x86_64``."
msgstr ""

#: ../../../reference/binary_model/extending.rst:145
msgid ""
"``self.settings_build``: The settings of the current build machine that "
"would build this package if necessary. This is also the Windows-x64 machine, "
"so ``self.settings_build.os = Windows`` and ``self.settings_build.arch = "
"x86_64`` too."
msgstr ""

#: ../../../reference/binary_model/extending.rst:146
msgid ""
"``self.settings_target``: The settings that the current application outcome "
"will target. In this case it will be ``self.settings_target.os = Linux`` and "
"``self.settings_target.arch = armv8``"
msgstr ""

#: ../../../reference/binary_model/extending.rst:148
msgid ""
"In the ``cmake`` package scenario, as we pointed out, the target is "
"irrelevant. It is not used in the ``cmake`` conanfile recipe at all, and it "
"doesn't affect the ``package_id`` of the ``cmake`` binary package."
msgstr ""

#: ../../../reference/binary_model/extending.rst:150
msgid ""
"But there are situations when the binary package can be different based on "
"the target platform. For example a cross-compiler ``gcc`` that has a "
"different ``gcc`` executable based on the target it will compile for. This "
"is typical in the GNU ecosystem where we can find ``arm-gcc`` toolchains, "
"for example, specific for a given architecture. This scenario can be "
"reflected by Conan, extending the ``package_id`` with the value of these "
"``settings_target``:"
msgstr ""

#: ../../../reference/binary_model/extending.rst:153
msgid ""
"def package_id(self):\n"
"    self.info.settings_target = self.settings_target\n"
"    # If we only want the ``os`` and ``arch`` settings, then we remove the "
"other:\n"
"    self.info.settings_target.rm_safe(\"compiler\")\n"
"    self.info.settings_target.rm_safe(\"build_type\")"
msgstr ""
