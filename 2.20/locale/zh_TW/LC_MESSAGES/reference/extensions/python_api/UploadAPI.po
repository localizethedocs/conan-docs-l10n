# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.20\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-23 08:25+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/extensions/python_api/UploadAPI.rst:2
msgid "Upload API"
msgstr ""

#: ../../../common/experimental_warning.inc:3
msgid ""
"This feature is experimental and subject to breaking changes. See :ref:`the "
"Conan stability<stability>` section for more information."
msgstr ""

#: ../../../conan_sources/conan/api/subapi/upload.py:docstring of
#: conan.api.subapi.upload.UploadAPI:1
msgid "This API is used to upload recipes and packages to a remote server."
msgstr ""

#: ../../../conan_sources/conan/api/subapi/upload.py:docstring of
#: conan.api.subapi.upload.UploadAPI.check_upstream:1
msgid ""
"Checks ``remote`` for the existence of the recipes and packages in "
"``package_list``. Items that are not present in the remote will add an "
"``upload`` key to the entry with the value ``True``."
msgstr ""

#: ../../../conan_sources/conan/api/subapi/upload.py:docstring of
#: conan.api.subapi.upload.UploadAPI.check_upstream:5
msgid ""
"If the recipe has an upload policy of ``skip``, it will be discarded from "
"the upload list."
msgstr ""

#: ../../../conan_sources/conan/api/subapi/upload.py:docstring of
#: conan.api.subapi.upload.UploadAPI.check_upstream:0
#: conan.api.subapi.upload.UploadAPI.prepare:0
#: conan.api.subapi.upload.UploadAPI.upload_full:0
msgid "Parameters"
msgstr "參數"

#: ../../../conan_sources/conan/api/subapi/upload.py:docstring of
#: conan.api.subapi.upload.UploadAPI.check_upstream:7
msgid "A ``PackagesList`` object with the recipes and packages to check."
msgstr ""

#: ../../../conan_sources/conan/api/subapi/upload.py:docstring of
#: conan.api.subapi.upload.UploadAPI.check_upstream:8
msgid "Remote to check."
msgstr ""

#: ../../../conan_sources/conan/api/subapi/upload.py:docstring of
#: conan.api.subapi.upload.UploadAPI.check_upstream:9
msgid ""
"List of enabled remotes. This is used to possibly load python_requires from "
"the listed recipes if necessary."
msgstr ""

#: ../../../conan_sources/conan/api/subapi/upload.py:docstring of
#: conan.api.subapi.upload.UploadAPI.check_upstream:11
msgid ""
"If ``True``, it will skip the check and mark that all items need to be "
"uploaded. A ``force_upload`` key will be added to the entries that will be "
"uploaded."
msgstr ""

#: ../../../conan_sources/conan/api/subapi/upload.py:docstring of
#: conan.api.subapi.upload.UploadAPI.prepare:1
msgid ""
"Compress the recipes and packages and fill the upload_data objects with the "
"complete information. It doesn't perform the upload nor checks upstream to "
"see if the recipe is still there"
msgstr ""

#: ../../../conan_sources/conan/api/subapi/upload.py:docstring of
#: conan.api.subapi.upload.UploadAPI.prepare:5
#: conan.api.subapi.upload.UploadAPI.upload_full:13
msgid "A PackagesList object with the recipes and packages to upload."
msgstr ""

#: ../../../conan_sources/conan/api/subapi/upload.py:docstring of
#: conan.api.subapi.upload.UploadAPI.prepare:6
msgid ""
"A list of remotes that are enabled in the client. Recipe sources will "
"attempt to be fetched from these remotes."
msgstr ""

#: ../../../conan_sources/conan/api/subapi/upload.py:docstring of
#: conan.api.subapi.upload.UploadAPI.prepare:8
#: conan.api.subapi.upload.UploadAPI.upload_full:22
msgid ""
"A list of patterns of metadata that should be uploaded. Default ``None`` "
"means all metadata will be uploaded together with the package artifacts. If "
"metadata contains an empty string (``\"\"``), it means that no metadata "
"files should be uploaded."
msgstr ""

#: ../../../conan_sources/conan/api/subapi/upload.py:docstring of
#: conan.api.subapi.upload.UploadAPI.upload_full:1
msgid ""
"Does the whole process of uploading, including the possibility of "
"parallelizing per recipe based on the ``core.upload:parallel`` conf."
msgstr ""

#: ../../../conan_sources/conan/api/subapi/upload.py:docstring of
#: conan.api.subapi.upload.UploadAPI.upload_full:11
msgid "The steps that this method performs are:"
msgstr ""

#: ../../../conan_sources/conan/api/subapi/upload.py:docstring of
#: conan.api.subapi.upload.UploadAPI.upload_full:5
msgid ""
"calls ``conan_api.cache.check_integrity`` to ensure the packages are not "
"corrupted"
msgstr ""

#: ../../../conan_sources/conan/api/subapi/upload.py:docstring of
#: conan.api.subapi.upload.UploadAPI.upload_full:6
msgid "checks the upload policy of the recipes"
msgstr ""

#: ../../../conan_sources/conan/api/subapi/upload.py:docstring of
#: conan.api.subapi.upload.UploadAPI.upload_full:7
msgid ""
"(if it is ``\"skip\"``, it will not upload the binaries, but will still "
"upload the metadata)"
msgstr ""

#: ../../../conan_sources/conan/api/subapi/upload.py:docstring of
#: conan.api.subapi.upload.UploadAPI.upload_full:8
msgid ""
"checks which revisions already exist in the server so that it can skip the "
"upload"
msgstr ""

#: ../../../conan_sources/conan/api/subapi/upload.py:docstring of
#: conan.api.subapi.upload.UploadAPI.upload_full:9
msgid "prepares the artifacts to upload (compresses the conan_package.tgz)"
msgstr ""

#: ../../../conan_sources/conan/api/subapi/upload.py:docstring of
#: conan.api.subapi.upload.UploadAPI.upload_full:10
msgid "executes the actual upload"
msgstr ""

#: ../../../conan_sources/conan/api/subapi/upload.py:docstring of
#: conan.api.subapi.upload.UploadAPI.upload_full:11
msgid "uploads associated sources backups if any"
msgstr ""

#: ../../../conan_sources/conan/api/subapi/upload.py:docstring of
#: conan.api.subapi.upload.UploadAPI.upload_full:14
msgid "The remote to upload the packages to."
msgstr ""

#: ../../../conan_sources/conan/api/subapi/upload.py:docstring of
#: conan.api.subapi.upload.UploadAPI.upload_full:15
msgid ""
"A list of remotes that are enabled in the client. Recipe sources will "
"attempt to be fetched from these remotes, and to possibly load "
"python_requires from the listed recipes if necessary."
msgstr ""

#: ../../../conan_sources/conan/api/subapi/upload.py:docstring of
#: conan.api.subapi.upload.UploadAPI.upload_full:18
msgid ""
"If ``True``, it will check the integrity of the cache packages before "
"uploading them. This is useful to ensure that the packages are not corrupted."
msgstr ""

#: ../../../conan_sources/conan/api/subapi/upload.py:docstring of
#: conan.api.subapi.upload.UploadAPI.upload_full:20
msgid ""
"If ``True``, it will force the upload of the recipes and packages, even if "
"they already exist in the remote. Note that this might update the timestamps"
msgstr ""

#: ../../../conan_sources/conan/api/subapi/upload.py:docstring of
#: conan.api.subapi.upload.UploadAPI.upload_full:26
msgid ""
"If ``True``, it will not perform the actual upload, but will still prepare "
"the artifacts and check the upstream."
msgstr ""
