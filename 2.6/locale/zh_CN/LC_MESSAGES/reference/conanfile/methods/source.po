# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/conanfile/methods/source.rst:5
msgid "source()"
msgstr ""

#: ../../../reference/conanfile/methods/source.rst:7
msgid ""
"The ``source()`` method can be used to retrieve the necessary source code to "
"build a package from source, and to apply patches to such source code if "
"necessary. It will be called when a package is being built from source, like "
"with ``conan create`` or ``conan install  --build=pkg*``, but it will not be "
"called if a package pre-compiled binary is being used. That means that the "
"source code will not be downloaded if a pre-compiled binary exists."
msgstr ""

#: ../../../reference/conanfile/methods/source.rst:9
msgid ""
"The ``source()`` method can implement different strategies for retrieving "
"the source code:"
msgstr ""

#: ../../../reference/conanfile/methods/source.rst:11
msgid "Fetching the source code for a third party library:"
msgstr ""

#: ../../../reference/conanfile/methods/source.rst:13
msgid "Using a ``Git(self).clone()`` to clone a Git repository"
msgstr ""

#: ../../../reference/conanfile/methods/source.rst:14
msgid ""
"Executing a ``download()`` + ``unzip()`` or a combined ``get()`` (internally "
"does download + unzip) to download a tarball, tgz, or zip archive."
msgstr ""

#: ../../../reference/conanfile/methods/source.rst:15
msgid ""
"Fetching the source code for itself, from its repository, whose coordinates "
"have been captured in the ``conandata.yml`` file in the ``export()`` method. "
"This is the strategy that would be used to manage the source code for "
"packages in which the ``conanfile.py`` lives in the package itself, but that "
"for some reason we don't want to put the source code in the recipe (like not "
"distributing our source code, but being able to distribute our package "
"binaries)."
msgstr ""

#: ../../../reference/conanfile/methods/source.rst:18
msgid ""
"The ``source()`` method executes in the ``self.source_folder``, the current "
"working directory will be equal to that folder (which value is derived from "
"``layout()`` method)."
msgstr ""

#: ../../../reference/conanfile/methods/source.rst:20
msgid ""
"A ``source()`` implementation might use the convenient ``get()`` helper, or "
"use its own mechanisms or other Conan helpers for the task, something like:"
msgstr ""

#: ../../../reference/conanfile/methods/source.rst:22
msgid ""
"import os\n"
"import shutil\n"
"\n"
"from conan import ConanFile\n"
"from conan.tools.files import download, unzip, check_sha1\n"
"\n"
"\n"
"class PocoConan(ConanFile):\n"
"    name = \"poco\"\n"
"    version = \"1.6.0\"\n"
"\n"
"    def source(self):\n"
"        zip_name = f\"poco-{self.version}-release.zip\"\n"
"        # Immutable source .zip\n"
"        download(self, f\"https://github.com/pocoproject/poco/archive/poco-"
"{self.version}-release.zip\", zip_name)\n"
"        # Recommended practice, always check hashes of downloaded files\n"
"        check_sha1(self, zip_name, "
"\"8d87812ce591ced8ce3a022beec1df1c8b2fac87\")\n"
"        unzip(self, zip_name)\n"
"        shutil.move(f\"poco-poco-{self.version}-release\", \"poco\")\n"
"        os.unlink(zip_name)"
msgstr ""

#: ../../../reference/conanfile/methods/source.rst:47
msgid ""
"Applying patches to downloaded sources can be done (and should be done) in "
"the ``source()`` method if those patches apply to all possible "
"configurations. As explained below, it is not possible to introduce "
"conditionals in the ``source()`` method. If the patches are in file form, "
"those patches must be exported together with the recipe, so they can be used "
"whenever a build from source is fired."
msgstr ""

#: ../../../reference/conanfile/methods/source.rst:51
msgid "It is possible to apply patches with:"
msgstr ""

#: ../../../reference/conanfile/methods/source.rst:53
msgid "Your own or ``git`` patches utilities"
msgstr ""

#: ../../../reference/conanfile/methods/source.rst:54
msgid ""
"The Conan built-in ``patch()`` utility to explicitly apply patches one by one"
msgstr ""

#: ../../../reference/conanfile/methods/source.rst:55
msgid ""
"Apply the ``apply_conandata_patches()`` Conan utility to automatically apply "
"all patches defined in ``conandata.yml`` file following some conventions."
msgstr ""

#: ../../../reference/conanfile/methods/source.rst:60
msgid "Source caching"
msgstr ""

#: ../../../reference/conanfile/methods/source.rst:62
msgid ""
"Once the ``source()`` method has been called, its result will be cached and "
"reused for any build from source, for any configuration. That means that the "
"retrieval of sources from the ``source()`` method should be completely "
"independent of the configuration. It is not possible to implement "
"conditionals on the ``settings``, and in general, any attempt to apply any "
"conditional logic to the ``source()`` method is wrong."
msgstr ""

#: ../../../reference/conanfile/methods/source.rst:64
msgid ""
"def source(self):\n"
"    if self.settings.compiler == \"gcc\":  # ERROR, will raise\n"
"        # download some source"
msgstr ""

#: ../../../reference/conanfile/methods/source.rst:70
msgid ""
"Trying to bypass the Conan exception by using some other mechanism like:"
msgstr ""

#: ../../../reference/conanfile/methods/source.rst:72
msgid ""
"def source(self):\n"
"    # Might work, but NOT recommended, try to avoid as much as possible\n"
"    if platform.system() == \"Windows\":\n"
"        # download something\n"
"    else:\n"
"        # download something different"
msgstr ""

#: ../../../reference/conanfile/methods/source.rst:81
msgid ""
"Might apparently work if not doing any cross-build, and not recollecting "
"sources in a different OS, but could be problematic otherwise."
msgstr ""

#: ../../../reference/conanfile/methods/source.rst:83
msgid ""
"To be completely safe, if different source code is necessary for different "
"configurations, the recommended approach would be to retrieve that code "
"conditionally in the ``build()`` method."
msgstr ""

#: ../../../reference/conanfile/methods/source.rst:87
msgid "Forced retrieval of sources"
msgstr ""

#: ../../../reference/conanfile/methods/source.rst:89
msgid ""
"When working with a recipe in a user folder, it is easy to call the "
"``source()`` method and force the retrieval of the source code, that will be "
"done in the same user folder, according to the ``layout()`` definition:"
msgstr ""

#: ../../../reference/conanfile/methods/source.rst:91
msgid "$ conan source ."
msgstr ""

#: ../../../reference/conanfile/methods/source.rst:96
msgid ""
"Calling the ``source()`` method and forcing the retrieval of source code in "
"the cache, for all or some dependencies, even if they are not being built "
"from sources, is possible with the ``tools.build:download_source=True`` "
"configuration. For example:"
msgstr ""

#: ../../../reference/conanfile/methods/source.rst:98
msgid "$ conan graph info . -c tools.build:download_source=True"
msgstr ""

#: ../../../reference/conanfile/methods/source.rst:102
msgid ""
"Will compute the dependency graph, then call the ``source()`` method for all "
"\"host\" packages in the graph (as the configuration by default is a "
"\"host\" configuration, if you want also the sources for the \"build\" "
"context ``tool_requires``, you could use ``-c:b tools.build:"
"download_source=True``). It is possible to collect all the source folders "
"from the json formatted output, or to automate recollection of all sources, "
"a ``deployer`` could be used."
msgstr ""

#: ../../../reference/conanfile/methods/source.rst:104
msgid ""
"Likewise, it is possible to retrieve the sources for packages in other "
"``create`` and ``install`` commands, just by passing the configuration. "
"Finally, as also configuration can be defined per-package, using ``-c mypkg*:"
"tools.build:download_source=True`` would only retrieve the sources of "
"packages matching the ``mypkg*`` pattern."
msgstr ""

#: ../../../reference/conanfile/methods/source.rst:106
msgid ""
"Note that ``tools.build:download_source=True`` will not have any effect on "
"packages in **editable** mode. Downloading sources in that case could easily "
"overwrite and destroy local developer changes over that code. The ``conan "
"source`` command must be used on packages in editable mode to download the "
"sources."
msgstr ""

#: ../../../reference/conanfile/methods/source.rst:111
msgid "**Best practices**"
msgstr ""

#: ../../../reference/conanfile/methods/source.rst:113
msgid ""
"The ``source()`` method should be the same for all configurations, it cannot "
"be conditional to any configuration."
msgstr ""

#: ../../../reference/conanfile/methods/source.rst:114
msgid ""
"The ``source()`` method should retrieve immutable sources. Using some branch "
"name, HEAD, or a tarball whose URL is not immutable and is being overwritten "
"is a bad practice and will lead to broken packages. Using a Git commit, a "
"frozen Git release tag, or a fixed and versioned release tarballs is the "
"expected input."
msgstr ""

#: ../../../reference/conanfile/methods/source.rst:115
msgid ""
"Applying patches should be done by default in the ``source()`` method, "
"except if the patches are exclusive for one configuration, in that case they "
"could be applied in ``build()`` method."
msgstr ""

#: ../../../reference/conanfile/methods/source.rst:116
msgid ""
"The ``source()`` method should not access nor manipulate files in other "
"folders different to the ``self.source_folder``. All the \"exported\" files "
"are copied to the ``self.source_folder`` before calling it."
msgstr ""

#: ../../../reference/conanfile/methods/source.rst:121
msgid ""
"See :ref:`the tutorial about managing recipe "
"sources<creating_packages_handle_sources_in_packages>` for more information."
msgstr ""
