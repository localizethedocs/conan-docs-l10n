# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../devops/metadata.rst:4
msgid "Managing package metadata files"
msgstr ""

#: ../../../common/experimental_warning.inc:3
msgid ""
"This feature is experimental and subject to breaking changes. See :ref:`the "
"Conan stability<stability>` section for more information."
msgstr ""

#: ../../../devops/metadata.rst:9
msgid ""
"A Conan package is typically composed by several C and C++ artifacts, "
"headers, compiled libraries and executables. But there are other files that "
"might not be necessary for the normal consumption of such a package, but "
"which could be very important for compliance, technical or business reasons, "
"for example:"
msgstr ""

#: ../../../devops/metadata.rst:11
msgid "Full build logs"
msgstr ""

#: ../../../devops/metadata.rst:12
msgid "The tests executables"
msgstr ""

#: ../../../devops/metadata.rst:13
msgid "The tests results from running the test suite"
msgstr ""

#: ../../../devops/metadata.rst:14
msgid "Debugging artifacts like heavy .pdb files"
msgstr ""

#: ../../../devops/metadata.rst:15
msgid "Coverage, sanitizers, or other source or binary analysis tools results"
msgstr ""

#: ../../../devops/metadata.rst:16
msgid ""
"Context and metadata about the build, exact machine, environment, author, CI "
"data"
msgstr ""

#: ../../../devops/metadata.rst:17
msgid "Other compliance and security related files"
msgstr ""

#: ../../../devops/metadata.rst:20
msgid ""
"There are several important reasons to store and track these files like "
"regulations, compliance, security, reproducibility and traceability. The "
"problem with these files is that they can be large/heavy, if we store them "
"inside the package (just copying the artifacts in the ``package()`` method), "
"this will make the packages much larger, and it will affect the speed of "
"downloading, unzipping and using packages in general. And this typically "
"happens a lot of times, both in developer machines but also in CI, and it "
"can have an impact on the developer experience and infrastructure costs. "
"Furthermore, packages are immutable, that is, once a package has been "
"created, it shouldn't be modified. This might be a problem if we want to add "
"extra metadata files after the package has been created, or even after the "
"package has been uploaded."
msgstr ""

#: ../../../devops/metadata.rst:24
msgid ""
"The **metadata files** feature allows to create, upload, append and store "
"metadata associated to packages in an integrated and unified way, while "
"avoiding the impact on developers and CI speed and costs, because metadata "
"files are not downloaded and unzipped by default when packages are used."
msgstr ""

#: ../../../devops/metadata.rst:27
msgid "It is important to highlight that there are two types of metadata:"
msgstr ""

#: ../../../devops/metadata.rst:29
msgid ""
"Recipe metadata, associated to the ``conanfile.py`` recipe, the metadata "
"should be common to all binaries created from this recipe (package name, "
"version and recipe revision). This metadata will probably be less common, "
"but for example results of some scanning of the source code, that would be "
"common for all configurations and builds, can be recipe metadata."
msgstr ""

#: ../../../devops/metadata.rst:30
msgid ""
"Package binary metadata, associated to the package binary for a given "
"specific configuration and represented by a ``package_id``. Build logs, "
"tests reports, etc, that are specific to a binary configuration will be "
"package metadata."
msgstr ""

#: ../../../devops/metadata.rst:34
msgid "Creating metadata in recipes"
msgstr ""

#: ../../../devops/metadata.rst:35
msgid ""
"Recipes can directly define metadata in their methods. A common use case "
"would be to store logs. Using the ``self.recipe_metadata_folder`` and ``self."
"package_metadata_folder``, the recipe can store files in those locations."
msgstr ""

#: ../../../devops/metadata.rst:39
msgid ""
"import os\n"
"from conan import ConanFile\n"
"from conan.tools.files import save, copy\n"
"\n"
"class Pkg(ConanFile):\n"
"   name = \"pkg\"\n"
"   version = \"0.1\"\n"
"\n"
"   def layout(self):\n"
"      # Or something else, like the \"cmake_layout(self)\" built-in layout\n"
"      self.folders.build = \"mybuild\"\n"
"      self.folders.generators = \"mybuild/generators\"\n"
"\n"
"   def export(self):\n"
"      # logs that might be generated in the recipe folder at \"export\" "
"time.\n"
"      # these would be associated with the recipe repo and original source "
"of the recipe repo\n"
"      copy(self, \"*.log\", src=self.recipe_folder,\n"
"           dst=os.path.join(self.recipe_metadata_folder, \"logs\"))\n"
"\n"
"   def source(self):\n"
"      # logs originated in the source() step, for example downloading files, "
"patches or other stuff\n"
"      save(self, os.path.join(self.recipe_metadata_folder, \"logs\", \"src."
"log\"), \"srclog!!\")\n"
"\n"
"   def build(self):\n"
"      # logs originated at build() step, the most common ones\n"
"      save(self, \"mylogs.txt\", \"some logs!!!\")\n"
"      copy(self, \"mylogs.txt\", src=self.build_folder,\n"
"           dst=os.path.join(self.package_metadata_folder, \"logs\"))"
msgstr ""

#: ../../../devops/metadata.rst:71
msgid ""
"Note that \"recipe\" methods (those that are common for all binaries, like "
"``export()`` and ``source()``) should use ``self.recipe_metadata_folder``, "
"while \"package\" specific methods (``build()``, ``package()``) should use "
"the ``self.package_metadata_folder``."
msgstr ""

#: ../../../devops/metadata.rst:75
msgid ""
"Doing a ``conan create`` over this recipe, will create \"metadata\" folders "
"in the Conan cache. We can have a look at those folders with:"
msgstr ""

#: ../../../devops/metadata.rst:77
msgid ""
"$ conan create .\n"
"$ conan cache path pkg/0.1 --folder=metadata\n"
"# folder containing the recipe metadata\n"
"$ conan cache path pkg/0.1:package_id --folder=metadata\n"
"# folder containing the specific \"package_id\" binary metadata"
msgstr ""

#: ../../../devops/metadata.rst:86
msgid ""
"It is also possible to use the \"local flow\" commands and get local "
"\"metadata\" folders. If we want to do this, it is very recommended to use a "
"``layout()`` method like above to avoid cluttering the current folder. Then "
"the local commands will allow to test and debug the functionality:"
msgstr ""

#: ../../../devops/metadata.rst:89
msgid ""
"$ conan source .\n"
"# check local metadata/logs/src.log file\n"
"$ conan build .\n"
"# check local mybuild/metadata/logs/mylogs.txt file"
msgstr ""

#: ../../../devops/metadata.rst:97
msgid ""
"**NOTE**: This metadata is not valid for the ``conan export-pkg`` flow. If "
"you want to use the ``export-pkg`` flow you might want to check the \"Adding "
"metadata\" section below."
msgstr ""

#: ../../../devops/metadata.rst:102
msgid "Creating metadata with hooks"
msgstr ""

#: ../../../devops/metadata.rst:103
msgid ""
"If there is some common metadata accross recipes, it is possible to capture "
"it without modifying the recipes, using hooks. Let's say that we have a "
"simpler recipe:"
msgstr ""

#: ../../../devops/metadata.rst:106
msgid ""
"import os\n"
"from conan import ConanFile\n"
"from conan.tools.files import save, copy\n"
"\n"
"class Pkg(ConanFile):\n"
"   name = \"pkg\"\n"
"   version = \"0.1\"\n"
"   no_copy_source = True\n"
"\n"
"   def layout(self):\n"
"      self.folders.build = \"mybuild\"\n"
"      self.folders.generators = \"mybuild/generators\"\n"
"\n"
"   def source(self):\n"
"      save(self, \"logs/src.log\", \"srclog!!\")\n"
"\n"
"   def build(self):\n"
"      save(self, \"logs/mylogs.txt\", \"some logs!!!\")"
msgstr ""

#: ../../../devops/metadata.rst:127
msgid ""
"As we can see, this is not using the metadata folders at all. Let's define "
"now the following hooks:"
msgstr ""

#: ../../../devops/metadata.rst:130
msgid ""
"import os\n"
"from conan.tools.files import copy\n"
"\n"
"def post_export(conanfile):\n"
"      conanfile.output.info(\"post_export\")\n"
"      copy(conanfile, \"*.log\", src=conanfile.recipe_folder,\n"
"         dst=os.path.join(conanfile.recipe_metadata_folder, \"logs\"))\n"
"\n"
"def post_source(conanfile):\n"
"      conanfile.output.info(\"post_source\")\n"
"      copy(conanfile, \"*\", src=os.path.join(conanfile.source_folder, "
"\"logs\"),\n"
"         dst=os.path.join(conanfile.recipe_metadata_folder, \"logs\"))\n"
"\n"
"def post_build(conanfile):\n"
"      conanfile.output.info(\"post_build\")\n"
"      copy(conanfile, \"*\", src=os.path.join(conanfile.build_folder, "
"\"logs\"),\n"
"         dst=os.path.join(conanfile.package_metadata_folder, \"logs\"))"
msgstr ""

#: ../../../devops/metadata.rst:151
msgid ""
"The usage of these hooks will have a very similar effect to the in-recipe "
"approach: the metadata files will be created in the cache when ``conan "
"create`` executes, and also locally for the ``conan source`` and ``conan "
"build`` local flow."
msgstr ""

#: ../../../devops/metadata.rst:157
msgid "Adding metadata with commands"
msgstr ""

#: ../../../devops/metadata.rst:159
msgid ""
"Metadata files can be added or modified after the package has been created. "
"To achieve this, using the ``conan cache path`` command will return the "
"folders to do that operation, so copying, creating or modifying files in "
"that location will achieve this."
msgstr ""

#: ../../../devops/metadata.rst:162
msgid ""
"$ conan create . --name=pkg --version=0.1\n"
"$ conan cache path pkg/0.1 --folder=metadata\n"
"# folder to put the metadata, initially empty if we didn't use hooks\n"
"# and the recipe didn't store any metadata. We can copy and put files\n"
"# in the folder\n"
"$ conan cache path pkg/0.1:package_id --folder=metadata\n"
"# same as above, for the package metadata, we can copy and put files in\n"
"# the returned folder"
msgstr ""

#: ../../../devops/metadata.rst:174
msgid ""
"This metadata is added locally, in the Conan cache. If you want to update "
"the server metadata, uploading it from the cache is necessary."
msgstr ""

#: ../../../devops/metadata.rst:178
msgid "Uploading metadata"
msgstr ""

#: ../../../devops/metadata.rst:180
msgid ""
"So far the metadata has been created locally, stored in the Conan cache. "
"Uploading the metadata to the server is integrated with the existing ``conan "
"upload`` command:"
msgstr ""

#: ../../../devops/metadata.rst:183
msgid ""
"$ conan upload \"*\" -c -r=default\n"
"# Uploads recipes, packages and metadata to the \"default\" remote\n"
"...\n"
"pkg/0.1: Recipe metadata: 1 files\n"
"pkg/0.1:da39a3ee5e6b4b0d3255bfef95601890afd80709: Package metadata: 1 files"
msgstr ""

#: ../../../devops/metadata.rst:192
msgid ""
"By default, ``conan upload`` will upload recipes and packages metadata when "
"a recipe or a package is uploaded to the server. But there are some "
"situations that Conan will completely avoid this upload, if it detects that "
"the revisions do already exist in the server, it will not upload the recipes "
"or the packages. If the metadata has been locally modified or added new "
"files, we can force the upload explicitly with:"
msgstr ""

#: ../../../devops/metadata.rst:197
msgid ""
"# We added some metadata to the packages in the cache\n"
"# But those packages already exist in the server\n"
"$ conan upload \"*\" -c -r=default --metadata=\"*\"\n"
"...\n"
"pkg/0.1: Recipe metadata: 1 files\n"
"pkg/0.1:da39a3ee5e6b4b0d3255bfef95601890afd80709: Package metadata: 1 files"
msgstr ""

#: ../../../devops/metadata.rst:206
msgid ""
"The ``--metadata`` argument allows to specify the metadata files that we are "
"uploading. If we structure them in folders, we could specify ``--"
"metadata=\"logs*\"`` to upload only the logs metadata, but not other "
"possible ones like ``test`` metadata."
msgstr ""

#: ../../../devops/metadata.rst:209
msgid ""
"# Upload only the logs metadata of the zlib/1.2.13 binaries\n"
"# This will upload the logs even if zlib/1.2.13 is already in the server\n"
"$ conan upload \"zlib/1.2.13:*\" -r=remote -c --metadata=\"logs/*\"\n"
"# Multiple patterns are allowed:\n"
"$ conan upload \"*\" -r=remote -c --metadata=\"logs/*\" --metadata=\"tests/"
"*\""
msgstr ""

#: ../../../devops/metadata.rst:217
msgid ""
"Sometimes it might be useful to upload packages without uploading the "
"metadata, even if the metadata cache folders contain files. To ignore "
"uploading the metadata, use an empty argument as metadata pattern:"
msgstr ""

#: ../../../devops/metadata.rst:220
msgid ""
"# Upload only the packages, not the metadata\n"
"$ conan upload \"*\" -r=remote -c --metadata=\"\""
msgstr ""

#: ../../../devops/metadata.rst:225
msgid ""
"The case of mixing ``--metadata=\"\"`` with ``--metadata=\"*\"`` is not "
"allowed, and it will raise an error."
msgstr ""

#: ../../../devops/metadata.rst:227
msgid ""
"# Invalid command, it will raise an error\n"
"$ conan upload \"*\" -r=remote -c --metadata=\"\" --metadata=\"logs/*\"\n"
"ERROR: Empty string and patterns can not be mixed for metadata."
msgstr ""

#: ../../../devops/metadata.rst:235
msgid "Downloading metadata"
msgstr ""

#: ../../../devops/metadata.rst:237
msgid ""
"As described above, metadata is not downloaded by default. When packages are "
"downloaded with a ``conan install`` or ``conan create`` fetching "
"dependencies from the servers, the metadata from those servers will not be "
"downloaded."
msgstr ""

#: ../../../devops/metadata.rst:240
msgid ""
"The way to recover the metadata from the server is to explicitly specify it "
"with the ``conan download`` command:"
msgstr ""

#: ../../../devops/metadata.rst:242
msgid ""
"# Get the metadata of the \"pkg/0.1\" package\n"
"$ conan download pkg/0.1 -r=default --metadata=\"*\"\n"
"...\n"
"$ conan cache path pkg/0.1 --folder=metadata\n"
"# Inspect the recipe metadata in the returned folder\n"
"$ conan cache path pkg/0.1:package_id --folder=metadata\n"
"# Inspect the package metadata for binary \"package_id\""
msgstr ""

#: ../../../devops/metadata.rst:253
msgid ""
"The retrieval of the metadata is done with ``download`` per-package. If we "
"want to download the metadata for a whole dependency graph, it is necessary "
"to use \"package-lists\":"
msgstr ""

#: ../../../devops/metadata.rst:255
msgid ""
"$ conan install . --format=json -r=remote > graph.json\n"
"$ conan list --graph=graph.json --format=json > pkglist.json\n"
"# the list will contain the \"remote\" origin of downloaded packages\n"
"$ conan download --list=pkglist.json --metadata=\"*\" -r=remote"
msgstr ""

#: ../../../devops/metadata.rst:263
msgid ""
"Note that the \"package-list\" will only contain associated to the "
"\"remote\" origin the packages that were downloaded. If they were previously "
"in the cache, then, they will not be listed under the \"remote\" origin and "
"the metadata will not be downloaded. If you want to collect the dependencies "
"metadata, recall to download it when the package is installed from the "
"server. There are other possibilities, like a custom command that can "
"automatically collect and download dependencies metadata from the servers."
msgstr ""

#: ../../../devops/metadata.rst:268
msgid "Removing metadata"
msgstr ""

#: ../../../devops/metadata.rst:269
msgid ""
"At the moment it is not possible to remove metadata from the server side "
"using Conan, as the metadata are \"additive\", it is possible to add new "
"data, but not to remove it (otherwise it would not be possible to add new "
"metadata without downloading first all the previous metadata, and that can "
"be quite inefficient and more error prone, specially sensitive to possible "
"race conditions)."
msgstr ""

#: ../../../devops/metadata.rst:271
msgid ""
"The recommendation to remove metatada from the server side would be to use "
"the tools, web interface or APIs that the server might provide."
msgstr ""

#: ../../../devops/metadata.rst:275
msgid "**Best practices**"
msgstr ""

#: ../../../devops/metadata.rst:277
msgid ""
"Metadata shouldn't be necessary for using packages. It should be possible to "
"consume recipes and packages without downloading their metadata. If metadata "
"is mandatory for a package to be used, then it is not metadata and should be "
"packaged as headers and binaries."
msgstr ""

#: ../../../devops/metadata.rst:279
msgid ""
"Metadata reading access should not be a frequent operation, or something "
"that developers have to do. Metadata read is intended for excepcional cases, "
"when some build logs need to be recovered for compliance, or some test "
"executables might be needed for debugging or re-checking a crash."
msgstr ""

#: ../../../devops/metadata.rst:282
msgid ""
"Conan does not do any compression or decompression of the metadata files. If "
"there are a lot of metadata files, consider zipping them yourself, otherwise "
"the upload of those many files can take a lot of time. If you need to handle "
"different types of metadata (logs, tests, reports), zipping the files under "
"each category might be better to be able to filter with the ``--"
"metadata=xxx`` argument."
msgstr ""

#: ../../../devops/metadata.rst:286
msgid "test_package as metadata"
msgstr ""

#: ../../../devops/metadata.rst:288
msgid ""
"This is an illustrative example of usage of metadata, storing the full "
"``test_package`` folder as metadata to later recover it and execute it. Note "
"that this is not necessarily intended for production."
msgstr ""

#: ../../../devops/metadata.rst:291
msgid ""
"Let's  start with a hook that automatically stores as **recipe metadata** "
"the ``test_package`` folder"
msgstr ""

#: ../../../devops/metadata.rst:293
msgid ""
"import os\n"
"from conan.tools.files import copy\n"
"\n"
"def post_export(conanfile):\n"
"   conanfile.output.info(\"Storing test_package\")\n"
"   folder = os.path.join(conanfile.recipe_folder, \"test_package\")\n"
"   copy(conanfile, \"*\", src=folder,\n"
"         dst=os.path.join(conanfile.recipe_metadata_folder, "
"\"test_package\"))"
msgstr ""

#: ../../../devops/metadata.rst:305
msgid ""
"Note that this hook doesn't take into account that ``test_package`` can be "
"dirty with tons of temporary build objects (it should be cleaned before "
"being added to metadata), and it doesn't check that ``test_package`` might "
"not exist at all and crash."
msgstr ""

#: ../../../devops/metadata.rst:309
msgid ""
"When a package is created and uploaded, it will upload to the server the "
"recipe metadata containing the ``test_package``:"
msgstr ""

#: ../../../devops/metadata.rst:311
msgid ""
"$ conan create ...\n"
"$ conan upload \"*\" -c -r=default  # uploads metadata\n"
"...\n"
"pkg/0.1: Recipe metadata: 1 files"
msgstr ""

#: ../../../devops/metadata.rst:318
msgid ""
"Let's remove the local copy, and assume that the package is installed, but "
"the metadata is not:"
msgstr ""

#: ../../../devops/metadata.rst:320
msgid ""
"$ conan remove \"*\" -c  # lets remove the local packages\n"
"$ conan install --requires=pkg/0.1 -r=default  # this will not download "
"metadata"
msgstr ""

#: ../../../devops/metadata.rst:326
msgid ""
"If at this stage the installed package is failing in our application, we "
"could recover the ``test_package``, downloading it, and copying it to our "
"current folder:"
msgstr ""

#: ../../../devops/metadata.rst:329
msgid ""
"$ conan download pkg/0.1 -r=default --metadata=\"test_package*\"\n"
"$ conan cache path pkg/0.1 --folder=metadata\n"
"# copy the test_package folder from the cache, to the current folder\n"
"# like `cp -R ...`\n"
"\n"
"# Execute the test_package\n"
"$ conan test metadata/test_package pkg/0.1\n"
"pkg/0.1 (test package): Running test()"
msgstr ""

#: ../../../devops/metadata.rst:343
msgid ""
"TODO: Examples how to collect the metadata of a complete dependency graph "
"with some custom deployer or command"
msgstr ""

#: ../../../devops/metadata.rst:346
msgid ""
"This is an **experimental** feature. We are looking forward to hearing your "
"feedback, use cases and needs, to keep improving this feature. Please report "
"it in `Github issues <https://github.com/conan-io/conan/issues>`_"
msgstr ""
