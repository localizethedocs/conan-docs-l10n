# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/tools/gnu/pkgconfig.rst:2
msgid "PkgConfig"
msgstr ""

#: ../../../reference/tools/gnu/pkgconfig.rst:4
msgid ""
"This tool can execute ``pkg_config`` executable to extract information from "
"existing ``.pc`` files. This can be useful for example to create a "
"\"system\" package recipe over some system installed library, as a way to "
"automatically extract the ``.pc`` information from the system. Or if some "
"proprietary package has a build system that only outputs ``.pc`` files."
msgstr ""

#: ../../../reference/tools/gnu/pkgconfig.rst:10
msgid "Usage:"
msgstr ""

#: ../../../reference/tools/gnu/pkgconfig.rst:12
msgid "Read a ``pc`` file and access the information:"
msgstr ""

#: ../../../reference/tools/gnu/pkgconfig.rst:14
msgid ""
"pkg_config = PkgConfig(conanfile, \"libastral\", pkg_config_path=<somedir>)\n"
"\n"
"print(pkg_config.provides) # something like\"libastral = 6.6.6\"\n"
"print(pkg_config.version) # something like\"6.6.6\"\n"
"print(pkg_config.includedirs) # something like['/usr/local/include/"
"libastral']\n"
"print(pkg_config.defines) # something like['_USE_LIBASTRAL']\n"
"print(pkg_config.libs) # something like['astral', 'm']\n"
"print(pkg_config.libdirs) # something like['/usr/local/lib/libastral']\n"
"print(pkg_config.linkflags) # something like['-Wl,--whole-archive']\n"
"print(pkg_config.variables['prefix']) # something like'/usr/local'"
msgstr ""

#: ../../../reference/tools/gnu/pkgconfig.rst:28
msgid "Use the ``pc`` file information to fill a ``cpp_info`` object:"
msgstr ""

#: ../../../reference/tools/gnu/pkgconfig.rst:31
msgid ""
"def package_info(self):\n"
"    pkg_config = PkgConfig(conanfile, \"libastral\", "
"pkg_config_path=tmp_dir)\n"
"    pkg_config.fill_cpp_info(self.cpp_info, is_system=False, "
"system_libs=[\"m\", \"rt\"])"
msgstr ""

#: ../../../reference/tools/gnu/pkgconfig.rst:40
msgid "Reference"
msgstr ""

#: ../../../conan_sources/conan/tools/gnu/pkgconfig.py:docstring of
#: conan.tools.gnu.pkgconfig.PkgConfig:0
#: conan.tools.gnu.pkgconfig.PkgConfig.fill_cpp_info:0
msgid "Parameters"
msgstr ""

#: ../../../conan_sources/conan/tools/gnu/pkgconfig.py:docstring of
#: conan.tools.gnu.pkgconfig.PkgConfig:1
msgid "The current recipe object. Always use ``self``."
msgstr ""

#: ../../../conan_sources/conan/tools/gnu/pkgconfig.py:docstring of
#: conan.tools.gnu.pkgconfig.PkgConfig:2
msgid ""
"The library which ``.pc`` file is to be parsed. It must exist in the "
"pkg_config path."
msgstr ""

#: ../../../conan_sources/conan/tools/gnu/pkgconfig.py:docstring of
#: conan.tools.gnu.pkgconfig.PkgConfig:3
msgid ""
"If defined it will be prepended to ``PKG_CONFIG_PATH`` environment variable, "
"so the execution finds the required files."
msgstr ""

#: ../../../conan_sources/conan/tools/gnu/pkgconfig.py:docstring of
#: conan.tools.gnu.pkgconfig.PkgConfig.fill_cpp_info:1
msgid "Method to fill a cpp_info object from the PkgConfig configuration"
msgstr ""

#: ../../../conan_sources/conan/tools/gnu/pkgconfig.py:docstring of
#: conan.tools.gnu.pkgconfig.PkgConfig.fill_cpp_info:3
msgid ""
"Can be the global one (self.cpp_info) or a component one (self."
"components[\"foo\"].cpp_info)."
msgstr ""

#: ../../../conan_sources/conan/tools/gnu/pkgconfig.py:docstring of
#: conan.tools.gnu.pkgconfig.PkgConfig.fill_cpp_info:4
#: conan.tools.gnu.pkgconfig.PkgConfig.fill_cpp_info:5
msgid ""
"If ``True``, all detected libraries will be assigned to ``cpp_info."
"system_libs``, and none to ``cpp_info.libs``."
msgstr ""

#: ../../../reference/tools/gnu/pkgconfig.rst:51
msgid "conf"
msgstr ""

#: ../../../reference/tools/gnu/pkgconfig.rst:53
msgid ""
"This helper will listen to ``tools.gnu:pkg_config`` from the :ref:"
"`reference_config_files_global_conf` to define the ``pkg_config`` executable "
"name or full path. It will by default it is ``pkg-config``."
msgstr ""
