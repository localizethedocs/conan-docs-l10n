# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:31+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/binary_model/settings_and_options.rst:4
msgid "How settings and options of a recipe influence its package ID"
msgstr ""

#: ../../../reference/binary_model/settings_and_options.rst:6
msgid ""
"In Conan, a package ID is a unique identifier for a package binary that "
"takes into account all the factors that affect its binary compatibility. "
"These factors include recipe options and settings as well as requirements or "
"tool requirements."
msgstr ""

#: ../../../reference/binary_model/settings_and_options.rst:9
msgid ""
"Let's see how settings and options affect the package ID and some examples "
"where they should not."
msgstr ""

#: ../../../reference/binary_model/settings_and_options.rst:12
msgid "How settings influence the package ID"
msgstr ""

#: ../../../reference/binary_model/settings_and_options.rst:14
msgid ""
"Settings are development project-wide variables, like the compiler, its "
"version, or the OS itself. These variable values have to be defined, they "
"should match the values of our development environment, and they cannot have "
"a default value like options do."
msgstr ""

#: ../../../reference/binary_model/settings_and_options.rst:17
msgid ""
"For example, let's define a recipe that generates packages that are only OS "
"dependent:"
msgstr ""

#: ../../../reference/binary_model/settings_and_options.rst:19
msgid ""
"from conan import ConanFile\n"
"\n"
"class Pkg(ConanFile):\n"
"    name = \"pkg\"\n"
"    version = \"1.0.0\"\n"
"    settings = \"os\"  # Only OS setting affects the package ID"
msgstr ""

#: ../../../reference/binary_model/settings_and_options.rst:28
msgid ""
"If we generate a package from this recipe for Linux we will get the "
"following package ID:"
msgstr ""

#: ../../../reference/binary_model/settings_and_options.rst:30
msgid ""
" $ conan create . --settings os=Linux\n"
" ...\n"
" pkg/1.0.0: Package '9a4eb3c8701508aa9458b1a73d0633783ecc2270' created\n"
"\n"
" $ conan list pkg/1.0.0:*\n"
" Local Cache\n"
"   pkg\n"
"     pkg/1.0.0\n"
"       revisions\n"
"           476929a74c859bb5f646363a4900f7cf (2024-03-07 09:13:43 UTC)\n"
"             packages\n"
"               9a4eb3c8701508aa9458b1a73d0633783ecc2270\n"
"                 info\n"
"                   settings\n"
"                     os: Linux"
msgstr ""

#: ../../../reference/binary_model/settings_and_options.rst:49
msgid ""
"If we do the same thing with Windows, now the package ID will be diffent:"
msgstr ""

#: ../../../reference/binary_model/settings_and_options.rst:51
msgid ""
" $ conan create . --settings os=Windows\n"
" ...\n"
" pkg/1.0.0: Package 'ebec3dc6d7f6b907b3ada0c3d3cdc83613a2b715' created\n"
"\n"
" $ conan list pkg/1.0.0:*\n"
" Local Cache\n"
"   pkg\n"
"     pkg/1.0.0\n"
"       revisions\n"
"           476929a74c859bb5f646363a4900f7cf (2024-03-07 09:13:43 UTC)\n"
"             packages\n"
"               9a4eb3c8701508aa9458b1a73d0633783ecc2270\n"
"                 info\n"
"                   settings\n"
"                     os: Linux\n"
"               ebec3dc6d7f6b907b3ada0c3d3cdc83613a2b715\n"
"                 info\n"
"                   settings\n"
"                     os: Windows"
msgstr ""

#: ../../../reference/binary_model/settings_and_options.rst:74
msgid ""
"Whenever a value of the settings or subsettings changes, the package ID will "
"be different to reflect that."
msgstr ""

#: ../../../reference/binary_model/settings_and_options.rst:76
msgid ""
"The most common usage for settings is to model the different project-wide "
"aspects that might influence the package ID. A recipe that does that will be:"
msgstr ""

#: ../../../reference/binary_model/settings_and_options.rst:79
msgid ""
"from conan import ConanFile\n"
"\n"
"class Pkg(ConanFile):\n"
"    name = \"pkg\"\n"
"    version = \"1.0.0\"\n"
"    settings = \"os\", \"arch\", \"compiler\", \"build_type\""
msgstr ""

#: ../../../reference/binary_model/settings_and_options.rst:88
msgid ""
"Now, compiling a package with different compiler versions will result into "
"different package IDs:"
msgstr ""

#: ../../../reference/binary_model/settings_and_options.rst:90
msgid ""
" $ conan create . --settings compiler.version=192\n"
" ...\n"
" pkg/1.0.0: Package '4f267380690f99b3ef385199826c268f63147457' created\n"
"\n"
" $ conan create . --settings compiler.version=193\n"
" ...\n"
" pkg/1.0.0: Package 'c13a22a41ecd72caf9e556f68b406569547e0861' created\n"
"\n"
" $ conan list pkg/1.0.0:*\n"
" Local Cache\n"
"   pkg\n"
"     pkg/1.0.0\n"
"       revisions\n"
"         f1f48830ecb04f3b328429b390fc5de8 (2024-03-07 09:21:07 UTC)\n"
"           packages\n"
"             4f267380690f99b3ef385199826c268f63147457\n"
"               info\n"
"                 settings\n"
"                   arch: x86_64\n"
"                   build_type: Release\n"
"                   compiler: msvc\n"
"                   compiler.cppstd: 14\n"
"                   compiler.runtime: dynamic\n"
"                   compiler.runtime_type: Release\n"
"                   compiler.version: 192\n"
"                   os: Windows\n"
"             c13a22a41ecd72caf9e556f68b406569547e0861\n"
"               info\n"
"                 settings\n"
"                   arch: x86_64\n"
"                   build_type: Release\n"
"                   compiler: msvc\n"
"                   compiler.cppstd: 14\n"
"                   compiler.runtime: dynamic\n"
"                   compiler.runtime_type: Release\n"
"                   compiler.version: 193\n"
"                   os: Windows"
msgstr ""

#: ../../../reference/binary_model/settings_and_options.rst:132
msgid "Removing settings for a package used as a tool_require"
msgstr ""

#: ../../../reference/binary_model/settings_and_options.rst:134
msgid ""
"There could be cases when a setting should not influence the resulting "
"package ID. An example of this could be when a recipe packages a tool that "
"would be used to build other packages via ``tool_requires``"
msgstr ""

#: ../../../reference/binary_model/settings_and_options.rst:137
msgid ""
"In that case, the value of the compiler used is needed for the compilation "
"of the tool but not that relevant for consumers, as we only want to execute "
"the tool to build other projects. So we could eventually remove the "
"influence of the compiler from the pacakge ID:"
msgstr ""

#: ../../../reference/binary_model/settings_and_options.rst:140
msgid ""
"from conan import ConanFile\n"
"\n"
"class CMake(ConanFile):\n"
"    name = \"cmake\"\n"
"    version = \"1.0.0\"\n"
"    settings = \"os\", \"arch\", \"compiler\", \"build_type\"  # Only OS and "
"architecture influence the resulting package\n"
"\n"
"    def build(self):\n"
"        # self.settings.compiler value will be used here to compile cmake\n"
"\n"
"    def package_id(self):\n"
"        # Remove compiler setting from package ID\n"
"        del self.info.settings.compiler"
msgstr ""

#: ../../../reference/binary_model/settings_and_options.rst:156
msgid ""
"Why not removing the setting from the `settings` attribute? Because the "
"compiler value is still needed in the `build()` method to perform the "
"compilation of the executable."
msgstr ""

#: ../../../reference/binary_model/settings_and_options.rst:160
msgid ""
"In the case we are generating our own executables (our own apps, not a "
"``tool_require``), **removing the compiler setting from package ID is not "
"recommended**, as we would always want to know that the package was "
"generated with a specific compiler."
msgstr ""

#: ../../../reference/binary_model/settings_and_options.rst:163
msgid ""
"However, in case we are packaging a tool that does not even require a "
"compiler input for building (a python script for example), we could also "
"directly remove the settings attribute:"
msgstr ""

#: ../../../reference/binary_model/settings_and_options.rst:165
msgid ""
"from conan import ConanFile\n"
"\n"
"class MyPythonScripts(ConanFile):\n"
"    name = \"my-python-scripts\"\n"
"    version = \"1.0.0\"\n"
"    # No settings this time"
msgstr ""

#: ../../../reference/binary_model/settings_and_options.rst:174
msgid ""
"Or, if the tool is platform specific we can just keep the OS and "
"architecture information:"
msgstr ""

#: ../../../reference/binary_model/settings_and_options.rst:176
msgid ""
"from conan import ConanFile\n"
"\n"
"class MyScripts(ConanFile):\n"
"    name = \"my-scripts\"\n"
"    version = \"1.0.0\"\n"
"    settings = \"os\", \"arch\""
msgstr ""

#: ../../../reference/binary_model/settings_and_options.rst:186
msgid "How options influence the package ID"
msgstr ""

#: ../../../reference/binary_model/settings_and_options.rst:188
msgid ""
"Options are used to specify characteristics that are particular to a single "
"recipe, contrasting with settings that generally remain consistent across "
"recipes within a project. They are usually a set of particular "
"characteristics of a library executable or conan package may have."
msgstr ""

#: ../../../reference/binary_model/settings_and_options.rst:191
msgid ""
"For example, a `shared` option is a very common option used in recipes that "
"can produce shared libraries. However, it could not be a setting as not all "
"recipes produce shared libraries."
msgstr ""

#: ../../../reference/binary_model/settings_and_options.rst:193
msgid ""
"from conan import ConanFile\n"
"\n"
"class Pkg(ConanFile):\n"
"    name = \"pkg\"\n"
"    version = \"1.0.0\"\n"
"    options = {\"shared\": [True, False]}\n"
"    default_options = {\"shared\": True}"
msgstr ""

#: ../../../reference/binary_model/settings_and_options.rst:203
msgid ""
"As in the previous case with settings, the different values of an option "
"will influence the package ID and therefore, generate different packages "
"depending on it."
msgstr ""

#: ../../../reference/binary_model/settings_and_options.rst:205
msgid ""
" $ conan create . --options shared=True\n"
" ...\n"
" pkg/1.0.0: Package '1744785cb24e3bdca70e27041dc5abd20476f947' created\n"
"\n"
" $ conan create . --options shared=False\n"
" ...\n"
" pkg/1.0.0: Package '55c609fe8808aa5308134cb5989d23d3caffccf2' created"
msgstr ""

#: ../../../reference/binary_model/settings_and_options.rst:216
msgid ""
"In the same way, there might be \"options\" that are needed as input in a "
"recipe to generate a package which shouldn't be taken into account in the "
"package ID. An example of this could be an option to control something that "
"during the build phase but that does not influence the package result, like "
"the *verbosity* of a compilation. In that case, the recipe should remove the "
"option in the :ref:`package_id() method "
"<reference_conanfile_methods_package_id>`:"
msgstr ""

#: ../../../reference/binary_model/settings_and_options.rst:220
msgid ""
"However, the general advice is that **options should always affect the "
"package ID**, and in case we would like to have an input to the recipe that "
"should **not** affect it, it should be done via the :ref:`conf section "
"<reference_config_files_profiles_conf>` of your profile. Then in the recipe "
"we should just add:"
msgstr ""

#: ../../../reference/binary_model/settings_and_options.rst:223
msgid ""
"from conan import ConanFile\n"
"\n"
"class MyPkg(ConanFile):\n"
"    name = \"my-pkg\"\n"
"    version = \"1.0.0\"\n"
"\n"
"    def build(self):\n"
"        verbosity = self.conf.get(\"user.my-pkg:verbosity\")\n"
"        self.output.info(f\"Using verbosity level: {verbosity})\n"
"        ..."
msgstr ""

#: ../../../reference/binary_model/settings_and_options.rst:236
msgid "*myprofile*"
msgstr ""

#: ../../../reference/binary_model/settings_and_options.rst:236
msgid ""
"[conf]\n"
"user.my-pkg:verbosity=silent"
msgstr ""

#: ../../../reference/binary_model/settings_and_options.rst:242
msgid ""
"That way the package ID will be not affected, the recipe will be cleaner "
"(without irrelevant options for package ID) and the input is easily managed "
"via the profile's conf section."
msgstr ""

#: ../../../reference/binary_model/settings_and_options.rst:247
msgid ":ref:`reference_binary_model_package_id`"
msgstr ""

#: ../../../reference/binary_model/settings_and_options.rst:248
msgid ":ref:`tutorial_creating_configure`"
msgstr ""
