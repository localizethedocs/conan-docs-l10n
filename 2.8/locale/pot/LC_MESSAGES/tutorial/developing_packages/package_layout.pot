# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:31+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../tutorial/developing_packages/package_layout.rst:4
msgid "Understanding the Conan Package layout"
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:8
msgid ""
"In the previous section, we introduced the concept of *editable packages* "
"and mentioned that the reason they work *out of the box* when put in "
"editable mode is due to the current definition of the information in the "
"``layout()`` method. Let's examine this feature in more detail."
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:13
msgid ""
"In this tutorial, we will continue working with the ``say/1.0`` package and "
"the ``hello/1.0`` consumer used in the :ref:`editable packages "
"<editable_packages>` tutorial."
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:16
msgid ""
"Please, first of all, clone the sources to recreate this project. You can "
"find them in the `examples2 repository <https://github.com/conan-io/"
"examples2>`_ in GitHub:"
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:19
msgid ""
"$ git clone https://github.com/conan-io/examples2.git\n"
"$ cd examples2/tutorial/developing_packages/package_layout"
msgstr ""

#: ../../../tutorial/cmake_presets_note.inc:3
msgid ""
"We use CMake presets in this example. This requires CMake >= 3.23 because "
"the \"include\" from ``CMakeUserPresets.json`` to ``CMakePresets.json`` is "
"only supported since that version. If you prefer not to use presets you can "
"use something like:"
msgstr ""

#: ../../../tutorial/cmake_presets_note.inc:7
msgid ""
"cmake <path> -G <CMake generator> -DCMAKE_TOOLCHAIN_FILE=<path to\n"
"conan_toolchain.cmake> -DCMAKE_BUILD_TYPE=Release"
msgstr ""

#: ../../../tutorial/cmake_presets_note.inc:12
msgid ""
"Conan will show the exact CMake command everytime you run ``conan install`` "
"in case you can't use the presets feature."
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:26
msgid "As you can see, the main folder structure is the same:"
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:28
msgid ""
".\n"
"├── hello\n"
"│   ├── CMakeLists.txt\n"
"│   ├── conanfile.py\n"
"│   └── src\n"
"│       └── hello.cpp\n"
"└── say\n"
"    ├── CMakeLists.txt\n"
"    ├── conanfile.py\n"
"    ├── include\n"
"    │   └── say.h\n"
"    └── src\n"
"        └── say.cpp"
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:45
msgid ""
"The main difference here is that we are not using the predefined :ref:"
"`cmake_layout()<cmake_layout>` in the ``say/1.0`` ConanFile, but instead, we "
"are declaring our own custom layout. Let's see how we describe the "
"information in the ``layout()`` method so that it works both when we create "
"the package in the Conan local cache and also when the package is in "
"editable mode."
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:51
msgid "say/conanfile.py"
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:51
msgid ""
"import os\n"
"from conan import ConanFile\n"
"from conan.tools.cmake import CMake\n"
"\n"
"\n"
"class SayConan(ConanFile):\n"
"    name = \"say\"\n"
"    version = \"1.0\"\n"
"\n"
"    exports_sources = \"CMakeLists.txt\", \"src/*\", \"include/*\"\n"
"\n"
"    ...\n"
"\n"
"    def layout(self):\n"
"\n"
"        ## define project folder structure\n"
"\n"
"        self.folders.source = \".\"\n"
"        self.folders.build = os.path.join(\"build\", str(self.settings."
"build_type))\n"
"        self.folders.generators = os.path.join(self.folders.build, "
"\"generators\")\n"
"\n"
"        ## cpp.package information is for consumers to find the package "
"contents in the Conan cache\n"
"\n"
"        self.cpp.package.libs = [\"say\"]\n"
"        self.cpp.package.includedirs = [\"include\"] # includedirs is "
"already set to 'include' by\n"
"                                                   # default, but declared "
"for completion\n"
"        self.cpp.package.libdirs = [\"lib\"]         # libdirs is already "
"set to 'lib' by\n"
"                                                   # default, but declared "
"for completion\n"
"\n"
"        ## cpp.source and cpp.build information is specifically designed for "
"editable packages:\n"
"\n"
"        # this information is relative to the source folder that is '.'\n"
"        self.cpp.source.includedirs = [\"include\"] # maps to ./include\n"
"\n"
"        # this information is relative to the build folder that is './build/"
"<build_type>', so it will\n"
"        self.cpp.build.libdirs = [\".\"]  # map to ./build/<build_type> for "
"libdirs\n"
"\n"
"    def build(self):\n"
"        cmake = CMake(self)\n"
"        cmake.configure()\n"
"        cmake.build()"
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:97
msgid ""
"Let's review the ``layout()`` method. You can see that we are setting values "
"for ``self.folders`` and ``self.cpp``. Let's explain what these values do."
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:101
msgid "self.folders"
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:103
msgid ""
"Defines the structure of the ``say`` project for the source code and the "
"folders where the files generated by Conan and the built artifacts will be "
"located. This structure is independent of whether the package is in editable "
"mode or exported and built in the Conan local cache. Let's define the folder "
"structure for the ``say`` package:"
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:108
msgid ""
"say\n"
" ├── CMakeLists.txt\n"
" ├── conanfile.py\n"
" ├── include\n"
" │   └── say.h\n"
" ├── src\n"
" │   └── say.cpp\n"
" └── build\n"
"     ├── Debug            --> Built artifacts for Debug\n"
"     │   └── generators   --> Conan generated files for Debug config\n"
"     └── Release          --> Built artifacts for Release\n"
"         └── generators   --> Conan generated files for Release config"
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:124
msgid ""
"As we have our ``CMakeLists.txt`` in the ``.`` folder, ``self.folders."
"source`` is set to ``.``."
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:126
msgid ""
"We set ``self.folders.build`` to be **./build/Release** or **./build/Debug** "
"depending on the ``build_type`` setting. These are the folders where we want "
"the built binaries to be located."
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:129
msgid ""
"The ``self.folders.generators`` folder is the location we set for all the "
"files created by the Conan generators. In this case, all the files generated "
"by the ``CMakeToolchain`` generator will be stored there."
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:135
msgid ""
"Please note that the values above are for a single-configuration CMake "
"generator. To support multi-configuration generators, such as Visual Studio, "
"you should make some changes to this layout. For a complete layout that "
"supports both single-config and multi-config, please check the :ref:"
"`cmake_layout()<cmake_layout>` in the Conan documentation."
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:142
msgid "self.cpp"
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:144
msgid ""
"This attribute is used to define **where consumers will find the package "
"contents** (headers files, libraries, etc.) depending on whether the package "
"is in editable mode or not."
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:149
msgid "cpp.package"
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:151
msgid ""
"First, we set the information for `cpp.package`. This defines the contents "
"of the package and its location relative to the folder where the package is "
"stored in the local cache. Please note that defining this information is "
"equivalent to defining `self.cpp_info` in the `package_info()` method. This "
"is the information we defined:"
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:156
msgid ""
"``self.cpp.package.libs``: we add the ``say`` library so that consumers know "
"that they should link with it. This is equivalent to declaring ``self."
"cpp_info.libs`` in the ``package_info()`` method."
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:160
msgid ""
"``self.cpp.package.libdirs``: we add the ``lib`` folder so that consumers "
"know that they should search there for the libraries. This is equivalent to "
"declaring ``self.cpp_info.libdirs`` in the ``package_info()`` method. Note "
"that the default value for ``libdirs`` in both the ``cpp_info`` and ``cpp."
"package`` is ``[\"lib\"]`` so we could have omitted that declaration."
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:166
msgid ""
"``self.cpp.package.includedirs``: we add the ``include`` folder so that "
"consumers know that they should search there for the library headers. This "
"is equivalent to declaring ``self.cpp_info.includedirs`` in the "
"``package_info()`` method. Note that the default value for ``includedirs`` "
"in both the ``cpp_info`` and ``cpp.package`` is ``[\"include\"]`` so we "
"could have omitted that declaration."
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:172
msgid ""
"To check how this information affects consumers we are going to do first do "
"a ``conan create`` on the ``say`` package:"
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:175
msgid ""
"$ cd say\n"
"$ conan create . -s build_type=Release"
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:180
msgid ""
"When we call ``conan create``, Conan moves the recipe and sources declared "
"in the recipe to be exported to the local Cache to a recipe folder and after "
"that, it will create a separate package folder to build the binaries and "
"store the actual package contents. If you check in the ``[YOUR_CONAN_HOME]/"
"p`` folder, you will find two new folders similar to these:"
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:188
msgid ""
"You could get the exact locations for this folders using the :command:`conan "
"cache` command or checking the output of the :command:`conan create` command."
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:191
msgid ""
"<YOUR_CONAN_HOME>/p\n"
"├── sayb3ea744527a91      --> folder for sources\n"
"│   └── ...\n"
"│\n"
"└── say830097e941e10      --> folder for building and storing the package "
"binaries\n"
"    ├── b\n"
"    │   ├── build\n"
"    │   │   └── Release\n"
"    │   ├── include\n"
"    │   │   └── say.h\n"
"    │   └── src\n"
"    │       ├── hello.cpp\n"
"    │       └── say.cpp\n"
"    └── p\n"
"        ├── include       --> defined in cpp.package.includedirs\n"
"        │   └── say.h\n"
"        └── lib           --> defined in cpp.package.libdirs\n"
"            └── libsay.a  --> defined in self.cpp.package.libs"
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:213
msgid ""
"You can identify there the structure we defined in the ``layout()`` method. "
"If you build the ``hello`` consumer project now, it will search for all the "
"headers and libraries of ``say`` in that folder inside the local Cache in "
"the locations defined by ``cpp.package``:"
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:217
msgid ""
"$ cd ../hello\n"
"$ conan install . -s build_type=Release\n"
"\n"
"# Linux, MacOS\n"
"$ cmake --preset conan-release --log-level=VERBOSE\n"
"# Windows\n"
"$ cmake --preset conan-default --log-level=VERBOSE\n"
"\n"
"...\n"
"-- Conan: Target declared 'say::say'\n"
"-- Conan: Library say found <YOUR_CONAN_HOME>p/say8938ceae216fc/p/lib/libsay."
"a\n"
"-- Created target CONAN_LIB::say_say_RELEASE STATIC IMPORTED\n"
"-- Conan: Found: <YOUR_CONAN_HOME>p/p/say8938ceae216fc/p/lib/libsay.a\n"
"-- Configuring done\n"
"...\n"
"\n"
"$ cmake --build --preset conan-release\n"
"[ 50%] Building CXX object CMakeFiles/hello.dir/src/hello.cpp.o\n"
"[100%] Linking CXX executable hello\n"
"[100%] Built target hello"
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:243
msgid "cpp.source and cpp.build"
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:245
msgid ""
"We also defined ``cpp.source`` and ``cpp.build`` attributes in our recipe. "
"These are only used when the package is in editable mode and point to the "
"locations that consumers will use to find headers and binaries. We defined:"
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:249
msgid ""
"``self.cpp.source.includedirs`` set to ``[\"include\"]``. This location is "
"relative to the ``self.folders.source`` that we defined to ``.``. In the "
"case of editable packages, this location will be the local folder where we "
"have our project."
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:253
msgid ""
"``self.cpp.build.libdirs`` set to ``[\".\"]``. This location is relative to "
"the ``self.folders.build`` that we defined to **./build/<build_type>**. In "
"the case of editable packages, this location will point to **<local_folder>/"
"build/<build_type>**."
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:258
msgid ""
"Note that other ``cpp.source`` and ``cpp.build`` definitions are also "
"possible, with different meanings and purposes, for example:"
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:261
msgid ""
"``self.cpp.source.libdirs`` and ``self.cpp.source.libs`` could be used if we "
"had pre-compiled libraries in the source repo, committed to git, for "
"example. They are not a product of the build, but rather part of the sources."
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:264
msgid ""
"``self.cpp.build.includedirs`` could be use for folders containing headers "
"generated at build time, as it usually happens by some code generators that "
"are fired by the build before starting to compile the project."
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:268
msgid ""
"To check how this information affects consumers, we are going to first put "
"the ``say`` package in editable mode and build it locally."
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:271
msgid ""
"$ cd ../say\n"
"$ conan editable add . --name=say --version=1.0\n"
"$ conan install . -s build_type=Release\n"
"$ cmake --preset conan-release\n"
"$ cmake --build --preset conan-release"
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:279
msgid ""
"You can check the contents of the say project's folder now, you can see that "
"the output folders match the ones we defined with ``self.folders``:"
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:282
msgid ""
".\n"
"├── CMakeLists.txt\n"
"├── CMakeUserPresets.json\n"
"├── build\n"
"│   └── Release       --> defined in cpp.build.libdirs\n"
"│       ├── ...\n"
"│       ├── generators\n"
"│       │   ├── CMakePresets.json\n"
"│       │   ├── ...\n"
"│       │   └── deactivate_conanrun.sh\n"
"│       └── libsay.a  --> no need to define\n"
"├── conanfile.py\n"
"├── include           --> defined in cpp.source.includedirs\n"
"│   └── say.h\n"
"└── src\n"
"    ├── hello.cpp\n"
"    └── say.cpp"
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:303
msgid ""
"Now that we have the ``say`` package in editable mode, if we build the "
"``hello`` consumer project, it will search for all the headers and libraries "
"of ``say`` in the folders defined by ``cpp.source`` and ``cpp.build``:"
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:307
msgid ""
"$ cd ../hello\n"
"$ conan install . -s build_type=Release\n"
"\n"
"# Linux, MacOS\n"
"$ cmake --preset conan-release --log-level=VERBOSE\n"
"# Windows\n"
"$ cmake --preset conan-default --log-level=VERBOSE\n"
"\n"
"...\n"
"-- Conan: Target declared 'say::say'\n"
"-- Conan: Library say found <local_folder>/examples2/tutorial/"
"developing_packages/package_layout/say/build/Release/libsay.a\n"
"-- Conan: Found: <local_folder>/examples2/tutorial/developing_packages/"
"package_layout/say/build/Release/libsay.a\n"
"-- Configuring done\n"
"...\n"
"\n"
"$ cmake --build --preset conan-release\n"
"[ 50%] Building CXX object CMakeFiles/hello.dir/src/hello.cpp.o\n"
"[100%] Linking CXX executable hello\n"
"[100%] Built target hello\n"
"\n"
"$ conan editable remove --refs=say/1.0"
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:335
msgid ""
"Please, note that we did not define ``self.cpp.build.libs = [\"say\"]``. "
"This is because the information set in ``self.cpp.source`` and ``self.cpp."
"build`` will be merged with the information set in ``self.cpp.package`` so "
"that you only have to define things that change for the editable package. "
"For the same reason, you could also omit setting ``self.cpp.source."
"includedirs = [\"include\"]`` but we left it there to show the use of ``cpp."
"source``."
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:344
msgid ""
"Define the layout() :ref:`when you package third-party "
"libraries<examples_conanfile_layout_third_party_libraries>`"
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:345
msgid ""
"Define the layout() :ref:`when you have the conanfile in a "
"subfolder<examples_conanfile_layout_conanfile_in_subfolder>`"
msgstr ""

#: ../../../tutorial/developing_packages/package_layout.rst:346
msgid ""
"Define the layout() :ref:`when you want to handle multiple "
"subprojects<examples_conanfile_layout_multiple_subprojects>`"
msgstr ""
