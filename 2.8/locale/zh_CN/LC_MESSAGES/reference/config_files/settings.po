# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:31+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/config_files/settings.rst:4
msgid "settings.yml"
msgstr ""

#: ../../../reference/config_files/settings.rst:6
msgid ""
"This configuration file is located in the Conan user home, i.e., "
"``[CONAN_HOME]/settings.yml``. It looks like this:"
msgstr ""

#: ../../../reference/config_files/settings.rst:9
msgid ""
"# This file was generated by Conan. Remove this comment if you edit this "
"file or Conan\n"
"# will destroy your changes.\n"
"os:\n"
"    Windows:\n"
"        subsystem: [null, cygwin, msys, msys2, wsl]\n"
"    WindowsStore:\n"
"        version: [\"8.1\", \"10.0\"]\n"
"    WindowsCE:\n"
"        platform: [ANY]\n"
"        version: [\"5.0\", \"6.0\", \"7.0\", \"8.0\"]\n"
"    Linux:\n"
"    iOS:\n"
"        version: &ios_version\n"
"                   [\"7.0\", \"7.1\", \"8.0\", \"8.1\", \"8.2\", \"8.3\", "
"\"9.0\", \"9.1\", \"9.2\", \"9.3\", \"10.0\", \"10.1\", \"10.2\", \"10.3\",\n"
"                    \"11.0\", \"11.1\", \"11.2\", \"11.3\", \"11.4\", "
"\"12.0\", \"12.1\", \"12.2\", \"12.3\", \"12.4\",\n"
"                    \"13.0\", \"13.1\", \"13.2\", \"13.3\", \"13.4\", "
"\"13.5\", \"13.6\", \"13.7\",\n"
"                    \"14.0\", \"14.1\", \"14.2\", \"14.3\", \"14.4\", "
"\"14.5\", \"14.6\", \"14.7\", \"14.8\",\n"
"                    \"15.0\", \"15.1\", \"15.2\", \"15.3\", \"15.4\", "
"\"15.5\", \"15.6\", \"16.0\", \"16.1\",\n"
"                    \"16.2\", \"16.3\", \"16.4\", \"16.5\", \"16.6\", "
"\"17.0\", \"17.1\", \"17.2\", \"17.3\", \"17.4\", \"17.5\",\n"
"                    \"18.0\", \"18.1\"]\n"
"        sdk: [\"iphoneos\", \"iphonesimulator\"]\n"
"        sdk_version: [null, \"11.3\", \"11.4\", \"12.0\", \"12.1\", "
"\"12.2\", \"12.4\",\n"
"                        \"13.0\", \"13.1\", \"13.2\", \"13.4\", \"13.5\", "
"\"13.6\", \"13.7\",\n"
"                        \"14.0\", \"14.1\", \"14.2\", \"14.3\", \"14.4\", "
"\"14.5\", \"15.0\", \"15.2\", \"15.4\",\n"
"                        \"15.5\", \"16.0\", \"16.1\", \"16.2\", \"16.4\", "
"\"17.0\", \"17.1\", \"17.2\", \"17.4\", \"17.5\",\n"
"                        \"18.0\", \"18.1\"]\n"
"    watchOS:\n"
"        version: [\"4.0\", \"4.1\", \"4.2\", \"4.3\", \"5.0\", \"5.1\", "
"\"5.2\", \"5.3\", \"6.0\", \"6.1\", \"6.2\",\n"
"                    \"7.0\", \"7.1\", \"7.2\", \"7.3\", \"7.4\", \"7.5\", "
"\"7.6\", \"8.0\", \"8.1\", \"8.3\", \"8.4\",\n"
"                    \"8.5\", \"8.6\", \"8.7\", \"9.0\", \"9.1\", \"9.2\", "
"\"9.3\", \"9.4\", \"9.5\", \"9.6\",\n"
"                    \"10.0\", \"10.1\", \"10.2\", \"10.3\", \"10.4\", "
"\"10.5\", \"11.0\", \"11.1\"]\n"
"        sdk: [\"watchos\", \"watchsimulator\"]\n"
"        sdk_version: [null, \"4.3\", \"5.0\", \"5.1\", \"5.2\", \"5.3\", "
"\"6.0\", \"6.1\", \"6.2\",\n"
"                        \"7.0\", \"7.1\", \"7.2\", \"7.4\", \"8.0\", "
"\"8.0.1\", \"8.3\", \"8.5\", \"9.0\", \"9.1\",\n"
"                        \"9.4\", \"10.0\", \"10.1\", \"10.2\", \"10.4\", "
"\"10.5\", \"11.0\", \"11.1\"]\n"
"    tvOS:\n"
"        version: [\"11.0\", \"11.1\", \"11.2\", \"11.3\", \"11.4\", "
"\"12.0\", \"12.1\", \"12.2\", \"12.3\", \"12.4\",\n"
"                    \"13.0\", \"13.2\", \"13.3\", \"13.4\", \"14.0\", "
"\"14.2\", \"14.3\", \"14.4\", \"14.5\",\n"
"                    \"14.6\", \"14.7\", \"15.0\", \"15.1\", \"15.2\", "
"\"15.3\", \"15.4\", \"15.5\", \"15.6\",\n"
"                    \"16.0\", \"16.1\", \"16.2\", \"16.3\", \"16.4\", "
"\"16.5\", \"16.6\", \"17.0\", \"17.1\", \"17.2\", \"17.3\", \"17.4\",\n"
"                    \"17.5\", \"18.0\", \"18.1\"]\n"
"        sdk: [\"appletvos\", \"appletvsimulator\"]\n"
"        sdk_version: [null, \"11.3\", \"11.4\", \"12.0\", \"12.1\", "
"\"12.2\", \"12.4\",\n"
"                        \"13.0\", \"13.1\", \"13.2\", \"13.4\", \"14.0\", "
"\"14.2\", \"14.3\", \"14.5\", \"15.0\",\n"
"                        \"15.2\", \"15.4\", \"16.0\", \"16.1\", \"16.4\", "
"\"17.0\", \"17.1\", \"17.2\", \"17.4\", \"17.5\",\n"
"                        \"18.0\", \"18.1\"]\n"
"    visionOS:\n"
"        version: [\"1.0\", \"1.1\", \"1.2\", \"2.0\", \"2.1\"]\n"
"        sdk: [\"xros\", \"xrsimulator\"]\n"
"        sdk_version: [null, \"1.0\", \"1.1\", \"1.2\", \"2.0\", \"2.1\"]\n"
"    Macos:\n"
"        version: [null, \"10.6\", \"10.7\", \"10.8\", \"10.9\", \"10.10\", "
"\"10.11\", \"10.12\", \"10.13\", \"10.14\", \"10.15\",\n"
"                    \"11.0\", \"11.1\", \"11.2\", \"11.3\", \"11.4\", "
"\"11.5\", \"11.6\", \"11.7\",\n"
"                    \"12.0\", \"12.1\", \"12.2\", \"12.3\", \"12.4\", "
"\"12.5\", \"12.6\", \"12.7\",\n"
"                    \"13.0\", \"13.1\", \"13.2\", \"13.3\", \"13.4\", "
"\"13.5\", \"13.6\",\n"
"                    \"14.0\", \"14.1\", \"14.2\", \"14.3\", \"14.4\", "
"\"14.5\", \"14.6\",\n"
"                    \"15.0\", \"15.1\"]\n"
"        sdk_version: [null, \"10.13\", \"10.14\", \"10.15\", \"11.0\", "
"\"11.1\", \"11.3\", \"12.0\", \"12.1\",\n"
"                        \"12.3\", \"13.0\", \"13.1\", \"13.3\", \"14.0\", "
"\"14.2\", \"14.4\", \"14.5\",\n"
"                        \"15.0\", \"15.1\"]\n"
"        subsystem:\n"
"            null:\n"
"            catalyst:\n"
"                ios_version: *ios_version\n"
"    Android:\n"
"        api_level: [ANY]\n"
"        ndk_version: [null, ANY]\n"
"    FreeBSD:\n"
"    SunOS:\n"
"    AIX:\n"
"    Arduino:\n"
"        board: [ANY]\n"
"    Emscripten:\n"
"    Neutrino:\n"
"        version: [\"6.4\", \"6.5\", \"6.6\", \"7.0\", \"7.1\"]\n"
"    baremetal:\n"
"    VxWorks:\n"
"        version: [\"7\"]\n"
"arch: [x86, x86_64, ppc32be, ppc32, ppc64le, ppc64,\n"
"       armv4, armv4i, armv5el, armv5hf, armv6, armv7, armv7hf, armv7s, "
"armv7k, armv8, armv8_32, armv8.3, arm64ec,\n"
"       sparc, sparcv9,\n"
"       mips, mips64, avr, s390, s390x, asm.js, wasm, sh4le,\n"
"       e2k-v2, e2k-v3, e2k-v4, e2k-v5, e2k-v6, e2k-v7,\n"
"       riscv64, riscv32,\n"
"       xtensalx6, xtensalx106, xtensalx7,\n"
"       tc131, tc16, tc161, tc162, tc18]\n"
"compiler:\n"
"    sun-cc:\n"
"        version: [\"5.10\", \"5.11\", \"5.12\", \"5.13\", \"5.14\", "
"\"5.15\"]\n"
"        threads: [null, posix]\n"
"        libcxx: [libCstd, libstdcxx, libstlport, libstdc++]\n"
"    gcc:\n"
"        version: [\"4.1\", \"4.4\", \"4.5\", \"4.6\", \"4.7\", \"4.8\", "
"\"4.9\",\n"
"                    \"5\", \"5.1\", \"5.2\", \"5.3\", \"5.4\", \"5.5\",\n"
"                    \"6\", \"6.1\", \"6.2\", \"6.3\", \"6.4\", \"6.5\",\n"
"                    \"7\", \"7.1\", \"7.2\", \"7.3\", \"7.4\", \"7.5\",\n"
"                    \"8\", \"8.1\", \"8.2\", \"8.3\", \"8.4\", \"8.5\",\n"
"                    \"9\", \"9.1\", \"9.2\", \"9.3\", \"9.4\", \"9.5\",\n"
"                    \"10\", \"10.1\", \"10.2\", \"10.3\", \"10.4\", "
"\"10.5\",\n"
"                    \"11\", \"11.1\", \"11.2\", \"11.3\", \"11.4\",\n"
"                    \"12\", \"12.1\", \"12.2\", \"12.3\",  \"12.4\",\n"
"                    \"13\", \"13.1\", \"13.2\", \"13.3\",\n"
"                    \"14\", \"14.1\", \"14.2\"]\n"
"        libcxx: [libstdc++, libstdc++11]\n"
"        threads: [null, posix, win32]  # Windows MinGW\n"
"        exception: [null, dwarf2, sjlj, seh]  # Windows MinGW\n"
"        cppstd: [null, 98, gnu98, 11, gnu11, 14, gnu14, 17, gnu17, 20, "
"gnu20, 23, gnu23]\n"
"        cstd: [null, 99, gnu99, 11, gnu11, 17, gnu17, 23, gnu23]\n"
"    msvc:\n"
"        version: [170, 180, 190, 191, 192, 193, 194]\n"
"        update: [null, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
"        runtime: [static, dynamic]\n"
"        runtime_type: [Debug, Release]\n"
"        cppstd: [null, 14, 17, 20, 23]\n"
"        toolset: [null, v110_xp, v120_xp, v140_xp, v141_xp]\n"
"        cstd: [null, 11, 17]\n"
"    clang:\n"
"        version: [\"3.3\", \"3.4\", \"3.5\", \"3.6\", \"3.7\", \"3.8\", "
"\"3.9\", \"4.0\",\n"
"                  \"5.0\", \"6.0\", \"7.0\", \"7.1\",\n"
"                  \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", "
"\"15\", \"16\", \"17\", \"18\", \"19\"]\n"
"        libcxx: [null, libstdc++, libstdc++11, libc++, c++_shared, c+"
"+_static]\n"
"        cppstd: [null, 98, gnu98, 11, gnu11, 14, gnu14, 17, gnu17, 20, "
"gnu20, 23, gnu23]\n"
"        runtime: [null, static, dynamic]\n"
"        runtime_type: [null, Debug, Release]\n"
"        runtime_version: [null, v140, v141, v142, v143, v144]\n"
"        cstd: [null, 99, gnu99, 11, gnu11, 17, gnu17, 23, gnu23]\n"
"    apple-clang:\n"
"        version: [\"5.0\", \"5.1\", \"6.0\", \"6.1\", \"7.0\", \"7.3\", "
"\"8.0\", \"8.1\", \"9.0\", \"9.1\",\n"
"                  \"10.0\", \"11.0\", \"12.0\", \"13\", \"13.0\", \"13.1\", "
"\"14\", \"14.0\", \"15\", \"15.0\", \"16\", \"16.0\"]\n"
"        libcxx: [libstdc++, libc++]\n"
"        cppstd: [null, 98, gnu98, 11, gnu11, 14, gnu14, 17, gnu17, 20, "
"gnu20, 23, gnu23]\n"
"        cstd: [null, 99, gnu99, 11, gnu11, 17, gnu17, 23, gnu23]\n"
"    intel-cc:\n"
"        version: [\"2021.1\", \"2021.2\", \"2021.3\", \"2021.4\", "
"\"2022.1\", \"2022.2\",\n"
"                  \"2022.3\", \"2023.0\", \"2023.1\", \"2023.2\", "
"\"2024.0\",]\n"
"        update: [null, ANY]\n"
"        mode: [\"icx\", \"classic\", \"dpcpp\"]\n"
"        libcxx: [null, libstdc++, libstdc++11, libc++]\n"
"        cppstd: [null, 98, gnu98, \"03\", gnu03, 11, gnu11, 14, gnu14, 17, "
"gnu17, 20, gnu20, 23, gnu23]\n"
"        runtime: [null, static, dynamic]\n"
"        runtime_type: [null, Debug, Release]\n"
"    qcc:\n"
"        version: [\"4.4\", \"5.4\", \"8.3\"]\n"
"        libcxx: [cxx, gpp, cpp, cpp-ne, accp, acpp-ne, ecpp, ecpp-ne]\n"
"        cppstd: [null, 98, gnu98, 11, gnu11, 14, gnu14, 17, gnu17]\n"
"    mcst-lcc:\n"
"        version: [\"1.19\", \"1.20\", \"1.21\", \"1.22\", \"1.23\", "
"\"1.24\", \"1.25\"]\n"
"        libcxx: [libstdc++, libstdc++11]\n"
"        cppstd: [null, 98, gnu98, 11, gnu11, 14, gnu14, 17, gnu17, 20, "
"gnu20, 23, gnu23]\n"
"\n"
"build_type: [null, Debug, Release, RelWithDebInfo, MinSizeRel]"
msgstr ""

#: ../../../reference/config_files/settings.rst:164
msgid ""
"As you can see, the possible values of ``settings`` are defined in the same "
"file. This is done to ensure matching naming and spelling as well as "
"defining a common settings model among users and the OSS community. Some "
"general information about settings:"
msgstr ""

#: ../../../reference/config_files/settings.rst:167
msgid "If a setting is allowed to be set to any value, you can use ``ANY``."
msgstr ""

#: ../../../reference/config_files/settings.rst:168
msgid ""
"If a setting is allowed to be set to any value or it can also be unset, you "
"can use ``[null, ANY]``."
msgstr ""

#: ../../../reference/config_files/settings.rst:170
msgid ""
"However, this configuration file can be modified to any needs, including new "
"settings or sub-settings and their values. If you want to distribute an "
"unified *settings.yml* file you can use the :ref:`conan config install "
"command<reference_commands_conan_config_install>`."
msgstr ""

#: ../../../reference/config_files/settings.rst:175
msgid ":ref:`creating_packages_configure_options_settings`"
msgstr ""

#: ../../../reference/config_files/settings.rst:176
msgid ":ref:`conan_conanfile_properties_settings`"
msgstr ""

#: ../../../reference/config_files/settings.rst:180
msgid "Operating systems"
msgstr ""

#: ../../../reference/config_files/settings.rst:182
msgid ""
"``baremetal`` operating system is a convention meaning that the binaries run "
"directly on the hardware, without an operating system or equivalent layer. "
"This is to differentiate to the ``null`` value, which is associated to the "
"\"this value is not defined\" semantics. ``baremetal`` is a common name "
"convention for embedded microprocessors and microcontrollers' code. It is "
"expected that users might customize the space inside the ``baremetal`` "
"setting with further subsettings to specify their specific hardware "
"platforms, boards, families, etc. At the moment the ``os=baremetal`` value "
"is still not used by Conan builtin toolchains and helpers, but it is "
"expected that they can evolve and start using it."
msgstr ""

#: ../../../reference/config_files/settings.rst:192
msgid "Compilers"
msgstr ""

#: ../../../reference/config_files/settings.rst:194
msgid "Some notes about different compilers:"
msgstr ""

#: ../../../reference/config_files/settings.rst:197
msgid "msvc"
msgstr ""

#: ../../../reference/config_files/settings.rst:199
msgid ""
"It uses the compiler version, that is 190 (19.0), 191 (19.1), etc, instead "
"of the Visual Studio IDE (15, 16, etc)."
msgstr ""

#: ../../../reference/config_files/settings.rst:200
msgid ""
"It is only used by the new build integrations in :ref:`conan_tools_cmake` "
"and :ref:`conan_tools_microsoft`, but not the previous ones."
msgstr ""

#: ../../../reference/config_files/settings.rst:203
msgid ""
"When using the ``msvc`` compiler, the Visual Studio toolset version (the "
"actual ``vcvars`` activation and ``MSBuild`` location) will be defined by "
"the default provided by that compiler version:"
msgstr ""

#: ../../../reference/config_files/settings.rst:206
msgid "``msvc`` compiler version '190': Visual Studio 14 2015"
msgstr ""

#: ../../../reference/config_files/settings.rst:207
msgid "``msvc`` compiler version '191': Visual Studio 15 2017"
msgstr ""

#: ../../../reference/config_files/settings.rst:208
msgid "``msvc`` compiler version '192': Visual Studio 16 2019"
msgstr ""

#: ../../../reference/config_files/settings.rst:209
msgid "``msvc`` compiler version '193': Visual Studio 17 2022"
msgstr ""

#: ../../../reference/config_files/settings.rst:211
msgid ""
"This can be configured in your profiles with the ``tools.microsoft.msbuild:"
"vs_version`` configuration:"
msgstr ""

#: ../../../reference/config_files/settings.rst:213
msgid ""
"[settings]\n"
"compiler=msvc\n"
"compiler.version=190\n"
"\n"
"[conf]\n"
"tools.microsoft.msbuild:vs_version = 16"
msgstr ""

#: ../../../reference/config_files/settings.rst:223
msgid ""
"In this case, the ``vcvars`` will activate the Visual Studio 16 "
"installation, but the ``190`` compiler version will still be used because "
"the necessary ``toolset=v140`` will be set."
msgstr ""

#: ../../../reference/config_files/settings.rst:226
msgid ""
"The settings define the last digit ``update: [null, 0, 1, 2, 3, 4, 5, 6, 7, "
"8, 9]``, which by default is ``null`` and means that Conan assumes binary "
"compatibility for the compiler patches, which works in general for the "
"Microsoft compilers. For cases where finer control is desired, you can just "
"add the ``update`` part to your profiles:"
msgstr ""

#: ../../../reference/config_files/settings.rst:230
msgid ""
"[settings]\n"
"compiler=msvc\n"
"compiler.version=191\n"
"compiler.update=3"
msgstr ""

#: ../../../reference/config_files/settings.rst:238
msgid ""
"This will be equivalent to the full version ``1913 (19.13)``. If even "
"further details are desired, you could even add your own digits to the "
"``update`` subsetting in ``settings.yml``."
msgstr ""

#: ../../../reference/config_files/settings.rst:243
msgid "intel-cc"
msgstr ""

#: ../../../common/experimental_warning.inc:3
msgid ""
"This feature is experimental and subject to breaking changes. See :ref:`the "
"Conan stability<stability>` section for more information."
msgstr ""

#: ../../../reference/config_files/settings.rst:247
msgid ""
"This compiler is aimed to handle the new Intel oneAPI DPC++/C++/Classic "
"compilers. Instead of having *n* different compilers, you have 3 different "
"**modes** of working:"
msgstr ""

#: ../../../reference/config_files/settings.rst:250
msgid "``icx`` for Intel oneAPI C++."
msgstr ""

#: ../../../reference/config_files/settings.rst:251
msgid "``dpcpp`` for Intel oneAPI DPC++."
msgstr ""

#: ../../../reference/config_files/settings.rst:252
msgid "``classic`` for Intel C++ Classic ones."
msgstr ""

#: ../../../reference/config_files/settings.rst:254
msgid ""
"Besides that, Intel releases some versions with revisions numbers so the "
"``update`` field is supposed to be any possible minor number for the Intel "
"compiler version used, e.g, ``compiler.version=2021.1`` and ``compiler."
"update=311`` mean Intel version is ``2021.1.311``."
msgstr ""

#: ../../../reference/config_files/settings.rst:260
msgid "Architectures"
msgstr ""

#: ../../../reference/config_files/settings.rst:262
msgid ""
"Here you can find a brief explanation of each of the architectures defined "
"as ``arch``, ``arch_build`` and ``arch_target`` settings."
msgstr ""

#: ../../../reference/config_files/settings.rst:264
msgid "**x86**: The popular 32 bit x86 architecture."
msgstr ""

#: ../../../reference/config_files/settings.rst:265
msgid "**x86_64**: The popular 64 bit x64 architecture."
msgstr ""

#: ../../../reference/config_files/settings.rst:266
msgid "**ppc64le**: The PowerPC 64 bit Big Endian architecture."
msgstr ""

#: ../../../reference/config_files/settings.rst:267
msgid "**ppc32**: The PowerPC 32 bit architecture."
msgstr ""

#: ../../../reference/config_files/settings.rst:268
msgid "**ppc64le**: The PowerPC 64 bit Little Endian architecture."
msgstr ""

#: ../../../reference/config_files/settings.rst:269
msgid "**ppc64**: The PowerPC 64 bit Big Endian architecture."
msgstr ""

#: ../../../reference/config_files/settings.rst:270
msgid "**armv5el**: The ARM 32 bit version 5 architecture, soft-float."
msgstr ""

#: ../../../reference/config_files/settings.rst:271
msgid "**armv5hf**: The ARM 32 bit version 5 architecture, hard-float."
msgstr ""

#: ../../../reference/config_files/settings.rst:272
msgid "**armv6**: The ARM 32 bit version 6 architecture."
msgstr ""

#: ../../../reference/config_files/settings.rst:273
msgid "**armv7**: The ARM 32 bit version 7 architecture."
msgstr ""

#: ../../../reference/config_files/settings.rst:274
msgid "**armv7hf**: The ARM 32 bit version 7 hard-float architecture."
msgstr ""

#: ../../../reference/config_files/settings.rst:275
msgid ""
"**armv7s**: The ARM 32 bit version 7 *swift* architecture mostly used in "
"Apple's A6 and A6X chips on iPhone 5, iPhone 5C and iPad 4."
msgstr ""

#: ../../../reference/config_files/settings.rst:276
msgid ""
"**armv7k**: The ARM 32 bit version 7 *k* architecture mostly used in Apple's "
"WatchOS."
msgstr ""

#: ../../../reference/config_files/settings.rst:277
msgid ""
"**armv8**: The ARM 64 bit and 32 bit compatible version 8 architecture. It "
"covers only the ``aarch64`` instruction set."
msgstr ""

#: ../../../reference/config_files/settings.rst:278
msgid ""
"**armv8_32**: The ARM 32 bit version 8 architecture. It covers only the "
"``aarch32`` instruction set (a.k.a. ``ILP32``)."
msgstr ""

#: ../../../reference/config_files/settings.rst:279
msgid ""
"**armv8.3**: The ARM 64 bit and 32 bit compatible version 8.3 architecture. "
"Also known as ``arm64e``, it is used on the A12 chipset added in the latest "
"iPhone models (XS/XS Max/XR)."
msgstr ""

#: ../../../reference/config_files/settings.rst:281
msgid ""
"**arm64e**: Windows 11 ARM64 (Emulation Compatible). This architecture "
"support is **experimental** and incomplete. The only usage is to define "
"CMAKE_GENERATOR_PLATFORM in CMake VS generators. Report new issues in Github "
"if necessary."
msgstr ""

#: ../../../reference/config_files/settings.rst:282
msgid ""
"**sparc**: The SPARC (Scalable Processor Architecture) originally developed "
"by Sun Microsystems."
msgstr ""

#: ../../../reference/config_files/settings.rst:283
msgid "**sparcv9**: The SPARC version 9 architecture."
msgstr ""

#: ../../../reference/config_files/settings.rst:284
msgid ""
"**mips**: The 32 bit MIPS (Microprocessor without Interlocked Pipelined "
"Stages) developed by MIPS Technologies (formerly MIPS Computer Systems)."
msgstr ""

#: ../../../reference/config_files/settings.rst:286
msgid ""
"**mips64**: The 64 bit MIPS (Microprocessor without Interlocked Pipelined "
"Stages) developed by MIPS Technologies (formerly MIPS Computer Systems)."
msgstr ""

#: ../../../reference/config_files/settings.rst:288
msgid ""
"**avr**: The 8 bit AVR microcontroller architecture developed by Atmel "
"(Microchip Technology)."
msgstr ""

#: ../../../reference/config_files/settings.rst:289
msgid ""
"**s390**: The 32 bit address Enterprise Systems Architecture 390 from IBM."
msgstr ""

#: ../../../reference/config_files/settings.rst:290
msgid ""
"**s390x**: The 64 bit address Enterprise Systems Architecture 390 from IBM."
msgstr ""

#: ../../../reference/config_files/settings.rst:291
msgid ""
"**asm.js**: The subset of JavaScript that can be used as low-level target "
"for compilers, not really a processor architecture, it's produced by "
"Emscripten. Conan treats it as an architecture to align with build systems "
"design (e.g. GNU auto tools and CMake)."
msgstr ""

#: ../../../reference/config_files/settings.rst:293
msgid ""
"**wasm**: The Web Assembly, not really a processor architecture, but byte-"
"code format for Web, it's produced by Emscripten. Conan treats it as an "
"architecture to align with build systems design (e.g. GNU auto tools and "
"CMake)."
msgstr ""

#: ../../../reference/config_files/settings.rst:295
msgid "**sh4le**: The Hitachi SH-4 SuperH architecture."
msgstr ""

#: ../../../reference/config_files/settings.rst:296
msgid ""
"**e2k-v2**: The Elbrus 2000 v2 512 bit VLIW (Very Long Instruction Word) "
"architecture (Elbrus 2CM, Elbrus 2C+ CPUs) originally developed by MCST "
"(Moscow Center of SPARC Technologies)."
msgstr ""

#: ../../../reference/config_files/settings.rst:297
msgid ""
"**e2k-v3**: The Elbrus 2000 v3 512 bit VLIW (Very Long Instruction Word) "
"architecture (Elbrus 2S, aka Elbrus 4C, CPU) originally developed by MCST "
"(Moscow Center of SPARC Technologies)."
msgstr ""

#: ../../../reference/config_files/settings.rst:298
msgid ""
"**e2k-v4**: The Elbrus 2000 v4 512 bit VLIW (Very Long Instruction Word) "
"architecture (Elbrus 8C, Elbrus 8C1, Elbrus 1C+ and Elbrus 1CK CPUs) "
"originally developed by MCST (Moscow Center of SPARC Technologies)."
msgstr ""

#: ../../../reference/config_files/settings.rst:299
msgid ""
"**e2k-v5**: The Elbrus 2000 v5 512 bit VLIW (Very Long Instruction Word) "
"architecture (Elbrus 8C2 ,aka Elbrus 8CB, CPU) originally developed by MCST "
"(Moscow Center of SPARC Technologies)."
msgstr ""

#: ../../../reference/config_files/settings.rst:300
msgid ""
"**e2k-v6**: The Elbrus 2000 v6 512 bit VLIW (Very Long Instruction Word) "
"architecture (Elbrus 2C3, Elbrus 12C and Elbrus 16C CPUs) originally "
"developed by MCST (Moscow Center of SPARC Technologies)."
msgstr ""

#: ../../../reference/config_files/settings.rst:301
msgid ""
"**e2k-v7**: The Elbrus 2000 v7 512 bit VLIW (Very Long Instruction Word) "
"architecture (Elbrus 32C CPU) originally developed by MCST (Moscow Center of "
"SPARC Technologies)."
msgstr ""

#: ../../../reference/config_files/settings.rst:302
msgid "**xtensalx6**: Xtensa LX6 DPU for ESP32 microcontroller."
msgstr ""

#: ../../../reference/config_files/settings.rst:303
msgid "**xtensalx106**: Xtensa LX6 DPU for ESP8266 microcontroller."
msgstr ""

#: ../../../reference/config_files/settings.rst:304
msgid ""
"**xtensalx7**: Xtensa LX7 DPU for ESP32-S2 and ESP32-S3 microcontrollers."
msgstr ""

#: ../../../reference/config_files/settings.rst:308
msgid "C++ standard libraries (aka compiler.libcxx)"
msgstr ""

#: ../../../reference/config_files/settings.rst:310
msgid ""
"``compiler.libcxx`` sub-setting defines C++ standard libraries "
"implementation to be used. The sub-setting applies only to certain "
"compilers, e.g. it applies to *clang*, *apple-clang* and *gcc*, but doesn't "
"apply to *Visual Studio*."
msgstr ""

#: ../../../reference/config_files/settings.rst:313
msgid ""
"**libstdc++** (gcc, clang, apple-clang, sun-cc): `The GNU C++ Library "
"<https://gcc.gnu.org/onlinedocs/libstdc++/>`__. NOTE that this implicitly "
"defines **_GLIBCXX_USE_CXX11_ABI=0** to use old ABI. Might be a wise choice "
"for old systems, such as CentOS 6. On Linux systems, you may need to install "
"`libstdc++-dev <https://packages.debian.org/sid/libstdc++-dev>`_ (package "
"name could be different in various distros) in order to use the standard "
"library. NOTE that on Apple systems usage of **libstdc++** has been "
"deprecated."
msgstr ""

#: ../../../reference/config_files/settings.rst:318
msgid ""
"**libstdc++11** (gcc, clang, apple-clang): `The GNU C++ Library <https://gcc."
"gnu.org/onlinedocs/libstdc++/>`__. NOTE that this implicitly defines "
"**_GLIBCXX_USE_CXX11_ABI=1** to use new ABI. Might be a wise choice for "
"newer systems, such as Ubuntu 20. On Linux systems, you may need to install "
"`libstdc++-dev <https://packages.debian.org/sid/libstdc++-dev>`_ (package "
"name could be different in various distros) in order to use the standard "
"library. NOTE that on Apple systems usage of **libstdc++** has been "
"deprecated."
msgstr ""

#: ../../../reference/config_files/settings.rst:323
msgid ""
"**libc++** (clang, apple-clang): `LLVM libc++ <https://libcxx.llvm.org/>`__. "
"On Linux systems, you may need to install `libc++-dev <https://packages."
"debian.org/sid/libc++-dev>`_ (package name could be different in various "
"distros) in order to use the standard library."
msgstr ""

#: ../../../reference/config_files/settings.rst:326
msgid ""
"**c++_shared** (clang, Android only): use `LLVM libc++ <https://libcxx.llvm."
"org/>`__ as a shared library. Refer to the `C++ Library Support <https://"
"developer.android.com/ndk/guides/cpp-support>`__ for the additional details."
msgstr ""

#: ../../../reference/config_files/settings.rst:329
msgid ""
"**c++_static** (clang, Android only): use `LLVM libc++ <https://libcxx.llvm."
"org/>`__ as a static library. Refer to the `C++ Library Support <https://"
"developer.android.com/ndk/guides/cpp-support>`__ for the additional details."
msgstr ""

#: ../../../reference/config_files/settings.rst:332
msgid ""
"**libCstd** (sun-cc): Rogue Wave's stdlib. See `Comparing C++ Standard "
"Libraries libCstd, libstlport, and libstdcxx <https://www.oracle.com/solaris/"
"technologies/cmp-stlport-libcstd.html>`__."
msgstr ""

#: ../../../reference/config_files/settings.rst:334
msgid ""
"**libstlport** (sun-cc): `STLport <http://www.stlport.org/>`__. See "
"`Comparing C++ Standard Libraries libCstd, libstlport, and libstdcxx "
"<https://www.oracle.com/solaris/technologies/cmp-stlport-libcstd.html>`__."
msgstr ""

#: ../../../reference/config_files/settings.rst:336
msgid ""
"**libstdcxx** (sun-cc): `Apache C++ Standard Library <http://people.apache."
"org/~gmcdonald/stdcxx/index.html>`__. See `Comparing C++ Standard Libraries "
"libCstd, libstlport, and libstdcxx <https://www.oracle.com/solaris/"
"technologies/cmp-stlport-libcstd.html>`__."
msgstr ""

#: ../../../reference/config_files/settings.rst:338
msgid ""
"**gpp** (qcc): GNU C++ lib. See `QCC documentation <https://www.qnx.com/"
"developers/docs/6.5.0SP1.update/com.qnx.doc.neutrino_utilities/q/qcc."
"html>`__."
msgstr ""

#: ../../../reference/config_files/settings.rst:340
msgid ""
"**cpp** (qcc): Dinkum C++ lib. See `QCC documentation <https://www.qnx.com/"
"developers/docs/6.5.0SP1.update/com.qnx.doc.neutrino_utilities/q/qcc."
"html>`__."
msgstr ""

#: ../../../reference/config_files/settings.rst:342
msgid ""
"**cpp-ne** (qcc): Dinkum C++ lib (no exceptions). See `QCC documentation "
"<https://www.qnx.com/developers/docs/6.5.0SP1.update/com.qnx.doc."
"neutrino_utilities/q/qcc.html>`__."
msgstr ""

#: ../../../reference/config_files/settings.rst:344
msgid ""
"**acpp** (qcc): Dinkum Abridged C++ lib. See `QCC documentation <https://www."
"qnx.com/developers/docs/6.5.0SP1.update/com.qnx.doc.neutrino_utilities/q/qcc."
"html>`__."
msgstr ""

#: ../../../reference/config_files/settings.rst:346
msgid ""
"**acpp-ne** (qcc): Dinkum Abridged C++ lib (no exceptions). See `QCC "
"documentation <https://www.qnx.com/developers/docs/6.5.0SP1.update/com.qnx."
"doc.neutrino_utilities/q/qcc.html>`__."
msgstr ""

#: ../../../reference/config_files/settings.rst:348
msgid ""
"**ecpp** (qcc): Embedded Dinkum C++ lib. See `QCC documentation <https://www."
"qnx.com/developers/docs/6.5.0SP1.update/com.qnx.doc.neutrino_utilities/q/qcc."
"html>`__."
msgstr ""

#: ../../../reference/config_files/settings.rst:350
msgid ""
"**ecpp-ne** (qcc): Embedded Dinkum C++ lib (no exceptions). See `QCC "
"documentation <https://www.qnx.com/developers/docs/6.5.0SP1.update/com.qnx."
"doc.neutrino_utilities/q/qcc.html>`__."
msgstr ""

#: ../../../reference/config_files/settings.rst:352
msgid ""
"**cxx** (qcc): LLVM C++. See `QCC documentation <https://www.qnx.com/"
"developers/docs/6.5.0SP1.update/com.qnx.doc.neutrino_utilities/q/qcc."
"html>`__."
msgstr ""

#: ../../../reference/config_files/settings.rst:358
msgid "Customizing settings"
msgstr ""

#: ../../../reference/config_files/settings.rst:360
msgid "Settings are also customizable to add your own ones:"
msgstr ""

#: ../../../reference/config_files/settings.rst:364
msgid "Adding new settings"
msgstr ""

#: ../../../reference/config_files/settings.rst:366
msgid ""
"It is possible to add new settings at the root of the *settings.yml* file, "
"something like:"
msgstr ""

#: ../../../reference/config_files/settings.rst:368
msgid ""
"os:\n"
"    Windows:\n"
"        subsystem: [null, cygwin, msys, msys2, wsl]\n"
"distro: [null, RHEL6, CentOS, Debian]"
msgstr ""

#: ../../../reference/config_files/settings.rst:376
msgid ""
"If we want to create different binaries from our recipes defining this new "
"setting, we would need to add to our recipes that:"
msgstr ""

#: ../../../reference/config_files/settings.rst:379
msgid ""
"class Pkg(ConanFile):\n"
"    settings = \"os\", \"compiler\", \"build_type\", \"arch\", \"distro\""
msgstr ""

#: ../../../reference/config_files/settings.rst:385
msgid ""
"The value ``null`` allows for not defining it (which would be a default "
"value, valid for all the other distros). It is also possible to define "
"values for it in the profiles:"
msgstr ""

#: ../../../reference/config_files/settings.rst:388
msgid ""
"[settings]\n"
"os = \"Linux\"\n"
"distro = \"CentOS\"\n"
"compiler = \"gcc\""
msgstr ""

#: ../../../reference/config_files/settings.rst:395
msgid "And use their values to affect our build if desired:"
msgstr ""

#: ../../../reference/config_files/settings.rst:397
msgid ""
"class Pkg(ConanFile):\n"
"    settings = \"os\", \"compiler\", \"build_type\", \"arch\", \"distro\"\n"
"\n"
"    def generate(self):\n"
"        tc = CMakeToolchain(self)\n"
"        if self.settings.distro == \"CentOS\":\n"
"            tc.cache_variables[\"SOME_CENTOS_FLAG\"] = \"Some CentOS "
"Value\"\n"
"            ..."
msgstr ""

#: ../../../reference/config_files/settings.rst:410
msgid "Adding new sub-settings"
msgstr ""

#: ../../../reference/config_files/settings.rst:412
msgid ""
"The above approach requires modification to all recipes to take it into "
"account. It is also possible to define kind of incompatible settings, like "
"``os=Windows`` and ``distro=CentOS``. While adding new settings is totally "
"suitable, it might make more sense to add it as a new sub-setting of the "
"``Linux`` OS:"
msgstr ""

#: ../../../reference/config_files/settings.rst:416
msgid ""
"os:\n"
"    Windows:\n"
"        subsystem: [null, cygwin, msys, msys2, wsl]\n"
"    Linux:\n"
"        distro: [null, RHEL6, CentOS, Debian]"
msgstr ""

#: ../../../reference/config_files/settings.rst:424
msgid "With this definition we could define our profiles as:"
msgstr ""

#: ../../../reference/config_files/settings.rst:426
msgid ""
"[settings]\n"
"os = \"Linux\"\n"
"os.distro = \"CentOS\"\n"
"compiler = \"gcc\""
msgstr ""

#: ../../../reference/config_files/settings.rst:434
msgid ""
"And any attempt to define ``os.distro`` for another ``os`` value rather than "
"``Linux`` will raise an error."
msgstr ""

#: ../../../reference/config_files/settings.rst:436
msgid ""
"As this is a sub-setting, it will be automatically taken into account in all "
"recipes that declare an ``os`` setting. Note that having a value of "
"``distro=null`` possible is important if you want to keep previously created "
"binaries, otherwise you would be forcing to always define a specific distro "
"value, and binaries created without this sub-setting, won't be usable "
"anymore."
msgstr ""

#: ../../../reference/config_files/settings.rst:441
msgid "The sub-setting can also be accessed from recipes:"
msgstr ""

#: ../../../reference/config_files/settings.rst:443
msgid ""
"class Pkg(ConanFile):\n"
"    settings = \"os\", \"compiler\", \"build_type\", \"arch\"  # Note, no "
"\"distro\" defined here\n"
"\n"
"    def generate(self):\n"
"        tc = CMakeToolchain(self)\n"
"        if self.settings.os == \"Linux\" and self.settings.os.distro == "
"\"CentOS\":\n"
"            tc.cache_variables[\"SOME_CENTOS_FLAG\"] = \"Some CentOS Value\""
msgstr ""

#: ../../../reference/config_files/settings.rst:454
msgid ""
"It is possible to have ``ANY`` to define nested subsettings, being the "
"``ANY`` the fallback for any value not matching the defined ones:"
msgstr ""

#: ../../../reference/config_files/settings.rst:456
msgid ""
"os:\n"
"    ANY:\n"
"        version: [null, ANY]\n"
"    Ubuntu:\n"
"        version: [\"18.04\", \"20.04\"]"
msgstr ""

#: ../../../reference/config_files/settings.rst:464
msgid ""
"This will allow settings like ``-s os=MyOS -s os.version=1.2.3``, because "
"the version can be ``ANY`` for ``os!=Ubuntu``, but if we try ``-s os=Ubuntu -"
"s os.version=1.2.3`` it will error because ``Ubuntu`` only accept those "
"defined versions."
msgstr ""

#: ../../../reference/config_files/settings.rst:469
msgid "Add new values"
msgstr ""

#: ../../../reference/config_files/settings.rst:471
msgid ""
"In the same way we have added a new ``distro`` sub-setting, it is possible "
"to add new values to existing settings and sub-settings. For example, if "
"some compiler version is not present in the range of accepted values, you "
"can add those new values."
msgstr ""

#: ../../../reference/config_files/settings.rst:474
msgid "You can also add a completely new compiler:"
msgstr ""

#: ../../../reference/config_files/settings.rst:476
msgid ""
"os:\n"
"    Windows:\n"
"        subsystem: [null, cygwin, msys, msys2, wsl]\n"
"   ...\n"
"compiler:\n"
"    gcc:\n"
"        ...\n"
"    mycompiler:\n"
"        version: [1.1, 1.2]\n"
"    msvc:"
msgstr ""

#: ../../../reference/config_files/settings.rst:490
msgid ""
"This works as the above regarding profiles, and the way they can be accessed "
"from recipes. The main issue with custom compilers is that the builtin build "
"helpers, like ``CMake``, ``MSBuild``, etc, internally contains code that "
"will check for those values. For example, the ``MSBuild`` build helper will "
"only know how to manage the ``msvc`` setting and sub-settings, but not the "
"new compiler. For those cases, custom logic can be implemented in the "
"recipes:"
msgstr ""

#: ../../../reference/config_files/settings.rst:495
msgid ""
"class Pkg(ConanFile):\n"
"    settings = \"os\", \"compiler\", \"build_type\", \"arch\"\n"
"\n"
"    def build(self):\n"
"        if self.settings.compiler == \"mycompiler\":\n"
"            my_custom_compile = [\"some\", \"--flags\", \"for\", \"--"
"my=compiler\"]\n"
"            self.run([\"mycompiler\", \".\"] + my_custom_compile)"
msgstr ""

#: ../../../reference/config_files/settings.rst:508
msgid ""
"You can remove items from *settings.yml* file: compilers, OS, architectures, "
"etc. Do that only in the case you really want to protect against creation of "
"binaries for other platforms other than your main supported ones. In the "
"general case, you can leave them, the binary configurations are managed in "
"**profiles**, and you want to define your supported configurations in "
"profiles, not by restricting the *settings.yml*"
msgstr ""

#: ../../../reference/config_files/settings.rst:516
msgid ""
"If you customize your *settings.yml*, you can share, distribute and sync "
"this configuration with your team and CI machines with the :ref:"
"`reference_commands_conan_config_install` command."
msgstr ""

#: ../../../reference/config_files/settings.rst:523
msgid "settings_user.yml"
msgstr ""

#: ../../../reference/config_files/settings.rst:525
msgid ""
"The previous section explains how to customize the Conan *settings.yml*, but "
"you could also create your *settings_user.yml*. This file will contain only "
"the new fields-values that you want to use in your recipes, so the final "
"result will be a composition of both files, the *settings.yml* and the "
"*settings_user.yml*."
msgstr ""

#: ../../../reference/config_files/settings.rst:532
msgid ":ref:`examples_config_files_settings_user`"
msgstr ""
