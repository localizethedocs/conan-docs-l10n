# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:31+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../tutorial/creating_packages/build_packages.rst:4
msgid "Build packages: the build() method"
msgstr ""

#: ../../../tutorial/creating_packages/build_packages.rst:6
msgid ""
"We already used a Conan recipe that has a :ref:`build() "
"method<reference_conanfile_methods_build>` and learned how to use that to "
"invoke a build system and build our packages. In this tutorial, we will "
"modify that method and explain how you can use it to do things like:"
msgstr ""

#: ../../../tutorial/creating_packages/build_packages.rst:10
msgid "Building and running tests"
msgstr ""

#: ../../../tutorial/creating_packages/build_packages.rst:11
msgid "Conditional patching of the source code"
msgstr ""

#: ../../../tutorial/creating_packages/build_packages.rst:12
msgid "Select the build system you want to use conditionally"
msgstr ""

#: ../../../tutorial/creating_packages/build_packages.rst:14
msgid ""
"Please, first clone the sources to recreate this project. You can find them "
"in the `examples2 repository <https://github.com/conan-io/examples2>`_ on "
"GitHub:"
msgstr ""

#: ../../../tutorial/creating_packages/build_packages.rst:17
msgid ""
"$ git clone https://github.com/conan-io/examples2.git\n"
"$ cd examples2/tutorial/creating_packages/build_method"
msgstr ""

#: ../../../tutorial/creating_packages/build_packages.rst:24
msgid "Build and run tests for your project"
msgstr ""

#: ../../../tutorial/creating_packages/build_packages.rst:26
msgid ""
"You will notice some changes in the **conanfile.py** file from the previous "
"recipe. Let's check the relevant parts:"
msgstr ""

#: ../../../tutorial/creating_packages/build_packages.rst:30
msgid "Changes introduced in the recipe"
msgstr ""

#: ../../../tutorial/creating_packages/build_packages.rst:32
msgid "*conanfile.py*"
msgstr ""

#: ../../../tutorial/creating_packages/build_packages.rst:32
msgid ""
"class helloRecipe(ConanFile):\n"
"    name = \"hello\"\n"
"    version = \"1.0\"\n"
"\n"
"    ...\n"
"\n"
"    def source(self):\n"
"        git = Git(self)\n"
"        git.clone(url=\"https://github.com/conan-io/libhello.git\", "
"target=\".\")\n"
"        # Please, be aware that using the head of the branch instead of an "
"immutable tag\n"
"        # or commit is not a good practice in general\n"
"        git.checkout(\"with_tests\")\n"
"\n"
"    ...\n"
"\n"
"    def requirements(self):\n"
"        if self.options.with_fmt:\n"
"            self.requires(\"fmt/8.1.1\")\n"
"        self.test_requires(\"gtest/1.11.0\")\n"
"\n"
"    ...\n"
"\n"
"    def generate(self):\n"
"        tc = CMakeToolchain(self)\n"
"        if self.options.with_fmt:\n"
"            tc.variables[\"WITH_FMT\"] = True\n"
"        tc.generate()\n"
"\n"
"    def build(self):\n"
"        cmake = CMake(self)\n"
"        cmake.configure()\n"
"        cmake.build()\n"
"        if not self.conf.get(\"tools.build:skip_test\", default=False):\n"
"            test_folder = os.path.join(\"tests\")\n"
"            if self.settings.os == \"Windows\":\n"
"                test_folder = os.path.join(\"tests\", str(self.settings."
"build_type))\n"
"            self.run(os.path.join(test_folder, \"test_hello\"))\n"
"\n"
"    ..."
msgstr ""

#: ../../../tutorial/creating_packages/build_packages.rst:76
msgid ""
"We added the *gtest/1.11.0* requirement to the recipe as a "
"``test_requires()``. It's a type of requirement intended for testing "
"libraries like **Catch2** or **gtest**."
msgstr ""

#: ../../../tutorial/creating_packages/build_packages.rst:79
msgid ""
"We use the ``tools.build:skip_test`` configuration (``False`` by default), "
"to tell CMake whether to build and run the tests or not. A couple of things "
"to bear in mind:"
msgstr ""

#: ../../../tutorial/creating_packages/build_packages.rst:82
msgid ""
"If we set the ``tools.build:skip_test`` configuration to ``True`` Conan will "
"automatically inject the ``BUILD_TESTING`` variable to CMake set to ``OFF``. "
"You will see in the next section that we are using this variable in our "
"*CMakeLists.txt* to decide whether to build the tests or not."
msgstr ""

#: ../../../tutorial/creating_packages/build_packages.rst:87
msgid ""
"We use the ``tools.build:skip_test`` configuration in the ``build()`` "
"method, after building the package and tests, to decide if we want to run "
"the tests or not."
msgstr ""

#: ../../../tutorial/creating_packages/build_packages.rst:90
msgid ""
"In this case we are using **gtest** for testing and we have to check if the "
"build method is to run the tests or not. This configuration also affects the "
"execution of ``CMake.test()`` if you are using CTest and ``Meson.test()`` "
"for Meson."
msgstr ""

#: ../../../tutorial/creating_packages/build_packages.rst:96
msgid "Changes introduced in the library sources"
msgstr ""

#: ../../../tutorial/creating_packages/build_packages.rst:98
msgid ""
"First, please note that we are using `another branch <https://github.com/"
"conan-io/libhello/tree/with_tests>`_ from the **libhello** library. This "
"branch has two novelties on the library side:"
msgstr ""

#: ../../../tutorial/creating_packages/build_packages.rst:102
msgid ""
"We added a new function called ``compose_message()`` to the `library sources "
"<https://github.com/conan-io/libhello/blob/with_tests/src/hello.cpp#L9-"
"L12>`_ so we can add some unit tests over this function. This function is "
"just creating an output message based on the arguments passed."
msgstr ""

#: ../../../tutorial/creating_packages/build_packages.rst:107
msgid ""
"As we mentioned in the previous section the `CMakeLists.txt for the library "
"<https://github.com/conan-io/libhello/blob/with_tests/CMakeLists.txt#L15-"
"L17>`_ uses the ``BUILD_TESTING`` CMake variable that conditionally adds the "
"*tests* directory."
msgstr ""

#: ../../../tutorial/creating_packages/build_packages.rst:111
msgid "*CMakeLists.txt*"
msgstr ""

#: ../../../tutorial/creating_packages/build_packages.rst:111
msgid ""
"cmake_minimum_required(VERSION 3.15)\n"
"project(hello CXX)\n"
"\n"
"...\n"
"\n"
"if (NOT BUILD_TESTING STREQUAL OFF)\n"
"    add_subdirectory(tests)\n"
"endif()\n"
"\n"
"..."
msgstr ""

#: ../../../tutorial/creating_packages/build_packages.rst:125
msgid ""
"The ``BUILD_TESTING`` `CMake variable <https://cmake.org/cmake/help/latest/"
"module/CTest.html>`_ is declared and set to ``OFF`` by Conan (if not already "
"defined) whenever the ``tools.build:skip_test`` configuration is set to "
"value ``True``. This variable is typically declared by CMake when you use "
"CTest but using the ``tools.build:skip_test`` configuration you can use it "
"in your *CMakeLists.txt* even if you are using another testing framework."
msgstr ""

#: ../../../tutorial/creating_packages/build_packages.rst:132
msgid ""
"We have a `CMakeLists.txt <https://github.com/conan-io/libhello/blob/"
"with_tests/tests/CMakeLists.txt>`_ in the *tests* folder using `googletest "
"<https://github.com/google/googletest>`_ for testing."
msgstr ""

#: ../../../tutorial/creating_packages/build_packages.rst:137
msgid "*tests/CMakeLists.txt*"
msgstr ""

#: ../../../tutorial/creating_packages/build_packages.rst:137
msgid ""
"cmake_minimum_required(VERSION 3.15)\n"
"project(PackageTest CXX)\n"
"\n"
"find_package(GTest REQUIRED CONFIG)\n"
"\n"
"add_executable(test_hello test.cpp)\n"
"target_link_libraries(test_hello GTest::gtest GTest::gtest_main hello)"
msgstr ""

#: ../../../tutorial/creating_packages/build_packages.rst:149
msgid ""
"With basic tests on the functionality of the ``compose_message()`` function:"
msgstr ""

#: ../../../tutorial/creating_packages/build_packages.rst:152
msgid "*tests/test.cpp*"
msgstr ""

#: ../../../tutorial/creating_packages/build_packages.rst:152
msgid ""
"#include \"../include/hello.h\"\n"
"#include \"gtest/gtest.h\"\n"
"\n"
"namespace {\n"
"    TEST(HelloTest, ComposeMessages) {\n"
"    EXPECT_EQ(std::string(\"hello/1.0: Hello World Release! (with "
"color!)\\n\"), compose_message(\"Release\", \"with color!\"));\n"
"    ...\n"
"    }\n"
"}"
msgstr ""

#: ../../../tutorial/creating_packages/build_packages.rst:165
msgid ""
"Now that we have gone through all the changes in the code, let's try them "
"out:"
msgstr ""

#: ../../../tutorial/creating_packages/build_packages.rst:167
msgid ""
"$ conan create . --build=missing -tf=\"\"\n"
"...\n"
"[ 25%] Building CXX object CMakeFiles/hello.dir/src/hello.cpp.o\n"
"[ 50%] Linking CXX static library libhello.a\n"
"[ 50%] Built target hello\n"
"[ 75%] Building CXX object tests/CMakeFiles/test_hello.dir/test.cpp.o\n"
"[100%] Linking CXX executable test_hello\n"
"[100%] Built target test_hello\n"
"hello/1.0: RUN: ./tests/test_hello\n"
"Capturing current environment in /Users/user/.conan2/p/tmp/c51d80ef47661865/"
"b/build/generators/deactivate_conanbuildenv-release-x86_64.sh\n"
"Configuring environment variables\n"
"Running main() from /Users/user/.conan2/p/tmp/3ad4c6873a47059c/b/googletest/"
"src/gtest_main.cc\n"
"[==========] Running 1 test from 1 test suite.\n"
"[----------] Global test environment set-up.\n"
"[----------] 1 test from HelloTest\n"
"[ RUN      ] HelloTest.ComposeMessages\n"
"[       OK ] HelloTest.ComposeMessages (0 ms)\n"
"[----------] 1 test from HelloTest (0 ms total)\n"
"\n"
"[----------] Global test environment tear-down\n"
"[==========] 1 test from 1 test suite ran. (0 ms total)\n"
"[  PASSED  ] 1 test.\n"
"hello/1.0: Package '82b6c0c858e739929f74f59c25c187b927d514f3' built\n"
"..."
msgstr ""

#: ../../../tutorial/creating_packages/build_packages.rst:195
msgid ""
"As you can see, the tests were built and run. Let's use now the ``tools."
"build:skip_test`` configuration in the command line to skip the test "
"building and running:"
msgstr ""

#: ../../../tutorial/creating_packages/build_packages.rst:198
msgid ""
"$ conan create . -c tools.build:skip_test=True -tf=\"\"\n"
"...\n"
"[ 50%] Building CXX object CMakeFiles/hello.dir/src/hello.cpp.o\n"
"[100%] Linking CXX static library libhello.a\n"
"[100%] Built target hello\n"
"hello/1.0: Package '82b6c0c858e739929f74f59c25c187b927d514f3' built\n"
"..."
msgstr ""

#: ../../../tutorial/creating_packages/build_packages.rst:209
msgid ""
"You can see now that only the library target was built and that no tests "
"were built or run."
msgstr ""

#: ../../../tutorial/creating_packages/build_packages.rst:214
msgid "Conditionally patching the source code"
msgstr ""

#: ../../../tutorial/creating_packages/build_packages.rst:216
msgid ""
"If you need to patch the source code the recommended approach is to do that "
"in the ``source()`` method. Sometimes, if that patch depends on settings or "
"options, you have to use the ``build()`` method to apply patches to the "
"source code before launching the build. There are :ref:`several ways to do "
"this <examples_tools_files_patches>` in Conan. One of them would be using "
"the :ref:`replace_in_file <conan_tools_files_replace_in_file>` tool:"
msgstr ""

#: ../../../tutorial/creating_packages/build_packages.rst:223
msgid ""
"import os\n"
"from conan import ConanFile\n"
"from conan.tools.files import replace_in_file\n"
"\n"
"\n"
"class helloRecipe(ConanFile):\n"
"    name = \"hello\"\n"
"    version = \"1.0\"\n"
"\n"
"    # Binary configuration\n"
"    settings = \"os\", \"compiler\", \"build_type\", \"arch\"\n"
"    options = {\"shared\": [True, False], \"fPIC\": [True, False]}\n"
"    default_options = {\"shared\": False, \"fPIC\": True}\n"
"\n"
"    def build(self):\n"
"        replace_in_file(self, os.path.join(self.source_folder, \"src\", "
"\"hello.cpp\"),\n"
"                        \"Hello World\",\n"
"                        \"Hello {} Friends\".format(\"Shared\" if self."
"options.shared else \"Static\"))"
msgstr ""

#: ../../../tutorial/creating_packages/build_packages.rst:245
msgid ""
"Please, note that patching in ``build()`` should be avoided if possible and "
"only be done for very particular cases as it will make more difficult to "
"develop your packages locally (we will explain more about this in the :ref:"
"`local development flow section<local_package_development_flow>` later)"
msgstr ""

#: ../../../tutorial/creating_packages/build_packages.rst:251
msgid "Conditionally select your build system"
msgstr ""

#: ../../../tutorial/creating_packages/build_packages.rst:253
msgid ""
"It's not uncommon that some packages need one build system or another "
"depending on the platform we are building on. For example, the *hello* "
"library could build in Windows using CMake and in Linux and MacOS using "
"Autotools. This can be easily handled in the ``build()`` method like this:"
msgstr ""

#: ../../../tutorial/creating_packages/build_packages.rst:259
msgid ""
"...\n"
"\n"
"class helloRecipe(ConanFile):\n"
"    name = \"hello\"\n"
"    version = \"1.0\"\n"
"\n"
"    # Binary configuration\n"
"    settings = \"os\", \"compiler\", \"build_type\", \"arch\"\n"
"    options = {\"shared\": [True, False], \"fPIC\": [True, False]}\n"
"    default_options = {\"shared\": False, \"fPIC\": True}\n"
"\n"
"    ...\n"
"\n"
"    def generate(self):\n"
"        if self.settings.os == \"Windows\":\n"
"            tc = CMakeToolchain(self)\n"
"            tc.generate()\n"
"            deps = CMakeDeps(self)\n"
"            deps.generate()\n"
"        else:\n"
"            tc = AutotoolsToolchain(self)\n"
"            tc.generate()\n"
"            deps = PkgConfigDeps(self)\n"
"            deps.generate()\n"
"\n"
"    ...\n"
"\n"
"    def build(self):\n"
"        if self.settings.os == \"Windows\":\n"
"            cmake = CMake(self)\n"
"            cmake.configure()\n"
"            cmake.build()\n"
"        else:\n"
"            autotools = Autotools(self)\n"
"            autotools.autoreconf()\n"
"            autotools.configure()\n"
"            autotools.make()\n"
"\n"
"    ..."
msgstr ""

#: ../../../tutorial/creating_packages/build_packages.rst:304
msgid ":ref:`Patching sources <examples_tools_files_patches>`"
msgstr ""
