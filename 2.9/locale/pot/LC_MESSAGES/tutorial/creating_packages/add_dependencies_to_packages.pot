# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:31+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../tutorial/creating_packages/add_dependencies_to_packages.rst:4
msgid "Add dependencies to packages"
msgstr ""

#: ../../../tutorial/creating_packages/add_dependencies_to_packages.rst:6
msgid ""
"In the :ref:`previous tutorial section<tutorial_creating_packages>` we "
"created a Conan package for a \"Hello World\" C++ library. We used the :ref:"
"`conan.tools.scm.Git()<reference>` tool to retrieve the sources from a git "
"repository. So far, the package does not have any dependency on other Conan "
"packages. Let's explain how to add a dependency to our package in a very "
"similar way to how we did in the :ref:`consuming packages "
"section<consuming_packages_flexibility_of_conanfile_py>`. We will add some "
"fancy colour output to our \"Hello World\" library using the `fmt <https://"
"conan.io/center/fmt>`__ library."
msgstr ""

#: ../../../tutorial/creating_packages/add_dependencies_to_packages.rst:15
msgid ""
"Please, first clone the sources to recreate this project. You can find them "
"in the `examples2 repository <https://github.com/conan-io/examples2>`_ on "
"GitHub:"
msgstr ""

#: ../../../tutorial/creating_packages/add_dependencies_to_packages.rst:18
msgid ""
"$ git clone https://github.com/conan-io/examples2.git\n"
"$ cd examples2/tutorial/creating_packages/add_requires"
msgstr ""

#: ../../../tutorial/creating_packages/add_dependencies_to_packages.rst:23
msgid ""
"You will notice some changes in the `conanfile.py` file from the previous "
"recipe. Let's check the relevant parts:"
msgstr ""

#: ../../../tutorial/creating_packages/add_dependencies_to_packages.rst:26
msgid ""
"...\n"
"from conan.tools.build import check_max_cppstd, check_min_cppstd\n"
"...\n"
"\n"
"class helloRecipe(ConanFile):\n"
"    name = \"hello\"\n"
"    version = \"1.0\"\n"
"\n"
"    ...\n"
"    generators = \"CMakeDeps\"\n"
"    ...\n"
"\n"
"    def validate(self):\n"
"        check_min_cppstd(self, \"11\")\n"
"        check_max_cppstd(self, \"20\")\n"
"\n"
"    def requirements(self):\n"
"        self.requires(\"fmt/8.1.1\")\n"
"\n"
"    def source(self):\n"
"        git = Git(self)\n"
"        git.clone(url=\"https://github.com/conan-io/libhello.git\", "
"target=\".\")\n"
"        # Please, be aware that using the head of the branch instead of an "
"immutable tag\n"
"        # or commit is not a good practice in general\n"
"        git.checkout(\"require_fmt\")"
msgstr ""

#: ../../../tutorial/creating_packages/add_dependencies_to_packages.rst:55
msgid ""
"First, we set the ``generators`` class attribute to make Conan invoke the :"
"ref:`CMakeDeps<conan_tools_cmakedeps>` generator. This was not needed in the "
"previous recipe as we did not have dependencies. ``CMakeDeps`` will generate "
"all the config files CMake needs to find the ``fmt`` library."
msgstr ""

#: ../../../tutorial/creating_packages/add_dependencies_to_packages.rst:60
msgid ""
"Next, we use the :ref:`requires()<reference_conanfile_methods>` method to "
"add the `fmt <https://conan.io/center/fmt>`__  dependency to our package."
msgstr ""

#: ../../../tutorial/creating_packages/add_dependencies_to_packages.rst:63
msgid ""
"Also, check that we added an extra line in the :ref:"
"`source()<reference_conanfile_methods>` method. We use the `Git().checkout` "
"method to checkout the source code in the `require_fmt <https://github.com/"
"conan-io/libhello/tree/require_fmt>`__ branch. This branch contains the "
"changes in the source code to add colours to the library messages, and also "
"in the ``CMakeLists.txt`` to declare that we are using the ``fmt`` library."
msgstr ""

#: ../../../tutorial/creating_packages/add_dependencies_to_packages.rst:69
msgid ""
"Finally, note we added the :ref:`validate()<reference_conanfile_methods>` "
"method to the recipe. We already used this method in the :ref:`consuming "
"packages section<consuming_packages_flexibility_of_conanfile_py>` to raise "
"an error for non-supported configurations. Here, we call the :ref:"
"`check_min_cppstd()<conan_tools_build_check_min_cppstd>` and :ref:"
"`check_max_cppstd()<conan_tools_build_check_max_cppstd>` to check that we "
"are using at least C++11 and at most C++20 standards in our settings."
msgstr ""

#: ../../../tutorial/creating_packages/add_dependencies_to_packages.rst:78
msgid ""
"You can check the new sources, using the fmt library in the `require_fmt "
"<https://github.com/conan-io/libhello/tree/require_fmt>`__. You will see "
"that the `hello.cpp <https://github.com/conan-io/libhello/blob/require_fmt/"
"src/hello.cpp>`__ file adds colours to the output messages:"
msgstr ""

#: ../../../tutorial/creating_packages/add_dependencies_to_packages.rst:83
msgid ""
"#include <fmt/color.h>\n"
"\n"
"#include \"hello.h\"\n"
"\n"
"void hello(){\n"
"    #ifdef NDEBUG\n"
"    fmt::print(fg(fmt::color::crimson) | fmt::emphasis::bold, \"hello/1.0: "
"Hello World Release!\\n\");\n"
"    #else\n"
"    fmt::print(fg(fmt::color::crimson) | fmt::emphasis::bold, \"hello/1.0: "
"Hello World Debug!\\n\");\n"
"    #endif\n"
"    ..."
msgstr ""

#: ../../../tutorial/creating_packages/add_dependencies_to_packages.rst:98
msgid ""
"Let's build the package from sources with the current default configuration, "
"and then let the ``test_package`` folder test the package. You should see "
"the output messages with colour now:"
msgstr ""

#: ../../../tutorial/creating_packages/add_dependencies_to_packages.rst:103
msgid ""
"$ conan create . --build=missing\n"
"-------- Exporting the recipe ----------\n"
"...\n"
"-------- Testing the package: Running test() ----------\n"
"hello/1.0 (test package): Running test()\n"
"hello/1.0 (test package): RUN: ./example\n"
"hello/1.0: Hello World Release!\n"
"  hello/1.0: __x86_64__ defined\n"
"  hello/1.0: __cplusplus 201103\n"
"  hello/1.0: __GNUC__ 4\n"
"  hello/1.0: __GNUC_MINOR__ 2\n"
"  hello/1.0: __clang_major__ 13\n"
"  hello/1.0: __clang_minor__ 1\n"
"  hello/1.0: __apple_build_version__ 13160021"
msgstr ""

#: ../../../tutorial/creating_packages/add_dependencies_to_packages.rst:122
msgid ""
":ref:`Reference for requirements() method "
"<reference_conanfile_methods_requirements>`."
msgstr ""

#: ../../../tutorial/creating_packages/add_dependencies_to_packages.rst:123
msgid ""
":ref:`Introduction to versioning <consuming_packages_intro_versioning>`."
msgstr ""
