# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:27+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../examples/extensions/commands/clean/custom_command_clean_revisions.rst:4
msgid "Custom command: Clean old recipe and package revisions"
msgstr ""

#: ../../../examples/extensions/commands/clean/custom_command_clean_revisions.rst:8
msgid ""
"This is mostly an example command. The built-in ``conan remove *#!latest`` "
"syntax, meaning \"all revisions but the latest\" would probably be enough "
"for this use case, without needing this custom command."
msgstr ""

#: ../../../examples/extensions/commands/clean/custom_command_clean_revisions.rst:14
msgid "Using this command requires Conan 2.21.0 or higher."
msgstr ""

#: ../../../examples/extensions/commands/clean/custom_command_clean_revisions.rst:17
msgid ""
"Please, first clone the sources to recreate this project. You can find them "
"in the `examples2 repository <https://github.com/conan-io/examples2>`_ in "
"GitHub:"
msgstr ""

#: ../../../examples/extensions/commands/clean/custom_command_clean_revisions.rst:20
msgid ""
"$ git clone https://github.com/conan-io/examples2.git\n"
"$ cd examples2/examples/extensions/commands/clean"
msgstr ""

#: ../../../examples/extensions/commands/clean/custom_command_clean_revisions.rst:26
msgid ""
"In this example we are going to see how to create/use a custom command: :"
"command:`conan clean`. It removes every recipe and its package revisions "
"from the local cache or the remotes, except the latest package revision from "
"the latest recipe one."
msgstr ""

#: ../../../examples/extensions/commands/clean/custom_command_clean_revisions.rst:32
msgid ""
"To understand better this example, it is highly recommended to read "
"previously the :ref:`Custom commands "
"reference<reference_commands_custom_commands>`."
msgstr ""

#: ../../../examples/extensions/commands/clean/custom_command_clean_revisions.rst:36
msgid "Locate the command"
msgstr ""

#: ../../../examples/extensions/commands/clean/custom_command_clean_revisions.rst:38
msgid ""
"Copy the command file ``cmd_clean.py`` into your ``[YOUR_CONAN_HOME]/"
"extensions/commands/`` folder (create it if it's not there). If you don't "
"know where ``[YOUR_CONAN_HOME]`` is located, you can run :command:`conan "
"config home` to check it."
msgstr ""

#: ../../../examples/extensions/commands/clean/custom_command_clean_revisions.rst:43
msgid "Run it"
msgstr ""

#: ../../../examples/extensions/commands/clean/custom_command_clean_revisions.rst:45
msgid "Now, you should be able to see the new command in your command prompt:"
msgstr ""

#: ../../../examples/extensions/commands/clean/custom_command_clean_revisions.rst:47
msgid ""
"$ conan -h\n"
"...\n"
"Custom commands\n"
"clean        Deletes (from local cache or remotes) all recipe and package "
"revisions but the\n"
"               latest package revision from the latest recipe revision.\n"
"\n"
"$ conan clean -h\n"
"usage: conan clean [-h] [-r REMOTE] [--force]\n"
"\n"
"Deletes (from local cache or remotes) all recipe and package revisions but\n"
"the latest package revision from the latest recipe revision.\n"
"\n"
"optional arguments:\n"
"  -h, --help            show this help message and exit\n"
"  -r REMOTE, --remote REMOTE\n"
"                        Will remove from the specified remote\n"
"  --force               Remove without requesting a confirmation"
msgstr ""

#: ../../../examples/extensions/commands/clean/custom_command_clean_revisions.rst:68
msgid "Finally, if you execute :command:`conan clean`:"
msgstr ""

#: ../../../examples/extensions/commands/clean/custom_command_clean_revisions.rst:70
msgid ""
"$ conan clean\n"
"Found 4 pkg/version recipes matching */* in local cache\n"
"Do you want to remove all the recipes revisions and their packages ones, "
"except the latest package revision from the latest recipe one? (yes/no): "
"yes\n"
"Keeping recipe revision: other/1.0#31da245c3399e4124e39bd4f77b5261f and its "
"latest package revisions [Local cache]\n"
"Removed package revision: other/1.0#31da245c3399e4124e39bd4f77b5261f:"
"da39a3ee5e6b4b0d3255bfef95601890afd80709#a16985deb2e1aa73a8480faad22b722c "
"[Local cache]\n"
"Removed recipe revision: other/1.0#721995a35b1a8d840ce634ea1ac71161 and all "
"its package revisions [Local cache]\n"
"Keeping recipe revision: hello/1.0#9a77cdcff3a539b5b077dd811b2ae3b0 and its "
"latest package revisions [Local cache]\n"
"Removed package revision: hello/1.0#9a77cdcff3a539b5b077dd811b2ae3b0:"
"da39a3ee5e6b4b0d3255bfef95601890afd80709#cee90a74944125e7e9b4f74210bfec3f "
"[Local cache]\n"
"Removed package revision: hello/1.0#9a77cdcff3a539b5b077dd811b2ae3b0:"
"da39a3ee5e6b4b0d3255bfef95601890afd80709#7cddd50952de9935d6c3b5b676a34c48 "
"[Local cache]\n"
"Keeping recipe revision: libcxx/0.1#abcdef1234567890abcdef1234567890 and its "
"latest package revisions [Local cache]"
msgstr ""

#: ../../../examples/extensions/commands/clean/custom_command_clean_revisions.rst:83
msgid "Nothing should happen if you run it again:"
msgstr ""

#: ../../../examples/extensions/commands/clean/custom_command_clean_revisions.rst:85
msgid ""
"$ conan clean\n"
"Do you want to remove all the recipes revisions and their packages ones, "
"except the latest package revision from the latest recipe one? (yes/no): "
"yes\n"
"Keeping recipe revision: other/1.0#31da245c3399e4124e39bd4f77b5261f and its "
"latest package revisions [Local cache]\n"
"Keeping recipe revision: hello/1.0#9a77cdcff3a539b5b077dd811b2ae3b0 and its "
"latest package revisions [Local cache]\n"
"Keeping recipe revision: libcxx/0.1#abcdef1234567890abcdef1234567890 and its "
"latest package revisions [Local cache]"
msgstr ""

#: ../../../examples/extensions/commands/clean/custom_command_clean_revisions.rst:94
msgid "Code tour"
msgstr ""

#: ../../../examples/extensions/commands/clean/custom_command_clean_revisions.rst:96
msgid "The ``conan clean`` command has the following code:"
msgstr ""

#: ../../../examples/extensions/commands/clean/custom_command_clean_revisions.rst:98
msgid "cmd_clean.py"
msgstr ""

#: ../../../examples/extensions/commands/clean/custom_command_clean_revisions.rst:98
msgid ""
"from conan.api.conan_api import ConanAPI\n"
"from conan.api.model import PackagesList, ListPattern\n"
"from conan.api.input import UserInput\n"
"from conan.api.output import ConanOutput, Color\n"
"from conan.cli.command import OnceArgument, conan_command\n"
"\n"
"recipe_color = Color.BRIGHT_BLUE\n"
"removed_color = Color.BRIGHT_YELLOW\n"
"\n"
"@conan_command(group=\"Custom commands\")\n"
"def clean(conan_api: ConanAPI, parser, *args):\n"
"    \"\"\"\n"
"    Deletes (from local cache or remotes) all recipe and package revisions "
"but\n"
"    the latest package revision from the latest recipe revision.\n"
"    \"\"\"\n"
"    parser.add_argument('-r', '--remote', action=OnceArgument,\n"
"                        help='Will remove from the specified remote')\n"
"    parser.add_argument('--force', default=False, action='store_true',\n"
"                        help='Remove without requesting a confirmation')\n"
"    args = parser.parse_args(*args)\n"
"\n"
"    def confirmation(message):\n"
"        return args.force or ui.request_boolean(message)\n"
"\n"
"    ui = UserInput(non_interactive=False)\n"
"    out = ConanOutput()\n"
"    remote = conan_api.remotes.get(args.remote) if args.remote else None\n"
"    output_remote = remote or \"Local cache\"\n"
"\n"
"    # List all recipes revisions and all their packages revisions as well\n"
"    pkg_list = conan_api.list.select(ListPattern(\"*/*#*:*#*\", rrev=None, "
"prev=None), remote=remote)\n"
"    if pkg_list and not confirmation(\"Do you want to remove all the recipes "
"revisions and their packages ones, \"\n"
"                                    \"except the latest package revision "
"from the latest recipe one?\"):\n"
"        out.writeln(\"Aborted\")\n"
"        return\n"
"\n"
"    # Split the package list into based on their recipe reference\n"
"    for sub_pkg_list in pkg_list.split():\n"
"        latest = max(sub_pkg_list.items(), key=lambda item: item[0])[0]\n"
"        out.writeln(f\"Keeping recipe revision: {latest.repr_notime()} \"\n"
"                    f\"and its latest package revisions [{output_remote}]\", "
"fg=recipe_color)\n"
"        for rref, packages in sub_pkg_list.items():\n"
"            # For the latest recipe revision, keep the latest package "
"revision only\n"
"            if latest == rref:\n"
"                # Get the latest package timestamp for each package_id\n"
"                latest_pref_list = [max([p for p in packages if p.package_id "
"== pkg_id], key=lambda p: p.timestamp)\n"
"                                    for pkg_id in {p.package_id for p in "
"packages}]\n"
"                for pref in packages:\n"
"                    if pref not in latest_pref_list:\n"
"                        conan_api.remove.package(pref, remote=remote)\n"
"                        out.writeln(f\"Removed package revision: {pref."
"repr_notime()} [{output_remote}]\", fg=removed_color)\n"
"            else:\n"
"                # Otherwise, remove all outdated recipe revisions and their "
"packages\n"
"                conan_api.remove.recipe(rref, remote=remote)\n"
"                out.writeln(f\"Removed recipe revision: {rref.repr_notime()} "
"\"\n"
"                            f\"and all its package revisions "
"[{output_remote}]\", fg=removed_color)"
msgstr ""

#: ../../../examples/extensions/commands/clean/custom_command_clean_revisions.rst:159
msgid "Let's analyze the most important parts."
msgstr ""

#: ../../../examples/extensions/commands/clean/custom_command_clean_revisions.rst:162
msgid "parser"
msgstr ""

#: ../../../examples/extensions/commands/clean/custom_command_clean_revisions.rst:164
msgid ""
"The ``parser`` param is an instance of the Python command-line parsing "
"``argparse.ArgumentParser``, so if you want to know more about its API, "
"visit `its official website <https://docs.python.org/3/library/argparse."
"html>`_."
msgstr ""

#: ../../../examples/extensions/commands/clean/custom_command_clean_revisions.rst:169
msgid "User output"
msgstr ""

#: ../../../examples/extensions/commands/clean/custom_command_clean_revisions.rst:171
msgid ""
"``ConanOutput()``: class to manage user outputs. In this example, we're "
"using only ``out.writeln(message, fg=None, bg=None)`` where ``fg`` is the "
"font foreground, and ``bg`` is the font background. Apart from that, you "
"have some predefined methods like ``out.info()``, ``out.success()``, ``out."
"error()``, etc."
msgstr ""

#: ../../../examples/extensions/commands/clean/custom_command_clean_revisions.rst:177
msgid "Conan public API"
msgstr ""

#: ../../../common/experimental_warning.inc:3
msgid ""
"This feature is experimental and subject to breaking changes. See :ref:`the "
"Conan stability<stability>` section for more information."
msgstr ""

#: ../../../examples/extensions/commands/clean/custom_command_clean_revisions.rst:181
msgid ""
"The most important part of this example is the usage of the Conan API via "
"``conan_api`` parameter. These are some examples which are being used in "
"this custom command:"
msgstr ""

#: ../../../examples/extensions/commands/clean/custom_command_clean_revisions.rst:184
msgid ""
"conan_api.remotes.get(args.remote)\n"
"conan_api.list.select(ListPattern(\"*/*#*:*#*\", rrev=None, prev=None), "
"remote=remote)\n"
"conan_api.remove.recipe(rrev, remote=remote)\n"
"conan_api.remove.package(prev, remote=remote)"
msgstr ""

#: ../../../examples/extensions/commands/clean/custom_command_clean_revisions.rst:193
msgid ""
"``conan_api.remotes.get(...)``: ``[RemotesAPI]`` Returns a RemoteRegistry "
"given the remote name."
msgstr ""

#: ../../../examples/extensions/commands/clean/custom_command_clean_revisions.rst:194
msgid ""
"``conan_api.list.select(...)``: ``[ListAPI]`` Returns a list with all the "
"recipes matching the given pattern."
msgstr ""

#: ../../../examples/extensions/commands/clean/custom_command_clean_revisions.rst:195
msgid ""
"``conan_api.remove.recipe(...)``: ``[RemoveAPI]`` Removes the given recipe "
"revision and all its package revisions."
msgstr ""

#: ../../../examples/extensions/commands/clean/custom_command_clean_revisions.rst:196
msgid ""
"``conan_api.remove.package(...)``: ``[RemoveAPI]`` Removes the given package "
"revision."
msgstr ""

#: ../../../examples/extensions/commands/clean/custom_command_clean_revisions.rst:198
msgid "Besides that, it deserves especial attention these lines:"
msgstr ""

#: ../../../examples/extensions/commands/clean/custom_command_clean_revisions.rst:200
msgid ""
"for sub_pkg_list in pkg_list.split():\n"
"    latest = max(sub_pkg_list.items(), key=lambda item: item[0])[0]\n"
"\n"
"...\n"
"\n"
"latest_pref_list = [max([p for p in packages if p.package_id == pkg_id], "
"key=lambda p: p.timestamp)\n"
"                                for pkg_id in {p.package_id for p in "
"packages}]"
msgstr ""

#: ../../../examples/extensions/commands/clean/custom_command_clean_revisions.rst:210
msgid ""
"Basically, the ``pkg_list.split()`` is returning a list for the same recipe "
"reference. Then, ``sub_pkg_list.items()`` returns a list of tuples ``(Recipe "
"Reference, Packages References)``, so finally, ``max(..., key=...)`` is used "
"to get the latest recipe reference based on its timestamp. Later, "
"``latest_pref_list`` is created to keep only the latest package revision for "
"each package ID. It iterates over the set of package IDs to get the latest "
"package revision based on its timestamp."
msgstr ""

#: ../../../examples/extensions/commands/clean/custom_command_clean_revisions.rst:217
msgid ""
"If you want to know more about the Conan API, visit the :ref:`ConanAPI "
"section<reference_python_api_conan_api>`"
msgstr ""
