# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-23 08:30+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/commands/lock/merge.rst:2
msgid "conan lock merge"
msgstr ""

#: ../../../reference/commands/lock/merge.rst:-1
msgid ""
"$ conan lock merge -h\n"
"usage: conan lock merge [-h] [--out-file OUT_FILE] [-v [V]] [-cc CORE_CONF]\n"
"                        [--lockfile LOCKFILE] [--lockfile-out LOCKFILE_OUT]\n"
"\n"
"Merge 2 or more lockfiles.\n"
"\n"
"options:\n"
"  -h, --help            show this help message and exit\n"
"  --out-file OUT_FILE   Write the output of the command to the specified "
"file\n"
"                        instead of stdout.\n"
"  -v [V]                Level of detail of the output. Valid options from "
"less\n"
"                        verbose to more verbose: -vquiet, -verror, -"
"vwarning,\n"
"                        -vnotice, -vstatus, -v or -vverbose, -vv or -"
"vdebug,\n"
"                        -vvv or -vtrace\n"
"  -cc CORE_CONF, --core-conf CORE_CONF\n"
"                        Define core configuration, overwriting global.conf\n"
"                        values. E.g.: -cc core:non_interactive=True\n"
"  --lockfile LOCKFILE   Path to lockfile to be merged\n"
"  --lockfile-out LOCKFILE_OUT\n"
"                        Filename of the created lockfile\n"
"\n"
msgstr ""

#: ../../../reference/commands/lock/merge.rst:8
msgid ""
"The ``conan lock merge`` command takes 2 or more lockfiles and aggregate "
"them, producing one final lockfile. For example, if we have 2 lockfiles "
"``lock1.lock`` and ``lock2.lock``, we can merge both in a final ``conan."
"lock`` one:"
msgstr ""

#: ../../../reference/commands/lock/merge.rst:11
msgid ""
"# we have 2 lockfiles lock1.lock and lock2.lock\n"
"$ conan lock add --requires=pkg/1.1 --lockfile-out=lock1.lock\n"
"$ cat lock1.lock\n"
"{\n"
"    \"version\": \"0.5\",\n"
"    \"requires\": [\n"
"        \"pkg/1.1\",\n"
"    ],\n"
"    \"build_requires\": [],\n"
"    \"python_requires\": []\n"
"}\n"
"\n"
"$ conan lock add --requires=other/2.1 --build-requires=tool/3.2 --lockfile-"
"out=lock2.lock\n"
"$ cat lock2.lock\n"
"{\n"
"    \"version\": \"0.5\",\n"
"    \"requires\": [\n"
"        \"other/2.1\"\n"
"    ],\n"
"    \"build_requires\": [\n"
"        \"tool/3.2\"\n"
"    ],\n"
"    \"python_requires\": []\n"
"}\n"
"\n"
"# we can merge both\n"
"$ conan lock merge --lockfile=lock1.lock --lockfile=lock2.lock\n"
"$ cat conan.lock\n"
"{\n"
"    \"version\": \"0.5\",\n"
"    \"requires\": [\n"
"        \"pkg/1.1\",\n"
"        \"other/2.1\"\n"
"    ],\n"
"    \"build_requires\": [\n"
"        \"tool/3.2\"\n"
"    ],\n"
"    \"python_requires\": []\n"
"}"
msgstr ""

#: ../../../reference/commands/lock/merge.rst:53
msgid "Similar to the ``conan lock add`` command, the ``conan lock merge``:"
msgstr ""

#: ../../../reference/commands/lock/merge.rst:55
msgid "Does keep strict sorting of the lists of versions"
msgstr ""

#: ../../../reference/commands/lock/merge.rst:56
msgid ""
"It does not perform any kind of validation if the packages or versions exist "
"or not, or if they belong to a given dependency graph"
msgstr ""

#: ../../../reference/commands/lock/merge.rst:57
msgid "It is a basic processing of the json files, aggregating them."
msgstr ""

#: ../../../reference/commands/lock/merge.rst:58
msgid ""
"It doesn't guarantee that the lockfile will be complete, might require ``--"
"lockfile-partial`` if not"
msgstr ""

#: ../../../reference/commands/lock/merge.rst:59
msgid ""
"Recipe revisions, if defined, must contain the timestamp to be sorted "
"correctly."
msgstr ""

#: ../../../reference/commands/lock/merge.rst:64
msgid ""
"It is forbidden to manually manipulate a Conan lockfile, changing the strict "
"sorting of references, and that could result in any arbitrary undefined "
"behavior."
msgstr ""

#: ../../../reference/commands/lock/merge.rst:66
msgid ""
"Recall that it is not possible to ``conan lock add`` a version range. The "
"version might be not fully complete (like not providing the revision), but "
"it must be an exact version."
msgstr ""

#: ../../../reference/commands/lock/merge.rst:71
msgid ""
"To better understand ``conan lock merge``, it is recommended to first "
"understand lockfiles in general, visit the :ref:`lockfiles "
"tutorial<tutorial_versioning_lockfiles>` for a practical introduction to "
"lockfiles."
msgstr ""

#: ../../../reference/commands/lock/merge.rst:75
msgid ""
"This ``conan lock merge`` command can be useful to consolidate in a single "
"lockfile when for some reasons there are several lockfiles that have "
"diverged. A use case would be to create a multi-configuration lockfile that "
"contains all necessary locked versions for all OSs (Linux, Windows, etc), "
"even if there are conditional dependencies in the graph for the different "
"OSs. At some point when testing a new dependency version, for example, "
"``pkg/3.4`` new version, when previously ``pkg/3.3`` was already in the "
"graph, we might want to have such a new lockfile cleaning the previous "
"``pkg/3.3``. If we apply the ``--lockfile-clean`` argument that will remove "
"the non-used versions in the lockfile, but that will also remove the OS-"
"dependant dependencies. So something like this could be done: lets say that "
"we have this lockfile (simplified, removed revisions for simplicity) as the "
"result of testing a new ``pkgb/0.2`` version for our main product "
"``app1/0.1``:"
msgstr ""

#: ../../../reference/commands/lock/merge.rst:84
msgid "app.lock"
msgstr ""

#: ../../../reference/commands/lock/merge.rst:84
msgid ""
"{\n"
"  \"version\": \"0.5\",\n"
"  \"requires\": [\n"
"      \"pkgb/0.2\",\n"
"      \"pkgb/0.1\",\n"
"      \"pkgawin/0.1\",\n"
"      \"pkganix/0.1\",\n"
"      \"app1/0.1\"\n"
"  ]\n"
"}"
msgstr ""

#: ../../../reference/commands/lock/merge.rst:98
msgid ""
"The ``pkgawin`` and ``pkganix`` are dependencies that exist exclusively in "
"Windows and Linux respectively. Everything looks good, ``pkgb/0.2`` new "
"version works fine with our app, and we want to clean the unused things from "
"the lockfile:"
msgstr ""

#: ../../../reference/commands/lock/merge.rst:101
msgid ""
"$ conan lock create --requires=app1/0.1 --lockfile=app.lock --lockfile-"
"out=win.lock -s os=Windows --lockfile-clean\n"
"# Note how both pkgb/0.1 and pkganix are gone\n"
"$ cat win.lock\n"
"{\n"
"  \"version\": \"0.5\",\n"
"  \"requires\": [\n"
"      \"pkgb/0.2\",\n"
"      \"pkgawin/0.1\",\n"
"      \"app1/0.1\"\n"
"  ]\n"
"}\n"
"$ conan lock create --requires=app1/0.1 --lockfile=app.lock --lockfile-"
"out=nix.lock -s os=Linux --lockfile-clean\n"
"# Note how both pkgb/0.1 and pkgawin are gone\n"
"$ cat win.lock\n"
"{\n"
"  \"version\": \"0.5\",\n"
"  \"requires\": [\n"
"      \"pkgb/0.2\",\n"
"      \"pkganix/0.1\",\n"
"      \"app1/0.1\"\n"
"  ]\n"
"}\n"
"  # Finally, merge the 2 clean lockfiles, for keeping just 1 for next "
"iteration\n"
"$ conan lock merge --lockfile=win.lock --lockfile=nix.lock --lockfile-"
"out=final.lock\n"
"$ cat final.lock\n"
"{\n"
"  \"version\": \"0.5\",\n"
"  \"requires\": [\n"
"      \"pkgb/0.2\",\n"
"      \"pkgawin/0.1\",\n"
"      \"pkganix/0.1\",\n"
"      \"app1/0.1\"\n"
"  ]\n"
"}"
msgstr ""
