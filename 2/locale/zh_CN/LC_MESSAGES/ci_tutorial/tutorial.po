# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-14 08:38+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../ci_tutorial/tutorial.rst:4
msgid "Continuous Integration (CI) tutorial"
msgstr ""

#: ../../../ci_tutorial/tutorial.rst:8
msgid ""
"This is an advanced topic, previous knowledge of Conan is necessary. Please :"
"ref:`read and practice the user tutorial<tutorial>` first."
msgstr ""

#: ../../../ci_tutorial/tutorial.rst:9
msgid ""
"This section is intended for devops and build engineers designing and "
"implementing a CI pipeline involving Conan packages, if it is not the case, "
"you can skip this section."
msgstr ""

#: ../../../ci_tutorial/tutorial.rst:11
msgid ""
"There is a conference talk :ref:`Continuous Integration for Large Scale C/C+"
"+ Projects With Conan2 at ACCU-2025<accu2025>` that is based in this "
"tutorial, that might provide some extra information and some implementation "
"details."
msgstr ""

#: ../../../ci_tutorial/tutorial.rst:15
msgid ""
"Continuous Integration has different meanings for different users and "
"organizations. In this tutorial we will cover the scenarios when users are "
"doing changes to the source code of their packages and want to automatically "
"build new binaries for those packages and also compute if those new package "
"changes integrate cleanly or break the organization main products."
msgstr ""

#: ../../../ci_tutorial/tutorial.rst:18
msgid ""
"In this tutorial we will use this small project that uses several packages "
"(static libraries by default) to build a couple of applications, a video "
"game and a map viewer utility. The ``game`` and ``mapviewer`` are our final "
"\"**products**\", what we distribute to our users:"
msgstr ""

#: ../../../ci_tutorial/tutorial.rst:40
msgid ""
"All of the packages in the dependency graph have a ``requires`` to its "
"direct dependencies using version ranges, for example, ``game`` contains a "
"``requires(\"engine/[>=1.0 <2]\")`` so new patch and minor versions of the "
"dependencies will automatically be used without needing to modify the "
"recipes."
msgstr ""

#: ../../../ci_tutorial/tutorial.rst:44
msgid "**Important notes**"
msgstr ""

#: ../../../ci_tutorial/tutorial.rst:46
msgid ""
"This section is written as a hands-on tutorial. It is intended to be "
"reproduced by copying the commands in your machine."
msgstr ""

#: ../../../ci_tutorial/tutorial.rst:47
msgid ""
"The tutorial presents some of the tools, good practices and common "
"approaches to the CI problem. But there are no silver bullets. This tutorial "
"is not the unique way that things should be done. Different organizations "
"might have different needs and priorities, different build services power "
"and budget, different sizes, etc. The principles and practices presented in "
"the tutorial might need to be adapted."
msgstr ""

#: ../../../ci_tutorial/tutorial.rst:51
msgid ""
"If you have any questions or feedback, please submit a new issue in https://"
"github.com/conan-io/conan/issues"
msgstr ""

#: ../../../ci_tutorial/tutorial.rst:52
msgid ""
"However some of the principles and best practices would be general for all "
"approaches. Things like package immutability, using promotions between "
"repositories and not using the ``channel`` for that purpose are good "
"practices that should be followed."
msgstr ""

#: ../../../ci_tutorial/tutorial.rst:57
msgid "Packages and products pipelines"
msgstr ""

#: ../../../ci_tutorial/tutorial.rst:59
msgid ""
"When a developer is doing some changes to a package source code, we will "
"consider 2 different parts or pipelines of the overall system CI: the "
"**packages pipeline** and the **products pipeline**"
msgstr ""

#: ../../../ci_tutorial/tutorial.rst:62
msgid ""
"The **packages pipeline** takes care of building one single package when its "
"code is changed. If necessary it will build it for different configurations."
msgstr ""

#: ../../../ci_tutorial/tutorial.rst:63
msgid ""
"The **products pipeline** takes care of building the main organization "
"\"products\" (the packages that implement the final applications or "
"deliverables), and making sure that changes and new versions in dependencies "
"integrate correctly, rebuilding any intermediate packages in the graph if "
"necessary."
msgstr ""

#: ../../../ci_tutorial/tutorial.rst:66
msgid ""
"The idea is that if some developer does changes to the ``ai`` package, "
"producing a new ``ai/1.1.0`` version, the packages pipeline will first build "
"this new version. But this new version might accidentally break or require "
"rebuilding some consumer packages. If our organization main **products** are "
"``game/1.0`` and ``mapviewer/1.0``, then the products pipeline can be "
"triggered, in this case it would rebuild ``engine/1.0`` and ``game/1.0`` as "
"they are affected by the change."
msgstr ""

#: ../../../ci_tutorial/tutorial.rst:73
msgid "Repositories and promotions"
msgstr ""

#: ../../../ci_tutorial/tutorial.rst:75
msgid ""
"The concept of multiple server side repositories is very important for CI. "
"In this tutorial we will use 3 repositories:"
msgstr ""

#: ../../../ci_tutorial/tutorial.rst:77
msgid ""
"``develop``: This repository is the main one that developers have configured "
"in their machines to be able to ``conan install`` dependencies and work. As "
"such it is expected to be quite stable, similar to a shared \"develop\" "
"branch in git, and the repository should contain pre-compiled binaries for "
"the organization's pre-defined platforms, so developers and CI don't need to "
"do ``--build=missing`` and build again and again from source."
msgstr ""

#: ../../../ci_tutorial/tutorial.rst:81
msgid ""
"``packages``: This repository will be used to temporarily upload the "
"packages built by the \"packages pipeline\", to not upload them directly to "
"the ``develop`` repo and avoid disruption until these packages are fully "
"validated."
msgstr ""

#: ../../../ci_tutorial/tutorial.rst:83
msgid ""
"``products``: This repository will be used to temporarily upload the "
"packages built by the \"products pipeline\", while building and testing that "
"new dependencies changes do not break the main \"products\"."
msgstr ""

#: ../../../ci_tutorial/tutorial.rst:102
msgid ""
"Promotions are the mechanism used to make packages available from one "
"pipeline to the other. Connecting the above packages and product pipelines "
"with the repositories, there will be 2 promotions:"
msgstr ""

#: ../../../ci_tutorial/tutorial.rst:105
msgid ""
"When all the different binaries for the different configurations have been "
"built for a single package with the ``packages pipeline``, and uploaded to "
"the ``packages`` repository, the new version and changes to the package can "
"be considered \"correct\" and promoted (copied) to the ``products`` "
"repository."
msgstr ""

#: ../../../ci_tutorial/tutorial.rst:108
msgid ""
"When the ``products pipeline`` has built from source all the necessary "
"packages that need a re-build because of the new package versions in the "
"``products`` repository and has checked that the organization "
"\"products\" (such ``game/1.0`` and ``mapviewer/1.0``) are not broken, then "
"the packages can be promoted (copied) from the ``products`` repo to the "
"``develop`` repo, to make them available for all other developers and CI."
msgstr ""

#: ../../../ci_tutorial/tutorial.rst:115
msgid ""
"The concept of **immutability** is important in package management and "
"devops. Modifying ``channel`` is strongly discouraged, see :ref:`Package "
"promotions<devops_package_promotions>`."
msgstr ""

#: ../../../ci_tutorial/tutorial.rst:116
msgid ""
"The versioning approach is important. This tutorial will be following :ref:"
"`the default Conan versioning approach, see details "
"here<devops_versioning_default>`"
msgstr ""

#: ../../../ci_tutorial/tutorial.rst:118
msgid ""
"This tutorial is just modeling the **development** flow. In production "
"systems, there will be other repositories and promotions, like a ``testing`` "
"repository for the QA team, and a final ``release`` repository for final "
"users, such that packages can be promoted from ``develop`` to ``testing`` to "
"``release`` as they pass validation. Read more about promotions in :ref:"
"`Package promotions<devops_package_promotions>`."
msgstr ""

#: ../../../ci_tutorial/tutorial.rst:123
msgid ""
"Let's start with the tutorial, move to the next section to do the project "
"setup:"
msgstr ""
