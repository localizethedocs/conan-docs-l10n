# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-23 08:30+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../examples/tools/meson/create_your_first_package.rst:4
msgid "Create your first Conan package with Meson"
msgstr ""

#: ../../../examples/tools/meson/create_your_first_package.rst:6
msgid ""
"In the :ref:`Create your first Conan package "
"tutorial<creating_packages_create_your_first_conan_package>` CMake was used "
"as the build system. If you haven't read that section, read it first to "
"familiarize yourself with the ``conanfile.py`` and ``test_package`` "
"concepts, then come back to read about the specifics of the ``Meson`` "
"package creation."
msgstr ""

#: ../../../examples/tools/meson/create_your_first_package.rst:11
msgid ""
"Use the :command:`conan new` command to create a \"Hello World\" C++ library "
"example project:"
msgstr ""

#: ../../../examples/tools/meson/create_your_first_package.rst:13
msgid "$ conan new meson_lib -d name=hello -d version=1.0"
msgstr ""

#: ../../../examples/tools/meson/create_your_first_package.rst:18
msgid "This will create a Conan package project with the following structure."
msgstr ""

#: ../../../examples/tools/meson/create_your_first_package.rst:20
msgid ""
"├── conanfile.py\n"
"├── meson.build\n"
"├── hello.vcxproj\n"
"├── src\n"
"│   ├── hello.h\n"
"│   └── hello.cpp\n"
"└── test_package\n"
"    ├── conanfile.py\n"
"    ├── meson.build\n"
"    └── src\n"
"        └── example.cpp"
msgstr ""

#: ../../../examples/tools/meson/create_your_first_package.rst:35
msgid "The structure and files are very similar to the previous CMake example:"
msgstr ""

#: ../../../examples/tools/meson/create_your_first_package.rst:37
msgid ""
"**conanfile.py**: On the root folder, there is a *conanfile.py* which is the "
"main recipe file, responsible for defining how the package is built and "
"consumed."
msgstr ""

#: ../../../examples/tools/meson/create_your_first_package.rst:39
msgid ""
"**meson.build**: A Meson build script. This script doesn't need to contain "
"anything Conan-specific, it is completely agnostic of Conan, because the "
"integration is transparent."
msgstr ""

#: ../../../examples/tools/meson/create_your_first_package.rst:41
msgid ""
"**src** folder: the folder that contains the simple C++ \"hello\" library."
msgstr ""

#: ../../../examples/tools/meson/create_your_first_package.rst:42
msgid ""
"**test_package** folder: contains an *example* application that will require "
"and link with the created package. In this case the ``test_package`` also "
"contains a ``meson.build``, but it is possible to have the ``test_package`` "
"using other build system as CMake if desired. It is not mandatory that the "
"test_package is using the same build system as the package."
msgstr ""

#: ../../../examples/tools/meson/create_your_first_package.rst:48
msgid ""
"Let's have a look at the package recipe *conanfile.py* (only the relevant "
"new parts):"
msgstr ""

#: ../../../examples/tools/meson/create_your_first_package.rst:50
msgid ""
"exports_sources = \"meson.build\", \"src/*\"\n"
"\n"
"def layout(self):\n"
"    basic_layout(self)\n"
"\n"
"def generate(self):\n"
"    tc = MesonToolchain(self)\n"
"    tc.generate()\n"
"\n"
"def build(self):\n"
"    meson = Meson(self)\n"
"    meson.configure()\n"
"    meson.build()\n"
"\n"
"def package(self):\n"
"    meson = Meson(self)\n"
"    meson.install()"
msgstr ""

#: ../../../examples/tools/meson/create_your_first_package.rst:70
msgid "Let's explain the different sections of the recipe briefly:"
msgstr ""

#: ../../../examples/tools/meson/create_your_first_package.rst:72
msgid ""
"The ``layout()`` defines a ``basic_layout()``, this is less flexible than a "
"CMake one, so it doesn't allow any parametrization."
msgstr ""

#: ../../../examples/tools/meson/create_your_first_package.rst:74
msgid ""
"The ``generate()`` method calls ``MesonToolchain`` that can generate "
"``conan_meson_native.ini`` and ``conan_meson_cross.ini`` Meson toolchain "
"files for cross builds. If the project had dependencies with Conan "
"``requires``, it should add ``PkgConfigDeps`` too"
msgstr ""

#: ../../../examples/tools/meson/create_your_first_package.rst:77
msgid "The ``build()`` method uses the ``Meson()`` helper to drive the build"
msgstr ""

#: ../../../examples/tools/meson/create_your_first_package.rst:78
msgid ""
"The ``package()`` method uses the ``Meson`` install functionality to define "
"and copy to the package folder the final artifacts."
msgstr ""

#: ../../../examples/tools/meson/create_your_first_package.rst:82
msgid ""
"The **test_package** folder also contains a ``meson.build`` file that "
"declares a dependency to the tested package, and links an application, to "
"verify the package was correctly created and contains that library:"
msgstr ""

#: ../../../examples/tools/meson/create_your_first_package.rst:86
msgid "test_package/meson.build"
msgstr ""

#: ../../../examples/tools/meson/create_your_first_package.rst:86
msgid ""
"project('Testhello', 'cpp')\n"
"hello = dependency('hello', version : '>=0.1')\n"
"executable('example', 'src/example.cpp', dependencies: hello)"
msgstr ""

#: ../../../examples/tools/meson/create_your_first_package.rst:94
msgid ""
"Note the ``test_package/conanfile.py`` contains also a ``generators = "
"\"PkgConfigDeps\", \"MesonToolchain\"``, because the ``test_package`` has "
"the \"hello\" package as dependency, and ``PkgConfigDeps`` is necessary to "
"locate it."
msgstr ""

#: ../../../examples/tools/meson/create_your_first_package.rst:100
msgid ""
"This example assumes Meson, Ninja and PkgConfig are installed in the system, "
"which might not always be the case. If they are not, you can create a "
"profile ``myprofile`` with:"
msgstr ""

#: ../../../examples/tools/meson/create_your_first_package.rst:103
msgid ""
"include(default)\n"
"\n"
"[tool_requires]\n"
"meson/[*]\n"
"pkgconf/[*]"
msgstr ""

#: ../../../examples/tools/meson/create_your_first_package.rst:111
msgid ""
"We added `Meson` and `pkg-config` as :ref:`tool requirements to the profile "
"<reference_config_files_profiles_tool_requires>`. By executing ``conan "
"create . -pr=myprofile``, those tools will be installed and made available "
"during the package's build process."
msgstr ""

#: ../../../examples/tools/meson/create_your_first_package.rst:114
msgid ""
"Let's build the package from sources with the current default configuration, "
"and then let the ``test_package`` folder test the package:"
msgstr ""

#: ../../../examples/tools/meson/create_your_first_package.rst:117
msgid ""
"$ conan create .\n"
"\n"
"...\n"
"======== Testing the package: Executing test ========\n"
"hello/1.0 (test package): Running test()\n"
"hello/1.0 (test package): RUN: .\\example\n"
"hello/1.0: Hello World Release!\n"
"  hello/1.0: _M_X64 defined\n"
"  hello/1.0: MSVC runtime: MultiThreadedDLL\n"
"  hello/1.0: _MSC_VER1939\n"
"  hello/1.0: _MSVC_LANG201402\n"
"  hello/1.0: __cplusplus201402\n"
"hello/1.0 test_package"
msgstr ""

#: ../../../examples/tools/meson/create_your_first_package.rst:134
msgid ""
"We can now validate that the recipe and the package binary are in the cache:"
msgstr ""

#: ../../../examples/tools/meson/create_your_first_package.rst:137
msgid ""
"$ conan list \"hello/1.0:*\"\n"
"Local Cache:\n"
"  hello\n"
"    hello/1.0\n"
"      revisions\n"
"        856c535669f78da11502a119b7d8a6c9 (2024-03-04 17:52:39 UTC)\n"
"          packages\n"
"            c13a22a41ecd72caf9e556f68b406569547e0861\n"
"              info\n"
"                settings\n"
"                  arch: x86_64\n"
"                  build_type: Release\n"
"                  compiler: msvc\n"
"                  compiler.cppstd: 14\n"
"                  compiler.runtime: dynamic\n"
"                  compiler.runtime_type: Release\n"
"                  compiler.version: 193\n"
"                  os: Windows"
msgstr ""

#: ../../../examples/tools/meson/create_your_first_package.rst:161
msgid ":ref:`Meson built-in integrations reference<conan_tools_meson>`."
msgstr ""

#: ../../../examples/tools/meson/create_your_first_package.rst:162
msgid ""
":ref:`PkgConfigDeps built-in integrations "
"reference<conan_tools_gnu_pkgconfigdeps>`."
msgstr ""
