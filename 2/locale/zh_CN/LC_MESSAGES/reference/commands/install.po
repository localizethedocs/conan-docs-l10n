# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-23 08:30+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/commands/install.rst:4
msgid "conan install"
msgstr ""

#: ../../../reference/commands/install.rst:-1
msgid ""
"$ conan install -h\n"
"usage: conan install [-h] [-v [V]] [-cc CORE_CONF] [-f FORMAT]\n"
"                     [--out-file OUT_FILE] [--name NAME] [--version "
"VERSION]\n"
"                     [--user USER] [--channel CHANNEL] [--requires "
"REQUIRES]\n"
"                     [--tool-requires TOOL_REQUIRES] [-b BUILD]\n"
"                     [-r REMOTE | -nr] [-u [UPDATE]] [-pr PROFILE]\n"
"                     [-pr:b PROFILE_BUILD] [-pr:h PROFILE_HOST]\n"
"                     [-pr:a PROFILE_ALL] [-o OPTIONS] [-o:b OPTIONS_BUILD]\n"
"                     [-o:h OPTIONS_HOST] [-o:a OPTIONS_ALL] [-s SETTINGS]\n"
"                     [-s:b SETTINGS_BUILD] [-s:h SETTINGS_HOST]\n"
"                     [-s:a SETTINGS_ALL] [-c CONF] [-c:b CONF_BUILD]\n"
"                     [-c:h CONF_HOST] [-c:a CONF_ALL] [-l LOCKFILE]\n"
"                     [--lockfile-partial] [--lockfile-out LOCKFILE_OUT]\n"
"                     [--lockfile-clean]\n"
"                     [--lockfile-overrides LOCKFILE_OVERRIDES] [-g "
"GENERATOR]\n"
"                     [-of OUTPUT_FOLDER] [-d DEPLOYER]\n"
"                     [--deployer-folder DEPLOYER_FOLDER]\n"
"                     [--deployer-package DEPLOYER_PACKAGE] [--build-"
"require]\n"
"                     [--envs-generation {false}]\n"
"                     [path]\n"
"\n"
"Install the requirements specified in a recipe (conanfile.py or conanfile."
"txt).\n"
"\n"
"It can also be used to install packages without a conanfile, using the\n"
"--requires and --tool-requires arguments.\n"
"\n"
"If any requirement is not found in the local cache, it will iterate the "
"remotes\n"
"looking for it. When the full dependency graph is computed, and all "
"dependencies\n"
"recipes have been found, it will look for binary packages matching the "
"current settings.\n"
"If no binary package is found for some or several dependencies, it will "
"error,\n"
"unless the '--build' argument is used to build it from source.\n"
"\n"
"After installation of packages, the generators and deployers will be "
"called.\n"
"\n"
"positional arguments:\n"
"  path                  Path to a folder containing a recipe (conanfile.py "
"or\n"
"                        conanfile.txt) or to a recipe file. e.g.,\n"
"                        ./my_project/conanfile.txt.\n"
"\n"
"options:\n"
"  -h, --help            show this help message and exit\n"
"  -v [V]                Level of detail of the output. Valid options from "
"less\n"
"                        verbose to more verbose: -vquiet, -verror, -"
"vwarning,\n"
"                        -vnotice, -vstatus, -v or -vverbose, -vv or -"
"vdebug,\n"
"                        -vvv or -vtrace\n"
"  -cc CORE_CONF, --core-conf CORE_CONF\n"
"                        Define core configuration, overwriting global.conf\n"
"                        values. E.g.: -cc core:non_interactive=True\n"
"  -f FORMAT, --format FORMAT\n"
"                        Select the output format: json\n"
"  --out-file OUT_FILE   Write the output of the command to the specified "
"file\n"
"                        instead of stdout.\n"
"  --name NAME           Provide a package name if not specified in "
"conanfile\n"
"  --version VERSION     Provide a package version if not specified in\n"
"                        conanfile\n"
"  --user USER           Provide a user if not specified in conanfile\n"
"  --channel CHANNEL     Provide a channel if not specified in conanfile\n"
"  --requires REQUIRES   Directly provide requires instead of a conanfile\n"
"  --tool-requires TOOL_REQUIRES\n"
"                        Directly provide tool-requires instead of a "
"conanfile\n"
"  -b BUILD, --build BUILD\n"
"                        Optional, specify which packages to build from "
"source.\n"
"                        Combining multiple '--build' options on one command\n"
"                        line is allowed. Possible values: --build=never\n"
"                        Disallow build for all packages, use binary "
"packages\n"
"                        or fail if a binary package is not found, it cannot "
"be\n"
"                        combined with other '--build' options. --"
"build=missing\n"
"                        Build packages from source whose binary package is "
"not\n"
"                        found. --build=cascade Build packages from source "
"that\n"
"                        have at least one dependency being built from "
"source.\n"
"                        --build=[pattern] Build packages from source whose\n"
"                        package reference matches the pattern. The pattern\n"
"                        uses 'fnmatch' style wildcards, so '--build=\"*\"' "
"will\n"
"                        build everything from source. --build=~[pattern]\n"
"                        Excluded packages, which will not be built from the\n"
"                        source, whose package reference matches the "
"pattern.\n"
"                        The pattern uses 'fnmatch' style wildcards.\n"
"                        --build=missing:[pattern] Build from source if a\n"
"                        compatible binary does not exist, only for packages\n"
"                        matching pattern. --build=compatible:[pattern]\n"
"                        (Experimental) Build from source if a compatible\n"
"                        binary does not exist, and the requested package is\n"
"                        invalid, the closest package binary following the\n"
"                        defined compatibility policies (method and\n"
"                        compatibility.py)\n"
"  -r REMOTE, --remote REMOTE\n"
"                        Look in the specified remote or remotes server\n"
"  -nr, --no-remote      Do not use remote, resolve exclusively in the cache\n"
"  -u [UPDATE], --update [UPDATE]\n"
"                        Will install newer versions and/or revisions in the\n"
"                        local cache for the given reference name, or all\n"
"                        references in the graph if no argument is supplied.\n"
"                        When using version ranges, it will install the "
"latest\n"
"                        version that satisfies the range. It will update to\n"
"                        the latest revision for the resolved version range.\n"
"  -pr PROFILE, --profile PROFILE\n"
"                        Apply the specified profile. By default, or if\n"
"                        specifying -pr:h (--profile:host), it applies to "
"the\n"
"                        host context. Use -pr:b (--profile:build) to "
"specify\n"
"                        the build context, or -pr:a (--profile:all) to "
"specify\n"
"                        both contexts at once\n"
"  -pr:b PROFILE_BUILD, --profile:build PROFILE_BUILD\n"
"  -pr:h PROFILE_HOST, --profile:host PROFILE_HOST\n"
"  -pr:a PROFILE_ALL, --profile:all PROFILE_ALL\n"
"  -o OPTIONS, --options OPTIONS\n"
"                        Apply the specified options. By default, or if\n"
"                        specifying -o:h (--options:host), it applies to the\n"
"                        host context. Use -o:b (--options:build) to specify\n"
"                        the build context, or -o:a (--options:all) to "
"specify\n"
"                        both contexts at once. Example:\n"
"                        -o=\"pkg/*:with_qt=True\"\n"
"  -o:b OPTIONS_BUILD, --options:build OPTIONS_BUILD\n"
"  -o:h OPTIONS_HOST, --options:host OPTIONS_HOST\n"
"  -o:a OPTIONS_ALL, --options:all OPTIONS_ALL\n"
"  -s SETTINGS, --settings SETTINGS\n"
"                        Apply the specified settings. By default, or if\n"
"                        specifying -s:h (--settings:host), it applies to "
"the\n"
"                        host context. Use -s:b (--settings:build) to "
"specify\n"
"                        the build context, or -s:a (--settings:all) to "
"specify\n"
"                        both contexts at once. Example: -s=\"compiler=gcc\"\n"
"  -s:b SETTINGS_BUILD, --settings:build SETTINGS_BUILD\n"
"  -s:h SETTINGS_HOST, --settings:host SETTINGS_HOST\n"
"  -s:a SETTINGS_ALL, --settings:all SETTINGS_ALL\n"
"  -c CONF, --conf CONF  Apply the specified conf. By default, or if "
"specifying\n"
"                        -c:h (--conf:host), it applies to the host context.\n"
"                        Use -c:b (--conf:build) to specify the build "
"context,\n"
"                        or -c:a (--conf:all) to specify both contexts at "
"once.\n"
"                        Example:\n"
"                        -c=\"tools.cmake.cmaketoolchain:generator=Xcode\"\n"
"  -c:b CONF_BUILD, --conf:build CONF_BUILD\n"
"  -c:h CONF_HOST, --conf:host CONF_HOST\n"
"  -c:a CONF_ALL, --conf:all CONF_ALL\n"
"  -l LOCKFILE, --lockfile LOCKFILE\n"
"                        Path to a lockfile. Use --lockfile=\"\" to avoid\n"
"                        automatic use of existing 'conan.lock' file\n"
"  --lockfile-partial    Do not raise an error if some dependency is not "
"found\n"
"                        in lockfile\n"
"  --lockfile-out LOCKFILE_OUT\n"
"                        Filename of the updated lockfile\n"
"  --lockfile-clean      Remove unused entries from the lockfile\n"
"  --lockfile-overrides LOCKFILE_OVERRIDES\n"
"                        Overwrite lockfile overrides\n"
"  -g GENERATOR, --generator GENERATOR\n"
"                        Generators to use\n"
"  -of OUTPUT_FOLDER, --output-folder OUTPUT_FOLDER\n"
"                        The root output folder for generated and build "
"files\n"
"  -d DEPLOYER, --deployer DEPLOYER\n"
"                        Deploy using the provided deployer to the output\n"
"                        folder. Built-in deployers: 'full_deploy',\n"
"                        'direct_deploy', 'runtime_deploy'\n"
"  --deployer-folder DEPLOYER_FOLDER\n"
"                        Deployer output folder, base build folder by "
"default\n"
"                        if not set\n"
"  --deployer-package DEPLOYER_PACKAGE\n"
"                        Execute the deploy() method of the packages "
"matching\n"
"                        the provided patterns\n"
"  --build-require       Whether the provided path is a build-require\n"
"  --envs-generation {false}\n"
"                        Generation strategy for virtual environment files "
"for\n"
"                        the root\n"
"\n"
msgstr ""

#: ../../../reference/commands/install.rst:10
msgid ""
"The ``conan install`` command is one of the main Conan commands, and it is "
"used to resolve and install dependencies."
msgstr ""

#: ../../../reference/commands/install.rst:12
msgid "This command does the following:"
msgstr ""

#: ../../../reference/commands/install.rst:14
msgid ""
"Compute the whole dependency graph, for the current configuration defined by "
"settings, options, profiles and configuration. It resolves version ranges, "
"transitive dependencies, conditional requirements, etc, to build the "
"dependency graph."
msgstr ""

#: ../../../reference/commands/install.rst:16
msgid ""
"Evaluate the existence of binaries for every package in the graph, whether "
"or not there are precompiled binaries to download, or if they should be "
"built from sources (as directed by the ``--build`` argument). If binaries "
"are missing, it will not recompute the dependency graph to try to fallback "
"to previous versions that contain binaries for that configuration. If a "
"certain dependency version is desired, it should be explicitly required."
msgstr ""

#: ../../../reference/commands/install.rst:20
msgid ""
"Download precompiled binaries, or build binaries from sources in the local "
"cache, in the right order for the dependency graph."
msgstr ""

#: ../../../reference/commands/install.rst:21
msgid ""
"Create the necessary files as requested by the \"generators\", so build "
"systems and other tools can locate the locally installed dependencies"
msgstr ""

#: ../../../reference/commands/install.rst:22
msgid "Optionally, execute the desired ``deployers``."
msgstr ""

#: ../../../reference/commands/install.rst:27
msgid ""
"Check the :ref:`JSON format output "
"<reference_commands_graph_info_json_format>` for this command."
msgstr ""

#: ../../../reference/commands/install.rst:31
msgid "Conanfile path or --requires"
msgstr ""

#: ../../../reference/commands/install.rst:33
msgid ""
"The ``conan install`` command can use 2 different origins for information. "
"The first one is using a local ``conanfile.py`` or ``conanfile.txt``, "
"containing definitions of the dependencies and generators to be used."
msgstr ""

#: ../../../reference/commands/install.rst:36
msgid ""
"$ conan install .  # there is a conanfile.txt or a conanfile.py in the cwd\n"
"$ conan install conanfile.py  # also works, direct reference file\n"
"$ conan install myconan.txt  # explicit custom name\n"
"$ conan install myfolder  # there is a conanfile in \"myfolder\" folder"
msgstr ""

#: ../../../reference/commands/install.rst:44
msgid ""
"Even if it is possible to use a custom name, in the general case, it is "
"recommended to use the default ``conanfile.py`` name, located in the "
"repository root, so users can do a straightforward ``git clone ... `` + "
"``conan install .``"
msgstr ""

#: ../../../reference/commands/install.rst:48
msgid ""
"The other possibility is to not have a ``conanfile`` at all, and define the "
"requirements to be installed directly in the command line:"
msgstr ""

#: ../../../reference/commands/install.rst:51
msgid ""
"# Install the zlib/1.2.13 library\n"
"$ conan install --requires=zlib/1.2.13\n"
"# Install the zlib/1.2.13 and bzip2/1.0.8 libraries\n"
"$ conan install --requires=zlib/1.2.13 --requires=bzip2/1.0.8\n"
"# Install the cmake/3.23.5 and ninja/1.11.0 tools\n"
"$ conan install --tool-requires=cmake/3.23.5 --tool-requires=ninja/1.11.0\n"
"# Install the zlib/1.2.13 library and ninja/1.11.0 tool\n"
"$ conan install --requires=zlib/1.2.13 --tool-requires=ninja/1.11.0"
msgstr ""

#: ../../../reference/commands/install.rst:63
msgid ""
"In the general case, it is recommended to use a ``conanfile`` instead of "
"defining things in the command line."
msgstr ""

#: ../../../reference/commands/install.rst:69
msgid "Profiles, Settings, Options, Conf"
msgstr ""

#: ../../../reference/commands/install.rst:71
msgid ""
"There are several arguments that are used to define the effective profiles "
"that will be used, both for the \"build\" and \"host\" contexts."
msgstr ""

#: ../../../reference/commands/install.rst:74
msgid ""
"By default the arguments refer to the \"host\" context, so ``--settings:"
"host, -s:h`` is totally equivalent to ``--settings, -s``. Also, by default, "
"the ``conan install`` command will use the ``default`` profile both for the "
"\"build\" and \"host\" context. That means that if a profile with the "
"\"default\" name has not been created, it will error."
msgstr ""

#: ../../../reference/commands/install.rst:78
msgid ""
"Multiple definitions of profiles can be passed as arguments, and they will "
"compound from left to right (right has the highest priority)"
msgstr ""

#: ../../../reference/commands/install.rst:81
msgid ""
"# The values of myprofile3 will have higher priority\n"
"$ conan install . -pr=myprofile1 -pr=myprofile2 -pr=myprofile3"
msgstr ""

#: ../../../reference/commands/install.rst:88
msgid ""
"Profiles are searched for in a variety of locations, :ref:`see here for more "
"information <reference_config_files_profiles_using_profiles>`"
msgstr ""

#: ../../../reference/commands/install.rst:90
msgid ""
"If values for any of ``settings``, ``options`` and ``conf`` are provided in "
"the command line, they create a profile that is composed with the other "
"provided ``-pr`` (or the \"default\" one if not specified) profiles, with "
"higher priority, not matter what the order of arguments is."
msgstr ""

#: ../../../reference/commands/install.rst:94
msgid ""
"# the final \"host\" profile will always be build_type=Debug, even if "
"\"myprofile\"\n"
"# says \"build_type=Release\"\n"
"$ conan install . -pr=myprofile -s build_type=Debug"
msgstr ""

#: ../../../reference/commands/install.rst:104
msgid "Generators and deployers"
msgstr ""

#: ../../../reference/commands/install.rst:106
msgid ""
"The ``-g`` argument allows to define in the command line the different built-"
"in generators to be used:"
msgstr ""

#: ../../../reference/commands/install.rst:108
msgid "$ conan install --requires=zlib/1.2.13 -g CMakeDeps -g CMakeToolchain"
msgstr ""

#: ../../../reference/commands/install.rst:112
msgid ""
"Note that in the general case, the recommended approach is to have the "
"``generators`` defined in the ``conanfile``, and only for the ``--requires`` "
"use case, it would be more necessary as command line argument."
msgstr ""

#: ../../../reference/commands/install.rst:115
msgid ""
"Generators are intended to create files for the build systems to locate the "
"dependencies, while the ``deployers`` main use case is to copy files from "
"the Conan cache to user space, and performing any other custom operations "
"over the dependency graph, like collecting licenses, generating reports, "
"deploying binaries to the system, etc. The syntax for deployers is:"
msgstr ""

#: ../../../reference/commands/install.rst:119
msgid ""
"# does a full copy of the dependencies binaries to the current user folder\n"
"$ conan install . --deployer=full_deploy"
msgstr ""

#: ../../../reference/commands/install.rst:125
msgid "There are 3 built-in deployers:"
msgstr ""

#: ../../../reference/commands/install.rst:127
msgid ""
":ref:`reference_extensions_deployer_full_deploy` does a complete copy of the "
"dependencies binaries in the local folder, with a minimal folder structure "
"to avoid conflicts between files and artifacts of different packages"
msgstr ""

#: ../../../reference/commands/install.rst:129
msgid ""
":ref:`reference_extensions_deployer_direct_deploy` does a copy of only the "
"immediate direct dependencies, but does not include the transitive "
"dependencies."
msgstr ""

#: ../../../reference/commands/install.rst:131
msgid ""
":ref:`reference_extensions_deployer_runtime_deploy` deploys all the shared "
"libraries and the executables of the dependencies into a flat directory "
"structure, preserving subdirectories as-is."
msgstr ""

#: ../../../reference/commands/install.rst:134
msgid ""
"Some generators might have the capability of redefining the target \"package "
"folder\". That means that if some other generator like ``CMakeDeps`` is used "
"that is pointing to the packages, it will be pointing to the local deployed "
"copy, and not to the original packages in the Conan cache. See the full "
"example in :ref:`examples_extensions_builtin_deployers_development`."
msgstr ""

#: ../../../reference/commands/install.rst:138
msgid ""
"It is also possible, and it is a powerful extension point, to write custom "
"user deployers. Read more about custom deployers in :ref:"
"`reference_extensions_deployers`."
msgstr ""

#: ../../../reference/commands/install.rst:141
msgid ""
"It is possible to also invoke the package recipes ``deploy()`` method with "
"the ``--deployer-package``:"
msgstr ""

#: ../../../reference/commands/install.rst:143
msgid ""
"# Execute deploy() method of every recipe that defines it\n"
"$ conan install --requires=pkg/0.1 --deployer-package=\"*\"\n"
"# Execute deploy() method only for \"pkg\" (any version) recipes\n"
"$ conan install --requires=pkg/0.1 --deployer-package=\"pkg/*\"\n"
"# Execute deploy() method for all packages except the \"zlib\" (transitive "
"dep) one\n"
"$ conan install --requires=pkg/0.1 --deployer-package=\"*\" --deployer-"
"package=\"~zlib/*\""
msgstr ""

#: ../../../reference/commands/install.rst:152
msgid ""
"The ``--deployer-package`` argument is a pattern and accepts multiple "
"values, all package references matching any of the defined patterns will "
"execute its ``deploy()`` method. This includes negated patterns, where for "
"example ``--deployer-package=~pkg/*`` will execute the ``deploy()`` method "
"for all packages except for that of the ``pkg`` recipe. The ``--deployer-"
"folder`` argument will also affect the output location of this deployment. "
"See the :ref:`deploy() method<reference_conanfile_methods_deploy>`."
msgstr ""

#: ../../../reference/commands/install.rst:156
msgid ""
"If multiple deployed packages deploy to the same location, it is their "
"responsibility to not mutually overwrite their binaries if they have the "
"same filenames. For example if multiple packages ``deploy()`` a file called "
"\"License.txt\", each recipe is responsible for creating an intermediate "
"folder with the package name and/or version that makes it unique, so other "
"recipes ``deploy()`` method do not overwrite previously deployed \"License."
"txt\" files."
msgstr ""

#: ../../../reference/commands/install.rst:160
msgid "Name, version, user, channel"
msgstr ""

#: ../../../reference/commands/install.rst:162
msgid ""
"The ``conan install`` command provides optional arguments for ``--name, --"
"version, --user, --channel``. These arguments might not be necessary in the "
"majority of cases. Never for ``conanfile.txt`` and for ``conanfile.py`` only "
"in the case that they are not defined in the recipe:"
msgstr ""

#: ../../../reference/commands/install.rst:166
msgid ""
"from conan import ConanFile\n"
"from conan.tools.scm import Version\n"
"\n"
"class Pkg(ConanFile):\n"
"    name = \"mypkg\"\n"
"\n"
"    def requirements(self):\n"
"        if Version(self.version) >= \"3.23\":\n"
"            self.requires(\"...\")"
msgstr ""

#: ../../../reference/commands/install.rst:180
msgid ""
"# If we don't specify ``--version``, it will be None and it will fail\n"
"$ conan install . --version=3.24"
msgstr ""

#: ../../../reference/commands/install.rst:187
msgid "Lockfiles"
msgstr ""

#: ../../../reference/commands/install.rst:189
msgid ""
"The ``conan install`` command has several arguments to load and produce "
"lockfiles. By default, if a ``conan.lock`` file is located beside the recipe "
"or in the current working directory if no path is provided, will be used as "
"an input lockfile."
msgstr ""

#: ../../../reference/commands/install.rst:193
msgid ""
"Lockfiles are strict by default, that means that if there is some "
"``requires`` and it cannot find a matching locked reference in the lockfile, "
"it will error and stop. For cases where it is expected that the lockfile "
"will not be complete, as there might be new dependencies, the ``--lockfile-"
"partial`` argument can be used."
msgstr ""

#: ../../../reference/commands/install.rst:198
msgid ""
"By default, ``conan install`` will not generate an output lockfile, but if "
"the ``--lockfile-out`` argument is provided, pointing to a filename, like "
"``--lockfile-out=result.lock``, then a lockfile will be generated from the "
"current dependency graph. If ``--lockfile-clean`` argument is provided, all "
"versions and revisions not used in the current dependency graph will be "
"dropped from the resulting lockfile."
msgstr ""

#: ../../../reference/commands/install.rst:203
msgid ""
"Let's say that we already have a ``conan.lock`` input lockfile, but we just "
"added a new ``requires = \"newpkg/1.0\"`` to a new dependency. We could "
"resolve the dependencies, locking all the previously locked versions, while "
"allowing to resolve the new one, which was not previously present in the "
"lockfile, and store it in a new location, or overwrite the existing lockfile:"
msgstr ""

#: ../../../reference/commands/install.rst:207
msgid ""
"# --lockfile=conan.lock is the default, not necessary\n"
"$ conan install . --lockfile=conan.lock --lockfile-partial --lockfile-"
"out=conan.lock"
msgstr ""

#: ../../../reference/commands/install.rst:213
msgid ""
"Also, it is likely that the majority of lockfile operations are better "
"managed by the ``conan lock`` command."
msgstr ""

#: ../../../reference/commands/install.rst:217
msgid ":ref:`tutorial_consuming_packages_versioning_lockfiles`."
msgstr ""

#: ../../../reference/commands/install.rst:218
msgid ""
"Read the tutorial about the :ref:`local package development flow "
"<local_package_development_flow>`."
msgstr ""

#: ../../../reference/commands/install.rst:222
msgid "Update"
msgstr ""

#: ../../../reference/commands/install.rst:224
msgid ""
"The ``conan install`` command has an ``--update`` argument that will force "
"the re-evaluation of the selected items of the dependency graph, allowing "
"for the update of the dependencies to the latest version if using version "
"ranges, or to the latest revision of the same version, when those versions "
"are not locked in the given lockfile. Passing ``--update`` will check every "
"package in the dependency graph, but it is also possible to pass a package "
"name to the ``--update`` argument (it can be added to the command more than "
"once with different names), to only update those packages, which avoids the "
"re-evaluation of the whole graph."
msgstr ""

#: ../../../reference/commands/install.rst:230
msgid ""
"$ conan install . --update  # Update all packages in the graph\n"
"$ conan install . --update=openssl  # Update only the openssl package\n"
"$ conan install . --update=openssl --update=boost  # Update both openssl and "
"boost packages"
msgstr ""

#: ../../../reference/commands/install.rst:236
msgid ""
"Note that the ``--update`` argument will look into all the remotes specified "
"in the command for possible newer versions, and won't stop at the first "
"newer one found."
msgstr ""

#: ../../../reference/commands/install.rst:243
msgid "Build modes"
msgstr ""

#: ../../../reference/commands/install.rst:245
msgid ""
"The ``conan install --build=<mode>`` argument controls the behavior "
"regarding building packages from source. The default behavior is failing if "
"there are no existing binaries, with the \"missing binary\" error message, "
"except for packages that define a ``build_policy = \"missing\"`` policy, but "
"this can be changed with the ``--build`` argument."
msgstr ""

#: ../../../reference/commands/install.rst:250
msgid "The possible values are:"
msgstr ""

#: ../../../reference/commands/install.rst:252
msgid ""
"--build=never      Disallow build for all packages, use binary packages or "
"fail if a binary\n"
"                   package is not found, it cannot be combined with other '--"
"build' options.\n"
"--build=missing    Build packages from source whose binary package is not "
"found.\n"
"--build=cascade    Build packages from source that have at least one "
"dependency being built from\n"
"                   source.\n"
"--build=[pattern]  Build packages from source whose package reference "
"matches the pattern. The\n"
"                   pattern uses 'fnmatch' style wildcards, so '--"
"build=\"*\"' will build everything\n"
"                   from source.\n"
"--build=~[pattern] Excluded packages, which will not be built from the "
"source, whose package\n"
"                   reference matches the pattern. The pattern uses 'fnmatch' "
"style wildcards.\n"
"--build=missing:[pattern] Build from source if a compatible binary does not "
"exist, only for\n"
"                          packages matching pattern.\n"
"--build=compatible:[pattern] (Experimental) Build from source if a "
"compatible binary does not\n"
"                             exist, and the requested package is invalid, "
"the closest package\n"
"                             binary following the defined compatibility "
"policies (method and\n"
"                             compatibility.py)"
msgstr ""

#: ../../../reference/commands/install.rst:272
msgid ""
"The ``--build=never`` policy can be used to force never building from "
"source, even for package recipes that define the ``build_policy = "
"\"missing\"`` policy."
msgstr ""

#: ../../../reference/commands/install.rst:275
msgid ""
"The ``--build=compatible:[pattern]`` is an **experimental** new mode that "
"allows building missing binaries with a configuration different than the "
"current one. For example if the current profile has ``compiler.cppstd=14``, "
"but some package raises an \"invalid\" configuration error, because it needs "
"at least ``compiler.cppstd=17``, and the binary compatibiliy (defined for "
"example in ``compatibility.py`` plugin) allows that as a compatible binary, "
"then, Conan will build from source that dependency package applying "
"``compiler.cppstd=17``."
msgstr ""

#: ../../../reference/commands/install.rst:282
msgid ""
"The ``--build=[pattern]`` uses a pattern, so it should use something like "
"``--build=\"zlib/*\"`` to match any version of the ``zlib`` package, as "
"doing ``--build=zlib`` will not work."
msgstr ""

#: ../../../reference/commands/install.rst:287
msgid "**Best practices**"
msgstr ""

#: ../../../reference/commands/install.rst:289
msgid ""
"Forcing the rebuild of existing binaries with ``--build=\"*\"`` or any other "
"``--build=\"pkg/*\"`` or similar pattern is not a recommended practice. If a "
"binary is already existing there is no reason to rebuild it from source. CI "
"pipelines should be specially careful to not do this, and in general the ``--"
"build=missing`` and ``--build=missing:[pattern]`` are more recommended."
msgstr ""

#: ../../../reference/commands/install.rst:294
msgid ""
"The ``--build=cascade`` mode is partly legacy, and shouldn't be used in most "
"cases. The ``package_id`` computation should be the driver to decide what "
"needs to be built. This mode has been left in Conan 2 only for exceptional "
"cases, like recovering from broken systems, but it is not recommended for "
"normal production usage."
msgstr ""
