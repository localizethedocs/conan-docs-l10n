# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:32+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../integrations/visual_studio.rst:4
msgid "|visual_studio_logo| Visual Studio"
msgstr ""

#: ../../../integrations/visual_studio.rst:129
msgid "visual_studio_logo"
msgstr ""

#: ../../../integrations/visual_studio.rst:7
msgid "Recipe tools for Visual Studio"
msgstr ""

#: ../../../integrations/visual_studio.rst:9
msgid ""
"Conan provides several tools to help manage your projects using Microsoft "
"Visual Studio. These tools can be imported from ``conan.tools.microsoft`` "
"and allow for native integration with Microsoft Visual Studio, without the "
"need to use CMake and instead directly using Visual Studio solutions, "
"projects, and property files. The most relevant tools are:"
msgstr ""

#: ../../../integrations/visual_studio.rst:15
msgid ""
"`MSBuildDeps`: the dependency information generator for Microsoft MSBuild "
"build system. It will generate multiple ``xxxx.props`` properties files, one "
"per dependency of a package, to be used by consumers using MSBuild or Visual "
"Studio, just by adding the generated properties files to the solution and "
"projects."
msgstr ""

#: ../../../integrations/visual_studio.rst:20
msgid ""
"`MSBuildToolchain`: the toolchain generator for MSBuild. It will generate "
"MSBuild properties files that can be added to the Visual Studio solution "
"projects. This generator translates the current package configuration, "
"settings, and options, into MSBuild properties files syntax."
msgstr ""

#: ../../../integrations/visual_studio.rst:25
msgid ""
"`MSBuild` build helper is a wrapper around the command line invocation of "
"MSBuild. It will abstract the calls like ``msbuild \"MyProject.sln\" /p:"
"Configuration=<conf> /p:Platform=<platform>`` into Python method calls."
msgstr ""

#: ../../../integrations/visual_studio.rst:29
msgid ""
"For the full list of tools under ``conan.tools.microsoft`` please check the :"
"ref:`reference <conan_tools_microsoft>` section."
msgstr ""

#: ../../../integrations/visual_studio.rst:36
msgid "Conan extension for Visual Studio"
msgstr ""

#: ../../../integrations/visual_studio.rst:38
msgid ""
"There's an extension `available in the VisualStudio Marketplace <https://"
"marketplace.visualstudio.com/items?itemName=conan-io.conan-vs-extension>`_ "
"that's compatible begining from Visual Studio  version *2022*. With this "
"extension, you can browse Conan packages available in `Conan Center <https://"
"conan.io/center>`_, add them to your project, and they will be automatically "
"installed before building your projects."
msgstr ""

#: ../../../integrations/visual_studio.rst:46
msgid ""
"The Visual Studio extension is only compatible with C/C++ projects based on "
"MSBuild. It will not work with CMake-based projects or projects using other "
"technologies. For CMake-based projects, please refer to the `cmake-conan "
"dependency provider <https://github.com/conan-io/cmake-conan>`_."
msgstr ""

#: ../../../integrations/visual_studio.rst:53
msgid "Installation"
msgstr ""

#: ../../../integrations/visual_studio.rst:55
msgid ""
"The Conan Visual Studio Extension can be installed directly from within "
"Visual Studio:"
msgstr ""

#: ../../../integrations/visual_studio.rst:57
msgid "Open the Extensions menu."
msgstr ""

#: ../../../integrations/visual_studio.rst:58
msgid "Select Manage Extensions."
msgstr ""

#: ../../../integrations/visual_studio.rst:59
msgid "Search for \"Conan\" in the Online marketplace."
msgstr ""

#: ../../../integrations/visual_studio.rst:60
msgid "Download and install the extension."
msgstr ""

#: ../../../integrations/visual_studio.rst:62
msgid ""
"Alternatively, you can download the latest release from our `releases page "
"<https://github.com/conan-io/conan-vs-extension/releases/latest>`_ and "
"install it manually."
msgstr ""

#: ../../../integrations/visual_studio.rst:67
msgid "Initial Configuration"
msgstr ""

#: ../../../integrations/visual_studio.rst:69
msgid ""
"After installing the Conan extension, you can access it from the “Conan” "
"tool window in Visual Studio. To do so, go to **View > Other Windows > Conan "
"C/C++ Package Manager**."
msgstr ""

#: ../../../integrations/visual_studio.rst:-1
msgid "Initial configuration"
msgstr ""

#: ../../../integrations/visual_studio.rst:75
msgid ""
"Initially, you will need to configure the Conan executable to be used by the "
"extension. By clicking on the *configure* button (gear icon) from the "
"extension's window, you can set up the path to the Conan client executable. "
"You can either specify a custom path or choose to use the Conan client "
"installed at the system level."
msgstr ""

#: ../../../integrations/visual_studio.rst:-1
msgid "Select Conan executable"
msgstr ""

#: ../../../integrations/visual_studio.rst:83
msgid ""
"Once you have configured the Conan client, the extension is ready to use, "
"and you can start adding libraries to your project."
msgstr ""

#: ../../../integrations/visual_studio.rst:87
msgid "Searching and Adding Libraries"
msgstr ""

#: ../../../integrations/visual_studio.rst:89
msgid ""
"Once configured, the library list in the Conan tool window becomes active, "
"and you can search for Conan packages using the search bar. Selecting a "
"library will allow you to view its details, including available versions and "
"integration options."
msgstr ""

#: ../../../integrations/visual_studio.rst:-1
msgid "Search for Conan packages"
msgstr ""

#: ../../../integrations/visual_studio.rst:96
msgid ""
"If you now click the `Add requirement` button, the extension will add a "
"`conanfile.py` and a `conandata.yml` to your project with the necessary "
"information to install the selected Conan packages. It will also add a "
"prebuild event to the project to install those libraries on the next "
"compilation of the project."
msgstr ""

#: ../../../integrations/visual_studio.rst:101
msgid ""
"At any point, you can also use the *refresh* button (circular arrow icon) to "
"update the list of available packages in `Conan Center <https://conan.io/"
"center>`_."
msgstr ""

#: ../../../integrations/visual_studio.rst:104
msgid ""
"Now, if you initiate the build process for your project, the pre-build event "
"will trigger Conan to install the packages and inject the necessary "
"properties into the project, enabling Visual Studio to compile and link "
"against those libraries."
msgstr ""

#: ../../../integrations/visual_studio.rst:-1
msgid "Build project with Conan packages"
msgstr ""

#: ../../../integrations/visual_studio.rst:113
msgid ""
"The initial compilation might fail if Visual Studio does not have sufficient "
"time to process the injected properties. If this happens, simply rebuild the "
"project, and it should build successfully."
msgstr ""

#: ../../../integrations/visual_studio.rst:117
msgid ""
"For a more in-depth introduction to the Conan Visual Studio extension with a "
"practical example, please check this `example in Conan blog <https://blog."
"conan.io/2024/03/21/Introducing-new-conan-visual-studio-extension.html>`_."
msgstr ""

#: ../../../integrations/visual_studio.rst:123
msgid ""
"Reference for :ref:`MSBuildDeps<conan_tools_microsoft_msbuilddeps>`, :ref:"
"`MSBuildToolchain<conan_tools_microsoft_msbuildtoolchain>` and :ref:"
"`MSBuild<conan_tools_microsoft_msbuild>`."
msgstr ""

#: ../../../integrations/visual_studio.rst:127
msgid ":ref:`CLion Conan plugin <integrations_clion>`."
msgstr ""
