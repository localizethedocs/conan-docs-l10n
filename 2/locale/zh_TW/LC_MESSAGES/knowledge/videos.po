# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-14 08:38+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../knowledge/videos.rst:4
msgid "Videos"
msgstr "影片"

#: ../../../knowledge/videos.rst:8
msgid ""
"This section presents some conference talks and presentations regarding "
"Conan. While they can be very informative and educational, please note that "
"some of them might be outdated. Always use the documentation and reference "
"as the source of truth, not the videos."
msgstr ""

#: ../../../knowledge/videos.rst:17
msgid "ACCU 2025"
msgstr ""

#: ../../../knowledge/videos.rst:18
msgid ""
"`Continuous Integration for Large Scale C/C++ Projects With Conan2` by Diego "
"Rodriguez-Losada"
msgstr ""

#: ../../../knowledge/videos.rst:20
msgid ""
"There are two main paradigms to develop large scale C, C++ projects: using "
"mono-repos and package-based development, both have different pros and cons. "
"Using package managers such as Conan allows easy retrieval of dependencies, "
"including binaries, avoiding continuous and expensive rebuilds from source. "
"While this works easily for third party dependencies, when dependencies are "
"very stable, quick evolution in a large dependency graph when there are "
"different developers working concurrently in different packages, can be more "
"challenging."
msgstr ""

#: ../../../knowledge/videos.rst:23
msgid ""
"With Conan 2's new tools it is possible to implement an efficient Continuous "
"Integration process for large scale projects, computing what packages need "
"to be built, and in what specific order and parallelism."
msgstr ""

#: ../../../knowledge/videos.rst:25
msgid ""
"The concept of \"products pipeline\" will be introduced as an scalable "
"approach that allows to focus on the business value while allowing "
"efficiency. The dependency graph build order for every different product can "
"be computed, for every different configuration (platform, compiler, "
"build_type, etc). This is done efficiently, taking into account the "
"versioning scheme and the package types (header-only, static library, shared "
"library, application) with a explicit novel model of the dependencies effect "
"in the packages binaries."
msgstr ""

#: ../../../knowledge/videos.rst:27
msgid ""
"Then all the different computed graph \"build-orders\" can be merged into a "
"single one to avoid duplicated builds. The final graph merged \"build-"
"order\" can be distributed efficiently to different build agents, as it also "
"specifies which package builds can be done in parallel. For projects with "
"concurrent changes, using lockfiles is very important in this stage to "
"guarantee consistency and reproducibility of the dependencies."
msgstr ""

#: ../../../knowledge/videos.rst:29
msgid ""
"Finally, the concept of stages in the CI process using multiple server "
"repositories and copying of packages across those repositories will be "
"presented. This process is known as package promotions and is a known best "
"practice in DevOps for other technologies, and is critical to avoid "
"disruptions to developers and production systems that the CI builds could "
"introduce."
msgstr ""

#: ../../../knowledge/videos.rst:31
msgid ""
"The talk will present both the theoretical foundations and a full real "
"example with available source code to demonstrate the presented "
"functionalities."
msgstr ""

#: ../../../knowledge/videos.rst:40
msgid "Using std::cpp 2024"
msgstr ""

#: ../../../knowledge/videos.rst:41
msgid ""
"`Unlock the power of Conan 2 - 15 new features you didn’t know about! Luis "
"Caro / Diego Rodriguez-Losada`"
msgstr ""

#: ../../../knowledge/videos.rst:0
msgid ""
"Conan 2.0 was released over a year ago with a large number of new features "
"and improvements. Since its release, the team has continued to add "
"improvements based on user feedback, releasing many more new features than "
"in the previous years combined."
msgstr ""

#: ../../../knowledge/videos.rst:0
msgid ""
"Join Diego and Luis from the Conan team for an overview of practical "
"examples of what Conan 2 can do for your C and C++ package management "
"development workflows. Some highlights include: transparent fall back to "
"system-provided dependencies, managing metadata files, and the flexible and "
"fully transparent CMake integrations, and more!"
msgstr ""

#: ../../../knowledge/videos.rst:51
msgid "ACCU 2022"
msgstr ""

#: ../../../knowledge/videos.rst:52
msgid ""
"`Advanced Dependencies Model in Conan 2.0 C, C++ Package Manager by Diego "
"Rodriguez-Losada`"
msgstr ""

#: ../../../knowledge/videos.rst:54
msgid ""
"Conan 2.0 introduces a new dependencies model with requirements \"traits\" "
"like visibility, definition and propagation of headers and libraries "
"independently, and more that allow modeling all these advanced use cases. "
"This talk will present this new model, and apply it to solve different "
"advanced use cases, with real life examples"
msgstr ""

#: ../../../knowledge/videos.rst:63
msgid "CppCon 2022"
msgstr ""

#: ../../../knowledge/videos.rst:64
msgid ""
"`What's New in Conan 2.0 C/C++ Package Manager - Diego Rodriguez-Losada`"
msgstr ""

#: ../../../knowledge/videos.rst:66
msgid ""
"During the years since Conan 1.0 was released, we have continued to learn "
"from the C++ ecosystem as we watched it grow; learning many lessons, "
"challenges and trends in the industry from the feedback from tens of "
"thousands of conversations with users and customers, including many of the "
"largest C++ related companies in the world. This talk summarizes some of "
"these lessons and how they have been used to create the new major version of "
"Conan."
msgstr ""

#: ../../../knowledge/videos.rst:76
msgid "Meeting C++ 2023"
msgstr ""

#: ../../../knowledge/videos.rst:77
msgid "`CMake and Conan: past, present and future - Diego Rodriguez-Losada`"
msgstr ""

#: ../../../knowledge/videos.rst:0
msgid ""
"This talk will quickly review the past approaches, their pitfalls, and how "
"modern CMake and Conan integrations have improved over them:"
msgstr ""

#: ../../../knowledge/videos.rst:0
msgid ""
"From variables, to targets, to transparent targets integration with modern "
"Conan generators"
msgstr ""

#: ../../../knowledge/videos.rst:0
msgid ""
"Better separation of concerns to align binary configurations using CMake "
"toolchains"
msgstr ""

#: ../../../knowledge/videos.rst:0
msgid "Improving the developer experience with CMake presets"
msgstr ""

#: ../../../knowledge/videos.rst:0
msgid ""
"The new CMake-Conan integration using CMake’s new dependency providers "
"feature for transparent installation of dependencies"
msgstr ""

#: ../../../knowledge/videos.rst:90
msgid "Using std::cpp"
msgstr ""

#: ../../../knowledge/videos.rst:91
msgid ""
"`Why you shouldn’t write your own C++ package manager Luis Caro Campos JFrog`"
msgstr ""

#: ../../../knowledge/videos.rst:0
msgid ""
"This talk will provide a quick overview of how Conan deals with intrinsic C+"
"+ complexities:"
msgstr ""

#: ../../../knowledge/videos.rst:0
msgid "Headers vs binary symbols"
msgstr ""

#: ../../../knowledge/videos.rst:0
msgid "Shared and static library"
msgstr ""

#: ../../../knowledge/videos.rst:0
msgid "Symbol visibility"
msgstr ""

#: ../../../knowledge/videos.rst:0
msgid ""
"Binary compatibility: is there a one-size fits all approach to modeling it?"
msgstr ""

#: ../../../knowledge/videos.rst:0
msgid ""
"Build-time dependency resolution is only half the battle, what about runtime "
"dependencies?"
msgstr ""

#: ../../../knowledge/videos.rst:105
msgid "Meeting C++ online book & tool fair"
msgstr ""

#: ../../../knowledge/videos.rst:106
msgid "`Conan 2.0 demo - Chris McArthur`"
msgstr ""
