# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-28 08:24+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/extensions/binary_compatibility.rst:4
msgid "Binary compatibility"
msgstr ""

#: ../../../reference/extensions/binary_compatibility.rst:6
msgid ""
"This plugin, located in the cache ``extensions/plugins/compatibility/"
"compatibility.py`` allows defining custom rules for the binary compatibility "
"of packages across settings and options. It has some built-in logic "
"implemented, but can be customized."
msgstr ""

#: ../../../reference/extensions/binary_compatibility.rst:10
msgid ""
"The interface is a single function called ``def compatibility(conanfile)`` "
"that receives a single ``conanfile`` object as argument. Its return will be "
"equal to the ``compatibility()`` recipe method, an ordered list of "
"variations over ``settings``, ``options`` that is considered to be binary "
"compatible. Conan will check that list in order for binary existence until "
"one binary is found. The following would be valid syntax (but not an useful "
"or working one, as it will fail in Windows, for example):"
msgstr ""

#: ../../../reference/extensions/binary_compatibility.rst:17
msgid ""
"def compatibility(conanfile):\n"
"    result = []\n"
"    if conanfile.settings.build_type == \"Debug\":\n"
"        result.append({\"settings\": [(\"build_type\", \"Release\")]})\n"
"    return result"
msgstr ""

#: ../../../reference/extensions/binary_compatibility.rst:26
msgid ""
"Conan provides a default ``compatibility.py`` that implements binary "
"compatibility for different ``compiler.cppstd`` and ``compiler.cstd`` "
"values. That is, by default it assumes that binaries built with different "
"``cppstd`` and ``cstd`` values (for the same compiler and compiler version) "
"are binary compatible, and can be linked together without issues."
msgstr ""

#: ../../../reference/extensions/binary_compatibility.rst:31
msgid ""
"The ``compiler.cppstd`` must be defined in profiles in most C++ scenarios. "
"If a binary for a given ``compiler.cppstd`` value doesn't exist (that means, "
"a binary built with exactly that setting), Conan  default ``compatibility."
"py`` will iterate the supported ``cppstd`` values by that compiler version. "
"It is possible to disable this behavior for any specific package, adding to "
"the package ``conanfile.py`` recipe the ``extension_properties = "
"{\"compatibility_cppstd\": False}`` attribute, read the :ref:"
"`extension_properties docs<conan_conanfile_attributes_extension_properties>`."
msgstr ""

#: ../../../reference/extensions/binary_compatibility.rst:38
msgid ""
"From Conan 2.4, the ``compiler.cstd`` setting is available. It will only be "
"taken into account in the computation of packages ``package_id`` when their "
"recipes explicitly declare the ``languages = \"C\"`` attribute."
msgstr ""

#: ../../../reference/extensions/binary_compatibility.rst:41
msgid ""
"There are some cases where the default ``compatibility.py`` will not be "
"enough, and users will need to customize it to their needs. Some rules and "
"tips for that customization are explained below."
msgstr ""

#: ../../../reference/extensions/binary_compatibility.rst:44
msgid ""
"Importantly, the built-in ``compatibility.py`` **is subject to changes in "
"future releases**. To avoid being updated in the future, please remove the "
"first comment ``# This file was generated by Conan.``"
msgstr ""

#: ../../../reference/extensions/binary_compatibility.rst:46
msgid ""
"Removing values from ``settings`` or ``options`` in the returned list is "
"possible when they allow being unset, by specifying the value of the item to "
"``None``."
msgstr ""

#: ../../../reference/extensions/binary_compatibility.rst:51
msgid ""
"The ``compatibility.py`` feature is in **preview**. The current default "
"``compatibility.py`` is **experimental**. See :ref:`the Conan "
"stability<stability>` section for more information."
msgstr ""

#: ../../../reference/extensions/binary_compatibility.rst:57
msgid ""
"Read the :ref:`binary model reference<reference_binary_model>` for a full "
"view of the Conan binary model."
msgstr ""
