# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-21 08:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/extensions/python_api/ExportAPI.rst:2
msgid "Export API"
msgstr ""

#: ../../../common/experimental_warning.inc:3
msgid ""
"This feature is experimental and subject to breaking changes. See :ref:`the "
"Conan stability<stability>` section for more information."
msgstr ""

#: ../../../conan_sources/conan/api/subapi/export.py:docstring of
#: conan.api.subapi.export.ExportAPI:1
msgid ""
"This API provides methods to export artifacts, both recipes and pre-compiled "
"package binaries from user folders to the Conan cache, as Conan recipes and "
"Conan package binaries"
msgstr ""

#: ../../../conan_sources/conan/api/subapi/export.py:docstring of
#: conan.api.subapi.export.ExportAPI.export:1
msgid ""
"Exports a ``conanfile.py`` recipe, together with its associated files to the "
"Conan cache. A \"recipe-revision\" will be computed and assigned."
msgstr ""

#: ../../../conan_sources/conan/api/subapi/export.py:docstring of
#: conan.api.subapi.export.ExportAPI.export:0
#: conan.api.subapi.export.ExportAPI.export_pkg:0
#: conan.api.subapi.export.ExportAPI.export_pkg_graph:0
msgid "Parameters"
msgstr ""

#: ../../../conan_sources/conan/api/subapi/export.py:docstring of
#: conan.api.subapi.export.ExportAPI.export:4
msgid "Path to the conanfile to be exported"
msgstr ""

#: ../../../conan_sources/conan/api/subapi/export.py:docstring of
#: conan.api.subapi.export.ExportAPI.export:5
msgid ""
"Optional package name. Typically not necessary as it is defined by the "
"recipe attribute or dynamically with the ``set_name()`` method. If it is "
"defined in recipe and as an argument, but they don't match, an error will be "
"raised."
msgstr ""

#: ../../../conan_sources/conan/api/subapi/export.py:docstring of
#: conan.api.subapi.export.ExportAPI.export:8
msgid ""
"Optional version. It can be defined in the recipe with the version attribute "
"or dynamically with the 'set_version()' method. If it is defined in recipe "
"and as an argument, but they don't match, an error will be raised."
msgstr ""

#: ../../../conan_sources/conan/api/subapi/export.py:docstring of
#: conan.api.subapi.export.ExportAPI.export:11
msgid ""
"Optional user. Can be defined by recipe attribute. If it is defined in "
"recipe and as an argument, but they don't match, an error will be raised."
msgstr ""

#: ../../../conan_sources/conan/api/subapi/export.py:docstring of
#: conan.api.subapi.export.ExportAPI.export:13
msgid ""
"Optional channel. Can be defined by recipe attribute. If it is defined in "
"recipe and as an argument, but they don't match, an error will be raised."
msgstr ""

#: ../../../conan_sources/conan/api/subapi/export.py:docstring of
#: conan.api.subapi.export.ExportAPI.export:15
msgid ""
"Optional, only relevant if the recipe has 'python-requires' to be locked"
msgstr ""

#: ../../../conan_sources/conan/api/subapi/export.py:docstring of
#: conan.api.subapi.export.ExportAPI.export:16
msgid "Optional, only relevant to resolve 'python-requires' in remotes"
msgstr ""

#: ../../../conan_sources/conan/api/subapi/export.py:docstring of
#: conan.api.subapi.export.ExportAPI.export:0
#: conan.api.subapi.export.ExportAPI.export_pkg_graph:0
msgid "Returns"
msgstr ""

#: ../../../conan_sources/conan/api/subapi/export.py:docstring of
#: conan.api.subapi.export.ExportAPI.export:17
msgid "A tuple of the exported RecipeReference and a ConanFile object"
msgstr ""

#: ../../../conan_sources/conan/api/subapi/export.py:docstring of
#: conan.api.subapi.export.ExportAPI.export_pkg_graph:1
msgid ""
"Computes a dependency graph for a given configuration, for an already "
"existing (previously exported) recipe in the Conan cache. This method "
"computes the full dependency graph, using the profiles, lockfile and remotes "
"information as any other install/graph/create command. This is necessary in "
"order to compute the \"package_id\" of the binary being exported into the "
"Conan cache. The resulting dependency graph can be passed to "
"``export_pkg()`` method"
msgstr ""

#: ../../../conan_sources/conan/api/subapi/export.py:docstring of
#: conan.api.subapi.export.ExportAPI.export_pkg_graph:8
msgid "Path to the conanfile.py in the user folder"
msgstr ""

#: ../../../conan_sources/conan/api/subapi/export.py:docstring of
#: conan.api.subapi.export.ExportAPI.export_pkg_graph:9
msgid "full RecipeReference, including recipe-revision"
msgstr ""

#: ../../../conan_sources/conan/api/subapi/export.py:docstring of
#: conan.api.subapi.export.ExportAPI.export_pkg_graph:10
msgid "Profile for the host context"
msgstr ""

#: ../../../conan_sources/conan/api/subapi/export.py:docstring of
#: conan.api.subapi.export.ExportAPI.export_pkg_graph:11
msgid "Profile for the build context"
msgstr ""

#: ../../../conan_sources/conan/api/subapi/export.py:docstring of
#: conan.api.subapi.export.ExportAPI.export_pkg_graph:12
msgid "Optional lockfile"
msgstr ""

#: ../../../conan_sources/conan/api/subapi/export.py:docstring of
#: conan.api.subapi.export.ExportAPI.export_pkg_graph:13
msgid "List of Remotes"
msgstr ""

#: ../../../conan_sources/conan/api/subapi/export.py:docstring of
#: conan.api.subapi.export.ExportAPI.export_pkg_graph:14
msgid "In case a package intended to be used as a tool-requires"
msgstr ""

#: ../../../conan_sources/conan/api/subapi/export.py:docstring of
#: conan.api.subapi.export.ExportAPI.export_pkg_graph:16
msgid "The folder containing output files, like potential environment scripts"
msgstr ""

#: ../../../conan_sources/conan/api/subapi/export.py:docstring of
#: conan.api.subapi.export.ExportAPI.export_pkg_graph:17
msgid "A Graph object that can be passed to ``export_pkg()`` method"
msgstr ""

#: ../../../conan_sources/conan/api/subapi/export.py:docstring of
#: conan.api.subapi.export.ExportAPI.export_pkg:1
msgid ""
"Executes the ``package()`` method of the exported recipe in order to copy "
"the artifacts from user folder to the Conan cache package folder"
msgstr ""

#: ../../../conan_sources/conan/api/subapi/export.py:docstring of
#: conan.api.subapi.export.ExportAPI.export_pkg:4
msgid "A Graph object"
msgstr ""

#: ../../../conan_sources/conan/api/subapi/export.py:docstring of
#: conan.api.subapi.export.ExportAPI.export_pkg:5
msgid ""
"Optional folder where generated files like environment scripts of "
"dependencies have been installed"
msgstr ""
