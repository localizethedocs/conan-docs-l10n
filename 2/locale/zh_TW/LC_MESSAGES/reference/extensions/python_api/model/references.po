# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:32+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/extensions/python_api/model/references.rst:2
msgid "Reference models"
msgstr ""

#: ../../../conan_sources/conan/api/model/refs.py:docstring of
#: conan.api.model.refs.RecipeReference:1
msgid ""
"An exact (no version-range, no alias) reference of a recipe, it represents a "
"reference of the form ``name/version[@user/channel][#revision]"
"[%timestamp]``. Should be enough to locate a recipe in the cache or in a "
"server, and validation will be external to this class, at specific points "
"(export, api, etc)."
msgstr ""

#: ../../../conan_sources/conan/api/model/refs.py:docstring of
#: conan.api.model.refs.RecipeReference:6
msgid ""
"The attributes should be regarded as immutable, and should not be modified "
"by the user."
msgstr ""

#: ../../../docstring of conan.api.model.RecipeReference.name:1
msgid "Name of the reference"
msgstr ""

#: ../../../docstring of conan.api.model.RecipeReference.version:1
msgid "Version of the reference"
msgstr ""

#: ../../../docstring of conan.api.model.RecipeReference.user:1
msgid "User of the reference, if any"
msgstr ""

#: ../../../docstring of conan.api.model.RecipeReference.channel:1
msgid "Channel of the reference, if any"
msgstr ""

#: ../../../docstring of conan.api.model.RecipeReference.revision:1
msgid "Revision of the reference, if any"
msgstr ""

#: ../../../docstring of conan.api.model.RecipeReference.timestamp:1
msgid "Timestamp of the reference, if any"
msgstr ""

#: ../../../conan_sources/conan/api/model/refs.py:docstring of
#: conan.api.model.refs.RecipeReference.loads:1
msgid ""
"Instantiates an object from a string, in the form: ``name/version[@user/"
"channel][#revision][%timestamp]``"
msgstr ""

#: ../../../conan_sources/conan/api/model/refs.py:docstring of
#: conan.api.model.refs.RecipeReference.validate_ref:1
msgid ""
"Check that the reference is valid, and raise a ``ConanException`` if not."
msgstr ""

#: ../../../conan_sources/conan/api/model/refs.py:docstring of
#: conan.api.model.refs.RecipeReference.matches:1
msgid "fnmatches the reference against the provided pattern."
msgstr ""

#: ../../../conan_sources/conan/api/model/refs.py:docstring of
#: conan.api.model.refs.RecipeReference.matches:0
msgid "Parameters"
msgstr ""

#: ../../../conan_sources/conan/api/model/refs.py:docstring of
#: conan.api.model.refs.RecipeReference.matches:3
msgid ""
"the pattern to match against, it can contain wildcards, and can start with "
"``!`` or ``~`` to negate the match. A special value of ``&`` will return a "
"match only of ``is_consumer`` is ``True``"
msgstr ""

#: ../../../conan_sources/conan/api/model/refs.py:docstring of
#: conan.api.model.refs.RecipeReference.matches:6
msgid "if ``True``, the pattern ``&`` will match this reference."
msgstr ""
