# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:32+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/tools/files/downloads.rst:2
msgid "conan.tools.files downloads"
msgstr ""

#: ../../../reference/tools/files/downloads.rst:7
msgid "conan.tools.files.get()"
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.get:1
msgid ""
"High level download and decompressing of a tgz, zip or other compressed "
"format file. Just a high level wrapper for download, unzip, and remove the "
"temporary zip file once unzipped. You can pass hash checking parameters: "
"``md5``, ``sha1``, ``sha256``. All the specified algorithms will be checked. "
"If any of them doesn't match, it will raise a ``ConanException``."
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.download:0 conan.tools.files.files.ftp_download:0
#: conan.tools.files.files.get:0
msgid "Parameters"
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.download:8 conan.tools.files.files.ftp_download:3
#: conan.tools.files.files.get:6
msgid "The current recipe object. Always use ``self``."
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.get:7
msgid "(Optional defaulted to ``.``) Destination folder"
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.get:8
msgid ""
"(Optional defaulted to '') If provided, the saved file will have the "
"specified name, otherwise it is deduced from the URL"
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.get:10 conan.tools.files.files.get:11
#: conan.tools.files.files.get:12 conan.tools.files.files.get:13
#: conan.tools.files.files.get:16 conan.tools.files.files.get:17
#: conan.tools.files.files.get:19 conan.tools.files.files.get:20
msgid "forwarded to ``tools.file.download()``."
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.get:14 conan.tools.files.files.get:15
#: conan.tools.files.files.get:21 conan.tools.files.files.get:22
#: conan.tools.files.files.get:23
msgid "forwarded to ``tools.file.unzip()``."
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.get:18
msgid "S forwarded to ``tools.file.download()``."
msgstr ""

#: ../../../reference/tools/files/downloads.rst:16
msgid ""
"``get()`` calls internally ``unzip()``. Please read the note in :ref:"
"`conan_tools_files_unzip` regarding Python 3.14 breaking changes and the new "
"tar archive extract filters."
msgstr ""

#: ../../../reference/tools/files/downloads.rst:22
msgid "conan.tools.files.ftp_download()"
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.ftp_download:1
msgid "Ftp download of a file. Retrieves a file from an FTP server."
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.ftp_download:4
msgid "IP or host of the FTP server."
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.ftp_download:5
msgid "Path to the file to be downloaded."
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.ftp_download:6
msgid "Authentication login."
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.ftp_download:7
msgid "Authentication password."
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.ftp_download:8
msgid ""
"Set to True to use FTP over TLS/SSL (FTPS). Defaults to False for regular "
"FTP."
msgstr ""

#: ../../../reference/tools/files/downloads.rst:29
#: ../../../reference/tools/files/downloads.rst:49
msgid "Usage:"
msgstr ""

#: ../../../reference/tools/files/downloads.rst:31
msgid ""
"from conan.tools.files import ftp_download\n"
"\n"
"def source(self):\n"
"    ftp_download(self, 'ftp.debian.org', \"debian/README\")\n"
"    self.output.info(load(\"README\"))"
msgstr ""

#: ../../../reference/tools/files/downloads.rst:42
msgid "conan.tools.files.download()"
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.download:1
msgid ""
"Retrieves a file from a given URL into a file with a given filename. It uses "
"certificates from a list of known verifiers for https downloads, but this "
"can be optionally disabled."
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.download:4
msgid ""
"You can pass hash checking parameters: ``md5``, ``sha1``, ``sha256``. All "
"the specified algorithms will be checked. If any of them doesnâ€™t match, the "
"downloaded file will be removed and it will raise a ``ConanException``."
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.download:9
msgid ""
"URL to download. It can be a list, which only the first one will be "
"downloaded, and the follow URLs will be used as mirror in case of download "
"error.  Files accessible in the local filesystem can be referenced with a "
"URL starting with ``file:///`` followed by an absolute path to a file (where "
"the third ``/`` implies ``localhost``)."
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.download:13
msgid "Name of the file to be created in the local storage"
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.download:14
msgid "When False, disables https certificate validation"
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.download:15
msgid ""
"Number of retries in case of failure. Default is overridden by \"tools.files."
"download:retry\" conf"
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.download:17
msgid ""
"Seconds to wait between download attempts. Default is overriden by \"tools."
"files.download:retry_wait\" conf."
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.download:19
msgid "A tuple of user and password to use HTTPBasic authentication"
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.download:20
msgid "A dictionary with additional headers"
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.download:21
msgid "MD5 hash code to check the downloaded file"
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.download:22
msgid "SHA-1 hash code to check the downloaded file"
msgstr ""

#: ../../../conan_sources/conan/tools/files/files.py:docstring of
#: conan.tools.files.files.download:23
msgid "SHA-256 hash code to check the downloaded file"
msgstr ""

#: ../../../reference/tools/files/downloads.rst:51
msgid ""
"download(self, \"http://someurl/somefile.zip\", \"myfilename.zip\")\n"
"\n"
"# to disable verification:\n"
"download(self, \"http://someurl/somefile.zip\", \"myfilename.zip\", "
"verify=False)\n"
"\n"
"# to retry the download 2 times waiting 5 seconds between them\n"
"download(self, \"http://someurl/somefile.zip\", \"myfilename.zip\", retry=2, "
"retry_wait=5)\n"
"\n"
"# Use https basic authentication\n"
"download(self, \"http://someurl/somefile.zip\", \"myfilename.zip\", "
"auth=(\"user\", \"password\"))\n"
"\n"
"# Pass some header\n"
"download(self, \"http://someurl/somefile.zip\", \"myfilename.zip\", "
"headers={\"Myheader\": \"My value\"})\n"
"\n"
"# Download and check file checksum\n"
"download(self, \"http://someurl/somefile.zip\", \"myfilename.zip\", "
"md5=\"e5d695597e9fa520209d1b41edad2a27\")\n"
"\n"
"# to add mirrors\n"
"download(self, [\"https://ftp.gnu.org/gnu/gcc/gcc-9.3.0/gcc-9.3.0.tar.gz\",\n"
"                \"http://mirror.linux-ia64.org/gnu/gcc/releases/gcc-9.3.0/"
"gcc-9.3.0.tar.gz\"],\n"
"                \"gcc-9.3.0.tar.gz\",\n"
"               sha256=\"5258a9b6afe9463c2e56b9e8355b1a4bee125ca828b8078f910303bc2ef91fa6\")"
msgstr ""

#: ../../../reference/tools/files/downloads.rst:77
msgid "conf"
msgstr ""

#: ../../../reference/tools/files/downloads.rst:78
msgid ""
"It uses these :ref:`configuration entries "
"<reference_config_files_global_conf>`:"
msgstr ""

#: ../../../reference/tools/files/downloads.rst:80
msgid ""
"``tools.files.download:retry``: number of retries in case some error occurs."
msgstr ""

#: ../../../reference/tools/files/downloads.rst:81
msgid "``tools.files.download:retry_wait``: seconds to wait between retries."
msgstr ""
