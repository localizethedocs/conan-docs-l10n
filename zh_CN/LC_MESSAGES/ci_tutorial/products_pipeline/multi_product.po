# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.16\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:31+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../ci_tutorial/products_pipeline/multi_product.rst:2
msgid "Products pipeline: multi-product multi-configuration builds"
msgstr ""

#: ../../../ci_tutorial/products_pipeline/multi_product.rst:4
msgid ""
"In the previous section we computed a ``conan graph build-order`` with "
"several simplifications, we didn't take the ``mapviewer`` product into "
"account, and we processed only 1 configuration."
msgstr ""

#: ../../../ci_tutorial/products_pipeline/multi_product.rst:6
msgid ""
"In real scenarios, it will be necessary to manage more than one product and "
"the most common case is that there is more than one configuration for every "
"product. If we build these different cases sequentially it will be much "
"slower and inefficient, and if we try to build them in parallel there will "
"easily be many duplicated and unnecessary builds of the same packages, "
"wasting resources and even producing issues as race conditions or "
"traceability problems."
msgstr ""

#: ../../../ci_tutorial/products_pipeline/multi_product.rst:8
msgid ""
"To avoid this issue, it is possible to compute a single unified \"build-"
"order\" that aggregates all the different build-orders that are computed for "
"the different products and configurations."
msgstr ""

#: ../../../ci_tutorial/products_pipeline/multi_product.rst:10
msgid ""
"Let's start as usual cleaning the local cache and defining the correct repos:"
msgstr ""

#: ../../../ci_tutorial/products_pipeline/multi_product.rst:12
msgid ""
"# First clean the local \"build\" folder\n"
"$ pwd  # should be <path>/examples2/ci/game\n"
"$ rm -rf build  # clean the temporary build folder\n"
"$ mkdir build && cd build # To put temporary files\n"
"\n"
"$ conan remove \"*\" -c  # Make sure no packages from last run\n"
"# NOTE: The products repo is first, it will have higher priority.\n"
"$ conan remote enable products"
msgstr ""

#: ../../../ci_tutorial/products_pipeline/multi_product.rst:23
msgid ""
"Now, we will start computing the build-order for ``game/1.0`` for the 2 "
"different configurations that we are building in this tutorial, debug and "
"release:"
msgstr ""

#: ../../../ci_tutorial/products_pipeline/multi_product.rst:25
msgid ""
"$ conan graph build-order --requires=game/1.0 --build=missing --order-"
"by=recipe --format=json > game_release.json\n"
"$ conan graph build-order --requires=game/1.0 --build=missing --order-"
"by=recipe -s build_type=Debug --format=json > game_debug.json"
msgstr ""

#: ../../../ci_tutorial/products_pipeline/multi_product.rst:30
msgid ""
"These commands are basically the same as in the previous section, each one "
"with a different configuration and creating a different output file "
"``game_release.json`` and ``game_debug.json``. These files will be similar "
"to the previous ones, but as we haven't used the ``--reduce`` argument (this "
"is important!) they will actually contain a \"build-order\" of all elements "
"in the graph, even if only some contain the ``binary: Build`` definition, "
"and others will contain other ``binary: Download|Cache|etc``."
msgstr ""

#: ../../../ci_tutorial/products_pipeline/multi_product.rst:32
msgid "Now, let's compute the build-order for ``mapviewer/1.0``:"
msgstr ""

#: ../../../ci_tutorial/products_pipeline/multi_product.rst:34
msgid ""
"$ conan graph build-order --requires=mapviewer/1.0 --build=missing --order-"
"by=recipe --format=json > mapviewer_release.json\n"
"$ conan graph build-order --requires=mapviewer/1.0 --build=missing --order-"
"by=recipe -s build_type=Debug --format=json > mapviewer_debug.json"
msgstr ""

#: ../../../ci_tutorial/products_pipeline/multi_product.rst:40
msgid ""
"Note that in the generated ``mapviewer_xxx.json`` build-order files, there "
"will be only 1 element for ``mapviewer/1.0`` that contains a ``binary: "
"Download``, because there is really no other package to be built, and as "
"``mapviewer`` is an application linked statically, Conan knows that it can "
"\"skip\" its dependencies binaries. If we had used the ``--reduce`` argument "
"we would have obtained an empty ``order``. But this is not an issue, as the "
"next final step will really compute what needs to be built."
msgstr ""

#: ../../../ci_tutorial/products_pipeline/multi_product.rst:42
msgid ""
"Let's take all the 4 different \"build-order\" files (2 products x 2 "
"configurations each), and merge them together:"
msgstr ""

#: ../../../ci_tutorial/products_pipeline/multi_product.rst:44
msgid ""
"$ conan graph build-order-merge --file=game_release.json --file=game_debug."
"json --file=mapviewer_release.json --file=mapviewer_debug.json --reduce --"
"format=json > build_order.json"
msgstr ""

#: ../../../ci_tutorial/products_pipeline/multi_product.rst:49
msgid ""
"Now we have applied the ``--reduce`` argument to produce a final "
"``build_order.json`` that is ready for distribution to the build agents and "
"it only contains those specific packages that need to be built:"
msgstr ""

#: ../../../ci_tutorial/products_pipeline/multi_product.rst:51
msgid ""
"{\n"
"    \"order_by\": \"recipe\",\n"
"    \"reduced\": true,\n"
"    \"order\": [\n"
"        [\n"
"            {\n"
"                \"ref\": \"engine/1.0#fba6659c9dd04a4bbdc7a375f22143cb\",\n"
"                \"packages\": [\n"
"                    [\n"
"                        {\n"
"                            \"package_id\": "
"\"de738ff5d09f0359b81da17c58256c619814a765\",\n"
"                            \"filenames\": [\"game_release\"],\n"
"                            \"build_args\": \"--requires=engine/1.0 --"
"build=engine/1.0\",\n"
"                        },\n"
"                        {\n"
"                            \"package_id\": "
"\"cbeb3ac76e3d890c630dae5c068bc178e538b090\",\n"
"                            \"filenames\": [\"game_debug\"],\n"
"                            \"build_args\": \"--requires=engine/1.0 --"
"build=engine/1.0\",\n"
"\n"
"                        }\n"
"                    ]\n"
"                ]\n"
"            }\n"
"        ],\n"
"        [\n"
"            {\n"
"                \"ref\": \"game/1.0#1715574045610faa2705017c71d0000e\",\n"
"                \"packages\": [\n"
"                    [\n"
"                        {\n"
"                            \"package_id\": "
"\"bac7cd2fe1592075ddc715563984bbe000059d4c\",\n"
"                            \"filenames\": [\"game_release\"],\n"
"                            \"build_args\": \"--requires=game/1.0 --"
"build=game/1.0\",\n"
"                        },\n"
"                        {\n"
"                            \"package_id\": "
"\"01fbc27d2c156886244dafd0804eef1fff13440b\",\n"
"                            \"filenames\": [\"game_debug\"],\n"
"                            \"build_args\": \"--requires=game/1.0 --"
"build=game/1.0\",\n"
"                        }\n"
"                    ]\n"
"                ]\n"
"            }\n"
"        ]\n"
"    ],\n"
"    \"profiles\": {\n"
"        \"game_release\": {\"args\": \"\"},\n"
"        \"game_debug\": {\"args\": \"-s:h=\\\"build_type=Debug\\\"\"},\n"
"        \"mapviewer_release\": {\"args\": \"\"},\n"
"        \"mapviewer_debug\": {\"args\": \"-s:h=\\\"build_type=Debug\\\"\"}\n"
"    }\n"
"}"
msgstr ""

#: ../../../ci_tutorial/products_pipeline/multi_product.rst:106
msgid ""
"This build order summarizes the necessary builds. First it is necessary to "
"build all different binaries for ``engine/1.0``. This recipe contains 2 "
"different binaries, one for Release and the other for Debug. These binaries "
"belong to the same element in the ``packages`` list, which means they do not "
"depend on each other and can be built in parallel. Each binary tracks its "
"own original build-order file with ``\"filenames\": [\"game_release\"],`` so "
"it is possible to deduce the necessary profiles to apply to it. The "
"``build_order.json`` file contains a ``profiles`` section that helps "
"recovering the profile and settings command line arguments that were used to "
"create the respective original build-order files."
msgstr ""

#: ../../../ci_tutorial/products_pipeline/multi_product.rst:108
msgid ""
"Then, after all binaries of ``engine/1.0`` have been built, it is possible "
"to proceed to build the different binaries for ``game/1.0``. It also "
"contains 2 different binaries for its debug and release configurations, "
"which can be built in parallel."
msgstr ""

#: ../../../ci_tutorial/products_pipeline/multi_product.rst:110
msgid "In practice, this would mean something like:"
msgstr ""

#: ../../../ci_tutorial/products_pipeline/multi_product.rst:112
msgid ""
"# This 2 could be executed in parallel\n"
"# (in different machines, or different Conan caches)\n"
"$ conan install --requires=engine/1.0 --build=engine/1.0\n"
"$ conan install --requires=engine/1.0 --build=engine/1.0 -s "
"build_type=Debug\n"
"\n"
"# Once engine/1.0 builds finish, it is possible\n"
"# to build these 2 binaries in parallel (in different machines or caches)\n"
"$ conan install --requires=game/1.0 --build=game/1.0\n"
"$ conan install --requires=game/1.0 --build=game/1.0 -s build_type=Debug"
msgstr ""

#: ../../../ci_tutorial/products_pipeline/multi_product.rst:124
msgid ""
"In this section we have still omitted some important implementation details "
"that will follow in next sections. The goal was to focus on the ``conan "
"graph build-order-merge`` command and how different products and "
"configurations can be merged in a single \"build-order\". The next section "
"will show with more details how this build-order can be really distributed "
"in CI, using lockfiles to guarantee constant dependencies."
msgstr ""
