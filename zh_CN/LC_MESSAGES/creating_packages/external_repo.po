# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2018, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../creating_packages/external_repo.rst:4
msgid "Recipe and sources in a different repo"
msgstr ""

#: ../../../creating_packages/external_repo.rst:7
msgid ""
"In the previous section we fetched the sources of our library from an "
"external repository. It is a typical workflow for packaging third party "
"libraries."
msgstr ""

#: ../../../creating_packages/external_repo.rst:10
msgid ""
"There are two different ways to fetch the sources from an external "
"repository:"
msgstr ""

#: ../../../creating_packages/external_repo.rst:12
msgid "Using the ``source()`` method as we saw in the previous section:"
msgstr ""

#: ../../../creating_packages/external_repo.rst:14
msgid ""
"from conans import ConanFile, CMake, tools\n"
"\n"
"class HelloConan(ConanFile):\n"
"    ...\n"
"\n"
"    def source(self):\n"
"        self.run(\"git clone https://github.com/memsharded/hello.git\")\n"
"        self.run(\"cd hello && git checkout static_shared\")\n"
"        ..."
msgstr ""

#: ../../../creating_packages/external_repo.rst:26
msgid "You can also use the :ref:`tools.Git <tools_git>` class:"
msgstr ""

#: ../../../creating_packages/external_repo.rst:28
msgid ""
"from conans import ConanFile, CMake, tools\n"
"\n"
"class HelloConan(ConanFile):\n"
"    ...\n"
"\n"
"    def source(self):\n"
"        git = tools.Git(folder=\"hello\")\n"
"        git.clone(\"https://github.com/memsharded/hello.git\", "
"\"static_shared\")\n"
"        ..."
msgstr ""

#: ../../../creating_packages/external_repo.rst:41
msgid ""
"Using the :ref:`scm attribute <scm_attribute>` of the conanfile "
"[EXPERIMENTAL]:"
msgstr ""

#: ../../../creating_packages/external_repo.rst:44
msgid ""
"from conans import ConanFile, CMake, tools\n"
"\n"
"class HelloConan(ConanFile):\n"
"     scm = {\n"
"        \"type\": \"git\",\n"
"        \"subfolder\": \"hello\",\n"
"        \"url\": \"https://github.com/memsharded/hello.git\",\n"
"        \"revision\": \"static_shared\"\n"
"     }\n"
"    ..."
msgstr ""

#: ../../../creating_packages/external_repo.rst:58
msgid ""
"Conan will clone the ``scm url`` and will checkout the ``scm revision``."
msgstr ""

#: ../../../creating_packages/external_repo.rst:60
msgid ""
"For ``git`` (currently the only supported scm), the ``revision`` field can "
"be:"
msgstr ""

#: ../../../creating_packages/external_repo.rst:62
msgid "A commit hash"
msgstr ""

#: ../../../creating_packages/external_repo.rst:63
msgid "A branch"
msgstr ""

#: ../../../creating_packages/external_repo.rst:64
msgid "A tag"
msgstr ""

#: ../../../creating_packages/external_repo.rst:66
msgid ""
"The ``source()`` method will be called after the checkout process, so you "
"can still use it to patch something or retrieve more sources, but it is not "
"necessary in most cases."
msgstr ""
