# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2022, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.47\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:15+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../devtools/create_installer_packages.rst:4
msgid "Creating conan packages to install dev tools"
msgstr ""

#: ../../../devtools/create_installer_packages.rst:6
msgid ""
"One of the most useful features of Conan is to package executables like "
"compilers or build tools and distribute them in a controlled way to the team "
"of developers. This way Conan helps not only with the graph of dependencies "
"of the application itself, but also with all the ecosystem needed to "
"generate the project, making it really easy to control everything involved "
"in the deployed application."
msgstr ""

#: ../../../devtools/create_installer_packages.rst:11
msgid ""
"Those tools need to run in the working machine (the ``build`` machine) "
"regardless of the ``host`` platform where the generated binaries will run. "
"If those platforms are different, we are cross building software."
msgstr ""

#: ../../../devtools/create_installer_packages.rst:14
msgid ""
"In this section we cope with the general scenario where a library requires "
"other tools to compile that are also packaged with Conan. Read this section "
"first, and get more information specific to cross compiling in the dedicated "
"section of the docs: :ref:`cross_building`."
msgstr ""

#: ../../../devtools/create_installer_packages.rst:21
msgid ""
"Conan v1.24 introduced a new feature to declare a full profile for the "
"``build`` and the ``host`` machine, it is the preferred way to deal with "
"this scenario. Older versions should rely on the deprecated settings "
"``os_build`` and ``arch_build``. There is a small section below about those "
"settings, for a full explanation read the docs matching your Conan client."
msgstr ""

#: ../../../devtools/create_installer_packages.rst:27
msgid ""
"A Conan package for a tool is like any other package with an executable. "
"Here it is a recipe for packaging the ``nasm`` tool for building assembler:"
msgstr ""

#: ../../../devtools/create_installer_packages.rst:30
msgid ""
"import os\n"
"from conans import ConanFile, tools\n"
"from conans.errors import ConanInvalidConfiguration\n"
"\n"
"\n"
"class NasmConan(ConanFile):\n"
"    name = \"nasm\"\n"
"    version = \"2.13.02\"\n"
"    license = \"BSD-2-Clause\"\n"
"    url = \"https://github.com/conan-io/conan-center-index\"\n"
"    settings = \"os\", \"arch\"\n"
"    description=\"Nasm for windows. Useful as a build_require.\"\n"
"\n"
"    def validate(self):\n"
"        if self.settings.os != \"Windows\":\n"
"            raise ConanInvalidConfiguration(\"Only windows supported for "
"nasm\")\n"
"\n"
"    @property\n"
"    def nasm_folder_name(self):\n"
"        return \"nasm-%s\" % self.version\n"
"\n"
"    def build(self):\n"
"        suffix = \"win32\" if self.settings.arch == \"x86\" else \"win64\"\n"
"        nasm_zip_name = \"%s-%s.zip\" % (self.nasm_folder_name, suffix)\n"
"        tools.download(\"http://www.nasm.us/pub/nasm/releasebuilds/\"\n"
"                       \"%s/%s/%s\" % (self.version, suffix, nasm_zip_name), "
"nasm_zip_name)\n"
"        self.output.info(\"Downloading nasm: \"\n"
"                         \"http://www.nasm.us/pub/nasm/releasebuilds\"\n"
"                         \"/%s/%s/%s\" % (self.version, suffix, "
"nasm_zip_name))\n"
"        tools.unzip(nasm_zip_name)\n"
"        os.unlink(nasm_zip_name)\n"
"\n"
"    def package(self):\n"
"        self.copy(\"*\", src=self.nasm_folder_name, dst=\"bin\", "
"keep_path=True)\n"
"        self.copy(\"license*\", dst=\"\", src=self.nasm_folder_name, "
"keep_path=False, ignore_case=True)\n"
"\n"
"    def package_info(self):\n"
"        self.env_info.PATH.append(os.path.join(self.package_folder, \"bin\"))"
msgstr ""

#: ../../../devtools/create_installer_packages.rst:72
msgid ""
"This recipe has nothing special: it doesn't declare the ``compiler`` and "
"``build_type`` settings because it is downloading already available "
"binaries, and it is declaring the information for their consumers as usual "
"in the :ref:`method_package_info` method:"
msgstr ""

#: ../../../devtools/create_installer_packages.rst:75
msgid ""
"The :ref:`cpp_info_attributes_reference` is not declared, so it will take "
"its default values: the ``bindirs`` will point to the ``bin`` folder where "
"the ``nasm.exe`` executable is packaged."
msgstr ""

#: ../../../devtools/create_installer_packages.rst:77
msgid ""
"In the :ref:`env_info_attributes_reference` attribute, it is adding the "
"``bin`` folder to the ``PATH`` environment variable."
msgstr ""

#: ../../../devtools/create_installer_packages.rst:79
msgid ""
"This two simple declarations are enough to reuse this tool in the scenarios "
"we are detailing below."
msgstr ""

#: ../../../devtools/create_installer_packages.rst:83
msgid "Using the tool packages in other recipes"
msgstr ""

#: ../../../devtools/create_installer_packages.rst:87
msgid ""
"This section refers to the **experimental feature** that is activated when "
"using ``--profile:build`` and ``--profile:host`` in the command-line. It is "
"currently under development, features can be added or removed in the "
"following versions."
msgstr ""

#: ../../../devtools/create_installer_packages.rst:91
msgid ""
"These kind of tools are not usually part of the application graph itself, "
"they are needed only to build the library, so you should usually declare "
"them as :ref:`tool requirements <build_requires>`, in the recipe itself or "
"in a profile."
msgstr ""

#: ../../../devtools/create_installer_packages.rst:94
msgid ""
"For example, there are many recipes that can take advantage of the ``nasm`` "
"package we've seen above, like `flac <https://conan.io/center/flac?"
"tab=recipe>`_ or `libx264 <https://conan.io/center/libx264?tab=recipe>`_ "
"that are already available in `ConanCenter <https://conan.io/center/>`_. "
"Those recipes will take advantage of ``nasm`` being in the PATH to run some "
"assembly optimizations."
msgstr ""

#: ../../../devtools/create_installer_packages.rst:100
msgid ""
" class LibX264Conan(ConanFile):\n"
"     name = \"libx264\"\n"
"     ...\n"
"     tool_requires = \"nasm/2.13.02\"\n"
"\n"
"     def build(self):\n"
"         ... # ``nasm.exe`` will be in the PATH here\n"
"\n"
"     def package_info(self):\n"
"         self.cpp_info.libs = [...]"
msgstr ""

#: ../../../devtools/create_installer_packages.rst:120
msgid ""
"The consumer recipe needs only to declare the corresponding "
"``build_require`` and Conan will take care of adding the required paths to "
"the corresponding environment variables:"
msgstr ""

#: ../../../devtools/create_installer_packages.rst:123
msgid ""
"conan create path/to/libx264 --profile:build=windows --profile:"
"host=profile_host"
msgstr ""

#: ../../../devtools/create_installer_packages.rst:127
msgid ""
"Here we are telling Conan to create the package for the ``libx264`` for the "
"``host`` platform defined in the profile ``profile_host`` file and to use "
"the profile ``windows`` for all the tool requirements that are in the "
"``build`` context. In other words: in this example we are running a Windows "
"machine and we need a version of ``nasm`` compatible with this machine, so "
"we are providing a ``windows`` profile for the ``build`` context, and we are "
"generating the library for the ``host`` platform which is declared in the "
"``profile_host`` profile (read more about :ref:`tool requires context "
"<build_requires_context>`)."
msgstr ""

#: ../../../devtools/create_installer_packages.rst:134
msgid ""
"Using two profiles forces Conan to make this distinction between recipes in "
"the ``build`` context and those in the ``host`` context. It has several "
"advantages:"
msgstr ""

#: ../../../devtools/create_installer_packages.rst:137
msgid ""
"Recipes for these tools are regular recipes, no need to adapt them (before "
"1.24 they require special settings and some package ID customization)."
msgstr ""

#: ../../../devtools/create_installer_packages.rst:139
msgid ""
"We provide a full profile for the ``build`` machine, so Conan is able to "
"compile those tool requirements from sources if they are not already "
"available."
msgstr ""

#: ../../../devtools/create_installer_packages.rst:141
msgid ""
"Conan will add to the environment not only the path to the ``bin`` folder, "
"but also it will populate the ``DYLD_LIBRARY_PATH`` and ``LD_LIBRARY_PATH`` "
"variables that are needed to find the shared libraries that tool could need "
"during runtime."
msgstr ""

#: ../../../devtools/create_installer_packages.rst:147
msgid "Using the tool packages in your system"
msgstr ""

#: ../../../devtools/create_installer_packages.rst:149
msgid ""
"A different scenario is when you want to use in your system the binaries "
"generated by Conan, to achieve this objective you can use the :ref:"
"`virtualrunenv generator <virtual_environment_generator>` to get your "
"environment populated with the required variables."
msgstr ""

#: ../../../devtools/create_installer_packages.rst:154
msgid ""
"For example: Working in Windows with the ``nasm`` package we've already "
"defined:"
msgstr ""

#: ../../../devtools/create_installer_packages.rst:156
msgid ""
"Create a separate folder from your project, this folder will handle our "
"global development environment."
msgstr ""

#: ../../../devtools/create_installer_packages.rst:158
msgid ""
"$ mkdir my_cpp_environ\n"
"$ cd my_cpp_environ"
msgstr ""

#: ../../../devtools/create_installer_packages.rst:163
msgid "Create a *conanfile.txt* file:"
msgstr ""

#: ../../../devtools/create_installer_packages.rst:165
msgid ""
"[requires]\n"
"nasm/2.13.02\n"
"# You can add more tools here\n"
"\n"
"[generators]\n"
"virtualrunenv"
msgstr ""

#: ../../../devtools/create_installer_packages.rst:174
msgid ""
"Install them. Here it doesn't matter if you use only the ``host`` profile or "
"the ``build`` one too because the environment that is going to be populated "
"includes only the root of the graph and its dependencies, without any tool "
"requirement. In any case, the ``profile:host`` needed is the one "
"corresponding to the Windows machine where we are running these tests."
msgstr ""

#: ../../../devtools/create_installer_packages.rst:179
msgid "$ conan install . --profile:host=windows [--profile:build=windows]"
msgstr ""

#: ../../../devtools/create_installer_packages.rst:183
msgid "Activate the virtual environment in your shell:"
msgstr ""

#: ../../../devtools/create_installer_packages.rst:185
msgid ""
"$ activate_run\n"
"(my_cpp_environ)$"
msgstr ""

#: ../../../devtools/create_installer_packages.rst:190
msgid "Check that the tools are in the path:"
msgstr ""

#: ../../../devtools/create_installer_packages.rst:192
msgid ""
"(my_cpp_environ)$ nasm --version\n"
"\n"
"> NASM version 2.13.02 compiled on Dec 18 2019"
msgstr ""

#: ../../../devtools/create_installer_packages.rst:199
msgid ""
"You can deactivate the virtual environment with the *deactivate.bat* script"
msgstr ""

#: ../../../devtools/create_installer_packages.rst:201
msgid "(my_cpp_environ)$ deactivate_run"
msgstr ""
