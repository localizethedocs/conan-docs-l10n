# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../examples/runners/docker/basic.rst:4
msgid "Creating a Conan package using a Docker runner"
msgstr ""

#: ../../../common/experimental_warning.inc:3
msgid ""
"This feature is experimental and subject to breaking changes. See :ref:`the "
"Conan stability<stability>` section for more information."
msgstr ""

#: ../../../examples/runners/docker/basic.rst:8
msgid ""
"First of all you need to have the Docker daemon installed and running, plus "
"Conan and the ``docker`` Python package. This tutorial assumes that you are "
"running Conan inside a Python virtual environment, skip the first line if "
"you already have the ``docker`` Python package installed in your virtual "
"environment."
msgstr ""

#: ../../../examples/runners/docker/basic.rst:10
msgid ""
"# install docker in your virtual environment if you don't have it already "
"installed\n"
"$ pip install conan docker\n"
"$ docker ps\n"
"$ CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES"
msgstr ""

#: ../../../examples/runners/docker/basic.rst:18
msgid ""
"Now we are going to create create simple ``cmake_lib`` Conan template to "
"later run inside Docker using the runner feature. Let’s create the Conan "
"package and a Dockerfile inside our project folder."
msgstr ""

#: ../../../examples/runners/docker/basic.rst:20
msgid ""
"$ cd </my/runner/folder>\n"
"$ mkdir mylib\n"
"$ cd mylib\n"
"$ conan new cmake_lib -d name=mylib -d version=0.1\n"
"$ tree\n"
".\n"
"├── CMakeLists.txt\n"
"├── conanfile.py\n"
"├── include\n"
"│   └── mylib.h\n"
"├── src\n"
"│   └── mylib.cpp\n"
"└── test_package\n"
"    ├── CMakeLists.txt\n"
"    ├── conanfile.py\n"
"    └── src\n"
"        └── example.cpp"
msgstr ""

#: ../../../examples/runners/docker/basic.rst:40
msgid "``Dockerfile``"
msgstr ""

#: ../../../examples/runners/docker/basic.rst:42
msgid ""
"FROM ubuntu:22.04\n"
"RUN apt-get update \\\n"
"    && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-"
"recommends \\\n"
"        build-essential \\\n"
"        cmake \\\n"
"        python3 \\\n"
"        python3-pip \\\n"
"        python3-venv \\\n"
"    && rm -rf /var/lib/apt/lists/*\n"
"RUN pip install conan"
msgstr ""

#: ../../../examples/runners/docker/basic.rst:55
msgid ""
"$ cd </my/runner/folder>/mylib\n"
"$ tree\n"
".\n"
"...\n"
"├── Dockerfile\n"
"..."
msgstr ""

#: ../../../examples/runners/docker/basic.rst:64
msgid ""
"Now, we need to define two new profiles inside the conan ``profiles`` "
"folder. Replace ``</my/runner/folder>`` with your real project folder path."
msgstr ""

#: ../../../examples/runners/docker/basic.rst:66
msgid "``docker_example_host`` profile"
msgstr ""

#: ../../../examples/runners/docker/basic.rst:68
msgid ""
"[settings]\n"
"arch=x86_64\n"
"build_type=Release\n"
"compiler=gcc\n"
"compiler.cppstd=gnu17\n"
"compiler.libcxx=libstdc++11\n"
"compiler.version=11\n"
"os=Linux\n"
"\n"
"[runner]\n"
"type=docker\n"
"dockerfile=</my/runner/folder>/mylib\n"
"cache=copy\n"
"remove=true"
msgstr ""

#: ../../../examples/runners/docker/basic.rst:85
msgid "``docker_example_build`` profile"
msgstr ""

#: ../../../examples/runners/docker/basic.rst:87
msgid ""
"[settings]\n"
"arch=x86_64\n"
"build_type=Release\n"
"compiler=gcc\n"
"compiler.cppstd=gnu17\n"
"compiler.libcxx=libstdc++11\n"
"compiler.version=11\n"
"os=Linux"
msgstr ""

#: ../../../examples/runners/docker/basic.rst:98
msgid ""
"We are going to start from a totally clean environment, without any "
"containers, images or conan package."
msgstr ""

#: ../../../examples/runners/docker/basic.rst:100
msgid ""
"$ conan list \"*:*\"\n"
"Found 0 pkg/version recipes matching * in local cache"
msgstr ""

#: ../../../examples/runners/docker/basic.rst:106
#: ../../../examples/runners/docker/basic.rst:382
msgid ""
"$ docker ps --all\n"
"CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES"
msgstr ""

#: ../../../examples/runners/docker/basic.rst:112
msgid ""
"$ docker images\n"
"REPOSITORY   TAG       IMAGE ID   CREATED   SIZE"
msgstr ""

#: ../../../examples/runners/docker/basic.rst:117
msgid ""
"Now, it's time to create our library ``mylib`` using our new runner "
"definition."
msgstr ""

#: ../../../examples/runners/docker/basic.rst:119
msgid ""
"$ conan create . --version 0.1 -pr:h docker_example_host -pr:b "
"docker_example_build"
msgstr ""

#: ../../../examples/runners/docker/basic.rst:123
msgid ""
"If we split and analyze the command output, we can see what is happening and "
"where the commands are being executed."
msgstr ""

#: ../../../examples/runners/docker/basic.rst:125
msgid "**1.** Standard conan execution."
msgstr ""

#: ../../../examples/runners/docker/basic.rst:127
msgid ""
"======== Exporting recipe to the cache ========\n"
"mylib/0.1: Exporting package recipe: </my/runner/folder>/mylib/conanfile.py\n"
"mylib/0.1: Copied 1 '.py' file: conanfile.py\n"
"mylib/0.1: Copied 1 '.txt' file: CMakeLists.txt\n"
"mylib/0.1: Copied 1 '.h' file: mylib.h\n"
"mylib/0.1: Copied 1 '.cpp' file: mylib.cpp\n"
"mylib/0.1: Exported to cache folder: /Users/davidsanfal/.conan2/p/"
"mylib4abd06a04bdaa/e\n"
"mylib/0.1: Exported: mylib/0.1#8760bf5a311f01cc26f3b95428203210 (2024-07-08 "
"12:22:01 UTC)\n"
"\n"
"======== Input profiles ========\n"
"Profile host:\n"
"[settings]\n"
"arch=x86_64\n"
"build_type=Release\n"
"compiler=gcc\n"
"compiler.cppstd=gnu17\n"
"compiler.libcxx=libstdc++11\n"
"compiler.version=11\n"
"os=Linux\n"
"\n"
"Profile build:\n"
"[settings]\n"
"arch=x86_64\n"
"build_type=Release\n"
"compiler=gcc\n"
"compiler.cppstd=gnu17\n"
"compiler.libcxx=libstdc++11\n"
"compiler.version=11\n"
"os=Linux"
msgstr ""

#: ../../../examples/runners/docker/basic.rst:159
msgid "**2.** Build docker image"
msgstr ""

#: ../../../examples/runners/docker/basic.rst:161
msgid ""
"**********************************************\n"
"* Building the Docker image: my-conan-runner *\n"
"**********************************************\n"
"\n"
"Dockerfile path: '</my/runner/folder>/mylib/Dockerfile'\n"
"Docker build context: '</my/runner/folder>/mylib'\n"
"\n"
"Step 1/4 : FROM ubuntu:22.04\n"
"\n"
"...\n"
"\n"
"---> 2bcf70201cce\n"
"Successfully built 2bcf70201cce\n"
"Successfully tagged conan-runner-default:latest"
msgstr ""

#: ../../../examples/runners/docker/basic.rst:178
msgid "**3.** Save the local cache running ``conan cache save``."
msgstr ""

#: ../../../examples/runners/docker/basic.rst:180
msgid ""
"***********************************************************************************\n"
"* Save host cache in: </my/runner/folder>/mylib/.conanrunner/"
"local_cache_save.tgz *\n"
"***********************************************************************************\n"
"\n"
"Found 1 pkg/version recipes matching * in local cache\n"
"Saving mylib/0.1: mylib4abd06a04bdaa"
msgstr ""

#: ../../../examples/runners/docker/basic.rst:189
msgid "**4.** Create and initialize the docker container."
msgstr ""

#: ../../../examples/runners/docker/basic.rst:191
msgid ""
"*********************************\n"
"* Creating the docker container *\n"
"*********************************\n"
"\n"
"*****************************************\n"
"* Container conan-runner-docker running *\n"
"*****************************************"
msgstr ""

#: ../../../examples/runners/docker/basic.rst:201
msgid ""
"**5.** Check if the container has a conan version with the runner feature."
msgstr ""

#: ../../../examples/runners/docker/basic.rst:203
msgid ""
"*******************************************\n"
"* Running in container: \"conan --version\" *\n"
"*******************************************\n"
"\n"
"Conan version 2.5.0"
msgstr ""

#: ../../../examples/runners/docker/basic.rst:211
msgid ""
"**6.** Initialize the container conan cache using the host copy running "
"``conan cache restore``."
msgstr ""

#: ../../../examples/runners/docker/basic.rst:213
msgid ""
"***********************************************************************************************************\n"
"* Running in container: \"conan cache restore \"/root/conanrunner/mylib/."
"conanrunner/local_cache_save.tgz\"\" *\n"
"***********************************************************************************************************\n"
"\n"
"Restore: mylib/0.1 in mylib4abd06a04bdaa\n"
"Local Cache\n"
"mylib\n"
"    mylib/0.1\n"
"    revisions\n"
"        8760bf5a311f01cc26f3b95428203210 (2024-07-08 12:22:19 UTC)\n"
"        packages\n"
"        recipe_folder: mylib4abd06a04bdaa"
msgstr ""

#: ../../../examples/runners/docker/basic.rst:228
msgid "**7.** Run the conan create inside the container and build \"mylib\"."
msgstr ""

#: ../../../examples/runners/docker/basic.rst:230
msgid ""
"*********************************************************************************************************************************************************\n"
"* Running in container: \"conan create /root/conanrunner/mylib --version 0.1 "
"-pr:h docker_example_host -pr:b docker_example_build -f json > create.json\" "
"*\n"
"*********************************************************************************************************************************************************\n"
"\n"
"\n"
"======== Exporting recipe to the cache ========\n"
"mylib/0.1: Exporting package recipe: /root/conanrunner/mylib/conanfile.py\n"
"mylib/0.1: Copied 1 '.py' file: conanfile.py\n"
"mylib/0.1: Copied 1 '.txt' file: CMakeLists.txt\n"
"mylib/0.1: Copied 1 '.cpp' file: mylib.cpp\n"
"mylib/0.1: Copied 1 '.h' file: mylib.h\n"
"mylib/0.1: Exported to cache folder: /root/.conan2/p/mylib4abd06a04bdaa/e\n"
"mylib/0.1: Exported: mylib/0.1#8760bf5a311f01cc26f3b95428203210 (2024-07-08 "
"12:22:20 UTC)\n"
"\n"
"======== Input profiles ========\n"
"Profile host:\n"
"[settings]\n"
"arch=x86_64\n"
"build_type=Release\n"
"compiler=gcc\n"
"compiler.cppstd=gnu17\n"
"compiler.libcxx=libstdc++11\n"
"compiler.version=11\n"
"os=Linux\n"
"\n"
"Profile build:\n"
"[settings]\n"
"arch=x86_64\n"
"build_type=Release\n"
"compiler=gcc\n"
"compiler.cppstd=gnu17\n"
"compiler.libcxx=libstdc++11\n"
"compiler.version=11\n"
"os=Linux\n"
"\n"
"\n"
"======== Computing dependency graph ========\n"
"Graph root\n"
"    cli\n"
"Requirements\n"
"    mylib/0.1#8760bf5a311f01cc26f3b95428203210 - Cache\n"
"\n"
"======== Computing necessary packages ========\n"
"mylib/0.1: Forced build from source\n"
"Requirements\n"
"    mylib/0.1#8760bf5a311f01cc26f3b95428203210:8631cf963dbbb4d7a378a64a6fd1dc57558bc2fe "
"- Build\n"
"\n"
"======== Installing packages ========\n"
"\n"
"-------- Installing package mylib/0.1 (1 of 1) --------\n"
"\n"
"\n"
"...\n"
"\n"
"[ 50%] Building CXX object CMakeFiles/example.dir/src/example.cpp.o\n"
"[100%] Linking CXX executable example\n"
"[100%] Built target example\n"
"\n"
"\n"
"======== Testing the package: Executing test ========\n"
"mylib/0.1 (test package): Running test()\n"
"mylib/0.1 (test package): RUN: ./example\n"
"mylib/0.1: Hello World Release!\n"
"mylib/0.1: __x86_64__ defined\n"
"mylib/0.1: _GLIBCXX_USE_CXX11_ABI 1\n"
"mylib/0.1: __cplusplus201703\n"
"mylib/0.1: __GNUC__11\n"
"mylib/0.1: __GNUC_MINOR__4\n"
"mylib/0.1 test_package"
msgstr ""

#: ../../../examples/runners/docker/basic.rst:302
msgid ""
"**8.** Copy just the package created inside the container using the "
"``pkglist.json`` info from the previous ``conan create``, restore this new "
"package inside the host cache running a ``conan cache save`` and remove the "
"container."
msgstr ""

#: ../../../examples/runners/docker/basic.rst:304
msgid ""
"************************************************************************************************************************************\n"
"* Running in container: \"conan cache save --list=pkglist.json --file \"/"
"root/conanrunner/mylib\"/.conanrunner/docker_cache_save.tgz\" *\n"
"************************************************************************************************************************************\n"
"\n"
"Saving mylib/0.1: mylib4abd06a04bdaa\n"
"Saving mylib/0.1:8631cf963dbbb4d7a378a64a6fd1dc57558bc2fe: b/"
"mylib503035e4ee8ae/p\n"
"Saving mylib/0.1:8631cf963dbbb4d7a378a64a6fd1dc57558bc2fe metadata: b/"
"mylib503035e4ee8ae/d/metadata\n"
"Local Cache\n"
"mylib\n"
"    mylib/0.1\n"
"    revisions\n"
"        8760bf5a311f01cc26f3b95428203210 (2024-07-08 12:22:20 UTC)\n"
"        packages\n"
"            8631cf963dbbb4d7a378a64a6fd1dc57558bc2fe\n"
"            revisions\n"
"                ded6547554ff2306db5250451340fa43\n"
"                package_folder: b/mylib503035e4ee8ae/p\n"
"                metadata_folder: b/mylib503035e4ee8ae/d/metadata\n"
"            info\n"
"                settings\n"
"                os: Linux\n"
"                arch: x86_64\n"
"                compiler: gcc\n"
"                compiler.cppstd: gnu17\n"
"                compiler.libcxx: libstdc++11\n"
"                compiler.version: 11\n"
"                build_type: Release\n"
"                options\n"
"                fPIC: True\n"
"                shared: False\n"
"        recipe_folder: mylib4abd06a04bdaa\n"
"\n"
"\n"
"******************************************************************************************\n"
"* Restore host cache from: </my/runner/folder>/mylib/.conanrunner/"
"docker_cache_save.tgz  *\n"
"******************************************************************************************\n"
"\n"
"Restore: mylib/0.1 in mylib4abd06a04bdaa\n"
"Restore: mylib/0.1:8631cf963dbbb4d7a378a64a6fd1dc57558bc2fe in b/"
"mylib503035e4ee8ae/p\n"
"Restore: mylib/0.1:8631cf963dbbb4d7a378a64a6fd1dc57558bc2fe metadata in b/"
"mylib503035e4ee8ae/d/metadata\n"
"\n"
"**********************\n"
"* Stopping container *\n"
"**********************\n"
"\n"
"\n"
"**********************\n"
"* Removing container *\n"
"**********************"
msgstr ""

#: ../../../examples/runners/docker/basic.rst:356
msgid ""
"If we now check the status of our conan and docker cache, we will see the "
"new mylib package compile for Linux and the new docker image but we don’t "
"have any container because we define ``remove=true``"
msgstr ""

#: ../../../examples/runners/docker/basic.rst:358
msgid ""
"$ conan list \"*:*\"\n"
"Found 1 pkg/version recipes matching * in local cache\n"
"Local Cache\n"
"mylib\n"
"    mylib/0.1\n"
"    revisions\n"
"        8760bf5a311f01cc26f3b95428203210 (2024-07-08 12:33:28 UTC)\n"
"        packages\n"
"            8631cf963dbbb4d7a378a64a6fd1dc57558bc2fe\n"
"            info\n"
"                settings\n"
"                arch: x86_64\n"
"                build_type: Release\n"
"                compiler: gcc\n"
"                compiler.cppstd: gnu17\n"
"                compiler.libcxx: libstdc++11\n"
"                compiler.version: 11\n"
"                os: Linux\n"
"                options\n"
"                fPIC: True\n"
"                shared: False"
msgstr ""

#: ../../../examples/runners/docker/basic.rst:387
msgid ""
"$ docker images\n"
"REPOSITORY        TAG       IMAGE ID       CREATED          SIZE\n"
"my-conan-runner   latest    2bcf70201cce   11 minutes ago   531MB"
msgstr ""

#: ../../../examples/runners/docker/basic.rst:393
msgid ""
"What we have just done is to compile a library from scratch inside a Docker "
"container without running any Docker command and retrieve the generated "
"packages in a totally transparent and easily debuggable way thanks to our "
"terminal output."
msgstr ""

#: ../../../examples/runners/docker/basic.rst:395
msgid ""
"In this way, we can work as we have always done regardless of whether it is "
"on our machine or in a container, without several open terminals and having "
"the result of each operation in the same cache, being able to reuse the "
"compiled packages from a previous compilation in another container "
"automatically and transparently."
msgstr ""
