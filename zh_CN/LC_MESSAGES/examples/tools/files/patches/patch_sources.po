# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:36+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../examples/tools/files/patches/patch_sources.rst:4
msgid "Patching sources"
msgstr ""

#: ../../../examples/tools/files/patches/patch_sources.rst:6
msgid ""
"In this example we are going to see how to patch the source code. This is "
"necessary sometimes, specially when you are creating a package for a third "
"party library. A patch might be required in the build system scripts or even "
"in the source code of the library if you want, for example, to apply a "
"security patch."
msgstr ""

#: ../../../examples/tools/files/patches/patch_sources.rst:10
msgid ""
"Please, first clone the sources to recreate this project. You can find them "
"in the `examples2 repository <https://github.com/conan-io/examples2>`_ on "
"GitHub:"
msgstr ""

#: ../../../examples/tools/files/patches/patch_sources.rst:13
msgid ""
"$ git clone https://github.com/conan-io/examples2.git\n"
"$ cd examples/tools/files/patches"
msgstr ""

#: ../../../examples/tools/files/patches/patch_sources.rst:20
msgid "Patching using 'replace_in_file'"
msgstr ""

#: ../../../examples/tools/files/patches/patch_sources.rst:22
msgid ""
"The simplest way to patch a file is using the ``replace_in_file`` tool in "
"your recipe. It searches in a file the specified string and replaces it with "
"another string."
msgstr ""

#: ../../../examples/tools/files/patches/patch_sources.rst:26
msgid "in source() method"
msgstr ""

#: ../../../examples/tools/files/patches/patch_sources.rst:28
msgid ""
"The source() method is called only once for all the configurations "
"(different calls to :command:`conan create` for different settings/options) "
"so you should patch only in the ``source()`` method if the changes are "
"common for all the configurations."
msgstr ""

#: ../../../examples/tools/files/patches/patch_sources.rst:31
msgid "Look at the ``source()`` method at the ``conanfile.py``:"
msgstr ""

#: ../../../examples/tools/files/patches/patch_sources.rst:34
msgid ""
"import os\n"
"from conan import ConanFile\n"
"from conan.tools.cmake import CMakeToolchain, CMake, cmake_layout\n"
"from conan.tools.files import get, replace_in_file\n"
"\n"
"\n"
"class helloRecipe(ConanFile):\n"
"    name = \"hello\"\n"
"    version = \"1.0\"\n"
"\n"
"    # Binary configuration\n"
"    settings = \"os\", \"compiler\", \"build_type\", \"arch\"\n"
"    options = {\"shared\": [True, False], \"fPIC\": [True, False]}\n"
"    default_options = {\"shared\": False, \"fPIC\": True}\n"
"\n"
"    def source(self):\n"
"        get(self, \"https://github.com/conan-io/libhello/archive/refs/heads/"
"main.zip\", strip_root=True)\n"
"        replace_in_file(self, os.path.join(self.source_folder, \"src\", "
"\"hello.cpp\"), \"Hello World\", \"Hello Friends!\")\n"
"\n"
"    ..."
msgstr ""

#: ../../../examples/tools/files/patches/patch_sources.rst:57
msgid ""
"We are replacing the ``\"Hello World\"`` string with \"Hello Friends!\". We "
"can run ``conan create .`` and verify that if the replace was done:"
msgstr ""

#: ../../../examples/tools/files/patches/patch_sources.rst:60
msgid ""
"$ conan create .\n"
"...\n"
"-------- Testing the package: Running test() --------\n"
"hello/1.0: Hello Friends! Release!\n"
"..."
msgstr ""

#: ../../../examples/tools/files/patches/patch_sources.rst:69
msgid "in build() method"
msgstr ""

#: ../../../examples/tools/files/patches/patch_sources.rst:71
msgid ""
"In this case, we need to apply a different patch depending on the "
"configuration (`self.settings`, `self.options`...), so it has to be done in "
"the ``build()`` method. Let's modify the recipe to introduce a change that "
"depends on the ``self.options.shared``:"
msgstr ""

#: ../../../examples/tools/files/patches/patch_sources.rst:76
msgid ""
"class helloRecipe(ConanFile):\n"
"\n"
"    ...\n"
"\n"
"    def source(self):\n"
"        get(self, \"https://github.com/conan-io/libhello/archive/refs/heads/"
"main.zip\", strip_root=True)\n"
"\n"
"    def build(self):\n"
"        replace_in_file(self, os.path.join(self.source_folder, \"src\", "
"\"hello.cpp\"),\n"
"                        \"Hello World\",\n"
"                        \"Hello {} Friends!\".format(\"Shared\" if self."
"options.shared else \"Static\"))\n"
"        cmake = CMake(self)\n"
"        cmake.configure()\n"
"        cmake.build()\n"
"\n"
"    ..."
msgstr ""

#: ../../../examples/tools/files/patches/patch_sources.rst:95
msgid ""
"If we call ``conan create`` with different ``option.shared`` we can check "
"the output:"
msgstr ""

#: ../../../examples/tools/files/patches/patch_sources.rst:97
msgid ""
"$ conan create .\n"
"...\n"
"hello/1.0: Hello Static Friends! Release!\n"
"...\n"
"\n"
"$ conan create . -o shared=True\n"
"...\n"
"hello/1.0: Hello Shared Friends! Debug!\n"
"..."
msgstr ""

#: ../../../examples/tools/files/patches/patch_sources.rst:111
msgid "Patching using \"patch\" tool"
msgstr ""

#: ../../../examples/tools/files/patches/patch_sources.rst:113
msgid ""
"If you have a patch file (diff between two versions of a file), you can use "
"the ``conan.tools.files.patch`` tool to apply it. The rules about where to "
"apply the patch (``source()`` or ``build()`` methods) are the same."
msgstr ""

#: ../../../examples/tools/files/patches/patch_sources.rst:116
msgid ""
"We have this patch file, where we are changing again the message to say "
"\"Hello Patched World Release!\":"
msgstr ""

#: ../../../examples/tools/files/patches/patch_sources.rst:119
msgid ""
"--- a/src/hello.cpp\n"
"+++ b/src/hello.cpp\n"
"@@ -3,9 +3,9 @@\n"
"\n"
" void hello(){\n"
"     #ifdef NDEBUG\n"
"-    std::cout << \"hello/1.0: Hello World Release!\\n\";\n"
"+    std::cout << \"hello/1.0: Hello Patched World Release!\\n\";\n"
"     #else\n"
"-    std::cout << \"hello/1.0: Hello World Debug!\\n\";\n"
"+    std::cout << \"hello/1.0: Hello Patched World Debug!\\n\";\n"
"     #endif\n"
"\n"
"     // ARCHITECTURES"
msgstr ""

#: ../../../examples/tools/files/patches/patch_sources.rst:137
msgid "Edit the ``conanfile.py`` to:"
msgstr ""

#: ../../../examples/tools/files/patches/patch_sources.rst:139
msgid "Import the ``patch`` tool."
msgstr ""

#: ../../../examples/tools/files/patches/patch_sources.rst:140
msgid ""
"Add ``exports_sources`` to the patch file so we have it available in the "
"cache."
msgstr ""

#: ../../../examples/tools/files/patches/patch_sources.rst:141
msgid "Call the ``patch`` tool."
msgstr ""

#: ../../../examples/tools/files/patches/patch_sources.rst:144
msgid ""
"import os\n"
"from conan import ConanFile\n"
"from conan.tools.cmake import CMakeToolchain, CMake, cmake_layout\n"
"from conan.tools.files import get, replace_in_file, patch\n"
"\n"
"\n"
"class helloRecipe(ConanFile):\n"
"    name = \"hello\"\n"
"    version = \"1.0\"\n"
"\n"
"    # Binary configuration\n"
"    settings = \"os\", \"compiler\", \"build_type\", \"arch\"\n"
"    options = {\"shared\": [True, False], \"fPIC\": [True, False]}\n"
"    default_options = {\"shared\": False, \"fPIC\": True}\n"
"    exports_sources = \"*.patch\"\n"
"\n"
"    def source(self):\n"
"        get(self, \"https://github.com/conan-io/libhello/archive/refs/heads/"
"main.zip\", strip_root=True)\n"
"        patch_file = os.path.join(self.export_sources_folder, "
"\"hello_patched.patch\")\n"
"        patch(self, patch_file=patch_file)\n"
"\n"
"    ..."
msgstr ""

#: ../../../examples/tools/files/patches/patch_sources.rst:170
msgid "We can run \"conan create\" and see that the patch worked:"
msgstr ""

#: ../../../examples/tools/files/patches/patch_sources.rst:172
#: ../../../examples/tools/files/patches/patch_sources.rst:212
#: ../../../examples/tools/files/patches/patch_sources.rst:248
msgid ""
"$ conan create .\n"
"...\n"
"-------- Testing the package: Running test() --------\n"
"hello/1.0: Hello Patched World Release!\n"
"..."
msgstr ""

#: ../../../examples/tools/files/patches/patch_sources.rst:181
msgid ""
"We can also use the ``conandata.yml`` :ref:`introduced in the "
"tutorial<creating_packages_handle_sources_in_packages_conandata>` so we can "
"declare the patches to apply for each version:"
msgstr ""

#: ../../../examples/tools/files/patches/patch_sources.rst:185
msgid ""
"patches:\n"
"  \"1.0\":\n"
"    - patch_file: \"hello_patched.patch\""
msgstr ""

#: ../../../examples/tools/files/patches/patch_sources.rst:192
msgid "And there are the changes we introduce in the ``source()`` method:"
msgstr ""

#: ../../../examples/tools/files/patches/patch_sources.rst:195
msgid ""
".. code-block:: python\n"
"\n"
"    def source(self):\n"
"        get(self, \"https://github.com/conan-io/libhello/archive/refs/heads/"
"main.zip\", strip_root=True)\n"
"        patches = self.conan_data[\"patches\"][self.version]\n"
"        for p in patches:\n"
"            patch_file = os.path.join(self.export_sources_folder, "
"p[\"patch_file\"])\n"
"            patch(self, patch_file=patch_file)"
msgstr ""

#: ../../../examples/tools/files/patches/patch_sources.rst:207
msgid "Check :ref:`patch <conan_tools_files_patch>` for more details."
msgstr ""

#: ../../../examples/tools/files/patches/patch_sources.rst:210
msgid "If we run the :command:`conan create`, the patch is also applied:"
msgstr ""

#: ../../../examples/tools/files/patches/patch_sources.rst:221
msgid "Patching using \"apply_conandata_patches\" tool"
msgstr ""

#: ../../../examples/tools/files/patches/patch_sources.rst:223
msgid ""
"The example above works but it is a bit complex. If you follow the same yml "
"structure (check the :ref:`apply_conandata_patches "
"<conan_tools_files_apply_conandata_patches>` to see the full supported yml) "
"you only need to call ``apply_conandata_patches``:"
msgstr ""

#: ../../../examples/tools/files/patches/patch_sources.rst:228
msgid ""
"from conan import ConanFile\n"
"from conan.tools.cmake import CMakeToolchain, CMake, cmake_layout\n"
"from conan.tools.files import get, apply_conandata_patches\n"
"\n"
"\n"
"class helloRecipe(ConanFile):\n"
"    name = \"hello\"\n"
"    version = \"1.0\"\n"
"\n"
"    ...\n"
"\n"
"    def source(self):\n"
"        get(self, \"https://github.com/conan-io/libhello/archive/refs/heads/"
"main.zip\", strip_root=True)\n"
"        apply_conandata_patches(self)"
msgstr ""

#: ../../../examples/tools/files/patches/patch_sources.rst:246
msgid "Let's check if the patch is also applied:"
msgstr ""
