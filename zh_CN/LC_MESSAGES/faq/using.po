# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2018, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../faq/using.rst:2
msgid "Using conan"
msgstr ""

#: ../../../faq/using.rst:5
msgid "How to package header-only libraries?"
msgstr ""

#: ../../../faq/using.rst:6
msgid ""
"Packaging header-only libraries is similar to other packages, make sure to "
"first read and understand the :ref:`packaging getting started "
"guide<packaging_getting_started>`. The main difference is that the package "
"recipe is typically much simpler. There are different approaches depending "
"if you want conan to run the library unit tests while creating the package "
"or not. Full details :ref:`in this how-to<header_only>`."
msgstr ""

#: ../../../faq/using.rst:12
msgid "When to use settings or options?"
msgstr ""

#: ../../../faq/using.rst:13
msgid ""
"While creating a package you might want to add different configurations and "
"variants of the package. There are 2 main inputs that define packages: "
"settings and options. Read about them in :ref:`this "
"section<settings_vs_options>`"
msgstr ""

#: ../../../faq/using.rst:17
msgid "How to obtain the dependents of a given package?"
msgstr ""

#: ../../../faq/using.rst:19
msgid ""
"The search model for conan in commands such as :command:`conan install` and :"
"command:`conan info` is done from the downstream or \"consumer\" package as "
"the starting node of the dependency graph and upstream."
msgstr ""

#: ../../../faq/using.rst:22
msgid "$ conan info Poco/1.8.1@pocoproject/stable"
msgstr ""

#: ../../../faq/using.rst:29
msgid ""
"The inverse model (from upstream to downstream) is not simple to obtain for "
"Conan packages, because the dependency graph is not unique: It changes for "
"every configuration. The graph can be different for different operating "
"systems or just by changing some package options. So you cannot query which "
"packages are dependent on ``MyLib/0.1@user/channel``, but which packages are "
"dependent on ``MyLib/0.1@user/channel:63da998e3642b50bee33`` binary package, "
"and the response can contain many different binary packages for the same "
"recipe, like ``MyDependent/0.1@user/channel:packageID1... ID2... "
"MyDependent/0.1@user/channel:packageIDN``. That is the reason why :command:"
"`conan info` and :command:`conan install` need a profile (default profile or "
"one given with ``--profile```) or installation files ``conanbuildinfo.txt`` "
"to look for settings and options."
msgstr ""

#: ../../../faq/using.rst:37
msgid ""
"In order to show the inverse graph model, the bottom node is neeed to build "
"the graph upstream and an additonal node too to get the inverse list. This "
"is usually done to get the build order in case a package is updated. For "
"example, if we want to know the build order of the Poco dependecy graph in "
"case OpenSSL is changed we could type:"
msgstr ""

#: ../../../faq/using.rst:41
msgid ""
"$ conan info Poco/1.8.1@pocoproject/stable -bo OpenSSL/1.0.2m@conan/stable\n"
"[OpenSSL/1.0.2m@conan/stable], [Poco/1.8.1@pocoproject/stable]"
msgstr ""

#: ../../../faq/using.rst:46
msgid ""
"So, if OpenSSL is changed, we would need to rebuild it (of course) and "
"rebuild Poco."
msgstr ""

#: ../../../faq/using.rst:49
msgid ""
"Packages got outdated when uploading an unchanged recipe from a different "
"machine"
msgstr ""

#: ../../../faq/using.rst:51
msgid ""
"Usually this is caused due to different line endings in Windows and Linux/"
"MacOS. Normally this happens when Windows uploads it with CRLF while Linux/"
"MacOS do it with only LF. Conan does not change the line endings to not "
"interfere with user. We suggest going with LF line endings always. If this "
"is being caused by git, it could be solved with :command:`git config --"
"system core.autocrlf input`."
msgstr ""
