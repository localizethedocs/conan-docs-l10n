# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.63\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../integrations/build_system/qmake.rst:4
msgid "QMake"
msgstr ""

#: ../../../integrations/build_system/qmake.rst:8
msgid ""
"This is a **deprecated** feature. Please refer to the :ref:`Migration "
"Guidelines<conan2_migration_guide>` to find the feature that replaced this "
"one."
msgstr ""

#: ../../../integrations/build_system/qmake.rst:11
msgid ""
"The ``qmake`` generator will generate a *conanbuildinfo.pri* file that can "
"be used for your qmake builds."
msgstr ""

#: ../../../integrations/build_system/qmake.rst:13
msgid "$ conan install . -g qmake"
msgstr ""

#: ../../../integrations/build_system/qmake.rst:17
msgid ""
"Add ``conan_basic_setup`` to ``CONFIG`` and include the file in your "
"existing project *.pro* file:"
msgstr ""

#: ../../../integrations/build_system/qmake.rst:19
#: ../../../integrations/build_system/qmake.rst:33
msgid "*yourproject.pro*"
msgstr ""

#: ../../../integrations/build_system/qmake.rst:19
msgid ""
" ...\n"
"\n"
" CONFIG += conan_basic_setup\n"
" include(conanbuildinfo.pri)"
msgstr ""

#: ../../../integrations/build_system/qmake.rst:27
msgid ""
"This will include all the statements in *conanbuildinfo.pri* in your "
"project. Include paths, libraries, defines, etc. will be set up for all "
"requirements you have defined as dependencies in a *conanfile.txt*."
msgstr ""

#: ../../../integrations/build_system/qmake.rst:30
msgid ""
"If you'd prefer to manually add the variables for each dependency, you can "
"do so by skipping the ``CONFIG`` statement and only including "
"*conanbuildinfo.pri*:"
msgstr ""

#: ../../../integrations/build_system/qmake.rst:33
msgid ""
" # ...\n"
"\n"
" include(conanbuildinfo.pri)\n"
"\n"
" # you may now modify your variables manually for each library, such as\n"
" # INCLUDEPATH += CONAN_INCLUDEPATH_POCO"
msgstr ""

#: ../../../integrations/build_system/qmake.rst:43
msgid ""
"The ``qmake`` generator allows multi-configuration packages, i.e. packages "
"that contains both Debug and Release artifacts."
msgstr ""

#: ../../../integrations/build_system/qmake.rst:46
msgid "Example"
msgstr ""

#: ../../../integrations/build_system/qmake.rst:50
msgid ""
"This complete example is stored in https://github.com/memsharded/"
"qmake_example"
msgstr ""

#: ../../../integrations/build_system/qmake.rst:52
msgid ""
"This example project will depend on a multi-configuration (Debug/Release) "
"\"Hello World\" package. It should be installed first:"
msgstr ""

#: ../../../integrations/build_system/qmake.rst:54
msgid ""
"$ git clone https://github.com/memsharded/hello_multi_config\n"
"$ cd hello_multi_config\n"
"$ conan create . memsharded/testing\n"
"hello/0.1@memsharded/testing export: Copied 1 '.txt' file: CMakeLists.txt\n"
"hello/0.1@memsharded/testing export: Copied 1 '.cpp' file: hello.cpp\n"
"hello/0.1@memsharded/testing export: Copied 1 '.h' file: hello.h\n"
"hello/0.1@memsharded/testing: A new conanfile.py version was exported"
msgstr ""

#: ../../../integrations/build_system/qmake.rst:64
msgid ""
"This hello package is created with CMake, but that doesn't matter for this "
"example, as it can be consumed from a qmake project with the configuration "
"showed before."
msgstr ""

#: ../../../integrations/build_system/qmake.rst:67
msgid ""
"Now let's get the qmake project and install its `hello/0.1@memsharded/"
"testing` dependency:"
msgstr ""

#: ../../../integrations/build_system/qmake.rst:69
msgid ""
"$ git clone https://github.com/memsharded/qmake_example\n"
"$ cd qmake_example\n"
"$ conan install .\n"
"PROJECT: Installing C:\\Users\\memsharded\\qmake_example\\conanfile.txt\n"
"Requirements\n"
"    hello/0.1@memsharded/testing from local cache - Cache\n"
"Packages\n"
"    hello/0.1@memsharded/testing:15af85373a5688417675aa1e5065700263bf257e - "
"Cache\n"
"\n"
"hello/0.1@memsharded/testing: Already installed!\n"
"PROJECT: Generator qmake created conanbuildinfo.pri\n"
"PROJECT: Generator txt created conanbuildinfo.txt\n"
"PROJECT: Generated conaninfo.txt"
msgstr ""

#: ../../../integrations/build_system/qmake.rst:85
msgid ""
"As you can see, we got the dependency information in the *conanbuildinfo."
"pri* file. You can inspect the file to see the variables generated. Now "
"let's build the project for Release and then for Debug:"
msgstr ""

#: ../../../integrations/build_system/qmake.rst:88
msgid ""
"$ qmake\n"
"$ make\n"
"$ ./helloworld\n"
"> Hello World Release!\n"
"\n"
"# now let's build the Debug one\n"
"$ make clean\n"
"$ qmake CONFIG+=debug\n"
"$ make\n"
"$ ./helloworld\n"
"> Hello World Debug!"
msgstr ""

#: ../../../integrations/build_system/qmake.rst:104
msgid ""
"Check the complete reference of the :ref:`qmake generator<qmake_generator>`."
msgstr ""
