# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2020, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.41\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../integrations/cross_platform/yocto.rst:5
msgid "|yocto_logo| Yocto"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:7
msgid ""
"The `Yocto Project`_ is an open-source project that delivers a set of tools "
"that create operating system images for embedded Linux systems. The Yocto "
"Project tools are based on the `OpenEmbedded`_ project, which uses the "
"BitBake build tool, to construct complete Linux images."
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:10
msgid ""
"Yocto supports several Linux host distributions and it also provides a way "
"to install the correct version of these tools by either downloading a "
"buildtools-tarball or building one on a supported machine. This allows "
"virtually any Linux distribution to be able to run Yocto, and also makes "
"sure that it will be possible to replicate your Yocto build system in the "
"future. The Yocto Project build system also isolates itself from the host "
"distribution's C library, which makes it possible to share build caches "
"between different distributions and also helps in future-proofing the build "
"system."
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:17
msgid "Integration with Conan"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:19
msgid ""
"You can create Conan packages building with the Yocto SDK as any other "
"package for other configuration. Those packages can be integrated into a "
"Yocto build installing them from a remote and without compiling them again."
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:22
msgid "Three stages can be differentiated in the proposed flow:"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:24
msgid ""
"1. Developers can create an application with the native tools in their "
"desktop platform of choice using their usual IDE, compiler or debugger and "
"test the application."
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:32
msgid ""
"Packages can be cross-built for the target device using the Yocto SDK and "
"uploaded to Artifactory, even automated in a CI process."
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:39
msgid ""
"Once the cross-built packages are available in Artifactory, the application "
"can be directly deployed to the Yocto image without building it from sources "
"again."
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:48
msgid "Creating Conan packages with Yocto's SDK"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:51
msgid "Prepare your recipes"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:53
msgid ""
"First of all, the recipe of the application to be deployed to the final "
"image should have a `deploy() method <https://docs.conan.io/en/latest/"
"devtools/running_packages.html>`_. There you can specify the files of the "
"application needed in the image as well as any other from its dependencies "
"(like shared libraries or assets):"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:57
msgid "*conanfile.py*"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:57
msgid ""
" from conans import ConanFile\n"
"\n"
"\n"
" class MosquittoConan(ConanFile):\n"
"     name = \"mosquitto\"\n"
"     version = \"1.4.15\"\n"
"     description = \"Open source message broker that implements the MQTT "
"protocol\"\n"
"     license = \"EPL\", \"EDL\"\n"
"     settings = \"os\", \"arch\", \"compiler\", \"build_type\"\n"
"     generators = \"cmake\"\n"
"     requires = \"openssl/1.0.2u\", \"c-ares/1.15.0\"\n"
"\n"
" def source(self):\n"
"     source_url = \"https://github.com/eclipse/mosquitto\"\n"
"     tools.get(\"{0}/archive/v{1}.tar.gz\".format(source_url, self."
"version))\n"
"\n"
" def build(self):\n"
"     cmake = CMake(self)\n"
"     cmake.configure()\n"
"     cmake.build()\n"
"\n"
" def package(self):\n"
"     self.copy(\"*.h\", dst=\"include\", src=\"hello\")\n"
"     self.copy(\"*.so\", dst=\"lib\", keep_path=False)\n"
"     self.copy(\"*.a\", dst=\"lib\", keep_path=False)\n"
"     self.copy(\"*mosquitto.conf\", dst=\"bin\", keep_path=False)\n"
"\n"
" def deploy(self):\n"
"     # Deploy the executables from this eclipse/mosquitto package\n"
"     self.copy(\"*\", src=\"bin\", dst=\"bin\")\n"
"     # Deploy the shared libs from this eclipse/mosquitto package\n"
"     self.copy(\"*.so*\", src=\"lib\", dst=\"bin\")\n"
"    # Deploy all the shared libs from the transitive deps\n"
"     self.copy_deps(\"*.so*\", src=\"lib\", dst=\"bin\")\n"
"\n"
" def package_info(self):\n"
"     self.cpp_info.libs = [\"mosquitto\", \"mosquitopp\", \"rt\", "
"\"pthread\", \"dl\"]"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:100
msgid "Setting up a Yocto SDK"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:102
msgid ""
"Yocto SDKs are completely self-contained, there is no dependency on "
"libraries of the build machine or tools installed in it. The SDK is a cross-"
"building toolchain matching the target and it is generated from that "
"specific configuration. This means that you will have to use a different SDK "
"toolchain to build for a different target architecture or that some SDK's "
"may have specific settings to enable some system dependency of the final "
"target and those libraries will be available in the SDK."
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:107
msgid ""
"You can `create your own Yocto SDKs <https://www.yoctoproject.org/docs/2.6/"
"sdk-manual/sdk-manual.html#sdk-building-an-sdk-installer>`_ or download and "
"use `the prebuilt ones <http://downloads.yoctoproject.org/releases/yocto/"
"yocto-2.6.2/toolchain/x86_64/>`_."
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:110
msgid ""
"**In the case that you are using CMake** to create the Conan packages, Yocto "
"injects a toolchain that configures CMake to only search for libraries in "
"the rootpath of the SDK with `CMAKE_FIND_ROOT_PATH <https://cmake.org/cmake/"
"help/v3.0/variable/CMAKE_FIND_ROOT_PATH.html#variable:"
"CMAKE_FIND_ROOT_PATH>`_. This is something that has to be patched to allow "
"CMake to find libraries in the Conan cache as well:"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:115
msgid ""
"*sdk/sysroots/x86_64-pokysdk-linux/usr/share/cmake/OEToolchainConfig.cmake*"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:115
msgid ""
" set( CMAKE_FIND_ROOT_PATH $ENV{OECORE_TARGET_SYSROOT} "
"$ENV{OECORE_NATIVE_SYSROOT} )\n"
" set( CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER )\n"
" # COMMENT THIS: set( CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY )\n"
" # COMMENT THIS: set( CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY )\n"
" # COMMENT THIS: set( CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY )"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:124
msgid "You can read more about those variables here:"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:126
msgid ""
"`CMAKE_FIND_ROOT_PATH_MODE_LIBRARY <https://cmake.org/cmake/help/v3.0/"
"variable/CMAKE_FIND_ROOT_PATH_MODE_LIBRARY.html>`_"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:127
msgid ""
"`CMAKE_FIND_ROOT_PATH_MODE_INCLUDE <https://cmake.org/cmake/help/v3.0/"
"variable/CMAKE_FIND_ROOT_PATH_MODE_INCLUDE.html>`_"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:128
msgid ""
"`CMAKE_FIND_ROOT_PATH_MODE_PACKAGE <https://cmake.org/cmake/help/v3.0/"
"variable/CMAKE_FIND_ROOT_PATH_MODE_PACKAGE.html>`_"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:131
msgid "Cross-building Conan packages with the SDK toolchain"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:133
msgid ""
"After setting up your desired SDK, you can start creating Conan packages "
"setting up the environment of the Yocto SDK and running a :command:`conan "
"create` command with a suitable profile with the specific architecture of "
"the toolchain."
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:136
msgid "For example, creating packages for `arch=armv8`:"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:138
msgid "The profile will be:"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:140
msgid "*armv8*"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:140
#: ../../../integrations/cross_platform/yocto.rst:252
msgid ""
" [settings]\n"
" os_build=Linux\n"
" arch_build=x86_64\n"
" os=Linux\n"
" arch=armv8\n"
" compiler=gcc\n"
" compiler.version=8\n"
" compiler.libcxx=libstdc++11\n"
" build_type=Release"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:153
msgid "Activate the SDK environment and execute the create command."
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:155
msgid ""
"$ source oe-environment-setup-aarch64-poky-linux\n"
"$ conan create . user/channel --profile armv8"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:160
msgid ""
"This will generate the packages using the Yocto toolchain from the "
"environment variables such as ``CC``, ``CXX``, ``LD``... Now you can :ref:"
"`upload the binaries <uploading_packages>` to an Artifactory server to share "
"and reuse in your Yocto builds."
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:163
msgid "$ conan upload mosquitto/1.4.15@user/channel --all --remote my_repo"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:169
msgid ""
"We strongly recommend using the Yocto's SDK toolchain to create packages as "
"they will be built with the optimization flags suitable to be deployed later "
"to an image generated in a Yocto build."
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:173
msgid "Deploying an application to a Yocto image"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:175
msgid ""
"Now that you have your cross-built Conan packages in Artifactory, you can "
"deploy them in a Yocto build."
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:178
msgid "Set up the Conan layer"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:180
msgid ""
"We have created a `meta-conan <https://github.com/conan-io/meta-conan>`_ "
"layer that includes all the configuration, the Conan client and a generic "
"BitBake recipe. To add the layer you will have to clone the repository and "
"the dependency layers of ``meta-openembedded``:"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:183
msgid ""
"$ cd poky\n"
"$ git clone https://github.com/conan-io/meta-conan.git\n"
"$ git clone --branch thud https://github.com/openembedded/meta-openembedded."
"git"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:189
msgid ""
"You would also have to activate the layers in the *bblayers.conf* file of "
"your build folder:"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:191
msgid "*conf/bblayers.conf*"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:191
msgid ""
" POKY_BBLAYERS_CONF_VERSION = \"2\"\n"
"\n"
" BBPATH = \"${TOPDIR}\"\n"
" BBFILES ?= \"\"\n"
"\n"
" BBLAYERS ?= \" \\\n"
" /home/username/poky/meta \\\n"
" /home/username/poky/meta-poky \\\n"
" /home/username/poky/meta-yocto-bsp \\\n"
" /home/username/poky/meta-openembedded/meta-oe \\\n"
" /home/username/poky/meta-openembedded/meta-python \\\n"
" /home/username/poky/meta-conan \\\n"
" \""
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:210
msgid ""
"Please report any question, feature request or issue related to the ``meta-"
"conan`` layer in its `GitHub issue tracker <https://github.com/conan-io/meta-"
"conan/issues>`_."
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:214
msgid "Write the Bitbake recipe for the Conan package"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:216
msgid ""
"With the ``meta-conan`` layer, a Conan recipe to deploy a Conan package "
"should look as easy as this recipe:"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:218
msgid "*conan-mosquitto_1.4.15.bb*"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:218
msgid ""
" inherit conan\n"
"\n"
" DESCRIPTION = \"An open source MQTT broker\"\n"
" LICENSE = \"EPL-1.0\"\n"
"\n"
" CONAN_PKG = \"mosquitto/1.4.15@bincrafters/stable\""
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:228
msgid ""
"This recipe will be placed inside your application layer that should be also "
"added to the *conf/bblayers.conf* file."
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:231
msgid "Configure Conan variables for the build"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:233
msgid ""
"Additionally to the recipe, you will need to provide the information about "
"the credentials for Artifactory or the profile to be used to retrieve the "
"packages in the *local.conf* file of your build folder."
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:236
#: ../../../integrations/cross_platform/yocto.rst:273
msgid "*poky_build_folder/conf/local.conf*"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:236
msgid ""
" IMAGE_INSTALL_append = \" conan-mosquitto\"\n"
"\n"
" # Profile for installation\n"
" CONAN_PROFILE_PATH = \"${TOPDIR}/conf/armv8\"\n"
" # Artifactory repository\n"
" CONAN_REMOTE_URL = \"https://localhost:8081/artifactory/api/conan/"
"<repository>\"\n"
" # Artifactory Credentials\n"
" CONAN_USER = \"REPO_USER\"\n"
" CONAN_PASSWORD = \"REPO_PASSWORD\""
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:249
msgid ""
"Notice the *armv8* profile to indicate your configuration next to the *local."
"conf*. That way you will be able to match the Conan configuration with the "
"specific architecture or board of your Yocto build."
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:252
msgid "*poky_build_folder/conf/armv8*"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:265
msgid ""
"It is recommended to set up the specific profile to use in your build with "
"``CONAN_PROFILE_PATH`` pointing to profile stored in the configuration "
"folder of your build (next to the *conf/local.conf* file), for example: "
"``CONAN_PROFILE_PATH = \"${TOPDIR}/conf/armv8\"``."
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:268
msgid ""
"Finally, the Artifactory repository URL where you want to retrieve the "
"packages from and its credentials."
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:270
msgid ""
"You can also use ``CONAN_CONFIG_URL`` with a custom Conan configuration to "
"be used with :command:`conan config install` and the name of the profile to "
"use in ``CONAN_PROFILE_PATH`` and just the name of the remote in "
"``CONAN_REMOTE_NAME``. For example:"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:273
msgid ""
" IMAGE_INSTALL_append = \" conan-mosquitto\"\n"
"\n"
" CONAN_CONFIG_URL = \"https://github.com/<your-organization>/conan-config."
"git\"\n"
" CONAN_PROFILE_PATH = \"armv8\"\n"
" CONAN_REMOTE_NAME = \"my_repo\"\n"
" CONAN_USER = \"REPO_USER\"\n"
" CONAN_PASSWORD = \"REPO_PASSWORD\""
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:284
msgid ""
"In this case the *armv8* profile and the ``my_repo`` remote will be taken "
"from the ones installed with the :command:`conan config install` command."
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:288
msgid "Architecture conversion table"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:290
msgid ""
"If no specific profile is indicated in ``CONAN_PROFILE_PATH``, Conan will "
"map the most common Yocto architectures and machines to the existing ones in "
"Conan. This is the current mapping from Conan architectures to the Yocto "
"ones:"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:294
msgid "**Yocto SDK**"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:294
msgid "**Yocto Machine**"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:294
msgid "**Conan arch setting**"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:296
msgid "aarch64"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:296
msgid "qemuarm64"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:296
msgid "armv8"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:298
msgid "armv5e"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:298
msgid "qemuarmv5"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:298
msgid "armv5el"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:300
msgid "core2-64"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:300
msgid "qemux86_64"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:300
msgid "x86_64"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:302
msgid "cortexa8hf"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:302
msgid "quemuarm"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:302
msgid "armv7hf"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:304
msgid "i586"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:304
msgid "qemux86"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:304
msgid "x86"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:306
msgid "mips32r2"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:306
msgid "qemumips"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:306
msgid "mips"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:308
msgid "mips64"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:308
msgid "qemumips64"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:310
msgid "ppc7400"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:310
msgid "qemuppc"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:310
msgid "ppc32"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:313
msgid ""
"This mapping may not be complete and some of the binaries generated with the "
"Yocto toolchains will have specific optimization flags for the specific "
"architectures."
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:318
msgid ""
"For heavy Yocto users, having a custom setting for this may be very useful. "
"For example, including the specific architecture names in your *settings.yml*"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:321
msgid "arch: [..., \"aarch64\", \"armv5e\", \"core2-64\", ...]"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:325
msgid "Or using a ``machine`` subsetting under the ``Linux`` operating system:"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:327
msgid ""
"os:\n"
"    Linux:\n"
"        machine: [None, \"qemuarm64\", \"qemuarm64\", \"qemux86_64\", ...]"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:333
msgid ""
"Note that the ``None`` value is important here to be able to build other "
"packages without value for this subsetting to target a non-yocto Linux "
"distro."
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:338
msgid ""
"Yocto Machine configurations: https://git.yoctoproject.org/cgit.cgi/poky/"
"tree/meta/conf/machine"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:339
msgid "Conan Architectures in :ref:`settings_yml`."
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:342
msgid "Deploy the application and its dependencies to the final image"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:344
msgid ""
"You can build the recipe to test that the packages are correctly deployed:"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:346
msgid "$ bitbake -c install conan-mosquitto"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:350
msgid ""
"Packages will be installed with the profile indicated and installed with its "
"dependencies only from the remote specified."
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:352
msgid "Finally, you can build your image with the Conan packages:"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:354
msgid "$ bitbake core-image-minimal"
msgstr ""

#: ../../../integrations/cross_platform/yocto.rst:358
msgid ""
"The binaries of **the Conan packages will be deployed** to the */bin* folder "
"of the image once it is created."
msgstr ""
