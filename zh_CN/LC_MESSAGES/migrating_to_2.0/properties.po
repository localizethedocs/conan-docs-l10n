# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2022, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.45\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:12+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../migrating_to_2.0/properties.rst:4
msgid "Migrating legacy cpp_info attributes to set_property()"
msgstr ""

#: ../../../migrating_to_2.0/properties.rst:6
msgid ""
"Migrating from `.names`, `.filenams` and `.build_modules` to "
"``set_property()`` is easy, but there are some details to take into account "
"for properties like ``cmake_target_name`` and ``cmake_file_name``. Let's see "
"some examples."
msgstr ""

#: ../../../migrating_to_2.0/properties.rst:12
msgid "The 2 mechanisms are completely independent:"
msgstr ""

#: ../../../migrating_to_2.0/properties.rst:14
msgid ""
"Old way using ``.names``, ``.filenames`` will work exclusively for legacy "
"generators like ``cmake_find_package``"
msgstr ""

#: ../../../migrating_to_2.0/properties.rst:15
msgid ""
"New properties, like ``set_property(\"cmake_target_name\")`` will work "
"exclusively for new generators like ``CMakeDeps``. They have changed to be "
"absolute, and that would break legacy generators."
msgstr ""

#: ../../../migrating_to_2.0/properties.rst:17
msgid ""
"Recipes that want to provide support for both generators need to provide the "
"2 definitions in their ``package_info()``"
msgstr ""

#: ../../../migrating_to_2.0/properties.rst:22
msgid "Migrating from .names to cmake_target_name"
msgstr ""

#: ../../../migrating_to_2.0/properties.rst:24
msgid ""
"It is important to note that ``cmake_target_name`` is **not** going to take "
"the same value as the ``.names`` attribute did. With the ``.names`` "
"attribute, if you set a name for the target in CMake, Conan would "
"automatically create a \"namespaced\" target name with that name. This code, "
"for example:"
msgstr ""

#: ../../../migrating_to_2.0/properties.rst:29
msgid ""
"def package_info(self):\n"
"    ...\n"
"    self.cpp_info.filenames[\"cmake_find_package\"] = \"myname\"\n"
"    ..."
msgstr ""

#: ../../../migrating_to_2.0/properties.rst:36
msgid "Will create a CMake target named ``myname::myname``."
msgstr ""

#: ../../../migrating_to_2.0/properties.rst:38
msgid ""
"The property ``cmake_target_name`` accepts **complete** target names. That "
"means that the name you set with this property will be the one added to the "
"CMake generated files without appending any more information to it. To "
"translate the last example to the set_property model you should add the "
"following declaration:"
msgstr ""

#: ../../../migrating_to_2.0/properties.rst:44
msgid ""
"def package_info(self):\n"
"    ...\n"
"    self.cpp_info.set_property(\"cmake_target_name\", \"myname::myname\")\n"
"    ..."
msgstr ""

#: ../../../migrating_to_2.0/properties.rst:51
msgid ""
"Note that you can use whatever name you want, it can have a different "
"namespace, like ``mynamespace::myname`` or use a name with no namespace at "
"all."
msgstr ""

#: ../../../migrating_to_2.0/properties.rst:54
msgid ""
"Also, please note that you may want to have different target names for both "
"`config <https://cmake.org/cmake/help/v3.15/command/find_package.html#full-"
"signature-and-config-mode>`_ and `module <https://cmake.org/cmake/help/v3.15/"
"command/find_package.html#basic-signature-and-module-mode>`_ CMake generated "
"files. For example, you have a package named ``myssl`` and you want to "
"generate a ``Findmyssl.cmake`` module that declares the target ``MySSL::"
"SSL``, but for config mode you want to declare the target ``MySSL`` without "
"namespaces. You can do that using the ``cmake_module_target_name`` property. "
"Also, when setting this property, remember to set ``cmake_find_mode`` so "
"that `CMakeDeps` generates those module files. Let's see an example:"
msgstr ""

#: ../../../migrating_to_2.0/properties.rst:64
msgid ""
"class MySSL(ConanFile):\n"
"    name = \"myssl\"\n"
"    version = \"1.0\"\n"
"    ...\n"
"    def package_info(self):\n"
"        self.cpp_info.set_property(\"cmake_target_name\", \"MySSL\")\n"
"        self.cpp_info.set_property(\"cmake_module_target_name\", \"MySSL::"
"SSL\")\n"
"        self.cpp_info.set_property(\"cmake_find_mode\", \"both\")\n"
"    ..."
msgstr ""

#: ../../../migrating_to_2.0/properties.rst:78
msgid "Migrating from .filenames to cmake_file_name"
msgstr ""

#: ../../../migrating_to_2.0/properties.rst:80
msgid ""
"To migrate from ``.filenames`` to names just use the same ``.filenames`` "
"value for the property ``cmake_file_name``. For example:"
msgstr ""

#: ../../../migrating_to_2.0/properties.rst:83
msgid ""
"def package_info(self):\n"
"    ...\n"
"    self.cpp_info.filenames[\"cmake_find_package\"] = \"MyFileName\"\n"
"    self.cpp_info.filenames[\"cmake_find_package_multi\"] = \"MyFileName\"\n"
"    ..."
msgstr ""

#: ../../../migrating_to_2.0/properties.rst:91
msgid "Could be declared like this with ``set_property()``:"
msgstr ""

#: ../../../migrating_to_2.0/properties.rst:93
msgid ""
"def package_info(self):\n"
"    ...\n"
"    self.cpp_info.set_property(\"cmake_file_name\", \"MyFileName\")\n"
"    ..."
msgstr ""

#: ../../../migrating_to_2.0/properties.rst:100
msgid ""
"Please note that for the legacy ``.names`` and ``.filenames`` model, if ``."
"filenames`` is not declared but ``.names`` is, then Conan will automatically "
"set the value of ``.filenames`` to the value of ``.names``. So for example:"
msgstr ""

#: ../../../migrating_to_2.0/properties.rst:104
msgid ""
"def package_info(self):\n"
"    ...\n"
"    self.cpp_info.names[\"cmake_find_package\"] = \"SomeName\"\n"
"    self.cpp_info.names[\"cmake_find_package_multi\"] = \"SomeName\"\n"
"    ..."
msgstr ""

#: ../../../migrating_to_2.0/properties.rst:112
msgid ""
"This will use \"SomeName\" to compose the generated filenames. In this case "
"you should set ``cmake_file_name`` to \"SomeName\":"
msgstr ""

#: ../../../migrating_to_2.0/properties.rst:114
msgid ""
"def package_info(self):\n"
"    ...\n"
"    self.cpp_info.set_property(\"cmake_file_name\", \"SomeName\")\n"
"    ..."
msgstr ""

#: ../../../migrating_to_2.0/properties.rst:121
msgid ""
"Also, please note that you may want to use different file names for both "
"`config <https://cmake.org/cmake/help/v3.15/command/find_package.html#full-"
"signature-and-config-mode>`_ and `module <https://cmake.org/cmake/help/v3.15/"
"command/find_package.html#basic-signature-and-module-mode>`_ CMake generated "
"files. If we take the previous example of the ``myssl`` and you want to "
"generate a ``FindMySSL.cmake`` for module mode and ``myssl-config.cmake`` "
"for config mode, you can set the ``cmake_module_file_name`` to set the value "
"for the module file:"
msgstr ""

#: ../../../migrating_to_2.0/properties.rst:127
msgid ""
"class MySSL(ConanFile):\n"
"    name = \"myssl\"\n"
"    version = \"1.0\"\n"
"    ...\n"
"    def package_info(self):\n"
"        self.cpp_info.set_property(\"cmake_file_name\", \"myssl\")\n"
"        self.cpp_info.set_property(\"cmake_module_file_name\", \"MySSL\")\n"
"        self.cpp_info.set_property(\"cmake_find_mode\", \"both\")\n"
"    ..."
msgstr ""

#: ../../../migrating_to_2.0/properties.rst:139
msgid ""
"You can read more about this properties in the :ref:`CMakeDeps<CMakeDeps "
"Properties>` properties reference."
msgstr ""

#: ../../../migrating_to_2.0/properties.rst:142
msgid "Migrating components information"
msgstr ""

#: ../../../migrating_to_2.0/properties.rst:144
msgid ""
"As we said, all these properties but ``cmake_file_name`` and "
"``cmake_module_file_name`` have components support, so for example:"
msgstr ""

#: ../../../migrating_to_2.0/properties.rst:147
msgid ""
"def package_info(self):\n"
"    ...\n"
"    self.cpp_info.components[\"mycomponent\"].names[\"cmake_find_package\"] "
"= \"mycomponent-name\"\n"
"    self.cpp_info.components[\"mycomponent\"]."
"names[\"cmake_find_package_multi\"] = \"mycomponent-name\"\n"
"    self.cpp_info.components[\"mycomponent\"].names[\"pkg_config\"] = "
"\"mypkg-config-name\"\n"
"    self.cpp_info.components[\"mycomponent\"].build_modules.append(os.path."
"join(\"lib\", \"mypkg_bm.cmake\"))\n"
"    ..."
msgstr ""

#: ../../../migrating_to_2.0/properties.rst:157
msgid "Could be declared like this with the properties model:"
msgstr ""

#: ../../../migrating_to_2.0/properties.rst:159
msgid ""
"def package_info(self):\n"
"    ...\n"
"    self.cpp_info.components[\"mycomponent\"]."
"set_property(\"cmake_target_name\", \"component_namespace::mycomponent-"
"name\")\n"
"    self.cpp_info.components[\"mycomponent\"]."
"set_property(\"cmake_build_modules\", [os.path.join(\"lib\", \"mypkg_bm."
"cmake\")])\n"
"    self.cpp_info.components[\"mycomponent\"]."
"set_property(\"pkg_config_name\", \"mypkg-config-name\")\n"
"    self.cpp_info.components[\"mycomponent\"].set_property(\"custom_name\", "
"\"mycomponent-name\", \"custom_generator\")\n"
"    ..."
msgstr ""

#: ../../../migrating_to_2.0/properties.rst:170
msgid ""
"Please **note** that most of the legacy generators like `cmake`, "
"`cmake_multi`, `cmake_find_package`, `cmake_find_package_multi` and "
"`cmake_paths` do not listen to these properties at all, so if you want to "
"maintain compatibility with consumers that use those generators and also "
"that information for new generators like `CMakeDeps` you need both models "
"living together in the same recipe."
msgstr ""

#: ../../../migrating_to_2.0/properties.rst:178
msgid ""
"Read :ref:`package_information_components` and :ref:`method_package_info` to "
"learn more."
msgstr ""
