# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2018, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/commands/consumer/install.rst:5
msgid "conan install"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:7
msgid ""
"$ conan install [-h] [-g GENERATOR] [-if INSTALL_FOLDER] [-m [MANIFESTS]]\n"
"                [-mi [MANIFESTS_INTERACTIVE]] [-v [VERIFY]]\n"
"                [--no-imports] [-j JSON] [-b [BUILD]] [-e ENV]\n"
"                [-o OPTIONS] [-pr PROFILE] [-r REMOTE] [-s SETTINGS] [-u]\n"
"                path_or_reference"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:15
msgid ""
"Installs the requirements specified in a recipe (conanfile.py or conanfile."
"txt). It can also be used to install a concrete package specifying a "
"reference. If any requirement is not found in the local cache, it will "
"retrieve the recipe from a remote, looking for it sequentially in the "
"configured remotes. When the recipes have been downloaded it will try to "
"download a binary package matching the specified settings, only from the "
"remote from which the recipe was retrieved. If no binary package is found, "
"it can be build from sources using the '--build' option. When the package is "
"installed, Conan will write the files for the specified generators."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:25
msgid ""
"positional arguments:\n"
"  path_or_reference     Path to a folder containing a recipe (conanfile.py "
"or\n"
"                        conanfile.txt) or to a recipe file. E.g.,\n"
"                        ./my_project/conanfile.txt. It could also be a\n"
"                        reference\n"
"\n"
"optional arguments:\n"
"  -h, --help            show this help message and exit\n"
"  -g GENERATOR, --generator GENERATOR\n"
"                        Generators to use\n"
"  -if INSTALL_FOLDER, --install-folder INSTALL_FOLDER\n"
"                        Use this directory as the directory where to put "
"the\n"
"                        generatorfiles. E.g., conaninfo/conanbuildinfo.txt\n"
"  -m [MANIFESTS], --manifests [MANIFESTS]\n"
"                        Install dependencies manifests in folder for later\n"
"                        verify. Default folder is .conan_manifests, but can "
"be\n"
"                        changed\n"
"  -mi [MANIFESTS_INTERACTIVE], --manifests-interactive "
"[MANIFESTS_INTERACTIVE]\n"
"                        Install dependencies manifests in folder for later\n"
"                        verify, asking user for confirmation. Default "
"folder\n"
"                        is .conan_manifests, but can be changed\n"
"  -v [VERIFY], --verify [VERIFY]\n"
"                        Verify dependencies manifests against stored ones\n"
"  --no-imports          Install specified packages but avoid running "
"imports\n"
"  -j JSON, --json JSON  Path to a json file where the install information "
"will\n"
"                        be written\n"
"  -b [BUILD], --build [BUILD]\n"
"                        Optional, use it to choose if you want to build "
"from\n"
"                        sources: --build Build all from sources, do not use\n"
"                        binary packages. --build=never Never build, use "
"binary\n"
"                        packages or fail if a binary package is not found.\n"
"                        --build=missing Build from code if a binary package "
"is\n"
"                        not found. --build=outdated Build from code if the\n"
"                        binary is not built with the current recipe or when\n"
"                        missing binary package. --build=[pattern] Build "
"always\n"
"                        these packages from source, but never build the\n"
"                        others. Allows multiple --build parameters. "
"'pattern'\n"
"                        is a fnmatch file pattern of a package name. "
"Default\n"
"                        behavior: If you don't specify anything, it will be\n"
"                        similar to '--build=never', but package recipes can\n"
"                        override it with their 'build_policy' attribute in "
"the\n"
"                        conanfile.py.\n"
"  -e ENV, --env ENV     Environment variables that will be set during the\n"
"                        package build, -e CXX=/usr/bin/clang++\n"
"  -o OPTIONS, --options OPTIONS\n"
"                        Define options values, e.g., -o Pkg:with_qt=true\n"
"  -pr PROFILE, --profile PROFILE\n"
"                        Apply the specified profile to the install command\n"
"  -r REMOTE, --remote REMOTE\n"
"                        Look in the specified remote server\n"
"  -s SETTINGS, --settings SETTINGS\n"
"                        Settings to build the package, overwriting the\n"
"                        defaults. E.g., -s compiler=gcc\n"
"  -u, --update          Check updates exist from upstream remotes"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:83
msgid ""
":command:`conan install` executes methods of a *conanfile.py* in the "
"following order:"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:85
#: ../../../reference/commands/consumer/install.rst:95
msgid "``config_options()``"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:86
#: ../../../reference/commands/consumer/install.rst:96
msgid "``configure()``"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:87
#: ../../../reference/commands/consumer/install.rst:97
msgid "``requirements()``"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:88
#: ../../../reference/commands/consumer/install.rst:98
msgid "``package_id()``"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:89
#: ../../../reference/commands/consumer/install.rst:106
msgid "``package_info()``"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:90
#: ../../../reference/commands/consumer/install.rst:107
msgid "``deploy()``"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:92
msgid ""
"Note this describes the process of installing a pre-built binary package. If "
"the package has to be built, :command:`conan install --build` executes the "
"following:"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:99
msgid "``build_requirements()``"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:100
msgid "``build_id()``"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:101
msgid "``system_requirements()``"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:102
msgid "``source()``"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:103
msgid "``imports()``"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:104
msgid "``build()``"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:105
msgid "``package()``"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:109
msgid "**Examples**"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:111
msgid ""
"Install a package requirement from a ``conanfile.txt``, saved in your "
"current directory with one option and setting (other settings will be "
"defaulted as defined in ``<userhome>/.conan/profiles/default``):"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:115
msgid "$ conan install . -o PkgName:use_debug_mode=on -s compiler=clang"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:121
msgid ""
"You have to take into account that **settings** are cached as defaults in "
"the **conaninfo.txt** file, so you don't have to type them again and again "
"in the **conan install** or **conan create** commands."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:125
msgid ""
"However, the default **options** are defined in your **conanfile**. If you "
"want to change the default options across all your **conan install** "
"commands, change them in the **conanfile**. When you change the **options** "
"on the command line, they are only changed for one shot. Next time, **conan "
"install** will take the **conanfile** options as default values, if you "
"don't specify them again in the command line."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:131
msgid ""
"Install the **OpenCV/2.4.10@lasote/testing** reference with its default "
"options and default settings from ``<userhome>/.conan/profiles/default``:"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:134
msgid "$ conan install opencv/2.4.10@lasote/testing"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:138
msgid ""
"Install the **OpenCV/2.4.10@lasote/testing** reference updating the recipe "
"and the binary package if new upstream versions are available:"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:141
msgid "$ conan install opencv/2.4.10@lasote/testing --update"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:148
msgid "build options"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:150
msgid ""
"Both the conan **install** and **create** commands have options to specify "
"whether conan should try to build things or not:"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:153
msgid ""
":command:`--build=never`: This is the default option. It is not necessary to "
"write it explicitly. Conan will not try to build packages when the requested "
"configuration does not match, in which case it will throw an error."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:156
msgid ""
":command:`--build=missing`: Conan will try to build from source, all "
"packages of which the requested configuration was not found on any of the "
"active remotes."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:158
msgid ""
":command:`--build=outdated`: Conan will try to build from code if the binary "
"is not built with the current recipe or when missing binary package."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:160
msgid ""
":command:`--build=[pattern]`: A fnmatch file pattern of a package name. E."
"g., ``zl*`` will match ``zlib`` package. Conan will force the build of the "
"packages, the name of which matches the given **pattern**. Several patterns "
"can be specified, chaining multiple options, e.g., :command:`--"
"build=pattern1 --build=pattern2`."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:164
msgid ""
":command:`--build`: Always build everything from source. Produces a clean re-"
"build of all packages and transitively dependent packages"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:168
msgid "env variables"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:170
msgid "With the :command:`-e` parameters you can define:"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:172
msgid ""
"Global environment variables (:command:`-e SOME_VAR=\"SOME_VALUE\"`). These "
"variables will be defined before the `build` step in all the packages and "
"will be cleaned after the `build` execution."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:174
msgid ""
"Specific package environment variables (:command:`-e zlib:"
"SOME_VAR=\"SOME_VALUE\"`). These variables will be defined only in the "
"specified packages (e.g., zlib)."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:177
msgid ""
"You can specify this variables not only for your direct ``requires`` but for "
"any package in the dependency graph."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:180
msgid ""
"If you want to define an environment variable but you want to append the "
"variables declared in your requirements you can use the [] syntax:"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:183
msgid "$ conan install . -e PYTHONPATH=[/other/path]"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:187
msgid ""
"This way the first entry in the PYTHONPATH variable will be :command:`/other/"
"path` but the PYTHONPATH values declared in the requirements of the project "
"will be appended at the end using the system path separator."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:192
msgid "settings"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:194
msgid "With the :command:`-s` parameters you can define:"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:196
msgid ""
"Global settings (:command:`-s compiler=\"Visual Studio\"`). Will apply to "
"all the requires."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:197
msgid ""
"Specific package settings (:command:`-s zlib:compiler=\"MinGW\"`). Those "
"settings will be applied only to the specified packages."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:200
msgid ""
"You can specify custom settings not only for your direct ``requires`` but "
"for any package in the dependency graph."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:204
msgid "options"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:206
msgid ""
"With the :command:`-o` parameters you can only define specific package "
"options."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:208
msgid ""
"$ conan install . -o zlib:shared=True\n"
"$ conan install . -o zlib:shared=True -o bzip2:option=132\n"
"# you can also apply the same options to many packages with wildcards:\n"
"$ conan install . -o *:shared=True"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:217
msgid ""
"You can use :ref:`profiles <profiles>` files to create predefined sets of "
"**settings**, **options** and **environment variables**."
msgstr ""
