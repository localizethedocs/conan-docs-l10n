# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2019, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.24\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:03+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/commands/consumer/install.rst:5
msgid "conan install"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:7
msgid ""
"$ conan install [-h] [-g GENERATOR] [-if INSTALL_FOLDER] [-m [MANIFESTS]]\n"
"                [-mi [MANIFESTS_INTERACTIVE]] [-v [VERIFY]] [--no-imports] [-"
"j JSON]\n"
"                [-b [BUILD]] [-r REMOTE] [-u] [-l [LOCKFILE]] [-e ENV_HOST]\n"
"                [-e:b ENV_BUILD] [-e:h ENV_HOST] [-o OPTIONS_HOST]\n"
"                [-o:b OPTIONS_BUILD] [-o:h OPTIONS_HOST] [-pr PROFILE_HOST]\n"
"                [-pr:b PROFILE_BUILD] [-pr:h PROFILE_HOST] [-s "
"SETTINGS_HOST]\n"
"                [-s:b SETTINGS_BUILD] [-s:h SETTINGS_HOST]\n"
"                path_or_reference [reference]"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:18
msgid ""
"Installs the requirements specified in a recipe (conanfile.py or conanfile."
"txt)."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:20
msgid ""
"It can also be used to install a concrete package specifying a reference. If "
"any requirement is not found in the local cache, it will retrieve the recipe "
"from a remote, looking for it sequentially in the configured remotes. When "
"the recipes have been downloaded it will try to download a binary package "
"matching the specified settings, only from the remote from which the recipe "
"was retrieved. If no binary package is found, it can be built from sources "
"using the '--build' option. When the package is installed, Conan will write "
"the files for the specified generators."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:30
msgid ""
"positional arguments:\n"
"  path_or_reference     Path to a folder containing a recipe (conanfile.py "
"or\n"
"                        conanfile.txt) or to a recipe file. e.g.,\n"
"                        ./my_project/conanfile.txt. It could also be a "
"reference\n"
"  reference             Reference for the conanfile path of the first "
"argument:\n"
"                        user/channel, version@user/channel or pkg/"
"version@user/channel(if\n"
"                        name or version declared in conanfile.py, they "
"should match)\n"
"\n"
"optional arguments:\n"
"  -h, --help            show this help message and exit\n"
"  -g GENERATOR, --generator GENERATOR\n"
"                        Generators to use\n"
"  -if INSTALL_FOLDER, --install-folder INSTALL_FOLDER\n"
"                        Use this directory as the directory where to put "
"the\n"
"                        generatorfiles. e.g., conaninfo/conanbuildinfo.txt\n"
"  -m [MANIFESTS], --manifests [MANIFESTS]\n"
"                        Install dependencies manifests in folder for later "
"verify. Default\n"
"                        folder is .conan_manifests, but can be changed\n"
"  -mi [MANIFESTS_INTERACTIVE], --manifests-interactive "
"[MANIFESTS_INTERACTIVE]\n"
"                        Install dependencies manifests in folder for later "
"verify, asking\n"
"                        user for confirmation. Default folder is ."
"conan_manifests, but can\n"
"                        be changed\n"
"  -v [VERIFY], --verify [VERIFY]\n"
"                        Verify dependencies manifests against stored ones\n"
"  --no-imports          Install specified packages but avoid running "
"imports\n"
"  -j JSON, --json JSON  Path to a json file where the install information "
"will be written\n"
"  -b [BUILD], --build [BUILD]\n"
"                        Optional, use it to choose if you want to build from "
"sources:\n"
"                        --build Build all from sources, do not use binary "
"packages.\n"
"                        --build=never Never build, use binary packages or "
"fail if a binary\n"
"                        package is not found. --build=missing Build from "
"code if a binary\n"
"                        package is not found. --build=cascade Will build "
"from code all the\n"
"                        nodes with some dependency being built (for any "
"reason). Can be\n"
"                        used together with any other build policy. Useful to "
"make sure that\n"
"                        any new change introduced in a dependency is "
"incorporated by\n"
"                        building again the package. --build=outdated Build "
"from code if the\n"
"                        binary is not built with the current recipe or when "
"missing a\n"
"                        binary package. --build=[pattern] Build always these "
"packages from\n"
"                        source, but never build the others. Allows multiple "
"--build\n"
"                        parameters. 'pattern' is a fnmatch file pattern of a "
"package\n"
"                        reference. Default behavior: If you don't specify "
"anything, it will\n"
"                        be similar to '--build=never', but package recipes "
"can override it\n"
"                        with their 'build_policy' attribute in the conanfile."
"py.\n"
"  -r REMOTE, --remote REMOTE\n"
"                        Look in the specified remote server\n"
"  -u, --update          Check updates exist from upstream remotes\n"
"  -l [LOCKFILE], --lockfile [LOCKFILE]\n"
"                        Path to a lockfile or folder containing 'conan.lock' "
"file. Lockfile\n"
"                        can be updated if packages change\n"
"  -e ENV_HOST, --env ENV_HOST\n"
"                        Environment variables that will be set during the "
"package build\n"
"                        (host machine). e.g.: -e CXX=/usr/bin/clang++\n"
"  -e:b ENV_BUILD, --env:build ENV_BUILD\n"
"                        Environment variables that will be set during the "
"package build\n"
"                        (build machine). e.g.: -e CXX=/usr/bin/clang++\n"
"  -e:h ENV_HOST, --env:host ENV_HOST\n"
"                        Environment variables that will be set during the "
"package build\n"
"                        (host machine). e.g.: -e CXX=/usr/bin/clang++\n"
"  -o OPTIONS_HOST, --options OPTIONS_HOST\n"
"                        Define options values (host machine), e.g.: -o Pkg:"
"with_qt=true\n"
"  -o:b OPTIONS_BUILD, --options:build OPTIONS_BUILD\n"
"                        Define options values (build machine), e.g.: -o Pkg:"
"with_qt=true\n"
"  -o:h OPTIONS_HOST, --options:host OPTIONS_HOST\n"
"                        Define options values (host machine), e.g.: -o Pkg:"
"with_qt=true\n"
"  -pr PROFILE_HOST, --profile PROFILE_HOST\n"
"                        Apply the specified profile to the host machine\n"
"  -pr:b PROFILE_BUILD, --profile:build PROFILE_BUILD\n"
"                        Apply the specified profile to the build machine\n"
"  -pr:h PROFILE_HOST, --profile:host PROFILE_HOST\n"
"                        Apply the specified profile to the host machine\n"
"  -s SETTINGS_HOST, --settings SETTINGS_HOST\n"
"                        Settings to build the package, overwriting the "
"defaults (host\n"
"                        machine). e.g.: -s compiler=gcc\n"
"  -s:b SETTINGS_BUILD, --settings:build SETTINGS_BUILD\n"
"                        Settings to build the package, overwriting the "
"defaults (build\n"
"                        machine). e.g.: -s compiler=gcc\n"
"  -s:h SETTINGS_HOST, --settings:host SETTINGS_HOST\n"
"                        Settings to build the package, overwriting the "
"defaults (host\n"
"                        machine). e.g.: -s compiler=gcc"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:113
msgid ""
":command:`conan install` executes methods of a *conanfile.py* in the "
"following order:"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:115
#: ../../../reference/commands/consumer/install.rst:125
msgid "``config_options()``"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:116
#: ../../../reference/commands/consumer/install.rst:126
msgid "``configure()``"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:117
#: ../../../reference/commands/consumer/install.rst:127
msgid "``requirements()``"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:118
#: ../../../reference/commands/consumer/install.rst:128
msgid "``package_id()``"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:119
#: ../../../reference/commands/consumer/install.rst:136
msgid "``package_info()``"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:120
#: ../../../reference/commands/consumer/install.rst:137
msgid "``deploy()``"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:122
msgid ""
"Note this describes the process of installing a pre-built binary package. If "
"the package has to be built, :command:`conan install --build` executes the "
"following:"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:129
msgid "``build_requirements()``"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:130
msgid "``build_id()``"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:131
msgid "``system_requirements()``"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:132
msgid "``source()``"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:133
msgid "``imports()``"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:134
msgid "``build()``"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:135
msgid "``package()``"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:139
msgid "**Examples**"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:141
msgid ""
"Install a package requirement from a ``conanfile.txt``, saved in your "
"current directory with one option and setting (other settings will be "
"defaulted as defined in ``<userhome>/.conan/profiles/default``):"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:145
msgid "$ conan install . -o pkg_name:use_debug_mode=on -s compiler=clang"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:149
msgid ""
"Install the requirements defined in a ``conanfile.py`` file in your current "
"directory, with the default settings in default profile ``<userhome>/.conan/"
"profiles/default``, and specifying the version, user and channel (as they "
"might be used in the recipe):"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:153
msgid ""
"class Pkg(ConanFile):\n"
"   name = \"mypkg\"\n"
"   # see, no version defined!\n"
"   def requirements(self):\n"
"       # this trick allow to depend on packages on your same user/channel\n"
"       self.requires(\"dep/0.3@%s/%s\" % (self.user, self.channel))\n"
"\n"
"   def build(self):\n"
"       if self.version == \"myversion\":\n"
"           # something specific for this version of the package."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:166
msgid "$ conan install . myversion@someuser/somechannel"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:170
msgid ""
"Those values are cached in a file, so later calls to local commands like "
"``conan build`` can find and use this version, user and channel data."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:173
msgid ""
"Install the **opencv/4.1.1@conan/stable** reference with its default options "
"and default settings from ``<userhome>/.conan/profiles/default``:"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:176
msgid "$ conan install opencv/4.1.1@conan/stable"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:180
msgid ""
"Install the **opencv/4.1.1@conan/stable** reference updating the recipe and "
"the binary package if new upstream versions are available:"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:183
msgid "$ conan install opencv/4.1.1@conan/stable --update"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:190
msgid "build options"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:192
msgid ""
"Both the conan **install** and **create** commands accept :command:`--build` "
"options to specify which packages to build from source. Combining multiple :"
"command:`--build` options on one command line is allowed, where a package is "
"built from source if at least one of the given build options selects it for "
"the build. For dependencies, the optional ``build_policy`` attribute in "
"their `conanfile.py` can override the behavior of the given command line "
"parameters. Possible values are:"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:199
msgid ""
":command:`--build`: Always build everything from source. Produces a clean re-"
"build of all packages. and transitively dependent packages"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:201
msgid ""
":command:`--build=never`: Conan will not try to build packages when the "
"requested configuration does not match, in which case it will throw an "
"error. This option can not be combined with other :command:`--build` options."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:204
msgid ""
":command:`--build=missing`: Conan will try to build packages from source "
"whose binary package was not found in the requested configuration on any of "
"the active remotes or the cache."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:206
msgid ""
":command:`--build=outdated`: Conan will try to build packages from source "
"whose binary package was not built with the current recipe or when missing "
"the binary package."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:208
msgid ""
":command:`--build=cascade`: Conan selects packages for the build where at "
"least one of its dependencies is selected for the build. This is useful to "
"rebuild packages that, directly or indirectly, depend on changed packages."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:211
msgid ""
":command:`--build=[pattern]`: A fnmatch case-sensitive pattern of a package "
"reference or only the package name. Conan will force the build of the "
"packages whose reference matches the given **pattern**. Several patterns can "
"be specified, chaining multiple options:"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:215
msgid ""
"e.g., :command:`--build=pattern1 --build=pattern2` can be used to specify "
"more than one pattern."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:216
msgid ""
"e.g., :command:`--build=zlib` will match any package named ``zlib`` (same as "
"``zlib/*``)."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:217
msgid ""
"e.g., :command:`--build=z*@conan/stable` will match any package starting "
"with ``z`` with ``conan/stable`` as user/channel."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:219
msgid ""
"If you omit the :command:`--build` option, the ``build_policy`` attribute in "
"`conanfile.py` will be looked up. If it is set to ``missing`` or ``always``, "
"this build option will be used, otherwise the command will behave like :"
"command:`--build=never` was set."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:224
msgid "env variables"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:226
msgid "With the :command:`-e` parameters you can define:"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:228
msgid ""
"Global environment variables (:command:`-e SOME_VAR=\"SOME_VALUE\"`). These "
"variables will be defined before the `build` step in all the packages and "
"will be cleaned after the `build` execution."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:230
msgid ""
"Specific package environment variables (:command:`-e zlib:"
"SOME_VAR=\"SOME_VALUE\"`). These variables will be defined only in the "
"specified packages (e.g., zlib)."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:233
msgid ""
"You can specify this variables not only for your direct ``requires`` but for "
"any package in the dependency graph."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:236
msgid ""
"If you want to define an environment variable but you want to append the "
"variables declared in your requirements you can use the [] syntax:"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:239
msgid "$ conan install . -e PATH=[/other/path]"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:243
msgid ""
"This way the first entry in the ``PATH`` variable will be */other/path* but "
"the ``PATH`` values declared in the requirements of the project will be "
"appended at the end using the system path separator."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:248
msgid "settings"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:250
msgid "With the :command:`-s` parameters you can define:"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:252
msgid ""
"Global settings (:command:`-s compiler=\"Visual Studio\"`). Will apply to "
"all the requires."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:253
msgid ""
"Specific package settings (:command:`-s zlib:compiler=\"MinGW\"`). Those "
"settings will be applied only to the specified packages. They accept "
"patterns too, like ``-s *@myuser/*:compiler=MinGW``, which means that "
"packages that have the username \"myuser\" will use MinGW as compiler."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:257
msgid ""
"You can specify custom settings not only for your direct ``requires`` but "
"for any package in the dependency graph."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:261
msgid "options"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:263
msgid ""
"With the :command:`-o` parameters you can only define specific package "
"options."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:265
msgid ""
"$ conan install . -o zlib:shared=True\n"
"$ conan install . -o zlib:shared=True -o bzip2:option=132\n"
"# you can also apply the same options to many packages with wildcards:\n"
"$ conan install . -o *:shared=True"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:274
msgid ""
"You can use :ref:`profiles <profiles>` files to create predefined sets of "
"**settings**, **options** and **environment variables**."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:279
msgid "reference"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:281
msgid ""
"An optional positional argument, if used the first argument should be a "
"path. If the reference specifies name and/or version, and they are also "
"declared in the ``conanfile.py``, they should match, otherwise, an error "
"will be raised."
msgstr ""

#: ../../../reference/commands/consumer/install.rst:285
msgid ""
"$ conan install . # OK, user and channel will be None\n"
"$ conan install . user/testing # OK\n"
"$ conan install . version@user/testing # OK\n"
"$ conan install . pkg/version@user/testing # OK\n"
"$ conan install pkg/version@user/testing user/channel # Error, first arg is "
"not a path"
msgstr ""

#: ../../../reference/commands/consumer/install.rst:296
msgid ""
"Installation of binaries can be accelerated setting up parallel downloads "
"with the ``general.parallel_download`` **experimental** configuration in :"
"ref:`conan_conf`."
msgstr ""
