# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2019, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.17\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:06+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/commands/development/workspace.rst:5
msgid "conan workspace"
msgstr ""

#: ../../../reference/commands/development/workspace.rst:7
msgid "$ conan workspace [-h] {install} ..."
msgstr ""

#: ../../../reference/commands/development/workspace.rst:11
msgid ""
"Manages a workspace (a set of packages consumed from the user workspace that "
"belongs to the same project)."
msgstr ""

#: ../../../reference/commands/development/workspace.rst:14
msgid ""
"Use this command to manage a Conan workspace, use the subcommand 'install' "
"to create the workspace from a file."
msgstr ""

#: ../../../reference/commands/development/workspace.rst:17
msgid ""
"positional arguments:\n"
"  {install}   sub-command help\n"
"    install   same as a \"conan install\" command but using the workspace "
"data\n"
"              from the file. If no file is provided, it will look for a "
"file\n"
"              named \"conanws.yml\"\n"
"\n"
"optional arguments:\n"
"  -h, --help  show this help message and exit"
msgstr ""

#: ../../../reference/commands/development/workspace.rst:32
msgid "conan workspace install"
msgstr ""

#: ../../../reference/commands/development/workspace.rst:34
msgid ""
"$ conan workspace install [-h] [-b [BUILD]] [-e ENV] [-o OPTIONS]\n"
"                          [-pr PROFILE] [-r REMOTE] [-s SETTINGS] [-u]\n"
"                          [-if INSTALL_FOLDER]\n"
"                          path"
msgstr ""

#: ../../../reference/commands/development/workspace.rst:41
msgid ""
"positional arguments:\n"
"path                    path to workspace definition file (it will look for "
"a\n"
"                        \"conanws.yml\" inside if a directory is given)\n"
"\n"
"optional arguments:\n"
"-h, --help              show this help message and exit\n"
"-b [BUILD], --build [BUILD]\n"
"                        Optional, use it to choose if you want to build "
"from\n"
"                        sources: --build Build all from sources, do not use\n"
"                        binary packages. --build=never Never build, use "
"binary\n"
"                        packages or fail if a binary package is not found.\n"
"                        --build=missing Build from code if a binary package "
"is\n"
"                        not found. --build=outdated Build from code if the\n"
"                        binary is not built with the current recipe or when\n"
"                        missing binary package. --build=[pattern] Build "
"always\n"
"                        these packages from source, but never build the\n"
"                        others. Allows multiple --build parameters. "
"'pattern'\n"
"                        is a fnmatch file pattern of a package name. "
"Default\n"
"                        behavior: If you don't specify anything, it will be\n"
"                        similar to '--build=never', but package recipes can\n"
"                        override it with their 'build_policy' attribute in "
"the\n"
"                        conanfile.py.\n"
"-e ENV, --env ENV     Environment variables that will be set during the\n"
"                        package build, -e CXX=/usr/bin/clang++\n"
"-o OPTIONS, --options OPTIONS\n"
"                        Define options values, e.g., -o Pkg:with_qt=true\n"
"-pr PROFILE, --profile PROFILE\n"
"                        Apply the specified profile to the install command\n"
"-r REMOTE, --remote REMOTE\n"
"                        Look in the specified remote server\n"
"-s SETTINGS, --settings SETTINGS\n"
"                        Settings to build the package, overwriting the\n"
"                        defaults. e.g., -s compiler=gcc\n"
"-u, --update            Check updates exist from upstream remotes\n"
"-if INSTALL_FOLDER, --install-folder INSTALL_FOLDER\n"
"                        Folder where the workspace files will be created\n"
"                        (default to current working directory)"
msgstr ""

#: ../../../reference/commands/development/workspace.rst:82
msgid ""
"Note that these arguments, like ``settings`` and ``options`` mostly apply to "
"the dependencies, but those packages that are defined as editable in the "
"workspace are in the user space. Those packages won't be built by the "
"command (even with ``--build`` arguments), as they are built locally. It is "
"the responsibility of the editables layout to match the settings (typically "
"parameterizing the layout with ``settings`` and ``options``)"
msgstr ""
