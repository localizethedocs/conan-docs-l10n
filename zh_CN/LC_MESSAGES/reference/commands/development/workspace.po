# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2020, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.31\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:19+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/commands/development/workspace.rst:5
msgid "conan workspace"
msgstr ""

#: ../../../reference/commands/development/workspace.rst:7
msgid "$ conan workspace [-h] {install} ..."
msgstr ""

#: ../../../reference/commands/development/workspace.rst:11
msgid ""
"Manages a workspace (a set of packages consumed from the user workspace that "
"belongs to the same project)."
msgstr ""

#: ../../../reference/commands/development/workspace.rst:14
msgid ""
"Use this command to manage a Conan workspace, use the subcommand 'install' "
"to create the workspace from a file."
msgstr ""

#: ../../../reference/commands/development/workspace.rst:17
msgid ""
"positional arguments:\n"
"  {install}   sub-command help\n"
"    install   same as a \"conan install\" command but using the workspace "
"data\n"
"              from the file. If no file is provided, it will look for a "
"file\n"
"              named \"conanws.yml\"\n"
"\n"
"optional arguments:\n"
"  -h, --help  show this help message and exit"
msgstr ""

#: ../../../reference/commands/development/workspace.rst:32
msgid "conan workspace install"
msgstr ""

#: ../../../reference/commands/development/workspace.rst:34
msgid ""
"$ conan workspace install [-h] [-b [BUILD]] [-r REMOTE] [-u] [-l "
"[LOCKFILE]]\n"
"                          [-e ENV_HOST] [-e:b ENV_BUILD] [-e:h ENV_HOST]\n"
"                          [-o OPTIONS_HOST] [-o:b OPTIONS_BUILD] [-o:h "
"OPTIONS_HOST]\n"
"                          [-pr PROFILE_HOST] [-pr:b PROFILE_BUILD]\n"
"                          [-pr:h PROFILE_HOST] [-s SETTINGS_HOST]\n"
"                          [-s:b SETTINGS_BUILD] [-s:h SETTINGS_HOST]\n"
"                          [-if INSTALL_FOLDER]\n"
"                          path"
msgstr ""

#: ../../../reference/commands/development/workspace.rst:45
msgid ""
"positional arguments:\n"
"  path                  path to workspace definition file (it will look for "
"a \"conanws.yml\"\n"
"                        inside if a directory is given)\n"
"\n"
"optional arguments:\n"
"  -h, --help            show this help message and exit\n"
"  -b [BUILD], --build [BUILD]\n"
"                        Optional, use it to choose if you want to build from "
"sources:\n"
"                        --build Build all from sources, do not use binary "
"packages.\n"
"                        --build=never Never build, use binary packages or "
"fail if a binary\n"
"                        package is not found. --build=missing Build from "
"code if a binary\n"
"                        package is not found. --build=cascade Will build "
"from code all the\n"
"                        nodes with some dependency being built (for any "
"reason). Can be\n"
"                        used together with any other build policy. Useful to "
"make sure that\n"
"                        any new change introduced in a dependency is "
"incorporated by\n"
"                        building again the package. --build=outdated Build "
"from code if the\n"
"                        binary is not built with the current recipe or when "
"missing a\n"
"                        binary package. --build=[pattern] Build always these "
"packages from\n"
"                        source, but never build the others. Allows multiple "
"--build\n"
"                        parameters. 'pattern' is a fnmatch file pattern of a "
"package\n"
"                        reference. Default behavior: If you don't specify "
"anything, it will\n"
"                        be similar to '--build=never', but package recipes "
"can override it\n"
"                        with their 'build_policy' attribute in the conanfile."
"py.\n"
"  -r REMOTE, --remote REMOTE\n"
"                        Look in the specified remote server\n"
"  -u, --update          Will check the remote and in case a newer version\n"
"                        and/or revision of the dependencies exists there, "
"it\n"
"                        will install those in the local cache. When using\n"
"                        version ranges, it will install the latest version\n"
"                        that satisfies the range. Also, if using revisions, "
"it\n"
"                        will update to the latest revision for the resolved\n"
"                        version range.\n"
"  -l [LOCKFILE], --lockfile [LOCKFILE]\n"
"                        Path to a lockfile or folder containing 'conan.lock' "
"file. Lockfile\n"
"                        can be updated if packages change\n"
"  -e ENV_HOST, --env ENV_HOST\n"
"                        Environment variables that will be set during the "
"package build\n"
"                        (host machine). e.g.: -e CXX=/usr/bin/clang++\n"
"  -e:b ENV_BUILD, --env:build ENV_BUILD\n"
"                        Environment variables that will be set during the "
"package build\n"
"                        (build machine). e.g.: -e CXX=/usr/bin/clang++\n"
"  -e:h ENV_HOST, --env:host ENV_HOST\n"
"                        Environment variables that will be set during the "
"package build\n"
"                        (host machine). e.g.: -e CXX=/usr/bin/clang++\n"
"  -o OPTIONS_HOST, --options OPTIONS_HOST\n"
"                        Define options values (host machine), e.g.: -o Pkg:"
"with_qt=true\n"
"  -o:b OPTIONS_BUILD, --options:build OPTIONS_BUILD\n"
"                        Define options values (build machine), e.g.: -o Pkg:"
"with_qt=true\n"
"  -o:h OPTIONS_HOST, --options:host OPTIONS_HOST\n"
"                        Define options values (host machine), e.g.: -o Pkg:"
"with_qt=true\n"
"  -pr PROFILE_HOST, --profile PROFILE_HOST\n"
"                        Apply the specified profile to the host machine\n"
"  -pr:b PROFILE_BUILD, --profile:build PROFILE_BUILD\n"
"                        Apply the specified profile to the build machine\n"
"  -pr:h PROFILE_HOST, --profile:host PROFILE_HOST\n"
"                        Apply the specified profile to the host machine\n"
"  -s SETTINGS_HOST, --settings SETTINGS_HOST\n"
"                        Settings to build the package, overwriting the "
"defaults (host\n"
"                        machine). e.g.: -s compiler=gcc\n"
"  -s:b SETTINGS_BUILD, --settings:build SETTINGS_BUILD\n"
"                        Settings to build the package, overwriting the "
"defaults (build\n"
"                        machine). e.g.: -s compiler=gcc\n"
"  -s:h SETTINGS_HOST, --settings:host SETTINGS_HOST\n"
"                        Settings to build the package, overwriting the "
"defaults (host\n"
"                        machine). e.g.: -s compiler=gcc\n"
"  -if INSTALL_FOLDER, --install-folder INSTALL_FOLDER\n"
"                        Folder where the workspace files will be created "
"(default to\n"
"                        current working directory)"
msgstr ""

#: ../../../reference/commands/development/workspace.rst:117
msgid ""
"Note that these arguments, like ``settings`` and ``options`` mostly apply to "
"the dependencies, but those packages that are defined as editable in the "
"workspace are in the user space. Those packages won't be built by the "
"command (even with ``--build`` arguments), as they are built locally. It is "
"the responsibility of the editables layout to match the settings (typically "
"parameterizing the layout with ``settings`` and ``options``)"
msgstr ""
