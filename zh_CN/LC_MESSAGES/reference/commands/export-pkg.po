# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:31+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/commands/export-pkg.rst:4
msgid "conan export-pkg"
msgstr ""

#: ../../../reference/commands/export-pkg.rst:-1
msgid ""
"$ conan export-pkg -h\n"
"usage: conan export-pkg [-h] [-v [V]] [-cc CORE_CONF] [-f FORMAT]\n"
"                        [-of OUTPUT_FOLDER] [--build-require]\n"
"                        [-tf TEST_FOLDER] [-sb] [-r REMOTE | -nr]\n"
"                        [--name NAME] [--version VERSION] [--user USER]\n"
"                        [--channel CHANNEL] [-l LOCKFILE] [--lockfile-"
"partial]\n"
"                        [--lockfile-out LOCKFILE_OUT] [--lockfile-clean]\n"
"                        [--lockfile-overrides LOCKFILE_OVERRIDES]\n"
"                        [-pr PROFILE] [-pr:b PROFILE_BUILD]\n"
"                        [-pr:h PROFILE_HOST] [-pr:a PROFILE_ALL] [-o "
"OPTIONS]\n"
"                        [-o:b OPTIONS_BUILD] [-o:h OPTIONS_HOST]\n"
"                        [-o:a OPTIONS_ALL] [-s SETTINGS] [-s:b "
"SETTINGS_BUILD]\n"
"                        [-s:h SETTINGS_HOST] [-s:a SETTINGS_ALL] [-c CONF]\n"
"                        [-c:b CONF_BUILD] [-c:h CONF_HOST] [-c:a CONF_ALL]\n"
"                        path\n"
"\n"
"Create a package directly from pre-compiled binaries.\n"
"\n"
"positional arguments:\n"
"  path                  Path to a folder containing a recipe (conanfile.py)\n"
"\n"
"options:\n"
"  -h, --help            show this help message and exit\n"
"  -v [V]                Level of detail of the output. Valid options from "
"less\n"
"                        verbose to more verbose: -vquiet, -verror, -"
"vwarning,\n"
"                        -vnotice, -vstatus, -v or -vverbose, -vv or -"
"vdebug,\n"
"                        -vvv or -vtrace\n"
"  -cc CORE_CONF, --core-conf CORE_CONF\n"
"                        Global configuration for Conan\n"
"  -f FORMAT, --format FORMAT\n"
"                        Select the output format: json\n"
"  -of OUTPUT_FOLDER, --output-folder OUTPUT_FOLDER\n"
"                        The root output folder for generated and build "
"files\n"
"  --build-require       Whether the provided reference is a build-require\n"
"  -tf TEST_FOLDER, --test-folder TEST_FOLDER\n"
"                        Alternative test folder name. By default it is\n"
"                        \"test_package\". Use \"\" to skip the test stage\n"
"  -sb, --skip-binaries  Skip installing dependencies binaries\n"
"  -r REMOTE, --remote REMOTE\n"
"                        Look in the specified remote or remotes server\n"
"  -nr, --no-remote      Do not use remote, resolve exclusively in the cache\n"
"  --name NAME           Provide a package name if not specified in "
"conanfile\n"
"  --version VERSION     Provide a package version if not specified in\n"
"                        conanfile\n"
"  --user USER           Provide a user if not specified in conanfile\n"
"  --channel CHANNEL     Provide a channel if not specified in conanfile\n"
"  -l LOCKFILE, --lockfile LOCKFILE\n"
"                        Path to a lockfile. Use --lockfile=\"\" to avoid\n"
"                        automatic use of existing 'conan.lock' file\n"
"  --lockfile-partial    Do not raise an error if some dependency is not "
"found\n"
"                        in lockfile\n"
"  --lockfile-out LOCKFILE_OUT\n"
"                        Filename of the updated lockfile\n"
"  --lockfile-clean      Remove unused entries from the lockfile\n"
"  --lockfile-overrides LOCKFILE_OVERRIDES\n"
"                        Overwrite lockfile overrides\n"
"  -pr PROFILE, --profile PROFILE\n"
"                        Apply the specified profile. By default, or if\n"
"                        specifying -pr:h (--profile:host), it applies to "
"the\n"
"                        host context. Use -pr:b (--profile:build) to "
"specify\n"
"                        the build context, or -pr:a (--profile:all) to "
"specify\n"
"                        both contexts at once\n"
"  -pr:b PROFILE_BUILD, --profile:build PROFILE_BUILD\n"
"  -pr:h PROFILE_HOST, --profile:host PROFILE_HOST\n"
"  -pr:a PROFILE_ALL, --profile:all PROFILE_ALL\n"
"  -o OPTIONS, --options OPTIONS\n"
"                        Apply the specified options. By default, or if\n"
"                        specifying -o:h (--options:host), it applies to the\n"
"                        host context. Use -o:b (--options:build) to specify\n"
"                        the build context, or -o:a (--options:all) to "
"specify\n"
"                        both contexts at once. Example: -o pkg:with_qt=true\n"
"  -o:b OPTIONS_BUILD, --options:build OPTIONS_BUILD\n"
"  -o:h OPTIONS_HOST, --options:host OPTIONS_HOST\n"
"  -o:a OPTIONS_ALL, --options:all OPTIONS_ALL\n"
"  -s SETTINGS, --settings SETTINGS\n"
"                        Apply the specified settings. By default, or if\n"
"                        specifying -s:h (--settings:host), it applies to "
"the\n"
"                        host context. Use -s:b (--settings:build) to "
"specify\n"
"                        the build context, or -s:a (--settings:all) to "
"specify\n"
"                        both contexts at once. Example: -s compiler=gcc\n"
"  -s:b SETTINGS_BUILD, --settings:build SETTINGS_BUILD\n"
"  -s:h SETTINGS_HOST, --settings:host SETTINGS_HOST\n"
"  -s:a SETTINGS_ALL, --settings:all SETTINGS_ALL\n"
"  -c CONF, --conf CONF  Apply the specified conf. By default, or if "
"specifying\n"
"                        -c:h (--conf:host), it applies to the host context.\n"
"                        Use -c:b (--conf:build) to specify the build "
"context,\n"
"                        or -c:a (--conf:all) to specify both contexts at "
"once.\n"
"                        Example: -c tools.cmake.cmaketoolchain:"
"generator=Xcode\n"
"  -c:b CONF_BUILD, --conf:build CONF_BUILD\n"
"  -c:h CONF_HOST, --conf:host CONF_HOST\n"
"  -c:a CONF_ALL, --conf:all CONF_ALL\n"
"\n"
msgstr ""

#: ../../../reference/commands/export-pkg.rst:10
msgid ""
"The ``conan export-pkg`` command creates a package binary directly from pre-"
"compiled binaries in a user folder. This command can be useful in different "
"cases:"
msgstr ""

#: ../../../reference/commands/export-pkg.rst:12
msgid ""
"When creating a package for some closed source or pre-compiled binaries "
"provided by a vendor. In this case, it is not necessary that the ``conanfile."
"py`` recipe contains a ``build()`` method, and providing the ``package()`` "
"and ``package_info()`` method are enough to package those pre-compiled "
"binaries. In this case the ``build_policy = \"never\"`` could make sense to "
"indicate it is not possible to ``conan install --build=this_pkg``, as it "
"doesn't know how to build from sources when it is a dependency."
msgstr ""

#: ../../../reference/commands/export-pkg.rst:13
msgid ""
"When testing some recipe locally in the :ref:`local development "
"flow<local_package_development_flow>`, it can be used to quickly put the "
"locally built binaries in the cache to make them available to other packages "
"for testing, without needing to go through a full ``conan create`` that "
"would be slower."
msgstr ""

#: ../../../reference/commands/export-pkg.rst:15
msgid ""
"In general, it is expected that when ``conan export-pkg`` executes, the "
"possible Conan dependencies that were necessary to build this package had "
"already been installed via ``conan install``, so it is not necessary to "
"download dependencies at ``export-pkg`` time. But if for some reason this is "
"not the case, the command defines ``--remote`` and ``--no-remote`` "
"arguments, similar to other commands, as well as the ``--skip-binaries`` "
"optimization that could save some time installing dependencies binaries if "
"they are not strictly necessary for the current ``export-pkg``. But this is "
"the responsibility of the user, as it is possible that such binaries are "
"actually necessary, for example, if a ``tool_requires = \"cmake/x.y\"`` is "
"used and the ``package()`` method implements a ``cmake.install()`` call, "
"this will definitely need the binaries for the dependencies installed in the "
"current machine to execute."
msgstr ""

#: ../../../reference/commands/export-pkg.rst:20
msgid ""
"Check the :ref:`JSON format output "
"<reference_commands_graph_info_json_format>` for this command."
msgstr ""

#: ../../../reference/commands/export-pkg.rst:21
msgid ""
"Read the tutorial about the :ref:`local package development flow "
"<local_package_development_flow>`."
msgstr ""
