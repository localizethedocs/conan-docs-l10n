# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/commands/graph/info.rst:4
msgid "conan graph info"
msgstr ""

#: ../../../reference/commands/graph/info.rst:-1
msgid ""
"$ conan graph info -h\n"
"usage: conan graph info [-h] [-f FORMAT] [-v [V]] [-cc CORE_CONF]\n"
"                        [--name NAME] [--version VERSION] [--user USER]\n"
"                        [--channel CHANNEL] [--requires REQUIRES]\n"
"                        [--tool-requires TOOL_REQUIRES] [-b BUILD]\n"
"                        [-r REMOTE | -nr] [-u [UPDATE]] [-pr PROFILE]\n"
"                        [-pr:b PROFILE_BUILD] [-pr:h PROFILE_HOST]\n"
"                        [-pr:a PROFILE_ALL] [-o OPTIONS] [-o:b "
"OPTIONS_BUILD]\n"
"                        [-o:h OPTIONS_HOST] [-o:a OPTIONS_ALL] [-s "
"SETTINGS]\n"
"                        [-s:b SETTINGS_BUILD] [-s:h SETTINGS_HOST]\n"
"                        [-s:a SETTINGS_ALL] [-c CONF] [-c:b CONF_BUILD]\n"
"                        [-c:h CONF_HOST] [-c:a CONF_ALL] [-l LOCKFILE]\n"
"                        [--lockfile-partial] [--lockfile-out LOCKFILE_OUT]\n"
"                        [--lockfile-clean]\n"
"                        [--lockfile-overrides LOCKFILE_OVERRIDES]\n"
"                        [--check-updates] [--filter FILTER]\n"
"                        [--package-filter PACKAGE_FILTER] [-d DEPLOYER]\n"
"                        [-df DEPLOYER_FOLDER] [--build-require]\n"
"                        [path]\n"
"\n"
"Compute the dependency graph and show information about it.\n"
"\n"
"positional arguments:\n"
"  path                  Path to a folder containing a recipe (conanfile.py "
"or\n"
"                        conanfile.txt) or to a recipe file. e.g.,\n"
"                        ./my_project/conanfile.txt.\n"
"\n"
"options:\n"
"  -h, --help            show this help message and exit\n"
"  -f FORMAT, --format FORMAT\n"
"                        Select the output format: html, json, dot\n"
"  -v [V]                Level of detail of the output. Valid options from "
"less\n"
"                        verbose to more verbose: -vquiet, -verror, -"
"vwarning,\n"
"                        -vnotice, -vstatus, -v or -vverbose, -vv or -"
"vdebug,\n"
"                        -vvv or -vtrace\n"
"  -cc CORE_CONF, --core-conf CORE_CONF\n"
"                        Define core configuration, overwriting global.conf\n"
"                        values. E.g.: -cc core:non_interactive=True\n"
"  --name NAME           Provide a package name if not specified in "
"conanfile\n"
"  --version VERSION     Provide a package version if not specified in\n"
"                        conanfile\n"
"  --user USER           Provide a user if not specified in conanfile\n"
"  --channel CHANNEL     Provide a channel if not specified in conanfile\n"
"  --requires REQUIRES   Directly provide requires instead of a conanfile\n"
"  --tool-requires TOOL_REQUIRES\n"
"                        Directly provide tool-requires instead of a "
"conanfile\n"
"  -b BUILD, --build BUILD\n"
"                        Optional, specify which packages to build from "
"source.\n"
"                        Combining multiple '--build' options on one command\n"
"                        line is allowed. Possible values: --build=\"*\" "
"Force\n"
"                        build from source for all packages. --build=never\n"
"                        Disallow build for all packages, use binary "
"packages\n"
"                        or fail if a binary package is not found, it cannot "
"be\n"
"                        combined with other '--build' options. --"
"build=missing\n"
"                        Build packages from source whose binary package is "
"not\n"
"                        found. --build=cascade Build packages from source "
"that\n"
"                        have at least one dependency being built from "
"source.\n"
"                        --build=[pattern] Build packages from source whose\n"
"                        package reference matches the pattern. The pattern\n"
"                        uses 'fnmatch' style wildcards. --build=~[pattern]\n"
"                        Excluded packages, which will not be built from the\n"
"                        source, whose package reference matches the "
"pattern.\n"
"                        The pattern uses 'fnmatch' style wildcards.\n"
"                        --build=missing:[pattern] Build from source if a\n"
"                        compatible binary does not exist, only for packages\n"
"                        matching pattern.\n"
"  -r REMOTE, --remote REMOTE\n"
"                        Look in the specified remote or remotes server\n"
"  -nr, --no-remote      Do not use remote, resolve exclusively in the cache\n"
"  -u [UPDATE], --update [UPDATE]\n"
"                        Will install newer versions and/or revisions in the\n"
"                        local cache for the given reference, or all in case "
"no\n"
"                        argument is supplied. When using version ranges, it\n"
"                        will install the latest version that satisfies the\n"
"                        range. Also, if using revisions, it will update to "
"the\n"
"                        latest revision for the resolved version range.\n"
"  -pr PROFILE, --profile PROFILE\n"
"                        Apply the specified profile. By default, or if\n"
"                        specifying -pr:h (--profile:host), it applies to "
"the\n"
"                        host context. Use -pr:b (--profile:build) to "
"specify\n"
"                        the build context, or -pr:a (--profile:all) to "
"specify\n"
"                        both contexts at once\n"
"  -pr:b PROFILE_BUILD, --profile:build PROFILE_BUILD\n"
"  -pr:h PROFILE_HOST, --profile:host PROFILE_HOST\n"
"  -pr:a PROFILE_ALL, --profile:all PROFILE_ALL\n"
"  -o OPTIONS, --options OPTIONS\n"
"                        Apply the specified options. By default, or if\n"
"                        specifying -o:h (--options:host), it applies to the\n"
"                        host context. Use -o:b (--options:build) to specify\n"
"                        the build context, or -o:a (--options:all) to "
"specify\n"
"                        both contexts at once. Example: -o pkg:with_qt=true\n"
"  -o:b OPTIONS_BUILD, --options:build OPTIONS_BUILD\n"
"  -o:h OPTIONS_HOST, --options:host OPTIONS_HOST\n"
"  -o:a OPTIONS_ALL, --options:all OPTIONS_ALL\n"
"  -s SETTINGS, --settings SETTINGS\n"
"                        Apply the specified settings. By default, or if\n"
"                        specifying -s:h (--settings:host), it applies to "
"the\n"
"                        host context. Use -s:b (--settings:build) to "
"specify\n"
"                        the build context, or -s:a (--settings:all) to "
"specify\n"
"                        both contexts at once. Example: -s compiler=gcc\n"
"  -s:b SETTINGS_BUILD, --settings:build SETTINGS_BUILD\n"
"  -s:h SETTINGS_HOST, --settings:host SETTINGS_HOST\n"
"  -s:a SETTINGS_ALL, --settings:all SETTINGS_ALL\n"
"  -c CONF, --conf CONF  Apply the specified conf. By default, or if "
"specifying\n"
"                        -c:h (--conf:host), it applies to the host context.\n"
"                        Use -c:b (--conf:build) to specify the build "
"context,\n"
"                        or -c:a (--conf:all) to specify both contexts at "
"once.\n"
"                        Example: -c tools.cmake.cmaketoolchain:"
"generator=Xcode\n"
"  -c:b CONF_BUILD, --conf:build CONF_BUILD\n"
"  -c:h CONF_HOST, --conf:host CONF_HOST\n"
"  -c:a CONF_ALL, --conf:all CONF_ALL\n"
"  -l LOCKFILE, --lockfile LOCKFILE\n"
"                        Path to a lockfile. Use --lockfile=\"\" to avoid\n"
"                        automatic use of existing 'conan.lock' file\n"
"  --lockfile-partial    Do not raise an error if some dependency is not "
"found\n"
"                        in lockfile\n"
"  --lockfile-out LOCKFILE_OUT\n"
"                        Filename of the updated lockfile\n"
"  --lockfile-clean      Remove unused entries from the lockfile\n"
"  --lockfile-overrides LOCKFILE_OVERRIDES\n"
"                        Overwrite lockfile overrides\n"
"  --check-updates       Check if there are recipe updates\n"
"  --filter FILTER       Show only the specified fields\n"
"  --package-filter PACKAGE_FILTER\n"
"                        Print information only for packages that match the\n"
"                        patterns\n"
"  -d DEPLOYER, --deployer DEPLOYER\n"
"                        Deploy using the provided deployer to the output\n"
"                        folder. Built-in deployers: 'full_deploy',\n"
"                        'direct_deploy'. Deployers will only deploy "
"recipes,\n"
"                        as 'conan graph info' do not retrieve binaries\n"
"  -df DEPLOYER_FOLDER, --deployer-folder DEPLOYER_FOLDER\n"
"                        Deployer output folder, base build folder by "
"default\n"
"                        if not set\n"
"  --build-require       Whether the provided reference is a build-require\n"
"\n"
msgstr ""

#: ../../../reference/commands/graph/info.rst:10
msgid ""
"The ``conan graph info`` command shows information about the dependency "
"graph for the recipe specified in ``path``."
msgstr ""

#: ../../../reference/commands/graph/info.rst:13
msgid "**Examples**:"
msgstr ""

#: ../../../reference/commands/graph/info.rst:15
msgid ""
"$ conan graph info .\n"
"$ conan graph info myproject_folder\n"
"$ conan graph info myproject_folder/conanfile.py\n"
"$ conan graph info --requires=hello/1.0@user/channel"
msgstr ""

#: ../../../reference/commands/graph/info.rst:22
msgid "The output will look like:"
msgstr ""

#: ../../../reference/commands/graph/info.rst:24
msgid ""
"$ conan graph info --require=binutils/2.38 -r=conancenter\n"
"\n"
"...\n"
"\n"
"======== Basic graph information ========\n"
"conanfile:\n"
"  ref: conanfile\n"
"  id: 0\n"
"  recipe: Cli\n"
"  package_id: None\n"
"  prev: None\n"
"  build_id: None\n"
"  binary: None\n"
"  invalid_build: False\n"
"  info_invalid: None\n"
"  revision_mode: hash\n"
"  package_type: unknown\n"
"  settings:\n"
"    os: Macos\n"
"    arch: armv8\n"
"    compiler: apple-clang\n"
"    compiler.cppstd: gnu17\n"
"    compiler.libcxx: libc++\n"
"    compiler.version: 14\n"
"    build_type: Release\n"
"  options:\n"
"  system_requires:\n"
"  recipe_folder: None\n"
"  source_folder: None\n"
"  build_folder: None\n"
"  generators_folder: None\n"
"  package_folder: None\n"
"  cpp_info:\n"
"    root:\n"
"      includedirs: ['include']\n"
"      srcdirs: None\n"
"      libdirs: ['lib']\n"
"      resdirs: None\n"
"      bindirs: ['bin']\n"
"      builddirs: None\n"
"      frameworkdirs: None\n"
"      system_libs: None\n"
"      frameworks: None\n"
"      libs: None\n"
"      defines: None\n"
"      cflags: None\n"
"      cxxflags: None\n"
"      sharedlinkflags: None\n"
"      exelinkflags: None\n"
"      objects: None\n"
"      sysroot: None\n"
"      requires: None\n"
"      properties: None\n"
"  label: cli\n"
"  context: host\n"
"  test: False\n"
"  requires:\n"
"    1: binutils/2.38#0dc90586530d3e194d01d17cb70d9461\n"
"binutils/2.38#0dc90586530d3e194d01d17cb70d9461:\n"
"  ref: binutils/2.38#0dc90586530d3e194d01d17cb70d9461\n"
"  id: 1\n"
"  recipe: Downloaded\n"
"  package_id: 5350e016ee8d04f418b50b7be75f5d8be9d79547\n"
"  prev: None\n"
"  build_id: None\n"
"  binary: Invalid\n"
"  invalid_build: False\n"
"  info_invalid: cci does not support building binutils for Macos since "
"binutils is degraded there (no as/ld + armv8 does not build)\n"
"  url: https://github.com/conan-io/conan-center-index/\n"
"  license: GPL-2.0-or-later\n"
"  description: The GNU Binutils are a collection of binary tools.\n"
"  topics: ('gnu', 'ld', 'linker', 'as', 'assembler', 'objcopy', 'objdump')\n"
"  homepage: https://www.gnu.org/software/binutils\n"
"  revision_mode: hash\n"
"  package_type: application\n"
"  settings:\n"
"    os: Macos\n"
"    arch: armv8\n"
"    compiler: apple-clang\n"
"    compiler.version: 14\n"
"    build_type: Release\n"
"  options:\n"
"    multilib: True\n"
"    prefix: aarch64-apple-darwin-\n"
"    target_arch: armv8\n"
"    target_os: Macos\n"
"    target_triplet: aarch64-apple-darwin\n"
"    with_libquadmath: True\n"
"  system_requires:\n"
"  recipe_folder: /Users/barbarian/.conan2/p/binut53bd9b3ee9490/e\n"
"  source_folder: None\n"
"  build_folder: None\n"
"  generators_folder: None\n"
"  package_folder: None\n"
"  cpp_info:\n"
"    root:\n"
"      includedirs: ['include']\n"
"      srcdirs: None\n"
"      libdirs: ['lib']\n"
"      resdirs: None\n"
"      bindirs: ['bin']\n"
"      builddirs: None\n"
"      frameworkdirs: None\n"
"      system_libs: None\n"
"      frameworks: None\n"
"      libs: None\n"
"      defines: None\n"
"      cflags: None\n"
"      cxxflags: None\n"
"      sharedlinkflags: None\n"
"      exelinkflags: None\n"
"      objects: None\n"
"      sysroot: None\n"
"      requires: None\n"
"      properties: None\n"
"  label: binutils/2.38\n"
"  context: host\n"
"  test: False\n"
"  requires:\n"
"    2: zlib/1.2.13#416618fa04d433c6bd94279ed2e93638\n"
"zlib/1.2.13#416618fa04d433c6bd94279ed2e93638:\n"
"  ref: zlib/1.2.13#416618fa04d433c6bd94279ed2e93638\n"
"  id: 2\n"
"  recipe: Cache\n"
"  package_id: 76f7d863f21b130b4e6527af3b1d430f7f8edbea\n"
"  prev: 866f53e31e2d9b04d49d0bb18606e88e\n"
"  build_id: None\n"
"  binary: Skip\n"
"  invalid_build: False\n"
"  info_invalid: None\n"
"  url: https://github.com/conan-io/conan-center-index\n"
"  license: Zlib\n"
"  description: A Massively Spiffy Yet Delicately Unobtrusive Compression "
"Library (Also Free, Not to Mention Unencumbered by Patents)\n"
"  topics: ('zlib', 'compression')\n"
"  homepage: https://zlib.net\n"
"  revision_mode: hash\n"
"  package_type: static-library\n"
"  settings:\n"
"    os: Macos\n"
"    arch: armv8\n"
"    compiler: apple-clang\n"
"    compiler.version: 14\n"
"    build_type: Release\n"
"  options:\n"
"    fPIC: True\n"
"    shared: False\n"
"  system_requires:\n"
"  recipe_folder: /Users/barbarian/.conan2/p/zlibbcf9063fcc882/e\n"
"  source_folder: None\n"
"  build_folder: None\n"
"  generators_folder: None\n"
"  package_folder: None\n"
"  cpp_info:\n"
"    root:\n"
"      includedirs: ['include']\n"
"      srcdirs: None\n"
"      libdirs: ['lib']\n"
"      resdirs: None\n"
"      bindirs: ['bin']\n"
"      builddirs: None\n"
"      frameworkdirs: None\n"
"      system_libs: None\n"
"      frameworks: None\n"
"      libs: None\n"
"      defines: None\n"
"      cflags: None\n"
"      cxxflags: None\n"
"      sharedlinkflags: None\n"
"      exelinkflags: None\n"
"      objects: None\n"
"      sysroot: None\n"
"      requires: None\n"
"      properties: None\n"
"  label: zlib/1.2.13\n"
"  context: host\n"
"  test: False\n"
"  requires:"
msgstr ""

#: ../../../reference/commands/graph/info.rst:205
msgid ""
":command:`conan graph info` builds the complete dependency graph, like :"
"command:`conan install` does. The main difference is that it doesn't try to "
"install or build the binaries, but the package recipes will be retrieved "
"from remotes if necessary."
msgstr ""

#: ../../../reference/commands/graph/info.rst:209
msgid ""
"It is very important to note that the :command:`conan graph info` command "
"outputs the dependency graph for a given configuration (settings, options), "
"as the dependency graph can be different for different configurations. This "
"means that the input to the :command:`conan graph info` command is the same "
"as :command:`conan install`, the configuration can be specified directly "
"with settings and options, or using profiles,and querying the graph of a "
"specific recipe is possible by using the ``--requires`` flag as shown above."
msgstr ""

#: ../../../reference/commands/graph/info.rst:216
msgid ""
"You can additionally filter the output, both by filtering by fields (``--"
"filter``) and by package (``--filter-package``). For example, to get the "
"options of zlib, the following command could be run:"
msgstr ""

#: ../../../reference/commands/graph/info.rst:219
msgid ""
"$ conan graph info --require=binutils/2.38 -r=conancenter --filter=options --"
"package-filter=\"zlib*\"\n"
"\n"
"...\n"
"\n"
"======== Basic graph information ========\n"
"zlib/1.2.13#13c96f538b52e1600c40b88994de240f:\n"
"  ref: zlib/1.2.13#13c96f538b52e1600c40b88994de240f\n"
"  options:\n"
"    fPIC: True\n"
"    shared: False"
msgstr ""

#: ../../../reference/commands/graph/info.rst:234
msgid "Available formatters"
msgstr ""

#: ../../../reference/commands/graph/info.rst:237
msgid "json formatter"
msgstr ""

#: ../../../reference/commands/graph/info.rst:239
msgid ""
"For the documentation about the JSON formatter, please check the :ref:"
"`dedicated section <reference_commands_graph_info_json_format>`."
msgstr ""

#: ../../../reference/commands/graph/info.rst:242
msgid "dot formatter"
msgstr ""

#: ../../../reference/commands/graph/info.rst:244
msgid "To use the DOT format, execute the following command:"
msgstr ""

#: ../../../reference/commands/graph/info.rst:246
msgid "binutils/2.38 graph info DOT representation"
msgstr ""

#: ../../../reference/commands/graph/info.rst:246
msgid ""
"$ conan graph info --require=binutils/2.38 -r=conancenter --format=dot > "
"graph.dot"
msgstr ""

#: ../../../reference/commands/graph/info.rst:251
msgid "This command generates a DOT file with the following content:"
msgstr ""

#: ../../../reference/commands/graph/info.rst:253
msgid "Contents of graph.dot"
msgstr ""

#: ../../../reference/commands/graph/info.rst:253
msgid ""
"digraph {\n"
"    \"cli\" -> \"binutils/2.38\"\n"
"    \"binutils/2.38\" -> \"zlib/1.2.13\"\n"
"}"
msgstr ""

#: ../../../reference/commands/graph/info.rst:261
msgid ""
"To visualize this graph, you can render it using Graphviz or any compatible "
"tool."
msgstr ""

#: ../../../reference/commands/graph/info.rst:273
msgid "html formatter"
msgstr ""

#: ../../../reference/commands/graph/info.rst:275
msgid ""
"The HTML formatter provides a visual representation of the dependency graph "
"that is both interactive and user-friendly."
msgstr ""

#: ../../../reference/commands/graph/info.rst:278
msgid ""
"$ conan graph info --require=tensorflow-lite/2.12.0 -r=conancenter --"
"format=html > graph.html"
msgstr ""

#: ../../../reference/commands/graph/info.rst:283
msgid ""
"The HTML output displays an interactive graph of your project's "
"dependencies, featuring nodes for packages with versions, directional arrows "
"for dependencies, and color-coded labels for dependency types. You can "
"interact with the graph to filter visibility of dependencies and access "
"package details and status."
msgstr ""

#: ../../../reference/commands/graph/info.rst:294
msgid ""
"When using ``format=html``, the generated HTML contains links to a third-"
"party resource: the `vis-network <https://github.com/visjs/vis-network>`_ "
"library trough the *vis-network.min.js* file. By default, this file is "
"retrieved from Cloudflare. However, for environments without an internet "
"connection, you will need to create a template for the file and place it in "
"``CONAN_HOME/templates/graph.html`` to point to a local version of `the "
"remote vis-network.min.js file <https://cdnjs.cloudflare.com/ajax/libs/vis-"
"network/9.1.9/standalone/umd/vis-network.min.js>`_"
msgstr ""

#: ../../../reference/commands/graph/info.rst:301
msgid ""
"Use the template located in ``<conan_sources>/conan/cli/formatters/graph/"
"info_graph_html.py`` as a starting point for your own."
msgstr ""

#: ../../../reference/commands/graph/info.rst:308
msgid ""
"Check the :ref:`JSON format output "
"<reference_commands_graph_info_json_format>` for this command."
msgstr ""
