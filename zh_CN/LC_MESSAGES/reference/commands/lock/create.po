# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/commands/lock/create.rst:2
msgid "conan lock create"
msgstr ""

#: ../../../reference/commands/lock/create.rst:-1
msgid ""
"$ conan lock create -h\n"
"usage: conan lock create [-h] [-v [V]] [-cc CORE_CONF] [--name NAME]\n"
"                         [--version VERSION] [--user USER] [--channel "
"CHANNEL]\n"
"                         [--requires REQUIRES] [--tool-requires "
"TOOL_REQUIRES]\n"
"                         [-b BUILD] [-r REMOTE | -nr] [-u [UPDATE]]\n"
"                         [-pr PROFILE] [-pr:b PROFILE_BUILD]\n"
"                         [-pr:h PROFILE_HOST] [-pr:a PROFILE_ALL] [-o "
"OPTIONS]\n"
"                         [-o:b OPTIONS_BUILD] [-o:h OPTIONS_HOST]\n"
"                         [-o:a OPTIONS_ALL] [-s SETTINGS]\n"
"                         [-s:b SETTINGS_BUILD] [-s:h SETTINGS_HOST]\n"
"                         [-s:a SETTINGS_ALL] [-c CONF] [-c:b CONF_BUILD]\n"
"                         [-c:h CONF_HOST] [-c:a CONF_ALL] [-l LOCKFILE]\n"
"                         [--lockfile-partial] [--lockfile-out LOCKFILE_OUT]\n"
"                         [--lockfile-clean]\n"
"                         [--lockfile-overrides LOCKFILE_OVERRIDES]\n"
"                         [--build-require]\n"
"                         [path]\n"
"\n"
"Create a lockfile from a conanfile or a reference.\n"
"\n"
"positional arguments:\n"
"  path                  Path to a folder containing a recipe (conanfile.py "
"or\n"
"                        conanfile.txt) or to a recipe file. e.g.,\n"
"                        ./my_project/conanfile.txt.\n"
"\n"
"options:\n"
"  -h, --help            show this help message and exit\n"
"  -v [V]                Level of detail of the output. Valid options from "
"less\n"
"                        verbose to more verbose: -vquiet, -verror, -"
"vwarning,\n"
"                        -vnotice, -vstatus, -v or -vverbose, -vv or -"
"vdebug,\n"
"                        -vvv or -vtrace\n"
"  -cc CORE_CONF, --core-conf CORE_CONF\n"
"                        Define core configuration, overwriting global.conf\n"
"                        values. E.g.: -cc core:non_interactive=True\n"
"  --name NAME           Provide a package name if not specified in "
"conanfile\n"
"  --version VERSION     Provide a package version if not specified in\n"
"                        conanfile\n"
"  --user USER           Provide a user if not specified in conanfile\n"
"  --channel CHANNEL     Provide a channel if not specified in conanfile\n"
"  --requires REQUIRES   Directly provide requires instead of a conanfile\n"
"  --tool-requires TOOL_REQUIRES\n"
"                        Directly provide tool-requires instead of a "
"conanfile\n"
"  -b BUILD, --build BUILD\n"
"                        Optional, specify which packages to build from "
"source.\n"
"                        Combining multiple '--build' options on one command\n"
"                        line is allowed. Possible values: --build=\"*\" "
"Force\n"
"                        build from source for all packages. --build=never\n"
"                        Disallow build for all packages, use binary "
"packages\n"
"                        or fail if a binary package is not found, it cannot "
"be\n"
"                        combined with other '--build' options. --"
"build=missing\n"
"                        Build packages from source whose binary package is "
"not\n"
"                        found. --build=cascade Build packages from source "
"that\n"
"                        have at least one dependency being built from "
"source.\n"
"                        --build=[pattern] Build packages from source whose\n"
"                        package reference matches the pattern. The pattern\n"
"                        uses 'fnmatch' style wildcards. --build=~[pattern]\n"
"                        Excluded packages, which will not be built from the\n"
"                        source, whose package reference matches the "
"pattern.\n"
"                        The pattern uses 'fnmatch' style wildcards.\n"
"                        --build=missing:[pattern] Build from source if a\n"
"                        compatible binary does not exist, only for packages\n"
"                        matching pattern.\n"
"  -r REMOTE, --remote REMOTE\n"
"                        Look in the specified remote or remotes server\n"
"  -nr, --no-remote      Do not use remote, resolve exclusively in the cache\n"
"  -u [UPDATE], --update [UPDATE]\n"
"                        Will install newer versions and/or revisions in the\n"
"                        local cache for the given reference, or all in case "
"no\n"
"                        argument is supplied. When using version ranges, it\n"
"                        will install the latest version that satisfies the\n"
"                        range. Also, if using revisions, it will update to "
"the\n"
"                        latest revision for the resolved version range.\n"
"  -pr PROFILE, --profile PROFILE\n"
"                        Apply the specified profile. By default, or if\n"
"                        specifying -pr:h (--profile:host), it applies to "
"the\n"
"                        host context. Use -pr:b (--profile:build) to "
"specify\n"
"                        the build context, or -pr:a (--profile:all) to "
"specify\n"
"                        both contexts at once\n"
"  -pr:b PROFILE_BUILD, --profile:build PROFILE_BUILD\n"
"  -pr:h PROFILE_HOST, --profile:host PROFILE_HOST\n"
"  -pr:a PROFILE_ALL, --profile:all PROFILE_ALL\n"
"  -o OPTIONS, --options OPTIONS\n"
"                        Apply the specified options. By default, or if\n"
"                        specifying -o:h (--options:host), it applies to the\n"
"                        host context. Use -o:b (--options:build) to specify\n"
"                        the build context, or -o:a (--options:all) to "
"specify\n"
"                        both contexts at once. Example: -o pkg:with_qt=true\n"
"  -o:b OPTIONS_BUILD, --options:build OPTIONS_BUILD\n"
"  -o:h OPTIONS_HOST, --options:host OPTIONS_HOST\n"
"  -o:a OPTIONS_ALL, --options:all OPTIONS_ALL\n"
"  -s SETTINGS, --settings SETTINGS\n"
"                        Apply the specified settings. By default, or if\n"
"                        specifying -s:h (--settings:host), it applies to "
"the\n"
"                        host context. Use -s:b (--settings:build) to "
"specify\n"
"                        the build context, or -s:a (--settings:all) to "
"specify\n"
"                        both contexts at once. Example: -s compiler=gcc\n"
"  -s:b SETTINGS_BUILD, --settings:build SETTINGS_BUILD\n"
"  -s:h SETTINGS_HOST, --settings:host SETTINGS_HOST\n"
"  -s:a SETTINGS_ALL, --settings:all SETTINGS_ALL\n"
"  -c CONF, --conf CONF  Apply the specified conf. By default, or if "
"specifying\n"
"                        -c:h (--conf:host), it applies to the host context.\n"
"                        Use -c:b (--conf:build) to specify the build "
"context,\n"
"                        or -c:a (--conf:all) to specify both contexts at "
"once.\n"
"                        Example: -c tools.cmake.cmaketoolchain:"
"generator=Xcode\n"
"  -c:b CONF_BUILD, --conf:build CONF_BUILD\n"
"  -c:h CONF_HOST, --conf:host CONF_HOST\n"
"  -c:a CONF_ALL, --conf:all CONF_ALL\n"
"  -l LOCKFILE, --lockfile LOCKFILE\n"
"                        Path to a lockfile. Use --lockfile=\"\" to avoid\n"
"                        automatic use of existing 'conan.lock' file\n"
"  --lockfile-partial    Do not raise an error if some dependency is not "
"found\n"
"                        in lockfile\n"
"  --lockfile-out LOCKFILE_OUT\n"
"                        Filename of the updated lockfile\n"
"  --lockfile-clean      Remove unused entries from the lockfile\n"
"  --lockfile-overrides LOCKFILE_OVERRIDES\n"
"                        Overwrite lockfile overrides\n"
"  --build-require       Whether the provided reference is a build-require\n"
"\n"
msgstr ""

#: ../../../reference/commands/lock/create.rst:8
msgid ""
"The ``conan lock create`` command creates a lockfile for the recipe or "
"reference specified in ``path`` or ``--requires``. This command will compute "
"the dependency graph, evaluate which binaries do exist or need to be built, "
"but it will not try to install or build from source those binaries. In that "
"regard, it is equivalent to the ``conan graph info`` command. Most of the "
"arguments accepted by this command are the same as ``conan graph info`` (and "
"``conan install``, ``conan create``), because the ``conan lock create`` "
"creates or update a lockfile for a given configuration."
msgstr ""

#: ../../../reference/commands/lock/create.rst:14
msgid ""
"A lockfile can be created from scratch, computing a new dependency graph "
"from a local conanfile, or from requires, for example for this ``conanfile."
"txt``:"
msgstr ""

#: ../../../reference/commands/lock/create.rst:17
#: ../../../reference/commands/lock/create.rst:49
msgid "conanfile.txt"
msgstr ""

#: ../../../reference/commands/lock/create.rst:17
msgid ""
"[requires]\n"
"fmt/9.0.0\n"
"\n"
"[tool_requires]\n"
"cmake/3.23.5"
msgstr ""

#: ../../../reference/commands/lock/create.rst:26
msgid "We can run:"
msgstr ""

#: ../../../reference/commands/lock/create.rst:28
msgid ""
"$ conan lock create .\n"
"\n"
"$ cat conan.lock\n"
"{\n"
"    \"version\": \"0.5\",\n"
"    \"requires\": [\n"
"        \"fmt/9.0.0#ca4ae2047ef0ccd7d2210d8d91bd0e02%1675126491.773\"\n"
"    ],\n"
"    \"build_requires\": [\n"
"        \"cmake/3.23.5#5f184bc602682bcea668356d75e7563b%1676913225.027\"\n"
"    ],\n"
"    \"python_requires\": []\n"
"}"
msgstr ""

#: ../../../reference/commands/lock/create.rst:44
msgid ""
"``conan lock create`` accepts a ``--lockfile`` input lockfile (if a ``conan."
"lock`` default one is found, it will be automatically used), and then it "
"will add new information in the ``--lockfile-out`` (by default, also ``conan."
"lock``). For example if we change the above ``conanfile.txt``, removing the "
"``tool_requires``, updating ``fmt`` to ``9.1.0`` and adding a new dependency "
"to ``zlib/1.2.13``:"
msgstr ""

#: ../../../reference/commands/lock/create.rst:49
msgid ""
"[requires]\n"
"fmt/9.1.0\n"
"zlib/1.2.13\n"
"\n"
"[tool_requires]"
msgstr ""

#: ../../../reference/commands/lock/create.rst:58
msgid ""
"We will see how ``conan lock create`` **extends** the existing lockfile with "
"the new configuration, but it doesn't remove unused versions or packages "
"from it:"
msgstr ""

#: ../../../reference/commands/lock/create.rst:61
msgid ""
"$ conan lock create .  # will use the existing conan.lock as base, and "
"rewrite it\n"
"# use --lockfile and --lockfile-out to change that behavior\n"
"\n"
"$ cat conan.lock\n"
"{\n"
"  \"version\": \"0.5\",\n"
"  \"requires\": [\n"
"      \"zlib/1.2.13#13c96f538b52e1600c40b88994de240f%1667396813.733\",\n"
"      \"fmt/9.1.0#e747928f85b03f48aaf227ff897d9634%1675126490.952\",\n"
"      \"fmt/9.0.0#ca4ae2047ef0ccd7d2210d8d91bd0e02%1675126491.773\"\n"
"  ],\n"
"  \"build_requires\": [\n"
"      \"cmake/3.23.5#5f184bc602682bcea668356d75e7563b%1676913225.027\"\n"
"  ],\n"
"  \"python_requires\": []\n"
"}"
msgstr ""

#: ../../../reference/commands/lock/create.rst:80
msgid ""
"This behavior is very important to be able to capture multiple different "
"configurations (Linux/Windows, shared/static, Debug/Release, etc) that might "
"have different dependency graphs. See the :ref:`lockfiles "
"tutorial<tutorial_versioning_lockfiles>`, to read more about lockfiles for "
"multiple configurations."
msgstr ""

#: ../../../reference/commands/lock/create.rst:84
msgid ""
"If we want to trim unused versions and packages we can force it with the ``--"
"lockfile-clean`` argument:"
msgstr ""

#: ../../../reference/commands/lock/create.rst:86
msgid ""
"$ conan lock create . --lockfile-clean\n"
"# will use the existing conan.lock as base, and rewrite it, cleaning unused "
"versions\n"
"$ cat conan.lock\n"
"{\n"
"    \"version\": \"0.5\",\n"
"    \"requires\": [\n"
"        \"zlib/1.2.13#13c96f538b52e1600c40b88994de240f%1667396813.733\",\n"
"        \"fmt/9.1.0#e747928f85b03f48aaf227ff897d9634%1675126490.952\"\n"
"    ],\n"
"    \"build_requires\": [],\n"
"    \"python_requires\": []\n"
"}"
msgstr ""

#: ../../../reference/commands/lock/create.rst:103
msgid ""
"The :ref:`lockfiles tutorial section<tutorial_versioning_lockfiles>` has "
"more examples and hands on explanations of lockfiles."
msgstr ""
