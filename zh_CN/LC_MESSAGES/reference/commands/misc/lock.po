# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2020, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.33\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/commands/misc/lock.rst:4
msgid "conan lock"
msgstr ""

#: ../../../reference/commands/misc/lock.rst:6
msgid "$ conan lock [-h] {update,build-order,clean-modified,create} ..."
msgstr ""

#: ../../../reference/commands/misc/lock.rst:10
msgid "Generates and manipulates lock files."
msgstr ""

#: ../../../reference/commands/misc/lock.rst:12
msgid ""
"positional arguments:\n"
"  {update,build-order,clean-modified,create}\n"
"                        sub-command help\n"
"    update              Complete missing information in the first lockfile\n"
"                        with information defined in the second lockfile. "
"Both\n"
"                        lockfiles must represent the same graph, and have "
"the\n"
"                        same topology with the same identifiers, i.e. the\n"
"                        second lockfile must be an evolution based on the\n"
"                        first one\n"
"    build-order         Returns build-order\n"
"    clean-modified      Clean modified flags\n"
"    create              Create a lockfile from a conanfile or a reference\n"
"\n"
"optional arguments:\n"
"  -h, --help            show this help message and exit"
msgstr ""

#: ../../../reference/commands/misc/lock.rst:34
msgid "read about lockfiles in :ref:`versioning_lockfiles`"
msgstr ""

#: ../../../reference/commands/misc/lock.rst:39
msgid "conan lock create"
msgstr ""

#: ../../../reference/commands/misc/lock.rst:40
msgid ""
"$ conan lock create [-h] [--name NAME] [--version VERSION] [--user USER] [--"
"channel CHANNEL] [--reference REFERENCE] [-l LOCKFILE] [--base]\n"
"                     [--lockfile-out LOCKFILE_OUT] [-b [BUILD]] [-r REMOTE] "
"[-u] [-e ENV_HOST] [-e:b ENV_BUILD] [-e:h ENV_HOST] [-o OPTIONS_HOST] [-o:b "
"OPTIONS_BUILD]\n"
"                     [-o:h OPTIONS_HOST] [-pr PROFILE_HOST] [-pr:b "
"PROFILE_BUILD] [-pr:h PROFILE_HOST] [-s SETTINGS_HOST] [-s:b SETTINGS_BUILD] "
"[-s:h SETTINGS_HOST]\n"
"                     [path]"
msgstr ""

#: ../../../reference/commands/misc/lock.rst:48
msgid ""
"positional arguments:\n"
"  path                  Path to a conanfile\n"
"\n"
"optional arguments:\n"
"  -h, --help            show this help message and exit\n"
"  --name NAME           Provide a package name if not specified in "
"conanfile\n"
"  --version VERSION     Provide a package version if not specified in "
"conanfile\n"
"  --user USER           Provide a user\n"
"  --channel CHANNEL     Provide a channel\n"
"  --reference REFERENCE\n"
"                        Provide a package reference instead of a conanfile\n"
"  -l LOCKFILE, --lockfile LOCKFILE\n"
"                        Path to lockfile to be used as a base\n"
"  --base                Lock only recipe versions and revisions\n"
"  --lockfile-out LOCKFILE_OUT\n"
"                        Filename of the created lockfile\n"
"  -b [BUILD], --build [BUILD]\n"
"                        Packages to build from source\n"
"  -r REMOTE, --remote REMOTE\n"
"                        Look in the specified remote server\n"
"  -u, --update          Will check the remote and in case a newer version "
"and/or revision of the dependencies exists there, it will install those in "
"the local cache. When\n"
"                        using version ranges, it will install the latest "
"version that satisfies the range. Also, if using revisions, it will update "
"to the latest revision\n"
"                        for the resolved version range.\n"
"  -e ENV_HOST, --env ENV_HOST\n"
"                        Environment variables that will be set during the "
"package build (host machine). e.g.: -e CXX=/usr/bin/clang++\n"
"  -e:b ENV_BUILD, --env:build ENV_BUILD\n"
"                        Environment variables that will be set during the "
"package build (build machine). e.g.: -e:b CXX=/usr/bin/clang++\n"
"  -e:h ENV_HOST, --env:host ENV_HOST\n"
"                        Environment variables that will be set during the "
"package build (host machine). e.g.: -e:h CXX=/usr/bin/clang++\n"
"  -o OPTIONS_HOST, --options OPTIONS_HOST\n"
"                        Define options values (host machine), e.g.: -o Pkg:"
"with_qt=true\n"
"  -o:b OPTIONS_BUILD, --options:build OPTIONS_BUILD\n"
"                        Define options values (build machine), e.g.: -o:b "
"Pkg:with_qt=true\n"
"  -o:h OPTIONS_HOST, --options:host OPTIONS_HOST\n"
"                        Define options values (host machine), e.g.: -o:h Pkg:"
"with_qt=true\n"
"  -pr PROFILE_HOST, --profile PROFILE_HOST\n"
"                        Apply the specified profile to the host machine\n"
"  -pr:b PROFILE_BUILD, --profile:build PROFILE_BUILD\n"
"                        Apply the specified profile to the build machine\n"
"  -pr:h PROFILE_HOST, --profile:host PROFILE_HOST\n"
"                        Apply the specified profile to the host machine\n"
"  -s SETTINGS_HOST, --settings SETTINGS_HOST\n"
"                        Settings to build the package, overwriting the "
"defaults (host machine). e.g.: -s compiler=gcc\n"
"  -s:b SETTINGS_BUILD, --settings:build SETTINGS_BUILD\n"
"                        Settings to build the package, overwriting the "
"defaults (build machine). e.g.: -s:b compiler=gcc\n"
"  -s:h SETTINGS_HOST, --settings:host SETTINGS_HOST\n"
"                        Settings to build the package, overwriting the "
"defaults (host machine). e.g.: -s:h compiler=gcc"
msgstr ""

#: ../../../reference/commands/misc/lock.rst:100
msgid "conan lock update"
msgstr ""

#: ../../../reference/commands/misc/lock.rst:102
msgid "$ conan lock update [-h] old_lockfile new_lockfile"
msgstr ""

#: ../../../reference/commands/misc/lock.rst:106
msgid ""
"positional arguments:\n"
"    old_lockfile  Path to lockfile to be updated\n"
"    new_lockfile  Path to lockfile containing the new information that is "
"going to be updated into the first lockfile\n"
"\n"
"optional arguments:\n"
"    -h, --help    show this help message and exit"
msgstr ""

#: ../../../reference/commands/misc/lock.rst:118
msgid "conan lock build-order"
msgstr ""

#: ../../../reference/commands/misc/lock.rst:120
msgid "$ conan lock build-order [-h] [--json JSON] lockfile"
msgstr ""

#: ../../../reference/commands/misc/lock.rst:124
msgid ""
"positional arguments:\n"
"    lockfile     lockfile file\n"
"\n"
"optional arguments:\n"
"    -h, --help   show this help message and exit\n"
"    --json JSON  generate output file in json format"
msgstr ""

#: ../../../reference/commands/misc/lock.rst:135
msgid "conan lock clean-modified"
msgstr ""

#: ../../../reference/commands/misc/lock.rst:137
msgid "$ conan lock clean-modified [-h] lockfile"
msgstr ""

#: ../../../reference/commands/misc/lock.rst:141
msgid ""
"positional arguments:\n"
"    lockfile    Path to the lockfile\n"
"\n"
"optional arguments:\n"
"    -h, --help  show this help message and exit"
msgstr ""
