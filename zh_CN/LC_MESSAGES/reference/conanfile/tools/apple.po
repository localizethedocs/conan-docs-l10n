# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2022, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.48\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/conanfile/tools/apple.rst:4
msgid "conan.tools.apple"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:8
msgid ""
"These tools are still **experimental** (so subject to breaking changes) but "
"with very stable syntax. We encourage the usage of it to be prepared for "
"Conan 2.0."
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:14
msgid "XcodeDeps"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:16
msgid "Available since: `1.42.0 <https://github.com/conan-io/conan/releases>`_"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:18
msgid ""
"The ``XcodeDeps`` tool is the dependency information generator for *Xcode*. "
"It will generate multiple *.xcconfig* configuration files, the can be used "
"by consumers using *xcodebuild* or *Xcode*. To use them just add the "
"generated configuration files to the Xcode project or set the ``-xcconfig`` "
"argument from the command line."
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:23
msgid "The ``XcodeDeps`` generator can be used by name in conanfiles:"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:25
#: ../../../reference/conanfile/tools/apple.rst:39
#: ../../../reference/conanfile/tools/apple.rst:150
msgid "conanfile.py"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:25
msgid ""
"class Pkg(ConanFile):\n"
"    generators = \"XcodeDeps\""
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:31
#: ../../../reference/conanfile/tools/apple.rst:156
msgid "conanfile.txt"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:31
msgid ""
"[generators]\n"
"XcodeDeps"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:37
#: ../../../reference/conanfile/tools/apple.rst:162
msgid ""
"And it can also be fully instantiated in the conanfile ``generate()`` method:"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:39
msgid ""
"from conan import ConanFile\n"
"from conan.tools.apple import XcodeDeps\n"
"\n"
"class Pkg(ConanFile):\n"
"    settings = \"os\", \"compiler\", \"arch\", \"build_type\"\n"
"    requires = \"libpng/1.6.37@\" # Note libpng has zlib as transitive "
"dependency\n"
"\n"
"    def generate(self):\n"
"        xcode = XcodeDeps(self)\n"
"        xcode.generate()"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:53
msgid ""
"When the ``XcodeDeps`` generator is used, every invocation of ``conan "
"install`` will generate several configuration files, per dependency and "
"configuration. For the *conanfile.py* above, for example:"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:57
#: ../../../reference/conanfile/tools/apple.rst:182
msgid ""
"$ conan install conanfile.py # default is Release\n"
"$ conan install conanfile.py -s build_type=Debug"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:62
msgid ""
"This generator is multi-configuration. It will generate different files for "
"the different *Debug/Release* configurations for each requirement. It will "
"also generate one single file (*conandeps.xcconfig*) aggregating all the "
"files for the direct dependencies (just *libpng* in this case). The above "
"commands generate the following files:"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:67
msgid ""
".\n"
"├── conan_libpng.xcconfig\n"
"├── conan_libpng_debug_x86_64.xcconfig\n"
"├── conan_libpng_release_x86_64.xcconfig\n"
"├── conan_libpng_vars_debug_x86_64.xcconfig\n"
"├── conan_libpng_vars_release_x86_64.xcconfig\n"
"├── conan_zlib.xcconfig\n"
"├── conan_zlib_debug_x86_64.xcconfig\n"
"├── conan_zlib_release_x86_64.xcconfig\n"
"├── conan_zlib_vars_debug_x86_64.xcconfig\n"
"├── conan_zlib_vars_release_x86_64.xcconfig\n"
"├── conandeps.xcconfig\n"
"└── conan_config.xcconfig"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:84
msgid ""
"The first ``conan install`` with the default *Release* and *x86_64* "
"configuration generates:"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:86
msgid ""
"*conan_libpng_vars_release_x86_64.xcconfig*: declares some intermediate "
"variables that are included in *conan_libpng_release_x86_64.xcconfig*"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:87
msgid ""
"*conan_libpng_release_x86_64.xcconfig*: includes "
"*conan_libpng_vars_release_x86_64.xcconfig* and declares variables with "
"conditional logic to be considered only for the active configuration in "
"*Xcode* or the one passed by command line to *xcodebuild*."
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:88
msgid ""
"*conan_libpng.xcconfig*: includes *conan_libpng_release_x86_64.xcconfig* and "
"declares the following *Xcode* build settings: ``HEADER_SEARCH_PATHS``, "
"``GCC_PREPROCESSOR_DEFINITIONS``, ``OTHER_CFLAGS``, "
"``OTHER_CPLUSPLUSFLAGS``, ``FRAMEWORK_SEARCH_PATHS``, "
"``LIBRARY_SEARCH_PATHS``, ``OTHER_LDFLAGS``. It also includes the generated "
"*xcconfig* files for transitive dependencies (*conan_zlib.xcconfig* in this "
"case)."
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:89
msgid ""
"Same 3 files will be generated for each dependency in the graph. In this "
"case, as *zlib* is a dependency of *libpng* it will generate: "
"*conan_zlib_vars_release_x86_64.xcconfig*, *conan_zlib_release_x86_64."
"xcconfig* and *conan_zlib.xcconfig*."
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:90
#: ../../../reference/conanfile/tools/apple.rst:99
msgid ""
"*conandeps.xcconfig*: configuration files including all direct dependencies, "
"in this case, it just includes ``conan_libpng.xcconfig``."
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:91
#: ../../../reference/conanfile/tools/apple.rst:100
msgid ""
"The main *conan_config.xcconfig* file, to be added to the project. Includes "
"both the files from this generator and the generated by the :ref:"
"`XcodeToolchain<conan_tools_apple_xcodetoolchain>` in case it was also set."
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:93
msgid "The second ``conan install -s build_type=Debug`` generates:"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:95
msgid ""
"*conan_libpng_vars_debug_x86_64.xcconfig*: same variables as the one below "
"for *Debug* configuration."
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:96
msgid ""
"*conan_libpng_debug_x86_64.xcconfig*: same variables as the one below for "
"*Debug* configuration."
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:97
msgid ""
"*conan_libpng.xcconfig*: this file has been already creted by the previous "
"command, now it's modified to add the include for *conan_libpng_debug_x86_64."
"xcconfig*."
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:98
msgid ""
"Like in the previous command the same 3 files will be generated for each "
"dependency in the graph. In this case, as *zlib* is a dependency of *libpng* "
"it will generate: *conan_zlib_vars_debug_x86_64.xcconfig*, "
"*conan_zlib_debug_x86_64.xcconfig* and *conan_zlib.xcconfig*."
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:102
msgid ""
"If you want to add this dependencies to you Xcode project, you just have to "
"add the *conan_config.xcconfig* configuration file for all of the "
"configurations you want to use (usually *Debug* and *Release*)."
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:107
msgid "Custom configurations"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:109
msgid ""
"If your Xcode project defines custom configurations, like ``ReleaseShared``, "
"or ``MyCustomConfig``, it is possible to define it into the ``XcodeDeps`` "
"generator, so different project configurations can use different set of "
"dependencies. Let's say that our current project can be built as a shared "
"library, with the custom configuration ``ReleaseShared``, and the package "
"also controls this with the ``shared`` option:"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:115
msgid ""
"from conan import ConanFile\n"
"from conan.tools.apple import XcodeDeps\n"
"\n"
"class Pkg(ConanFile):\n"
"    settings = \"os\", \"compiler\", \"arch\", \"build_type\"\n"
"    options = {\"shared\": [True, False]}\n"
"    default_options = {\"shared\": False}\n"
"    requires = \"zlib/1.2.11\"\n"
"\n"
"    def generate(self):\n"
"        xcode = XcodeDeps(self)\n"
"        # We assume that -o *:shared=True is used to install all shared deps "
"too\n"
"        if self.options.shared:\n"
"            xcode.configuration = str(self.settings.build_type) + "
"\"Shared\"\n"
"        xcode.generate()"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:133
msgid ""
"This will manage to generate new *.xcconfig* files for this custom "
"configuration, and when you switch to this configuration in the IDE, the "
"build system will take the correct values depending wether we want to link "
"with shared or static libraries."
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:140
msgid "XcodeToolchain"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:142
#: ../../../reference/conanfile/tools/apple.rst:251
msgid "Available since: `1.46.0 <https://github.com/conan-io/conan/releases>`_"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:144
msgid ""
"The ``XcodeToolchain`` is the toolchain generator for Xcode. It will "
"generate *.xcconfig* configuration files that can be added to Xcode "
"projects. This generator translates the current package configuration, "
"settings, and options, into Xcode *.xcconfig* files syntax."
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:148
msgid "The ``XcodeToolchain`` generator can be used by name in conanfiles:"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:150
msgid ""
"class Pkg(ConanFile):\n"
"    generators = \"XcodeToolchain\""
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:156
msgid ""
"[generators]\n"
"XcodeToolchain"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:176
msgid ""
"from conan import ConanFile\n"
"from conan.tools.apple import XcodeToolchain\n"
"\n"
"class App(ConanFile):\n"
"    settings = \"os\", \"arch\", \"compiler\", \"build_type\"\n"
"\n"
"    def generate(self):\n"
"        tc = XcodeToolchain(self)\n"
"        tc.generate()"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:177
msgid ""
"The ``XcodeToolchain`` will generate three files after a ``conan install`` "
"command. As explained above for the XcodeDeps generator, each different "
"configuration will create a set of files with different names. For example, "
"running ``conan install`` for *Release* first and then *Debug* configuration:"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:187
msgid "Will create these files:"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:189
msgid ""
".\n"
"├── conan_config.xcconfig\n"
"├── conantoolchain_release_x86_64.xcconfig\n"
"├── conantoolchain_debug_x86_64.xcconfig\n"
"├── conantoolchain.xcconfig\n"
"└── conan_global_flags.xcconfig"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:198
msgid "Those files are:"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:200
msgid ""
"The main *conan_config.xcconfig* file, to be added to the project. Includes "
"both the files from this generator and the generated by the :ref:"
"`XcodeDeps<conan_tools_apple_xcodedeps>` in case it was also set."
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:203
msgid ""
"*conantoolchain_<debug/release>_x86_64.xcconfig*: declares "
"``CLANG_CXX_LIBRARY``, ``CLANG_CXX_LANGUAGE_STANDARD`` and "
"``MACOSX_DEPLOYMENT_TARGET`` variables with conditional logic depending on "
"the build configuration, architecture and sdk set."
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:206
msgid ""
"*conantoolchain.xcconfig*: aggregates all the "
"*conantoolchain_<config>_<arch>.xcconfig* files for the different installed "
"configurations."
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:208
msgid ""
"*conan_global_flags.xcconfig*: this file will only be generated in case of "
"any configuration variables related to compiler or linker flags are set. "
"Check :ref:`the configuration section<xcodetoolchain_conf>` below for more "
"details."
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:213
msgid ""
"Every invocation to ``conan install`` with different configuration will "
"create a new *conantoolchain_<config>_<arch>.xcconfig* file that is "
"aggregated in the *conantoolchain.xcconfig*, so you can have different "
"configurations included in your Xcode project."
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:218
msgid ""
"The XcodeToolchain files can declare the following Xcode build settings "
"based on Conan settings values:"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:220
msgid ""
"``MACOSX_DEPLOYMENT_TARGET`` is based on the value of the ``os.version`` "
"setting and will make the build system to pass the flag ``-mmacosx-version-"
"min`` with that value (if set). It defines the operating system version the "
"binary should run into."
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:223
msgid ""
"``CLANG_CXX_LANGUAGE_STANDARD`` is based on the value of the ``compiler."
"cppstd`` setting that sets the C++ language standard."
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:225
msgid ""
"``CLANG_CXX_LIBRARY`` is based on the value of the compiler.libcxx setting "
"and sets the version of the C++ standard library to use."
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:228
msgid ""
"One of the advantages of using toolchains is that they can help to achieve "
"the exact same build with local development flows, than when the package is "
"created in the cache."
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:234
#: ../../../reference/conanfile/tools/apple.rst:308
msgid "conf"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:236
msgid ""
"This toolchain is also affected by these :ref:`[conf]<global_conf>` "
"variables:"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:238
msgid "``tools.build:cxxflags`` list of C++ flags."
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:239
msgid "``tools.build:cflags`` list of pure C flags."
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:240
msgid ""
"``tools.build:sharedlinkflags`` list of flags that will be used by the "
"linker when creating a shared library."
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:241
msgid ""
"``tools.build:exelinkflags`` list of flags that will be used by the linker "
"when creating an executable."
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:242
msgid "``tools.build:defines`` list of preprocessor definitions."
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:244
msgid ""
"If you set any of these variables, the toolchain will use them to generate "
"the ``conan_global_flags.xcconfig`` file that will be included from the "
"``conan_config.xcconfig`` file."
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:249
msgid "XcodeBuild"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:253
msgid ""
"The ``Xcode`` build helper is a wrapper around the command line invocation "
"of Xcode. It will abstract the calls like ``xcodebuild -project app."
"xcodeproj -configuration <config> -arch <arch> ...``"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:257
msgid "The ``Xcode`` helper can be used like:"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:270
msgid ""
"from conan import conanfile\n"
"from conan.tools.apple import XcodeBuild\n"
"\n"
"class App(ConanFile):\n"
"    settings = \"os\", \"arch\", \"compiler\", \"build_type\"\n"
"\n"
"    def build(self):\n"
"        xcodebuild = XcodeBuild(self)\n"
"        xcodebuild.build(\"app.xcodeproj\")"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:272
msgid "Xcode.build() method"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:277
msgid "def build(self, xcodeproj, target=None):"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:278
msgid "``xcodeproj``: the *xcodeproj* file to build."
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:279
msgid ""
"``target``: the target to build, in case this argument is passed to the "
"``build()`` method it will add the ``-target`` argument to the build system "
"call. If not passed, it will build all the targets passing the ``-"
"alltargets`` argument instead."
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:284
msgid ""
"The ``Xcode.build()`` method internally implements a call to ``xcodebuild`` "
"like:"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:289
msgid ""
"$ xcodebuild -project app.xcodeproj -configuration <configuration> -arch "
"<architecture> <sdk> <verbosity> -target <target>/-alltargets"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:290
msgid "Where:"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:292
msgid ""
"``configuration`` is the configuration, typically *Release* or *Debug*, "
"which will be obtained from ``settings.build_type``."
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:294
msgid ""
"``architecture`` is the build architecture, a mapping from the ``settings."
"arch`` to the common architectures defined by Apple 'i386', 'x86_64', "
"'armv7', 'arm64', etc."
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:296
msgid ""
"``sdk`` is set based on the values of the ``os.sdk`` and ``os.sdk_version`` "
"defining the ``SDKROOT`` Xcode build setting according to them. For example, "
"setting ``os.sdk=iOS`` and `os.sdk_version=8.3`` will pass "
"``SDKROOT=iOS8.3`` to the build system. In case you defined the ``tools."
"apple:sdk_path`` in your :ref:`[conf]<global_conf>` this value will take "
"preference and will directly pass ``SDKROOT=<tools.apple:sdk_path>`` so "
"**take into account** that for this case the skd located in that path should "
"set your ``os.sdk`` and ``os.sdk_version`` settings values."
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:303
msgid ""
"``verbosity`` is the verbosity level for the build and can take value "
"'verbose' or 'quiet' if set by ``tools.apple.xcodebuild:verbosity`` in your :"
"ref:`[conf]<global_conf>`"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:310
msgid ""
"``tools.apple.xcodebuild:verbosity`` verbosity value for the build, can be "
"'verbose' or 'quiet'"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:311
msgid ""
"``tools.apple:sdk_path`` path for the sdk location, will set the ``SDKROOT`` "
"value with preference over composing the value from the ``os.sdk`` and ``os."
"sdk_version`` settings."
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:317
msgid "conan.tools.apple.fix_apple_shared_install_name()"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:319
msgid "def fix_apple_shared_install_name(conanfile):"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:323
msgid "Parameters:"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:325
msgid "**conanfile**: Conanfile instance."
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:327
msgid ""
"This tool will search for all the *dylib* files in the conanfile's "
"*package_folder* and fix both the ``LC_ID_DYLIB`` and ``LC_LOAD_DYLIB`` "
"fields on those files using the *install_name_tool* utility available in "
"macOS."
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:331
msgid ""
"For ``LC_ID_DYLIB`` which is the field containing the install name of the "
"library, it will change the install name to one that uses the ``@rpath``. "
"For example, if the install name is ``/path/to/lib/libname.dylib``, the new "
"install name will be ``@rpath/libname.dylib``. This is done by executing "
"internally something like:"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:336
msgid "install_name_tool /path/to/lib/libname.dylib -id @rpath/libname.dylib"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:340
msgid ""
"For ``LC_LOAD_DYLIB`` which is the field containing the path to the library "
"dependencies, it will change the path of the dependencies to one that uses "
"the ``@rpath``. For example, if the path is ``/path/to/lib/dependency."
"dylib``, the new path will be ``@rpath/dependency.dylib``. This is done by "
"executing internally something like:"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:346
msgid ""
"install_name_tool /path/to/lib/libname.dylib -change /path/to/lib/dependency."
"dylib @rpath/dependency.dylib"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:351
msgid ""
"This tool is typically needed by recipes that use Autotools as the build "
"system and in the case that the correct install names are not fixed in the "
"library being packaged. Use this tool, if needed, in the conanfile's "
"``package()`` method like:"
msgstr ""

#: ../../../reference/conanfile/tools/apple.rst:355
msgid ""
"from conan.tools.apple import fix_apple_shared_install_name\n"
"\n"
"class HelloConan(ConanFile):\n"
"\n"
"  ...\n"
"\n"
"  def package(self):\n"
"      autotools = Autotools(self)\n"
"      autotools.install()\n"
"      fix_apple_shared_install_name(self)"
msgstr ""
