# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2022, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.62\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:05+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/conanfile/tools/files/basic.rst:2
msgid "conan.tools.files basic operations"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:6
msgid ""
"Some of the features used in this section are still **under development**, "
"while they are recommended and usable and we will try not to break them in "
"future releases, some breaking changes might still happen if necessary to "
"prepare for the *Conan 2.0 release*."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:13
msgid "conan.tools.files.copy()"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:15
#: ../../../reference/conanfile/tools/files/basic.rst:126
#: ../../../reference/conanfile/tools/files/basic.rst:260
#: ../../../reference/conanfile/tools/files/basic.rst:318
#: ../../../reference/conanfile/tools/files/basic.rst:398
msgid ""
"Available since: `1.46.0 <https://github.com/conan-io/conan/releases/"
"tag/1.46.0>`_"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:17
msgid ""
"def copy(conanfile, pattern, src, dst, keep_path=True, excludes=None, "
"ignore_case=True)"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:22
msgid ""
"Copy the files matching the ``pattern`` (fnmatch) at the ``src`` folder to a "
"``dst`` folder."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:33
#: ../../../reference/conanfile/tools/files/basic.rst:69
#: ../../../reference/conanfile/tools/files/basic.rst:97
#: ../../../reference/conanfile/tools/files/basic.rst:121
#: ../../../reference/conanfile/tools/files/basic.rst:150
#: ../../../reference/conanfile/tools/files/basic.rst:177
#: ../../../reference/conanfile/tools/files/basic.rst:202
#: ../../../reference/conanfile/tools/files/basic.rst:226
#: ../../../reference/conanfile/tools/files/basic.rst:255
#: ../../../reference/conanfile/tools/files/basic.rst:313
#: ../../../reference/conanfile/tools/files/basic.rst:324
msgid "Parameters:"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:25
#: ../../../reference/conanfile/tools/files/basic.rst:66
#: ../../../reference/conanfile/tools/files/basic.rst:91
#: ../../../reference/conanfile/tools/files/basic.rst:118
#: ../../../reference/conanfile/tools/files/basic.rst:143
#: ../../../reference/conanfile/tools/files/basic.rst:172
#: ../../../reference/conanfile/tools/files/basic.rst:200
#: ../../../reference/conanfile/tools/files/basic.rst:225
#: ../../../reference/conanfile/tools/files/basic.rst:253
#: ../../../reference/conanfile/tools/files/basic.rst:302
#: ../../../reference/conanfile/tools/files/basic.rst:326
msgid "**conanfile**: Conanfile object."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:26
msgid ""
"**pattern**: An fnmatch file pattern of the files that should be copied. It "
"must not start with ``..`` relative path or an exception will be raised."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:27
msgid ""
"**src**: Source folder in which those files will be searched. This folder "
"will be stripped from the dst parameter. E.g., `lib/Debug/x86`."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:29
msgid ""
"**dst**: Destination local folder. It must be different from ``src`` value "
"or an exception will be raised."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:30
msgid ""
"**keep_path**: Means if you want to keep the relative path when you copy the "
"files from the **src** folder to the **dst** one."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:32
msgid ""
"**excludes**: A tuple/list of fnmatch patterns or even a single one to be "
"excluded from the copy."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:33
msgid ""
"**ignore_case**: If enabled, it will do a case-insensitive pattern matching."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:37
msgid ""
"The files that are **symlinks to files** or **symlinks to folders** with be "
"treated like any other file, so they will only be copied if the specified "
"pattern matches with the file."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:40
msgid ""
"At the destination folder, the symlinks will be created pointing to the "
"exact same file or folder, absolute or relative, being the responsibility of "
"the user to manipulate the symlink to, for example, transform the symlink "
"into a relative path before copying it so it points to the destination "
"folder."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:44
msgid ""
"Check :ref:`here<conan_tools_files_symlinks>` the reference of tools to "
"manage symlinks."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:48
msgid "conan.tools.files.load()"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:50
#: ../../../reference/conanfile/tools/files/basic.rst:74
#: ../../../reference/conanfile/tools/files/basic.rst:182
msgid ""
"Available since: `1.35.0 <https://github.com/conan-io/conan/releases/"
"tag/1.35.0>`_"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:52
msgid "def load(conanfile, path, encoding=\"utf-8\")"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:56
msgid ""
"Utility function to load files in one line. It will manage the open and "
"close of the file, and load binary encodings. Returns the content of the "
"file."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:59
msgid ""
"from conan.tools.files import load\n"
"\n"
"content = load(self, \"myfile.txt\")"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:67
#: ../../../reference/conanfile/tools/files/basic.rst:92
msgid "**path**: Path to the file."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:68
msgid "**encoding**: Specifies the input file text encoding."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:72
msgid "conan.tools.files.save()"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:76
msgid "def save(conanfile, path, content, append=False, encoding=\"utf-8\"):"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:81
msgid ""
"Utility function to save files in one line. It will manage the open and "
"close of the file and creating directories if necessary."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:83
msgid ""
"from conan.tools.files import save\n"
"\n"
"save(self, \"path/to/otherfile.txt\", \"contents of the file\")"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:93
msgid "**content**: Content that should be saved into the file."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:94
msgid "**append**: If ``True``, it will append the content."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:95
msgid "**encoding**: Specifies the output file text encoding."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:100
msgid "conan.tools.files.rename()"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:102
msgid ""
"Available since: `1.37.0 <https://github.com/conan-io/conan/releases/"
"tag/1.37.0>`_"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:104
msgid "def rename(conanfile, src, dst)"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:108
msgid ""
"Utility function to rename a file or folder *src* to *dst*. On Windows, it "
"is very common that ``os.rename()`` raises an \"Access is denied\" "
"exception, so this tool uses:command:`robocopy` if available. If that is not "
"the case, or the rename is done in a non-Windows machine, it falls back to "
"the ``os.rename()`` implementation."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:110
msgid ""
"from conan.tools.files import rename\n"
"\n"
"def source(self):\n"
"    rename(self, \"lib-sources-abe2h9fe\", \"sources\")  # renaming a folder"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:119
msgid "**src**: Path to be renamed."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:120
msgid "**dst**: Path to be renamed to."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:124
msgid "conan.tools.files.replace_in_file()"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:128
msgid ""
"def replace_in_file(conanfile, file_path, search, replace, strict=True, "
"encoding=\"utf-8\")"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:133
msgid ""
"Replace a string ``search`` in the contents of the file ``file_path`` with "
"the string ``replace``."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:135
msgid ""
"from conan.tools.files import replace_in_file\n"
"\n"
"replace_in_file(self, os.path.join(self.source_folder, \"folder\", \"file."
"txt\"), \"foo\", \"bar\")"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:144
msgid "**file_path**: File path of the file to perform the replace in."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:145
msgid "**search**: String you want to be replaced."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:146
msgid "**replace**: String to replace the searched string."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:147
msgid ""
"**strict**: If ``True``, it raises an error if the searched string is not "
"found, so nothing is actually replaced."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:149
msgid "**encoding**: Specifies the input and output files text encoding."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:153
msgid "conan.tools.files.rm()"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:155
msgid ""
"Available since: `1.50.0 <https://github.com/conan-io/conan/releases/"
"tag/1.50.0>`_"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:157
msgid "def rm(conanfile, pattern, folder, recursive=False)"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:162
msgid ""
"Remove the files following the ``pattern`` (fnmatch) from the specified "
"``folder``."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:164
msgid ""
"from conan.tools.files import rm\n"
"\n"
"rm(self, \"*.tmp\", self.build_folder, recursive=True)"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:173
msgid ""
"**pattern**: Pattern that the files to be removed have to match (fnmatch)."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:174
msgid "**folder**: Folder to search/remove the files."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:175
msgid ""
"**recursive**: If ``recursive`` is specified it will search in the "
"subfolders."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:180
msgid "conan.tools.files.mkdir()"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:184
msgid "def mkdir(conanfile, path)"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:188
msgid ""
"Utility functions to create a directory. The existence of the specified "
"directory is checked, so ``mkdir()`` will do nothing if the directory "
"already exists."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:191
msgid ""
"from conan.tools.files import mkdir\n"
"\n"
"mkdir(self, \"mydir\") # Creates mydir if it does not already exist\n"
"mkdir(self, \"mydir\") # Does nothing"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:201
#: ../../../reference/conanfile/tools/files/basic.rst:226
msgid "**path**: Path to the directory."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:205
msgid "conan.tools.files.rmdir()"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:207
msgid ""
"Available since: `1.47.0 <https://github.com/conan-io/conan/releases/"
"tag/1.47.0>`_"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:209
msgid "def rmdir(conanfile, path)"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:213
msgid ""
"Utility functions to remove a directory. The existence of the specified "
"directory is checked, so ``rmdir()`` will do nothing if the directory "
"doesn't exists."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:216
msgid ""
"from conan.tools.files import rmdir\n"
"\n"
"rmdir(self, \"mydir\") # Remove mydir if it exist\n"
"rmdir(self, \"mydir\") # Does nothing"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:228
msgid ""
"The behavior regarding the path is the same as Python ``shutil.rmtree``. The "
"provided path can be relative to the current folder (the current folder "
"depends in which method this tool is used), or it can be an absolute path."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:234
msgid "conan.tools.files.chdir()"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:236
msgid ""
"Available since: `1.40.0 <https://github.com/conan-io/conan/releases/"
"tag/1.40.0>`_"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:238
msgid "def chdir(conanfile, newdir):"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:242
msgid ""
"This is a context manager that allows to temporary change the current "
"directory in your conanfile:"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:244
msgid ""
"from conan.tools.files import chdir\n"
"\n"
"def build(self):\n"
"    with chdir(self, \"./subdir\"):\n"
"        do_something()"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:254
msgid "**newdir**: Directory path name to change the current directory."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:258
msgid "conan.tools.files.unzip()"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:262
msgid ""
"def unzip(conanfile, filename, destination=\".\", keep_permissions=False, "
"pattern=None,\n"
"          strip_root=False):"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:268
msgid ""
"This function extract different compressed formats (``.tar.gz``, ``.tar``, "
"``.tzb2``, ``.tar.bz2``, ``.tgz``, ``.txz``, ``tar.xz``, and ``.zip``) into "
"the given destination folder."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:271
msgid ""
"It also accepts gzipped files, with extension ``.gz`` (not matching any of "
"the above), and it will unzip them into a file with the same name but "
"without the extension, or to a filename defined by the ``destination`` "
"argument."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:274
msgid ""
"from conan.tools.files import unzip\n"
"\n"
"tools.unzip(\"myfile.zip\")\n"
"# or to extract in \"myfolder\" sub-folder\n"
"tools.unzip(\"myfile.zip\", \"myfolder\")"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:282
msgid ""
"You can keep the permissions of the files using the "
"``keep_permissions=True`` parameter."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:284
msgid ""
"from conan.tools.files import unzip\n"
"\n"
"unzip(self, \"myfile.zip\", \"myfolder\", keep_permissions=True)"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:290
msgid ""
"Use the ``pattern`` argument if you want to filter specific files and paths "
"to decompress from the archive."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:292
msgid ""
"from conan.tools.files import unzip\n"
"\n"
"# Extract only files inside relative folder \"small\"\n"
"unzip(self, \"bigfile.zip\", pattern=\"small/*\")\n"
"# Extract only txt files\n"
"unzip(self, \"bigfile.zip\", pattern=\"*.txt\")"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:303
msgid "**filename**: File to be unzipped."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:304
msgid "**destination**: Destination folder for unzipped files."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:305
msgid ""
"**keep_permissions**: Keep permissions of files. **WARNING:** Can be "
"dangerous if the zip was not created in a NIX system, the bits could produce "
"undefined permission schema. Use only this option if you are sure that the "
"zip was created correctly."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:308
msgid ""
"**pattern**: Extract from the archive only paths matching the pattern. This "
"should be a Unix shell-style wildcard. See `fnmatch <https://docs.python."
"org/3/library/fnmatch.html>`_ documentation for more details."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:310
msgid ""
"**strip_root**: When ``True`` and the ZIP file contains one folder "
"containing all the contents, it will strip the root folder moving all its "
"contents to the root. E.g: *mylib-1.2.8/main.c* will be extracted as *main."
"c*. If the compressed file contains more than one folder or only a file it "
"will raise a ``ConanException``."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:316
msgid "conan.tools.files.update_conandata()"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:320
msgid "def update_conandata(conanfile, data)"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:327
msgid "**data**: A dictionary (can be nested), of values to update"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:330
msgid ""
"This function reads the ``conandata.yml`` inside the exported folder in the "
"conan cache, if it exists. If the ``conandata.yml`` does not exist, it will "
"create it. Then, it updates the conandata dictionary with the provided "
"``data`` one, which is updated recursively, prioritizing the ``data`` "
"values, but keeping other existing ones. Finally the ``conandata.yml`` is "
"saved in the same place."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:336
msgid ""
"This helper can only be used within the ``export()`` method, it can raise "
"otherwise. One application is to capture in the ``conandata.yml`` the scm "
"coordinates (like Git remote url and commit), to be able to recover it later "
"in the ``source()`` method and have reproducible recipes that can build from "
"sources without actually storing the sources in the recipe."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:341
msgid "Example:"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:343
msgid ""
"from conan import ConanFile\n"
"from conan.tools.files import update_conandata\n"
"\n"
"class Pkg(ConanFile):\n"
"    name = \"pkg\"\n"
"    version = \"0.1\"\n"
"\n"
"    def export(self):\n"
"        # This is an example, doesn't make sense to have static data, "
"instead you\n"
"        # could put the data directly in a conandata.yml file.\n"
"        # This would be useful for storing dynamic data, obtained at "
"export() time from elsewhere\n"
"        update_conandata(self, {\"mydata\": {\"value\": {\"nested1\": 123, "
"\"nested2\": \"some-string\"}}})\n"
"\n"
"    def source(self):\n"
"        data = self.conan_data[\"sources\"][\"mydata\"]"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:362
msgid "conan.tools.files.trim_conandata()"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:364
msgid ""
"Available since: `1.61.0 <https://github.com/conan-io/conan/releases/"
"tag/1.61.0>`_"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:366
msgid "def trim_conandata(conanfile)"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:371
msgid ""
"This function modifies the ``conandata.yml`` inside the exported folder in "
"the conan cache, if it exists, and keeps only the information related to the "
"currently built version."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:375
msgid ""
"This helper can only be used within the ``export()`` method, it raises an "
"exception otherwise. One application is to ensure changes in the ``conandata."
"yml`` file related to some versions do not affect the generated recipe "
"revisions of the rest."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:379
msgid "Usage:"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:381
msgid ""
"from conan import ConanFile\n"
"from conan.tools.files import trim_conandata\n"
"\n"
"class Pkg(ConanFile):\n"
"    name = \"pkg\"\n"
"\n"
"    def export(self):\n"
"        # any change to other versions in the conandata.yml\n"
"        # won't affect the revision of the version that is built\n"
"        trim_conandata(self)"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:396
msgid "conan.tools.files.collect_libs()"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:400
msgid "def collect_libs(conanfile, folder=None)"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:404
msgid ""
"Returns a sorted list of library names from the libraries (files with "
"extensions *.so*, *.lib*, *.a* and *.dylib*) located inside the ``conanfile."
"cpp_info.libdirs`` (by default) or the **folder** argument (see below) "
"relative to the package folder. Useful to collect not inter-dependent "
"libraries or with complex names like ``libmylib-x86-debug-en.lib``."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:408
msgid ""
"from conan.tools.files import collect_libs\n"
"\n"
"def package_info(self):\n"
"    self.cpp_info.libdirs = [\"lib\", \"other_libdir\"]  # Default value is "
"'lib'\n"
"    self.cpp_info.libs = collect_libs(self)"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:416
msgid ""
"For UNIX libraries starting with **lib**, like *libmath.a*, this tool will "
"collect the library name **math**."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:418
msgid ""
"Regarding symlinks, this tool will keep only the \"most generic\" file among "
"the resolved real file and all symlinks pointing to this real file. For "
"example among files below, this tool will select *libmath.dylib* file and "
"therefore only append *math* in the returned list:"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:421
msgid ""
"-rwxr-xr-x libmath.1.0.0.dylib\n"
"lrwxr-xr-x libmath.1.dylib -> libmath.1.0.0.dylib\n"
"lrwxr-xr-x libmath.dylib -> libmath.1.dylib"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:430
#: ../../../reference/conanfile/tools/files/basic.rst:456
msgid "**Parameters:**"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:428
msgid ""
"**conanfile** (Required): A ``ConanFile`` object to get the "
"``package_folder`` and ``cpp_info``."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:429
msgid ""
"**folder** (Optional, Defaulted to ``None``): String indicating the "
"subfolder name inside ``conanfile.package_folder`` where the library files "
"are."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:434
msgid ""
"This tool collects the libraries searching directly inside the package "
"folder and returns them in no specific order. If libraries are inter-"
"dependent, then ``package_info()`` method should order them to achieve "
"correct linking order."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:440
msgid "conan.tools.files.move_folder_contents()"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:442
msgid "Available since Conan 1.60.0"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:444
msgid "def move_folder_contents(conanfile, src_folder, dst_folder)"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:449
msgid ""
"This function allows to replace the ``dst_folder`` contents with the "
"contents of ``src_folder``, also when ``src_folder`` is a children of "
"``dst_folder``."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:454
msgid ""
"**conanfile** (Required): A ``ConanFile`` object, always ``self`` inside a "
"recipe."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:455
msgid ""
"**src_folder** (Required): The folder which contents we want to move to "
"``dst_folder``"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:456
msgid "**dst_folder** (Required): The destination folder."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:458
msgid ""
"This helper function can help when using the ``scm`` capture strategy "
"instead of ``exports``, and  a ``git clone`` is cloning a whole repository, "
"but we want to process only a subfolder of it. This situation can happen in "
"mono-repo like projects, and also when using the ``self.folders.root = \".."
"\"`` ``layout()`` definition because the ``conanfile.py`` is not located in "
"the root of the repo, but in one subfolder."
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:463
msgid ""
"For example, for a project repository containing 2 subprojects, each one "
"with its own ``conanfile.py`` package definition:"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:465
msgid ""
"project\n"
" |- pkg1\n"
"      | - conanfile.py\n"
"      | - CMakeLists, cpp/h files, etc\n"
" |- pkg2\n"
"      | - conanfile.py\n"
"      | - CMakeLists, cpp/h files, etc"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:476
msgid ""
"Assuming the ``project`` is a Git repo, each ``conanfile.py`` recipe would "
"look like:"
msgstr ""

#: ../../../reference/conanfile/tools/files/basic.rst:478
msgid ""
"class Pkg(ConanFile):\n"
"   name = <package-name>\n"
"   version = <package-version>\n"
"\n"
"   # Each package will have its ``requires``\n"
"\n"
"   def export(self):\n"
"       git = Git(self, self.recipe_folder)\n"
"       scm_url, scm_commit = git.get_url_and_commit()\n"
"       folder = os.path.basename(self.recipe_folder)\n"
"       # Captures the Git repo and commit of \"project\", and folder name "
"(pkg1/pkg2)\n"
"       update_conandata(self, {{\"sources\": {{\"commit\": scm_commit, "
"\"url\": scm_url,\n"
"                                             \"folder\": folder}}}})\n"
"\n"
"   def layout(self):\n"
"       # this defines the location of each package sources wrt to itself\n"
"       self.folders.source = \".\"\n"
"\n"
"   def source(self):\n"
"       git = Git(self)\n"
"       sources = self.conan_data[\"sources\"]\n"
"       git.clone(url=sources[\"url\"], target=\".\")\n"
"       git.checkout(commit=sources[\"commit\"])\n"
"       # This created in the cache the full original \"project\" structure, "
"containing\n"
"       # both \"pkg1\" and \"pkg2\" subfolders, but we only want the "
"contents of the \"pkg1\"\n"
"       src_folder = os.path.join(self.source_folder, sources[\"folder\"]) # "
"the \"pkg1\" subfolder\n"
"       # replace the current self.source_folder with the \"pkg1\" subfolder "
"contents\n"
"       move_folder_contents(self, src_folder, self.source_folder)\n"
"       # now we have the same relative layout in the cache as we had in the "
"project clone"
msgstr ""
