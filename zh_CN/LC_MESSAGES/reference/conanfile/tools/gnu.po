# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2020, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.34\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/conanfile/tools/gnu.rst:4
msgid "conan.tools.gnu"
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:8
msgid ""
"This is an **experimental** feature subject to breaking changes in future "
"releases."
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:11
msgid "MakeToolchain"
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:13
msgid ""
"The `MakeToolchain` can be used in the ``generate()`` method of ``conanfile."
"py``:"
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:30
msgid ""
"from conans import ConanFile\n"
"from conan.tools.gnu import MakeToolchain\n"
"\n"
"class App(ConanFile):\n"
"    settings = \"os\", \"arch\", \"compiler\", \"build_type\"\n"
"    requires = \"hello/0.1\"\n"
"    options = {\"shared\": [True, False], \"fPIC\": [True, False]}\n"
"    default_options = {\"shared\": False, \"fPIC\": True}\n"
"\n"
"    def generate(self):\n"
"        tc = MakeToolchain(self)\n"
"        tc.generate()"
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:31
msgid ""
"The ``MakeToolchain`` will generate the following file during ``conan "
"install`` command (or before calling the ``build()`` method when the package "
"is being built in the cache): ``conan_toolchain.mak``. To use the variables "
"generated by Conan, include this file in your existing ``Makefile`` such as:"
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:39
msgid "include conan_toolchain.mak"
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:40
msgid "Or to make it optional:"
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:47
msgid "-include conan_toolchain.mak"
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:48
msgid ""
"``conan_toolchain.mak`` will contain the definitions of all the Make "
"variables related to the Conan options and settings for the current package, "
"platform, etc. This includes but is not limited to the following:"
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:52
msgid "Detection of target type: \"executable\", \"shared\" or \"static\""
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:54
msgid "Based on existance/value of a option named ``shared``"
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:56
msgid "Based on result, defines ``-shared`` linker flag"
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:58
msgid "Detection of ``fPIC``"
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:60
msgid "Based on existance/value of a option named ``fPIC``"
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:62
msgid "Combines with detection of target type above"
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:64
msgid "Sets ``-fPIC`` flag for compiler"
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:66
msgid "Sets ``-fPIC`` flag for linker when building shared library"
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:68
msgid "Sets ``-pie`` flag for linker when building executable"
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:70
msgid "Detection of ``build_type`` from Conan settings"
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:72
msgid "Sets -DNDEBUG flag for ``Release`` builds"
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:74
msgid "Definition of the C++ standard as necessary"
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:76
msgid "Definition of the standard library used for C++"
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:78
msgid "Definition of rpaths based on libpaths in conan cache"
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:80
msgid ""
"**NOTE**: Simply including this file will have no effect on your "
"``Makefile`` build."
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:83
msgid ""
"All variables in this file are prefixed with ``CONAN_TC_`` and so existing "
"makefiles will robably makes no references to variables with these names. "
"Users can modify their makefiles to make use of these variables by name.  "
"That is certainly supported, however such a process tighly couples Makefiles "
"to Conan which can be undesirable, so Conan provides an alternative. There "
"is list of well-known \"standard\"/\"conventional\" variables used within "
"**GnuMake**, **Autotools**, and other related tools:"
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:91
msgid ""
"`Gnu Make Well-Known Variables <https://www.gnu.org/software/make/manual/"
"html_node/Implicit-Variables.html>`_"
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:93
msgid ""
"The relevant content from the GnuMake manual is provided here for "
"convenience:"
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:95
msgid "CFLAGS Extra flags to give to the C compiler."
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:98
msgid "CXXFLAGS Extra flags to give to the C++ compiler."
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:101
msgid ""
"CPPFLAGS Extra flags to give to the C preprocessor and programs that use it "
"(the C and Fortran compilers)."
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:104
msgid ""
"LDFLAGS Extra flags to give to compilers when they are supposed to invoke "
"the linker, ‘ld’, such as -L. Libraries (-lfoo) should be added to the "
"LDLIBS variable instead."
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:108
msgid ""
"LDLIBS Library flags or names given to compilers when they are supposed to "
"invoke the linker, ‘ld’. LOADLIBES is a deprecated (but still supported) "
"alternative to LDLIBS. Non-library linker flags, such as -L, should go in "
"the LDFLAGS variable."
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:114
msgid ""
"To have the ``CONAN_TC_`` variables appended to these standard GnuMake "
"variables, simply add the following function call to your ``Makefile`` "
"somewhere after the ``include`` statement:"
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:118
msgid "``$(call CONAN_TC_SETUP)``"
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:120
msgid ""
"To be clear, this only has the desired \"automatic\" effect if your "
"``Makefile(s)`` all use of these standard variables in the conventional "
"way.  If your ``Makefile(s)``  use custom variables, you would need to teach "
"them to append/include/use the ``CONAN_TC_`` variables manually."
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:125
msgid ""
"Also, while we are appending \"standard\" variables in a seemingly sensible "
"way, this function makes a lot of assumptions which are likely not going to "
"hold true in many environments. The goal is to make as much of the behavior "
"configurable as possible. Based on user requests, we will continue to add "
"parameters to the constructor. If you would like a behavior added to the "
"list of configurable items, please provide feedback at: https://github.com/"
"conan-io/conan/issues"
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:134
msgid "definitions"
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:136
msgid ""
"This attribute allows defining preprocessor definitions the same way that "
"build helpers do:"
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:144
msgid ""
"def generate(self):\n"
"    tc = MakeToolchain(self)\n"
"    tc.preprocessor_definitions[\"MYVAR\"] = \"MyValue\"\n"
"    tc.generate()"
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:145
msgid "This will be translated to:"
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:147
msgid "``-DMYVAR=MYVAL`` being appended to the ``CONAN_TC_CPPFLAGS`` variable"
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:151
msgid "generators"
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:153
msgid ""
"The ``MakeGenerator`` is being developed in-tandem with this toolchain "
"because ideally they would be used in the same recipes and workflows. They "
"have consistent conventions and strategy, however they are currently "
"completely independent from each other. Thus, you can use this toolchain "
"without using the ``MakeGenerator``."
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:161
msgid "Using the toolchain in developer flow"
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:163
msgid ""
"One of the advantages of using Conan toolchains is that it provides exact "
"same \"toolchain-related\" variables that Conan will have within a recipe's "
"``build()`` method to the build system when the user calls the build system "
"directly in their workspace. This was not possible prior to Conan's "
"toolchain feature. Here's an example:"
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:180
msgid ""
"# Lets start in the folder containing a conanfile.py\n"
"# Add the toolchain method with the MakeToolchain as shown in the example\n"
"$ mkdir build && cd build\n"
"# Install both debug and release deps and create the toolchain\n"
"$ conan install ..\n"
"# Add the following lines to Makefile:\n"
"#    -include build/conan_toolchain.mak\n"
"#    $(call CONAN_TC_SETUP)\n"
"$ make"
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:181
msgid ""
"**NOTE** As stated previously, this will only have the desired effect if the "
"``Makefile`` makes conventional use of the standard variables."
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:184
msgid ""
"We can actually achieve the same goal without modifying the ``Makefile`` at "
"all, it simply requires passing a few more parameters to **GnuMake**."
msgstr ""

#: ../../../reference/conanfile/tools/gnu.rst:190
msgid ""
"$ conan install ..\n"
"$ make -E='include build/conan_toolchain.mak' -E='$(call CONAN_TC_SETUP)'"
msgstr ""
