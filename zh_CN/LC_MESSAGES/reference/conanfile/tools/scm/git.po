# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2022, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.62\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:05+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/conanfile/tools/scm/git.rst:4
msgid "Git"
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:8
msgid ""
"This feature is still **under development**, while it is recommended and "
"usable and we will try not to break them in future releases, some breaking "
"changes might still happen if necessary to prepare for the *Conan 2.0 "
"release*."
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:11
msgid ""
"This tool is intended to replace the current ``conans.tools.Git`` and the "
"current ``scm`` attribute, that will be removed in Conan 2.0."
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:13
msgid ""
"Available since: `1.46.0 <https://github.com/conan-io/conan/releases/"
"tag/1.46.0>`_"
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:16
msgid "constructor"
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:18
msgid "def __init__(self, conanfile, folder=\".\")"
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:23
msgid ""
"Construct a ``Git`` object, specifying the current directory, by default "
"``\".\"``, the current working directory."
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:27
msgid "get_commit()"
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:29
msgid "def get_commit(self)"
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:34
msgid ""
"Returns the current commit, with ``git rev-list HEAD -n 1 -- <folder>``. The "
"latest commit is returned, irrespective of local not committed changes."
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:38
msgid "get_remote_url()"
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:40
msgid "def get_remote_url(self, remote=\"origin\")"
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:45
msgid ""
"Obtains the URL of the ``remote`` git remote repository, with ``git remote -"
"v``"
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:49
#: ../../../reference/conanfile/tools/scm/git.rst:138
msgid ""
"This method will get the output from ``git remote -v``. If you added tokens "
"or credentials to the remote in the URL, they will be exposed. Credentials "
"shouldn't be added to git remotes definitions, but using a credentials "
"manager or similar mechanism. If you still want to use this approach, it is "
"your responsibility to strip the credentials from the result."
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:55
msgid "commit_in_remote()"
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:57
msgid "def commit_in_remote(self, commit, remote=\"origin\")"
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:62
msgid ""
"Checks that the given commit exists in the remote, with ``branch -r --"
"contains <commit>`` and checking an occurrence of a branch in that remote "
"exists."
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:66
msgid "is_dirty()"
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:68
msgid "def is_dirty(self)"
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:73
msgid "Returns if the current folder is dirty, running ``git status -s``"
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:78
msgid "get_repo_root()"
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:80
msgid "def get_repo_root(self)"
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:85
msgid ""
"Returns the current repository top folder with ``git rev-parse --show-"
"toplevel``"
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:90
msgid "clone()"
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:92
msgid "def clone(self, url, target=\"\", args=None)"
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:97
msgid ""
"Performs a ``git clone <url> <args> <target>`` operation, where `target` is "
"the target directory."
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:100
msgid "Optional arguments can be passed as a list, for example:"
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:102
msgid ""
"from conan import ConanFile\n"
"from conan.tools.scm import Git\n"
"\n"
"class App(ConanFile):\n"
"    version = \"1.2.3\"\n"
"\n"
"    def source(self):\n"
"        git = Git(self)\n"
"        clone_args = ['--depth', '1', '--branch', self.version]\n"
"        git.clone(url=\"https://path/to/repo.git\", args=clone_args)"
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:117
msgid "checkout()"
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:119
msgid "def checkout(self, commit)"
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:124
msgid "Checkouts the given commit"
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:128
msgid "get_url_and_commit()"
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:130
msgid ""
"def get_url_and_commit(self, remote=\"origin\")\n"
"    # returns a (url, commit) tuple"
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:143
msgid ""
"This is an advanced method, that returns both the current commit, and the "
"remote repository url. This method is intended to capture the current remote "
"coordinates for a package creation, so that can be used later to build again "
"from sources from the same commit. This is the behavior:"
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:147
msgid ""
"If the repository is dirty, it will raise an exception. Doesn't make sense "
"to capture coordinates of something dirty, as it will not be reproducible. "
"If there are local changes, and the user wants to test a local ``conan "
"create``, should commit the changes first (locally, not push the changes)."
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:150
msgid ""
"If the repository is not dirty, but the commit doesn't exist in the given "
"remote, the method will return that commit and the URL of the local user "
"checkout. This way, a package can be ``conan create`` created locally, "
"testing everything works, before pushing some changes to the remote."
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:153
msgid ""
"If the repository is not dirty, and the commit exists in the specified "
"remote, it will return that commit and the url of the remote."
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:158
msgid "included_files()"
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:160
msgid "Returns the list of files not ignored by ``.gitignore``"
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:162
msgid "def included_files(self):"
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:167
msgid ""
"This method runs ``git ls-files --full-name --others --cached --exclude-"
"standard`` and returns the result as a list. It can be used for implementing "
"a controlled ``export`` of files not gitignored, something like:"
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:170
msgid ""
"def export_sources(self):\n"
"    git = Git(self)\n"
"    included = git.included_files()\n"
"    for i in included:\n"
"        dst =  os.path.join(self.export_sources_folder, i)\n"
"        os.makedirs(os.path.dirname(dst), exist_ok=True)\n"
"        shutil.copy2(i, dst)"
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:182
msgid "fetch_commit()"
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:184
msgid ""
"Can be used to efficiently retrieve just 1 commit from the server, instead "
"of doing a full clone, which can be slower."
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:187
msgid ""
"def source(self):\n"
"    git = Git(self)\n"
"    git.fetch_commit(url=\"repo-url\", commit=\"specific-commit\")"
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:194
msgid ""
"Note that this can fail if the server does not support this fetch mode. Most "
"of modern servers like Github, Gitlab support it, but if you host your own "
"server, please check."
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:199
msgid "run()"
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:201
msgid ""
"Available since: `1.53.0 <https://github.com/conan-io/conan/releases/"
"tag/1.53.0>`_"
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:203
msgid "def run(self, cmd)"
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:208
msgid "Executes `git <cmd>` and returns the console output of the command."
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:210
msgid ""
"For example, if you want to print the git version, just pass ``cmd=\"--"
"version\"`` as argument:"
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:213
msgid ""
"import os\n"
"from conan import ConanFile\n"
"from conan.tools.scm import Git\n"
"\n"
"class Pkg(ConanFile):\n"
"    name = \"pkg\"\n"
"    version = \"0.1\"\n"
"\n"
"    def export(self):\n"
"        git = Git(self)\n"
"        self.output.info(git.run(\"--version\"))"
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:230
msgid "Example: Implementing the ``scm`` feature"
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:232
msgid ""
"This example is the new way to implement the ``scm`` feature (the ``scm`` "
"attribute will be removed in Conan 2.0, and the way it will survive is the "
"one described in this section), using this new ``Git`` capabilities."
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:234
msgid "Assume we have this project with this layout, in a git repository:"
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:236
msgid ""
"├── conanfile.py\n"
"├── CMakeLists.txt\n"
"├── src\n"
"│   └── hello.cpp"
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:244
msgid "And the conanfile.py is:"
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:247
msgid ""
"import os\n"
"from conan import ConanFile\n"
"from conan.tools.scm import Git\n"
"from conan.tools.files import load, update_conandata\n"
"\n"
"\n"
"class Pkg(ConanFile):\n"
"    name = \"pkg\"\n"
"    version = \"0.1\"\n"
"\n"
"    def export(self):\n"
"        git = Git(self, self.recipe_folder)\n"
"        scm_url, scm_commit = git.get_url_and_commit()\n"
"        # we store the current url and commit in conandata.yml\n"
"        update_conandata(self, {\"sources\": {\"commit\": scm_commit, "
"\"url\": scm_url}})\n"
"\n"
"    def layout(self):\n"
"        self.folders.source = \".\"\n"
"\n"
"    def source(self):\n"
"        # we recover the saved url and commit from conandata.yml and use "
"them to get sources\n"
"        git = Git(self)\n"
"        sources = self.conan_data[\"sources\"]\n"
"        git.clone(url=sources[\"url\"], target=\".\")\n"
"        git.checkout(commit=sources[\"commit\"])\n"
"\n"
"    def build(self):\n"
"        # build() will have access to the sources, obtained with the clone "
"in source()\n"
"        cmake = os.path.join(self.source_folder, \"CMakeLists.txt\")\n"
"        hello = os.path.join(self.source_folder, \"src/hello.cpp\")\n"
"        self.output.info(\"MYCMAKE-BUILD: {}\".format(load(self, cmake)))\n"
"        self.output.info(\"MYFILE-BUILD: {}\".format(load(self, hello)))"
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:283
msgid "This conanfile does:"
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:285
msgid ""
"In the ``export()`` method, it captures the url and commit, according to the "
"rules of ``get_url_and_commit()`` above"
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:286
msgid "The url and commit are saved in the ``conandata.yml``"
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:287
msgid ""
"These two first steps happen in the ``conan export`` or first part of "
"``conan create`` when the recipe is exported to the cache."
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:288
msgid ""
"When the recipe is building from sources in the cache, it will call the "
"``source()`` method which will clone and checkout from the user folder if "
"the commit is only local or from the git remote if the commit is remote too."
msgstr ""

#: ../../../reference/conanfile/tools/scm/git.rst:291
msgid ""
"This ``conan create`` flow is not recommended for continuous usage. To "
"develop and test, users should use the local flow (``conan install`` + build "
"system). Only in the last stage, to check that things are looking good to "
"push, the user can do a local commit, and before pushing, do a ``conan "
"create`` to check locally."
msgstr ""
