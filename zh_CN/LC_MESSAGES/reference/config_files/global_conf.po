# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2022, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.45\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:12+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/config_files/global_conf.rst:4
msgid "global.conf"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:8
msgid ""
"This new configuration mechanism is an **experimental** feature subject to "
"breaking changes in future releases."
msgstr ""

#: ../../../reference/config_files/global_conf.rst:11
msgid "The **global.conf** file is located in the Conan user home directory."
msgstr ""

#: ../../../reference/config_files/global_conf.rst:14
msgid "Global configuration"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:16
msgid ""
"``core:required_conan_version = expression`` allows defining a version "
"expression like ``>=1.30``. Conan will raise an error if its current version "
"does not satisfy the condition"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:17
msgid ""
"``core.package_id:msvc_visual_incompatible`` allows opting-out the fallback "
"from the new ``msvc`` compiler to the ``Visual Studio`` compiler existing "
"binaries"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:22
msgid "Tools configurations"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:24
msgid ""
"Tools and user configurations allows them to be defined both in the *global."
"conf* file and in profile files. Profile values will have priority over "
"globally defined ones in *global.conf*, and can be defined as:"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:27
msgid ""
"[settings]\n"
"...\n"
"\n"
"[conf]\n"
"tools.microsoft.msbuild:verbosity=Diagnostic\n"
"tools.microsoft.msbuild:max_cpu_count=2\n"
"tools.microsoft.msbuild:vs_version = 16\n"
"tools.build:jobs=10"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:39
msgid ""
"To list all possible configurations available, run :command:`conan config "
"list`."
msgstr ""

#: ../../../reference/config_files/global_conf.rst:41
msgid ""
"$ conan config list\n"
"Supported Conan *experimental* global.conf and [conf] properties:\n"
"core:required_conan_version: Raise if current version does not match the "
"defined range.\n"
"core:non_interactive: Disable interactive user input, raises error if input "
"necessary\n"
"core.package_id:msvc_visual_incompatible: Allows opting-out the fallback "
"from the new msvc compiler to the Visual Studio compiler existing binaries\n"
"core:default_profile: Defines the default host profile ('default' by "
"default)\n"
"core:default_build_profile: Defines the default build profile (None by "
"default)\n"
"core.upload:retry: Number of retries in case of failure when uploading to "
"Conan server\n"
"core.upload:retry_wait: Seconds to wait between upload attempts to Conan "
"server\n"
"core.download:parallel: Number of concurrent threads to download packages\n"
"core.download:retry: Number of retries in case of failure when downloading "
"from Conan server\n"
"core.download:retry_wait: Seconds to wait between download attempts from "
"Conan server\n"
"core.net.http:max_retries: Maximum number of connection retries (requests "
"library)\n"
"core.net.http:timeout: Number of seconds without response to timeout "
"(requests library)\n"
"core.net.http:no_proxy_match: List of urls to skip from proxies "
"configuration\n"
"core.net.http:proxies: Dictionary containing the proxy configuration\n"
"core.net.http:cacert_path: Path containing a custom Cacert file\n"
"core.net.http:client_cert: Path or tuple of files containing a client cert "
"(and key)\n"
"core.net.http:clean_system_proxy: If defined, the proxies system env-vars "
"will be discarded\n"
"core.gzip:compresslevel: The Gzip compresion level for Conan artifacts "
"(default=9)\n"
"tools.android:ndk_path: Argument for the CMAKE_ANDROID_NDK\n"
"tools.build:skip_test: Do not execute CMake.test() and Meson.test() when "
"enabled\n"
"tools.build:jobs: Default compile jobs number -jX Ninja, Make, /MP VS "
"(default: max CPUs)\n"
"tools.cmake.cmaketoolchain:generator: User defined CMake generator to use "
"instead of default\n"
"tools.cmake.cmaketoolchain:find_package_prefer_config: Argument for the "
"CMAKE_FIND_PACKAGE_PREFER_CONFIG\n"
"tools.cmake.cmaketoolchain:toolchain_file: Use other existing file rather "
"than conan_toolchain.cmake one\n"
"tools.cmake.cmaketoolchain:user_toolchain: Inject existing user toolchain at "
"the beginning of conan_toolchain.cmake\n"
"tools.cmake.cmaketoolchain:system_name: Define CMAKE_SYSTEM_NAME in "
"CMakeToolchain\n"
"tools.cmake.cmaketoolchain:system_version: Define CMAKE_SYSTEM_VERSION in "
"CMakeToolchain\n"
"tools.cmake.cmaketoolchain:system_processor: Define CMAKE_SYSTEM_PROCESSOR "
"in CMakeToolchain\n"
"tools.files.download:retry: Number of retries in case of failure when "
"downloading\n"
"tools.files.download:retry_wait: Seconds to wait between download attempts\n"
"tools.gnu:make_program: Indicate path to make program\n"
"tools.google.bazel:config: Define Bazel config file\n"
"tools.google.bazel:bazelrc_path: Defines Bazel rc-path\n"
"tools.microsoft.msbuild:verbosity: Verbosity level for MSBuild: 'Quiet', "
"'Minimal', 'Normal', 'Detailed', 'Diagnostic'\n"
"tools.microsoft.msbuild:vs_version: Defines the IDE version when using the "
"new msvc compiler\n"
"tools.microsoft.msbuild:max_cpu_count: Argument for the /m when running msvc "
"to build parallel projects\n"
"tools.microsoft.msbuild:installation_path: VS install path, to avoid auto-"
"detect via vswhere, like C:/Program Files (x86)/Microsoft Visual Studio/2019/"
"Community\n"
"tools.microsoft.msbuilddeps:exclude_code_analysis: Suppress MSBuild code "
"analysis for patterns\n"
"tools.microsoft.msbuildtoolchain:compile_options: Dictionary with MSBuild "
"compiler options\n"
"tools.intel:installation_path: Defines the Intel oneAPI installation root "
"path\n"
"tools.intel:setvars_args: Custom arguments to be passed onto the setvars.sh|"
"bat script from Intel oneAPI\n"
"tools.system.package_manager:tool: Default package manager tool: 'apt-get', "
"'yum', 'dnf', 'brew', 'pacman', 'choco', 'zypper', 'pkg' or 'pkgutil'\n"
"tools.system.package_manager:mode: Mode for package_manager tools: 'check' "
"or 'install'\n"
"tools.system.package_manager:sudo: Use 'sudo' when invoking the package "
"manager tools in Linux (False by default)\n"
"tools.system.package_manager:sudo_askpass: Use the '-A' argument if using "
"sudo in Linux to invoke the system package manager (False by default)"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:93
msgid "Configuration from tool_requires"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:95
msgid ""
"From Conan 1.37, it is possible to define configuration in packages that are "
"``tool_requires``. For example, assuming there is a package that bundles the "
"AndroidNDK, it could define the location of such NDK to the ``tools.android:"
"ndk_path`` configuration as:"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:100
msgid ""
"import os\n"
"from conans import ConanFile\n"
"\n"
"class Pkg(ConanFile):\n"
"    name = \"android_ndk\"\n"
"\n"
"    def package_info(self):\n"
"        self.conf_info[\"tools.android:ndk_path\"] = os.path.join(self."
"package_folder, \"ndk\")"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:112
msgid ""
"Note that this only propagates from the immediate, direct ``tool_requires`` "
"of a recipe."
msgstr ""
