# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2022, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.53\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:03+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/config_files/global_conf.rst:4
msgid "global.conf"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:8
msgid ""
"This new configuration mechanism is an **experimental** feature subject to "
"breaking changes in future releases."
msgstr ""

#: ../../../reference/config_files/global_conf.rst:11
msgid "The **global.conf** file is located in the Conan user home directory."
msgstr ""

#: ../../../reference/config_files/global_conf.rst:14
msgid "Global configuration"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:16
msgid ""
"``core:required_conan_version = expression`` allows defining a version "
"expression like ``>=1.30``. Conan will raise an error if its current version "
"does not satisfy the condition"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:19
msgid ""
"``core.package_id:msvc_visual_incompatible`` allows opting-out the fallback "
"from the new ``msvc`` compiler to the ``Visual Studio`` compiler existing "
"binaries"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:21
msgid ""
"``core:default_profile`` defines the default host profile ('default' by "
"default)"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:22
msgid ""
"``core:default_build_profile`` defines the default build profile (None by "
"default)"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:25
msgid "Tools configurations"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:27
msgid ""
"Tools and user configurations allows them to be defined both in the *global."
"conf* file and in profile files. Profile values will have priority over "
"globally defined ones in *global.conf*, and can be defined as:"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:30
msgid ""
"[settings]\n"
"...\n"
"\n"
"[conf]\n"
"tools.microsoft.msbuild:verbosity=Diagnostic\n"
"tools.microsoft.msbuild:max_cpu_count=2\n"
"tools.microsoft.msbuild:vs_version = 16\n"
"tools.build:jobs=10"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:42
msgid ""
"To list all possible configurations available, run :command:`conan config "
"list`."
msgstr ""

#: ../../../reference/config_files/global_conf.rst:44
msgid ""
"$ conan config list\n"
"\n"
"core.cache:storage_path: Absolute path where the packages and database are "
"stored\n"
"core.download:parallel: Number of concurrent threads to download packages\n"
"core.download:retry: Number of retries in case of failure when downloading "
"from Conan server\n"
"core.download:retry_wait: Seconds to wait between download attempts from "
"Conan server\n"
"core.gzip:compresslevel: The Gzip compresion level for Conan artifacts "
"(default=9)\n"
"core.net.http:cacert_path: Path containing a custom Cacert file\n"
"core.net.http:clean_system_proxy: If defined, the proxies system env-vars "
"will be discarded\n"
"core.net.http:client_cert: Path or tuple of files containing a client cert "
"(and key)\n"
"core.net.http:max_retries: Maximum number of connection retries (requests "
"library)\n"
"core.net.http:no_proxy_match: List of urls to skip from proxies "
"configuration\n"
"core.net.http:proxies: Dictionary containing the proxy configuration\n"
"core.net.http:timeout: Number of seconds without response to timeout "
"(requests library)\n"
"core.package_id:default_build_mode: By default, 'None'\n"
"core.package_id:default_embed_mode: By default, 'full_mode'\n"
"core.package_id:default_non_embed_mode: By default, 'minor_mode'\n"
"core.package_id:default_python_mode: By default, 'minor_mode'\n"
"core.package_id:default_unknown_mode: By default, 'semver_mode'\n"
"core.upload:retry: Number of retries in case of failure when uploading to "
"Conan server\n"
"core.upload:retry_wait: Seconds to wait between upload attempts to Conan "
"server\n"
"core:default_build_profile: Defines the default build profile (None by "
"default)\n"
"core:default_profile: Defines the default host profile ('default' by "
"default)\n"
"core:non_interactive: Disable interactive user input, raises error if input "
"necessary\n"
"core:required_conan_version: Raise if current version does not match the "
"defined range.\n"
"tools.android:ndk_path: Argument for the CMAKE_ANDROID_NDK\n"
"tools.apple.xcodebuild:verbosity: Verbosity level for xcodebuild: 'verbose' "
"or 'quiet\n"
"tools.apple:enable_arc: (boolean) Enable/Disable ARC Apple Clang flags\n"
"tools.apple:enable_bitcode: (boolean) Enable/Disable Bitcode Apple Clang "
"flags\n"
"tools.apple:enable_visibility: (boolean) Enable/Disable Visibility Apple "
"Clang flags\n"
"tools.apple:sdk_path: Path to the SDK to be used\n"
"tools.build.cross_building:can_run: Bool value that indicates whether is "
"possible to run a non-native app on the same architecture. It's used by "
"'can_run' tool\n"
"tools.build:cflags: List of extra C flags used by different toolchains like "
"CMakeToolchain, AutotoolsToolchain and MesonToolchain\n"
"tools.build:cxxflags: List of extra CXX flags used by different toolchains "
"like CMakeToolchain, AutotoolsToolchain and MesonToolchain\n"
"tools.build:defines: List of extra definition flags used by different "
"toolchains like CMakeToolchain and AutotoolsToolchain\n"
"tools.build:exelinkflags: List of extra flags used by CMakeToolchain for "
"CMAKE_EXE_LINKER_FLAGS_INIT variable\n"
"tools.build:jobs: Default compile jobs number -jX Ninja, Make, /MP VS "
"(default: max CPUs)\n"
"tools.build:sharedlinkflags: List of extra flags used by CMakeToolchain for "
"CMAKE_SHARED_LINKER_FLAGS_INIT variable\n"
"tools.build:skip_test: Do not execute CMake.test() and Meson.test() when "
"enabled\n"
"tools.build:sysroot: Pass the --sysroot=<tools.build:sysroot> flag if "
"available. (None by default)\n"
"tools.cmake.cmake_layout:build_folder_vars: Settings and Options that will "
"produce a different build folder and different CMake presets names\n"
"tools.cmake.cmaketoolchain.presets:max_schema_version: Generate "
"CMakeUserPreset.json compatible with the supplied schema version\n"
"tools.cmake.cmaketoolchain:find_package_prefer_config: Argument for the "
"CMAKE_FIND_PACKAGE_PREFER_CONFIG\n"
"tools.cmake.cmaketoolchain:generator: User defined CMake generator to use "
"instead of default\n"
"tools.cmake.cmaketoolchain:system_name: Define CMAKE_SYSTEM_NAME in "
"CMakeToolchain\n"
"tools.cmake.cmaketoolchain:system_processor: Define CMAKE_SYSTEM_PROCESSOR "
"in CMakeToolchain\n"
"tools.cmake.cmaketoolchain:system_version: Define CMAKE_SYSTEM_VERSION in "
"CMakeToolchain\n"
"tools.cmake.cmaketoolchain:toolchain_file: Use other existing file rather "
"than conan_toolchain.cmake one\n"
"tools.cmake.cmaketoolchain:toolset_arch: Toolset architecture to be used as "
"part of CMAKE_GENERATOR_TOOLSET in CMakeToolchain\n"
"tools.cmake.cmaketoolchain:user_toolchain: Inject existing user toolchains "
"at the beginning of conan_toolchain.cmake\n"
"tools.env.virtualenv:powershell: If it is set to True it will generate "
"powershell launchers if os=Windows\n"
"tools.files.download:retry: Number of retries in case of failure when "
"downloading\n"
"tools.files.download:retry_wait: Seconds to wait between download attempts\n"
"tools.gnu:define_libcxx11_abi: Force definition of GLIBCXX_USE_CXX11_ABI=1 "
"for libstdc++11\n"
"tools.gnu:make_program: Indicate path to make program\n"
"tools.gnu:pkg_config: Path to pkg-config executable used by PkgConfig build "
"helper\n"
"tools.google.bazel:bazelrc_path: Defines Bazel rc-path\n"
"tools.google.bazel:configs: Define Bazel config file\n"
"tools.info.package_id:confs: List of existing configuration to be part of "
"the package ID\n"
"tools.intel:installation_path: Defines the Intel oneAPI installation root "
"path\n"
"tools.intel:setvars_args: Custom arguments to be passed onto the setvars.sh|"
"bat script from Intel oneAPI\n"
"tools.meson.mesontoolchain:backend: Any Meson backend: ninja, vs, vs2010, "
"vs2012, vs2013, vs2015, vs2017, vs2019, xcode\n"
"tools.microsoft.bash:path: The path to the shell to run when conanfile."
"win_bash==True\n"
"tools.microsoft.bash:subsystem: The subsystem to be used when conanfile."
"win_bash==True. Possible values: msys2, msys, cygwin, wsl, sfu\n"
"tools.microsoft.msbuild:installation_path: VS install path, to avoid auto-"
"detect via vswhere, like C:/Program Files (x86)/Microsoft Visual Studio/2019/"
"Community\n"
"tools.microsoft.msbuild:max_cpu_count: Argument for the /m when running msvc "
"to build parallel projects\n"
"tools.microsoft.msbuild:verbosity: Verbosity level for MSBuild: 'Quiet', "
"'Minimal', 'Normal', 'Detailed', 'Diagnostic'\n"
"tools.microsoft.msbuild:vs_version: Defines the IDE version when using the "
"new msvc compiler\n"
"tools.microsoft.msbuilddeps:exclude_code_analysis: Suppress MSBuild code "
"analysis for patterns\n"
"tools.microsoft.msbuildtoolchain:compile_options: Dictionary with MSBuild "
"compiler options\n"
"tools.system.package_manager:mode: Mode for package_manager tools: 'check' "
"or 'install'\n"
"tools.system.package_manager:sudo: Use 'sudo' when invoking the package "
"manager tools in Linux (False by default)\n"
"tools.system.package_manager:sudo_askpass: Use the '-A' argument if using "
"sudo in Linux to invoke the system package manager (False by default)\n"
"tools.system.package_manager:tool: Default package manager tool: 'apt-get', "
"'yum', 'dnf', 'brew', 'pacman', 'choco', 'zypper', 'pkg' or 'pkgutil'"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:124
msgid ""
"This list may be outdated. Please, run the command :command:`conan config "
"list` to check the latest configurations."
msgstr ""

#: ../../../reference/config_files/global_conf.rst:128
msgid "Configuration file template"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:130
#: ../../../reference/config_files/global_conf.rst:151
#: ../../../reference/config_files/global_conf.rst:172
msgid ""
"Available since: `1.46.0 <https://github.com/conan-io/conan/releases/"
"tag/1.46.0>`_"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:132
msgid ""
"It is possible to use **jinja2** template engine for *global.conf*. When "
"Conan loads this file, immediately parses and renders the template, which "
"must result in a standard tools-configuration text."
msgstr ""

#: ../../../reference/config_files/global_conf.rst:None
msgid ""
"# Using all the cores automatically\n"
"tools.build:jobs={{os.cpu_count()}}\n"
"# Using the current OS\n"
"user.myconf.system:name = {{platform.system()}}"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:145
msgid ""
"The Python packages passed to render the template are only ``os`` and "
"``platform``."
msgstr ""

#: ../../../reference/config_files/global_conf.rst:149
msgid "Configuration data types"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:153
msgid ""
"All the values will be interpreted by Conan as the result of the python "
"built-in `eval()` function:"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:155
msgid ""
"# String\n"
"tools.microsoft.msbuild:verbosity=Diagnostic\n"
"# Boolean\n"
"tools.system.package_manager:sudo=True\n"
"# Integer\n"
"tools.microsoft.msbuild:max_cpu_count=2\n"
"# List of values\n"
"user.myconf.build:ldflags=[\"--flag1\", \"--flag2\"]\n"
"# Dictionary\n"
"tools.microsoft.msbuildtoolchain:compile_options={\"ExceptionHandling\": "
"\"Async\"}"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:170
msgid "Configuration data operators"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:174
msgid ""
"It's also possible to use some extra operators when you're composing tool "
"configurations in your *global.conf* or any of your profiles:"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:177
msgid ""
"``+=`` == ``append``: appends values at the end of the existing value (only "
"for lists)."
msgstr ""

#: ../../../reference/config_files/global_conf.rst:178
msgid ""
"``=+`` == ``prepend``: puts values at the beginning of the existing value "
"(only for lists)."
msgstr ""

#: ../../../reference/config_files/global_conf.rst:179
msgid "``=!`` == ``unset``: gets rid of any configuration value."
msgstr ""

#: ../../../reference/config_files/global_conf.rst:181
#: ../../../reference/config_files/global_conf.rst:214
msgid "*myprofile*"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:181
msgid ""
"[settings]\n"
"...\n"
"\n"
"[conf]\n"
"# Define the value => [\"-f1\"]\n"
"user.myconf.build:flags=[\"-f1\"]\n"
"\n"
"# Append the value [\"-f2\"] => [\"-f1\", \"-f2\"]\n"
"user.myconf.build:flags+=[\"-f2\"]\n"
"\n"
"# Prepend the value [\"-f0\"] => [\"-f0\", \"-f1\", \"-f2\"]\n"
"user.myconf.build:flags=+[\"-f0\"]\n"
"\n"
"# Unset the value\n"
"user.myconf.build:flags=!"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:202
msgid "Configuration in your profiles"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:204
msgid ""
"Let's see a little bit more complex example trying different configurations "
"coming from the *global.conf* and a simple profile:"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:206
msgid "*global.conf*"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:206
msgid ""
"# Defining several lists\n"
"user.myconf.build:ldflags=[\"--flag1 value1\"]\n"
"user.myconf.build:cflags=[\"--flag1 value1\"]"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:214
msgid ""
"[settings]\n"
"...\n"
"\n"
"[conf]\n"
"# Appending values into the existing list\n"
"user.myconf.build:ldflags+=[\"--flag2 value2\"]\n"
"\n"
"# Unsetting the existing value (it'd be like we define it as an empty "
"value)\n"
"user.myconf.build:cflags=!\n"
"\n"
"# Prepending values into the existing list\n"
"user.myconf.build:ldflags=+[\"--prefix prefix-value\"]"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:231
msgid ""
"Running, for instance, :command:`conan install . -pr myprofile`, the "
"configuration output will be something like:"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:233
msgid ""
"...\n"
"Configuration:\n"
"[settings]\n"
"[options]\n"
"[build_requires]\n"
"[env]\n"
"[conf]\n"
"user.myconf.build:cflags=!\n"
"user.myconf.build:ldflags=['--prefix prefix-value', '--flag1 value1', '--"
"flag2 value2']\n"
"..."
msgstr ""

#: ../../../reference/config_files/global_conf.rst:248
msgid "Configuration patterns"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:250
msgid ""
"You can use package patterns to apply the configuration in those "
"dependencies which are matching:"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:252
msgid ""
"*:tools.cmake.cmaketoolchain:generator=Ninja\n"
"zlib:tools.cmake.cmaketoolchain:generator=Visual Studio 16 2019"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:257
msgid ""
"This example shows you how to specify a general `generator` for all your "
"packages, but for `zlib` one. `zlib` is defining `Visual Studio 16 2019` as "
"its own generator."
msgstr ""

#: ../../../reference/config_files/global_conf.rst:260
msgid ""
"Besides that, it's quite relevant to say that **the order matters**. So, if "
"we change the order of the configuration lines above:"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:263
msgid ""
"zlib:tools.cmake.cmaketoolchain:generator=Visual Studio 16 2019\n"
"*:tools.cmake.cmaketoolchain:generator=Ninja"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:268
msgid ""
"The result is that you're specifying a general `generator` for all your "
"packages, and that's it. The `zlib` line has no effect because it's the "
"first one evaluated, and after that, Conan is overriding that specific "
"pattern with the most general one, so it deserves to pay special attention "
"to the order."
msgstr ""

#: ../../../reference/config_files/global_conf.rst:276
msgid "Configuration in your recipes"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:278
msgid ""
"From Conan 1.46, the user interface to manage the configurations in your "
"recipes has been improved. The ``self.conf_info`` object has the following "
"methods available:"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:281
msgid ""
"``get(name, default=None, check_type=None)``: gets the value for the given "
"configuration name. Besides that you can pass ``check_type`` to check the "
"Python type matches with the value type returned, e.g., ``check_type=list``. "
"If the configuration does not exist, ``default`` will be returned instead. "
"Notice that this ``default`` value won't be affected by the "
"``check_type=list`` param."
msgstr ""

#: ../../../reference/config_files/global_conf.rst:284
msgid ""
"``pop(name, default=None)``: removes (if exists) the configuration name "
"given. If the configuration does not exist, ``default`` will be returned "
"instead."
msgstr ""

#: ../../../reference/config_files/global_conf.rst:286
msgid ""
"``define(name, value)``: sets ``value`` for the given configuration name. If "
"it already exists, the configuration will be overwritten with the new value."
msgstr ""

#: ../../../reference/config_files/global_conf.rst:288
msgid ""
"``append(name, value)``: (only available for ``list``) appends ``value`` "
"into the existing list for the given configuration name. If the list does "
"not exist yet, it'll be created with the value given by default. ``value`` "
"can be a list or a single value."
msgstr ""

#: ../../../reference/config_files/global_conf.rst:290
msgid ""
"``prepend(name, value)``: (only available for ``list``) prepends ``value`` "
"into the existing list for the given configuration name. If the list does "
"not exist yet, it'll be created with the value given by default. ``value`` "
"can be a list or a single value."
msgstr ""

#: ../../../reference/config_files/global_conf.rst:292
msgid ""
"``update(name, value)``: (only available for ``dict``) updates the existing "
"dictionary with ``value`` for the given configuration name. If the dict does "
"not exist yet, it'll be created with the value given by default. ``value`` "
"must be another dictionary."
msgstr ""

#: ../../../reference/config_files/global_conf.rst:294
msgid ""
"``remove(name, value)``: (only available for ``dict`` and ``list``) removes "
"``value`` from the existing value for the given configuration name."
msgstr ""

#: ../../../reference/config_files/global_conf.rst:295
msgid ""
"``unset(name)``: removes any existing value for the given configuration "
"name. It's behaving like using ``define(name, None)``."
msgstr ""

#: ../../../reference/config_files/global_conf.rst:297
msgid "This example illustrates all of these methods:"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:299
msgid ""
"import os\n"
"from conan import ConanFile\n"
"\n"
"class Pkg(ConanFile):\n"
"    name = \"pkg\"\n"
"\n"
"    def package_info(self):\n"
"        # Setting values\n"
"        self.conf_info.define(\"tools.microsoft.msbuild:verbosity\", "
"\"Diagnostic\")\n"
"        self.conf_info.define(\"tools.system.package_manager:sudo\", True)\n"
"        self.conf_info.define(\"tools.microsoft.msbuild:max_cpu_count\", 2)\n"
"        self.conf_info.define(\"user.myconf.build:ldflags\", [\"--flag1\", "
"\"--flag2\"])\n"
"        self.conf_info.define(\"tools.microsoft.msbuildtoolchain:"
"compile_options\", {\"ExceptionHandling\": \"Async\"})\n"
"        # Getting values\n"
"        self.conf_info.get(\"tools.microsoft.msbuild:verbosity\")  # == "
"\"Diagnostic\"\n"
"        # Getting default values from configurations that don't exist yet\n"
"        self.conf_info.get(\"user.myotherconf.build:cxxflags\", default=[\"--"
"flag3\"])  # == [\"--flag3\"]\n"
"        # Getting values and ensuring the gotten type is the passed one "
"otherwise an exception will be raised\n"
"        self.conf_info.get(\"tools.system.package_manager:sudo\", "
"check_type=bool)  # == True\n"
"        self.conf_info.get(\"tools.system.package_manager:sudo\", "
"check_type=int)  # ERROR! It raises a ConanException\n"
"        # Modifying configuration list-like values\n"
"        self.conf_info.append(\"user.myconf.build:ldflags\", \"--flag3\")  # "
"== [\"--flag1\", \"--flag2\", \"--flag3\"]\n"
"        self.conf_info.prepend(\"user.myconf.build:ldflags\", \"--flag0\")  "
"# == [\"--flag0\", \"--flag1\", \"--flag2\", \"--flag3\"]\n"
"        # Modifying configuration dict-like values\n"
"        self.conf_info.update(\"tools.microsoft.msbuildtoolchain:"
"compile_options\", {\"ExpandAttributedSource\": \"false\"})\n"
"        # Unset any value\n"
"        self.conf_info.unset(\"tools.microsoft.msbuildtoolchain:"
"compile_options\")\n"
"        # Remove\n"
"        self.conf_info.remove(\"user.myconf.build:ldflags\", \"--flag1\")  # "
"== [\"--flag0\", \"--flag2\", \"--flag3\"]\n"
"        # Removing completely the configuration\n"
"        self.conf_info.pop(\"tools.system.package_manager:sudo\")"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:336
msgid ""
"Legacy configuration methods to set/get values like ``self."
"conf_info[\"xxxxx\"] = \"yyyyy\"`` and ``v = self.conf_info[\"xxxxx\"]`` are "
"deprecated since Conan 1.46 version. Use ``self.conf_info.define(\"xxxxx\", "
"\"yyyyy\")`` and ``v = self.conf_info.get(\"xxxxx\")`` instead like the "
"example above."
msgstr ""

#: ../../../reference/config_files/global_conf.rst:342
msgid "Configuration from tool_requires"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:344
msgid ""
"From Conan 1.37, it is possible to define configuration in packages that are "
"``tool_requires``. For example, assuming there is a package that bundles the "
"AndroidNDK, it could define the location of such NDK to the ``tools.android:"
"ndk_path`` configuration as:"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:349
msgid ""
"import os\n"
"from conan import ConanFile\n"
"\n"
"class Pkg(ConanFile):\n"
"    name = \"android_ndk\"\n"
"\n"
"    def package_info(self):\n"
"        self.conf_info.define(\"tools.android:ndk_path\", os.path.join(self."
"package_folder, \"ndk\"))"
msgstr ""

#: ../../../reference/config_files/global_conf.rst:361
msgid ""
"Note that this only propagates from the immediate, direct ``tool_requires`` "
"of a recipe."
msgstr ""
