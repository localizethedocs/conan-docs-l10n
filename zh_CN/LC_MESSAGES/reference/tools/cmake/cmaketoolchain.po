# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.16\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:31+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/tools/cmake/cmaketoolchain.rst:5
msgid "CMakeToolchain"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:8
msgid ""
"The ``CMakeToolchain`` is the toolchain generator for CMake. It produces the "
"toolchain file that can be used in the command line invocation of CMake with "
"the ``-DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake``. This generator "
"translates the current package configuration, settings, and options, into "
"CMake toolchain syntax."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:13
msgid "It can be declared as:"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:15
msgid ""
"from conan import ConanFile\n"
"\n"
"class Pkg(ConanFile):\n"
"    generators = \"CMakeToolchain\""
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:22
msgid "Or fully instantiated in the ``generate()`` method:"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:24
msgid ""
"from conan import ConanFile\n"
"from conan.tools.cmake import CMakeToolchain\n"
"\n"
"class App(ConanFile):\n"
"    settings = \"os\", \"arch\", \"compiler\", \"build_type\"\n"
"    requires = \"hello/0.1\"\n"
"    generators = \"CMakeDeps\"\n"
"    options = {\"shared\": [True, False], \"fPIC\": [True, False]}\n"
"    default_options = {\"shared\": False, \"fPIC\": True}\n"
"\n"
"    def generate(self):\n"
"        tc = CMakeToolchain(self)\n"
"        tc.variables[\"MYVAR\"] = \"MYVAR_VALUE\"\n"
"        tc.preprocessor_definitions[\"MYDEFINE\"] = \"MYDEF_VALUE\"\n"
"        tc.generate()"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:45
msgid ""
"The ``CMakeToolchain`` is intended to run with the ``CMakeDeps`` "
"dependencies generator. Please do not use other CMake legacy generators "
"(like ``cmake``, or ``cmake_paths``) with it."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:50
msgid "Generated files"
msgstr "生成的文件"

#: ../../../reference/tools/cmake/cmaketoolchain.rst:52
msgid ""
"This will generate the following files after a ``conan install`` (or when "
"building the package in the cache) with the information provided in the "
"``generate()`` method as well as information translated from the current "
"``settings``:"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:56
msgid ""
"**conan_toolchain.cmake**: containing the translation of Conan settings to "
"CMake variables. Some things that will be defined in this file:"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:59
msgid "Definition of the CMake generator platform and generator toolset"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:60
msgid ""
"Definition of the ``CMAKE_POSITION_INDEPENDENT_CODE``, based on ``fPIC`` "
"option."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:61
msgid "Definition of the C++ standard as necessary"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:62
msgid "Definition of the standard library used for C++"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:63
msgid "Deactivation of rpaths in OSX"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:64
msgid ""
"Definition of ``CMAKE_VS_DEBUGGER_ENVIRONMENT`` when on Windows with Visual "
"Studio. This sets up the ``PATH`` environment variable to point to "
"directories containing DLLs, to allow debugging directly from the Visual "
"Studio IDE without copying DLLs (requires CMake 3.27)."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:67
msgid ""
"Definition of ``CONAN_RUNTIME_LIB_DIRS`` to allow collecting runtime "
"dependencies (shared libraries), see below for details."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:70
msgid ""
"**conanvcvars.bat**: In some cases, the Visual Studio environment needs to "
"be defined correctly for building, like when using the Ninja or NMake "
"generators. If necessary, the ``CMakeToolchain`` will generate this script, "
"so defining the correct Visual Studio prompt is easier."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:75
msgid ""
"**CMakePresets.json**: This toolchain generates a standard `CMakePresets."
"json` file. For more information, refer to the documentation `here <https://"
"cmake.org/cmake/help/latest/manual/cmake-presets.7.html>`_. It currently "
"uses version \"3\" of the JSON schema. Conan adds *configure*, *build*, and "
"*test* preset entries to the JSON file:"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:106
msgid "`configurePresets` storing the following information:"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:82
msgid "The `generator` to be used."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:83
msgid "The path to the `conan_toolchain.cmake`."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:84
msgid ""
"Cache variables corresponding to the specified settings that cannot work if "
"specified in the toolchain."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:86
msgid "The `CMAKE_BUILD_TYPE` variable for single-configuration generators."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:87
msgid ""
"The `BUILD_TESTING` variable set to `OFF` when the configuration `tools."
"build:skip_test` is true."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:89
msgid ""
"An environment section, setting all the environment information related to "
"the :ref:`VirtualBuildEnv<conan_tools_env_virtualbuildenv>`, if applicable. "
"This environment can be modified in the `generate()` method of the recipe by "
"passing an environment through the `CMakeToolchain."
"presets_build_environment` attribute. Generation of this section can be "
"skipped by using the `tools.cmake.cmaketoolchain:presets_environment` "
"configuration."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:95
msgid ""
"By default, preset names will be `conan-xxxx`, but the \"conan-\" prefix can "
"be customized with the `CMakeToolchain.presets_prefix = \"conan\"` attribute."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:97
msgid ""
"Preset names are controlled by the `layout()` `self.folders."
"build_folder_vars` definition, which can contain a list of settings, "
"options, ``self.name`` and ``self.version`` and constants ``const.xxx`` like "
"`[\"settings.compiler\", \"settings.arch\", \"options.shared\", \"const."
"myname\"]`."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:101
msgid ""
"If CMake is found as a direct `tool_requires` dependency, or if `tools.cmake:"
"cmake_program` is set, the configure preset will include a `cmakeExecutable` "
"field. This field represents the path to the CMake executable to be used for "
"this preset. As stated in the CMake documentation, this field is reserved "
"for use by IDEs and is not utilized by CMake itself."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:109
msgid "`buildPresets` storing the following information:"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:109
#: ../../../reference/tools/cmake/cmaketoolchain.rst:112
msgid "The `configurePreset` associated with this build preset."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:119
msgid "`testPresets` storing the following information:"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:113
msgid ""
"An environment section, setting all the environment information related to "
"the :ref:`VirtualRunEnv<conan_tools_env_virtualrunenv>`, if applicable. This "
"environment can be modified in the `generate()` method of the recipe by "
"passing an environment through the `CMakeToolchain.presets_run_environment` "
"attribute. Please note that since this preset inherits from a "
"`configurePreset`, it will also inherit its environment. Generation of this "
"section can be skipped by using the`tools.cmake.cmaketoolchain:"
"presets_environment` configuration."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:121
msgid ""
"**CMakeUserPresets.json**:  If you declare a ``layout()`` in the recipe and "
"your ``CMakeLists.txt`` file is found at the ``conanfile.source_folder`` "
"folder, a ``CMakeUserPresets.json`` file will be generated (if doesn't exist "
"already) including automatically the ``CMakePresets.json`` (at the "
"``conanfile.generators_folder``) to allow your IDE (Visual Studio, Visual "
"Studio Code, CLion...) or ``cmake`` tool to locate the ``CMakePresets."
"json``. The location of the generated ``CMakeUserPresets.json`` can be "
"further tweaked by the ``user_presets_path`` attribute, as documented below. "
"The version schema of the generated ``CMakeUserPresets.json`` is \"4\" and "
"requires CMake >= 3.23. The file name of this file can be configured with "
"the ``CMakeToolchain.user_presets_path = \"CMakeUserPresets.json\"``` "
"attribute, so if you want to generate a \"ConanPresets.json\" instead to be "
"included from your own file, you can define ``tc.user_presets_path = "
"\"ConanPresets.json\"`` in the ``generate()`` method. See :ref:`extending "
"your own CMake presets<examples-tools-cmake-toolchain-build-project-extend-"
"presets>` for a full example."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:135
msgid ""
"**Note:** Conan will skip the generation of the ``CMakeUserPresets.json`` if "
"it already exists and was not generated by Conan."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:138
msgid ""
"**Note:** To list all available presets, use the ``cmake --list-presets`` "
"command:"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:142
msgid ""
"The version schema of the generated ``CMakeUserPresets.json`` is 4 "
"(compatible with CMake>=3.23) and the schema for the ``CMakePresets.json`` "
"is 3 (compatible with CMake>=3.21)."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:148
msgid "CONAN_RUNTIME_LIB_DIRS"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:150
msgid ""
"This variable in the generated ``conan_toolchain.cmake`` file contains a "
"list of directories that contain runtime libraries (like DLLs) from all "
"dependencies in the host context. This is intended to be used when relying "
"on CMake functionality to collect shared libraries to create a relocatable "
"bundle, as per the example below."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:157
msgid ""
"Just pass the ``CONAN_RUNTIME_LIB_DIRS`` variable to the ``DIRECTORIES`` "
"argument in the ``install(RUNTIME_DEPENDENCY_SET ...)``` invocation."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:160
msgid ""
"install(RUNTIME_DEPENDENCY_SET my_app_deps\n"
"    PRE_EXCLUDE_REGEXES\n"
"        [[api-ms-win-.*]]\n"
"        [[ext-ms-.*]]\n"
"        [[kernel32\\.dll]]\n"
"        [[libc\\.so\\..*]] [[libgcc_s\\.so\\..*]] [[libm\\.so\\..*]] "
"[[libstdc\\+\\+\\.so\\..*]]\n"
"    POST_EXCLUDE_REGEXES\n"
"        [[.*/system32/.*\\.dll]]\n"
"        [[^/lib.*]]\n"
"        [[^/usr/lib.*]]\n"
"    DIRECTORIES ${CONAN_RUNTIME_LIB_DIRS}\n"
")"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:177
msgid "Customization"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:180
msgid "preprocessor_definitions"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:182
msgid ""
"This attribute allows defining compiler preprocessor definitions, for "
"multiple configurations (Debug, Release, etc)."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:184
msgid ""
"def generate(self):\n"
"    tc = CMakeToolchain(self)\n"
"    tc.preprocessor_definitions[\"MYDEF\"] = \"MyValue\"\n"
"    tc.preprocessor_definitions.debug[\"MYCONFIGDEF\"] = \"MyDebugValue\"\n"
"    tc.preprocessor_definitions.release[\"MYCONFIGDEF\"] = "
"\"MyReleaseValue\"\n"
"    # Setting to None will add the definition with no value\n"
"    tc.preprocessor_definitions[\"NOVALUE_DEF\"] = None\n"
"    tc.generate()"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:195
#: ../../../reference/tools/cmake/cmaketoolchain.rst:241
msgid "This will be translated to:"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:197
msgid ""
"One ``add_compile_definitions()`` definition for ``MYDEF`` in "
"``conan_toolchain.cmake`` file."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:198
msgid ""
"One ``add_compile_definitions()`` definition, using a cmake generator "
"expression in ``conan_toolchain.cmake`` file, using the different values for "
"different configurations."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:204
msgid "cache_variables"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:206
msgid ""
"This attribute allows defining CMake cache-variables. These variables, "
"unlike the ``variables``, are single-config. They will be stored in the "
"``CMakePresets.json`` file (at the `cacheVariables` in the "
"`configurePreset`) and will be applied with ``-D`` arguments when calling "
"``cmake.configure`` using the :ref:`CMake() build helper<conan_tools_cmake>`."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:211
msgid ""
"def generate(self):\n"
"    tc = CMakeToolchain(self)\n"
"    tc.cache_variables[\"foo\"] = True\n"
"    tc.cache_variables[\"foo2\"] = False\n"
"    tc.cache_variables[\"var\"] = \"23\""
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:219
msgid ""
"The booleans assigned to a cache_variable will be translated to ``ON`` and "
"``OFF`` symbols in CMake."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:222
msgid "variables"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:224
msgid ""
"This attribute allows defining CMake variables, for multiple configurations "
"(Debug, Release, etc). These variables should be used to define things "
"related to the toolchain and for the majority of cases :ref:"
"`cache_variables<conan-cmake-toolchain-cache_variables>` is what you "
"probably want to use. Also, take into account that as these variables are "
"defined inside the *conan_toolchain.cmake* file, and the toolchain is loaded "
"several times by CMake, the definition of these variables will be done at "
"those points as well."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:232
msgid ""
"def generate(self):\n"
"    tc = CMakeToolchain(self)\n"
"    tc.variables[\"MYVAR\"] = \"MyValue\"\n"
"    tc.variables.debug[\"MYCONFIGVAR\"] = \"MyDebugValue\"\n"
"    tc.variables.release[\"MYCONFIGVAR\"] = \"MyReleaseValue\"\n"
"    tc.generate()"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:243
msgid ""
"One ``set()`` definition for ``MYVAR`` in ``conan_toolchain.cmake`` file."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:244
msgid ""
"One ``set()`` definition, using a cmake generator expression in "
"``conan_toolchain.cmake`` file, using the different values for different "
"configurations."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:247
msgid ""
"The booleans assigned to a variable will be translated to ``ON`` and ``OFF`` "
"symbols in CMake:"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:249
msgid ""
"def generate(self):\n"
"    tc = CMakeToolchain(self)\n"
"    tc.variables[\"FOO\"] = True\n"
"    tc.variables[\"VAR\"] = False\n"
"    tc.generate()"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:258
msgid ""
"Will generate the sentences: ``set(FOO ON ...)`` and ``set(VAR OFF ...)``."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:262
msgid "user_presets_path"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:264
msgid ""
"This attribute allows specifying the location of the generated "
"``CMakeUserPresets.json`` file. Accepted values:"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:267
msgid "An absolute path"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:268
msgid "A path relative to ``self.source_folder``"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:269
msgid ""
"The boolean value ``False``, to suppress the generation of the file "
"altogether."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:271
msgid ""
"For example, we can prevent the generator from creating ``CMakeUserPresets."
"json`` in the following way:"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:274
msgid ""
"def generate(self):\n"
"    tc = CMakeToolchain(self)\n"
"    tc.user_presets_path = False\n"
"    tc.generate()"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:281
msgid ""
"It's also possible to use the ``tools.cmake.cmaketoolchain:user_presets`` "
"experimental configuration to change the name and location of the "
"``CMakeUserPresets.json`` file. Assigning it to an empty string will disable "
"the generation of the file. Please check the :ref:`conf section<conan-cmake-"
"toolchain_conf>` for more information."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:285
msgid "presets_build_environment, presets_run_environment"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:287
msgid ""
"These attributes enable the modification of the build and run environments "
"associated with the presets, respectively, by assigning an :ref:"
"`Environment<conan_tools_env_environment_model>`. This can be accomplished "
"in the `generate()` method."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:292
msgid ""
"For example, you can override the value of an environment variable already "
"set in the build environment:"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:295
msgid ""
"def generate(self):\n"
"    buildenv = VirtualBuildEnv(self)\n"
"    buildenv.environment().define(\"MY_BUILD_VAR\", "
"\"MY_BUILDVAR_VALUE_OVERRIDDEN\")\n"
"    buildenv.generate()\n"
"\n"
"    tc = CMakeToolchain(self)\n"
"    tc.presets_build_environment = buildenv.environment()\n"
"    tc.generate()"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:306
msgid ""
"Or generate a new environment and compose it with an already existing one:"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:308
msgid ""
"def generate(self):\n"
"    runenv = VirtualRunEnv(self)\n"
"    runenv.environment().define(\"MY_RUN_VAR\", "
"\"MY_RUNVAR_SET_IN_GENERATE\")\n"
"    runenv.generate()\n"
"\n"
"    env = Environment()\n"
"    env.define(\"MY_ENV_VAR\", \"MY_ENV_VAR_VALUE\")\n"
"    env = env.vars(self, scope=\"run\")\n"
"    env.save_script(\"other_env\")\n"
"\n"
"    tc = CMakeToolchain(self)\n"
"    tc.presets_run_environment = runenv.environment().compose_env(env)\n"
"    tc.generate()"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:326
msgid "Extra compilation flags"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:328
msgid ""
"You can use the following attributes to append extra compilation flags to "
"the toolchain:"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:330
msgid "**extra_cxxflags** (defaulted to ``[]``) for additional cxxflags"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:331
msgid "**extra_cflags** (defaulted to ``[]``) for additional cflags"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:332
msgid ""
"**extra_sharedlinkflags** (defaulted to ``[]``) for additional shared link "
"flags"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:333
msgid ""
"**extra_exelinkflags** (defaulted to ``[]``) for additional exe link flags"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:337
msgid ""
"**flags order of preference**: Flags specified in the `tools.build` "
"configuration, such as `cxxflags`, `cflags`, `sharedlinkflags` and "
"`exelinkflags`, will always take precedence over those set by the "
"CMakeToolchain attributes."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:343
msgid "presets_prefix"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:345
msgid ""
"By default it is ``\"conan\"``, and it will generate CMake presets named "
"\"conan-xxxx\". This is done to avoid potential name clashes with users own "
"presets."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:350
msgid "absolute_paths"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:352
msgid ""
"By default, ``CMakeToolchain`` will generate relative paths. For example the "
"``CMakeUserPresets.json`` will have a relative path to the included "
"``CMakePresets.json`` (both files generated by ``CMakeToolchain``), and the "
"``CMakePresets.json`` file will have a relative path to the "
"``conan_toolchain.cmake`` file defined in its ``toolchainFile`` field, that "
"will be relative to the build folder, as specified by the CMake presets "
"documentation."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:357
msgid ""
"If for some reason using absolute paths was desired, it is possible to do it "
"with:"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:359
msgid ""
"def generate(self):\n"
"    tc = CMakeToolchain(self)\n"
"    tc.absolute_paths = True\n"
"    tc.generate()"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:368
msgid "Using a custom toolchain file"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:370
msgid "There are two ways of providing custom CMake toolchain files:"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:372
msgid ""
"The ``conan_toolchain.cmake`` file can be completely skipped and replaced by "
"a user one, defining the ``tools.cmake.cmaketoolchain:"
"toolchain_file=<filepath>`` configuration value. Note this approach will "
"translate all the toolchain responsibility to the user provided toolchain, "
"but things like locating the necessary ``xxx-config.cmake`` files from "
"dependencies can be challenging without some help. For this reason, using "
"the following ``tools.cmake.cmaketoolchain:user_toolchain`` is recommended "
"in most cases, and if necessary, using ``tools.cmake.cmaketoolchain:"
"enabled_blocks`` can be used."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:378
msgid ""
"A custom user toolchain file can be added (included from) to the "
"``conan_toolchain.cmake`` one, by using the ``user_toolchain`` block "
"described below, and defining the ``tools.cmake.cmaketoolchain:"
"user_toolchain=[\"<filepath>\"]`` configuration value."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:382
msgid ""
"The configuration ``tools.cmake.cmaketoolchain:"
"user_toolchain=[\"<filepath>\"]`` can be defined in the ``global.conf``. but "
"also creating a Conan package for your toolchain and using ``self."
"conf_info`` to declare the toolchain file:"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:385
msgid ""
"import os\n"
"from conan import ConanFile\n"
"class MyToolchainPackage(ConanFile):\n"
"    ...\n"
"    def package_info(self):\n"
"        f = os.path.join(self.package_folder, \"mytoolchain.cmake\")\n"
"        self.conf_info.define(\"tools.cmake.cmaketoolchain:user_toolchain\", "
"[f])"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:396
msgid ""
"If you declare the previous package as a ``tool_require``, the toolchain "
"will be automatically applied."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:397
msgid ""
"If you have more than one ``tool_requires`` defined, you can easily append "
"all the user toolchain values together using the ``append`` method in each "
"of them, for instance:"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:400
msgid ""
"import os\n"
"from conan import ConanFile\n"
"class MyToolRequire(ConanFile):\n"
"    ...\n"
"    def package_info(self):\n"
"        f = os.path.join(self.package_folder, \"mytoolchain.cmake\")\n"
"        # Appending the value to any existing one\n"
"        self.conf_info.append(\"tools.cmake.cmaketoolchain:user_toolchain\", "
"f)"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:412
msgid ""
"So, they'll be automatically applied by your ``CMakeToolchain`` generator "
"without writing any extra code:"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:414
msgid ""
"from conan import ConanFile\n"
"from conan.tools.cmake import CMake\n"
"class Pkg(ConanFile):\n"
"    settings = \"os\", \"compiler\", \"arch\", \"build_type\"\n"
"    exports_sources = \"CMakeLists.txt\"\n"
"    tool_requires = \"toolchain1/0.1\", \"toolchain2/0.1\"\n"
"    generators = \"CMakeToolchain\"\n"
"\n"
"    def build(self):\n"
"        cmake = CMake(self)\n"
"        cmake.configure()"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:431
msgid "**Important notes**"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:433
msgid ""
"In most cases, ``tools.cmake.cmaketoolchain:user_toolchain`` will be "
"preferred over ``tools.cmake.cmaketoolchain:toolchain_file``"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:434
msgid ""
"The ``user_toolchain`` files can define variables for cross-building, such "
"as ``CMAKE_SYSTEM_NAME``, ``CMAKE_SYSTEM_VERSION`` and "
"``CMAKE_SYSTEM_PROCESSOR``. If these variables are defined in the user "
"toolchain file, they will be respected, and the ``conan_toolchain.cmake`` "
"deduced ones will not overwrite the user defined ones. If those variables "
"are not defined in the user toolchain file, then the Conan automatically "
"deduced ones will be used. Those variables defined in the ``user_toolchain`` "
"files will also have higher precedence than the configuration defined ones "
"like ``tools.cmake.cmaketoolchain:system_name``."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:439
msgid ""
"The usage of ``tools.cmake.cmaketoolchain:enabled_blocks`` can be used "
"together with ``tools.cmake.cmaketoolchain:user_toolchain`` to enable only "
"certain blocks but avoid CMakeToolchain to override CMake values defined in "
"the user toolchain file."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:445
msgid "Extending and advanced customization"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:447
msgid ""
"``CMakeToolchain`` implements a powerful capability for extending and "
"customizing the resulting toolchain file."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:449
msgid ""
"The contents are organized by ``blocks`` that can be customized. The "
"following predefined blocks are available, and added in this order:"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:452
msgid ""
"**user_toolchain**: Allows to include user toolchains from the "
"``conan_toolchain.cmake`` file. If the configuration ``tools.cmake."
"cmaketoolchain:user_toolchain=[\"xxxx\", \"yyyy\"]`` is defined, its values "
"will be ``include(xxx)\\ninclude(yyyy)`` as the first lines in "
"``conan_toolchain.cmake``."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:455
msgid ""
"**generic_system**: Defines ``CMAKE_SYSTEM_NAME``, ``CMAKE_SYSTEM_VERSION``, "
"``CMAKE_SYSTEM_PROCESSOR``, ``CMAKE_GENERATOR_PLATFORM``, "
"``CMAKE_GENERATOR_TOOLSET``"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:457
msgid ""
"**compilers**: Defines ``CMAKE_<LANG>_COMPILER`` for different languages, as "
"defined by ``tools.build:compiler_executables`` configuration."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:458
msgid ""
"**android_system**: Defines ``ANDROID_PLATFORM``, ``ANDROID_STL``, "
"``ANDROID_ABI`` and includes ``ANDROID_NDK_PATH/build/cmake/android."
"toolchain.cmake`` where ``ANDROID_NDK_PATH`` comes defined in ``tools."
"android:ndk_path`` configuration value."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:460
msgid ""
"**apple_system**: Defines ``CMAKE_OSX_ARCHITECTURES`` (see the :ref:"
"`universal binaries "
"section<conan_tools_cmaketoolchain_universal_binaries>`), "
"``CMAKE_OSX_SYSROOT`` for Apple systems."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:461
msgid ""
"**fpic**: Defines the ``CMAKE_POSITION_INDEPENDENT_CODE`` when there is a "
"``options.fPIC``"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:462
msgid "**arch_flags**: Defines C/C++ flags like ``-m32, -m64`` when necessary."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:463
msgid "**linker_scripts**: Defines the flags for any provided linker scripts."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:464
msgid ""
"**libcxx**: Defines ``-stdlib=libc++`` flag when necessary as well as "
"``_GLIBCXX_USE_CXX11_ABI``."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:465
msgid ""
"**vs_runtime**: Defines the ``CMAKE_MSVC_RUNTIME_LIBRARY`` variable, as a "
"generator expression for multiple configurations."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:466
msgid "**cppstd**: defines ``CMAKE_CXX_STANDARD``, ``CMAKE_CXX_EXTENSIONS``"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:467
msgid "**parallel**: defines ``/MP`` parallel build flag for Visual."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:468
msgid ""
"**cmake_flags_init**: defines ``CMAKE_XXX_FLAGS`` variables based on "
"previously defined Conan variables. The blocks above only define "
"``CONAN_XXX`` variables, and this block will define CMake ones like "
"``set(CMAKE_CXX_FLAGS_INIT \"${CONAN_CXX_FLAGS}\" CACHE STRING \"\" "
"FORCE)```."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:469
msgid ""
"**try_compile**: Stop processing the toolchain, skipping the blocks below "
"this one, if ``IN_TRY_COMPILE`` CMake property is defined."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:470
msgid ""
"**find_paths**: Defines ``CMAKE_FIND_PACKAGE_PREFER_CONFIG``, "
"``CMAKE_MODULE_PATH``, ``CMAKE_PREFIX_PATH`` so the generated files from "
"``CMakeDeps`` are found."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:471
msgid ""
"**rpath**: Defines ``CMAKE_SKIP_RPATH``. By default it is disabled, and it "
"is needed to define ``self.blocks[\"rpath\"].skip_rpath=True`` if you want "
"to activate ``CMAKE_SKIP_RPATH``"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:472
msgid "**shared**: defines ``BUILD_SHARED_LIBS``."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:473
msgid "**output_dirs**: Define the ``CMAKE_INSTALL_XXX`` variables."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:475
msgid ""
"**CMAKE_INSTALL_PREFIX**: Is set with the ``package_folder``, so if a "
"\"cmake install\" operation is run, the artifacts go to that location."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:477
msgid ""
"**CMAKE_INSTALL_BINDIR**, **CMAKE_INSTALL_SBINDIR** and "
"**CMAKE_INSTALL_LIBEXECDIR**: Set by default to ``bin``."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:478
msgid "**CMAKE_INSTALL_LIBDIR**: Set by default to ``lib``."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:479
msgid ""
"**CMAKE_INSTALL_INCLUDEDIR** and **CMAKE_INSTALL_OLDINCLUDEDIR**: Set by "
"default to ``include``."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:480
msgid "**CMAKE_INSTALL_DATAROOTDIR**: Set by default to ``res``."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:482
msgid ""
"If you want to change the default values, adjust the ``cpp.package`` object "
"at the ``layout()`` method:"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:484
msgid ""
"def layout(self):\n"
"    ...\n"
"    # For CMAKE_INSTALL_BINDIR, CMAKE_INSTALL_SBINDIR and "
"CMAKE_INSTALL_LIBEXECDIR, takes the first value:\n"
"    self.cpp.package.bindirs = [\"mybin\"]\n"
"    # For CMAKE_INSTALL_LIBDIR, takes the first value:\n"
"    self.cpp.package.libdirs = [\"mylib\"]\n"
"    # For CMAKE_INSTALL_INCLUDEDIR, CMAKE_INSTALL_OLDINCLUDEDIR, takes the "
"first value:\n"
"    self.cpp.package.includedirs = [\"myinclude\"]\n"
"    # For CMAKE_INSTALL_DATAROOTDIR, takes the first value:\n"
"    self.cpp.package.resdirs = [\"myres\"]"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:499
msgid ""
"It is **not valid** to change the self.cpp_info  at the ``package_info()`` "
"method, the ``self.cpp.package`` needs to be defined instead."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:502
msgid ""
"**variables**: Define CMake variables from the ``CMakeToolchain.variables`` "
"attribute."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:503
msgid ""
"**preprocessor**: Define preprocessor directives from ``CMakeToolchain."
"preprocessor_definitions`` attribute"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:507
msgid "Customizing the content blocks"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:509
msgid ""
"Every block can be customized in different ways (recall to call ``tc."
"generate()`` after the customization):"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:511
msgid ""
"# tc.generate() should be called at the end of every one\n"
"\n"
"# remove an existing block, the generated conan_toolchain.cmake\n"
"# will not contain code for that block at all\n"
"def generate(self):\n"
"    tc = CMakeToolchain(self)\n"
"    tc.blocks.remove(\"generic_system\")\n"
"\n"
"# remove several blocks\n"
"def generate(self):\n"
"    tc = CMakeToolchain(self)\n"
"    tc.blocks.remove(\"generic_system\", \"cmake_flags_init\")\n"
"\n"
"# LEGACY: keep one block, remove all the others\n"
"# If you want to generate conan_toolchain.cmake with only that\n"
"# block. Use \"tc.blocks.enabled()\" instead\n"
"def generate(self):\n"
"    tc = CMakeToolchain(self)\n"
"    # this still leaves blocks \"variables\" and \"preprocessor\"\n"
"    # use \"tc.blocks.enabled()\"\" instead\n"
"    tc.blocks.select(\"generic_system\")\n"
"\n"
"# LEGACY: keep several blocks, remove the other blocks\n"
"# Use \"tc.blocks.enabled()\" instead\n"
"def generate(self):\n"
"    tc = CMakeToolchain(self)\n"
"    # this still leaves blocks \"variables\" and \"preprocessor\"\n"
"    # use \"tc.blocks.enabled()\" instead\n"
"    tc.blocks.select(\"generic_system\", \"cmake_flags_init\")\n"
"\n"
"# keep several blocks, remove the other blocks\n"
"# This can be done from configuration with\n"
"# tools.cmake.cmaketoolchain:enabled_blocs\n"
"def generate(self):\n"
"    tc = CMakeToolchain(self)\n"
"    # Discard all the other blocks except ``generic_system``\n"
"    tc.blocks.enabled(\"generic_system\")\n"
"\n"
"# iterate blocks\n"
"def generate(self):\n"
"    tc = CMakeToolchain(self)\n"
"    for block_name in tc.blocks.keys():\n"
"        # do something with block_name\n"
"    for block_name, block in tc.blocks.items():\n"
"        # do something with block_name and block\n"
"\n"
"# modify the template of an existing block\n"
"def generate(self):\n"
"    tc = CMakeToolchain(self)\n"
"    tmp = tc.blocks[\"generic_system\"].template\n"
"    new_tmp = tmp.replace(...)  # replace, fully replace, append...\n"
"    tc.blocks[\"generic_system\"].template = new_tmp\n"
"\n"
"# modify one or more variables of the context\n"
"def generate(self):\n"
"    tc = CMakeToolchain(conanfile)\n"
"    # block.values is the context dictionary\n"
"    toolset = tc.blocks[\"generic_system\"].values[\"toolset\"]\n"
"    tc.blocks[\"generic_system\"].values[\"toolset\"] = \"other_toolset\"\n"
"\n"
"# modify the whole context values\n"
"def generate(self):\n"
"    tc = CMakeToolchain(conanfile)\n"
"    tc.blocks[\"generic_system\"].values = {\"toolset\": \"other_toolset\"}\n"
"\n"
"# modify the context method of an existing block\n"
"import types\n"
"\n"
"def generate(self):\n"
"    tc = CMakeToolchain(self)\n"
"    generic_block = toolchain.blocks[\"generic_system\"]\n"
"\n"
"    def context(self):\n"
"        assert self  # Your own custom logic here\n"
"        return {\"toolset\": \"other_toolset\"}\n"
"    generic_block.context = types.MethodType(context, generic_block)\n"
"\n"
"# completely replace existing block\n"
"from conan.tools.cmake import CMakeToolchain\n"
"\n"
"def generate(self):\n"
"    tc = CMakeToolchain(self)\n"
"    # this could go to a python_requires\n"
"    class MyGenericBlock:\n"
"        template = \"HelloWorld\"\n"
"\n"
"        def context(self):\n"
"            return {}\n"
"\n"
"    tc.blocks[\"generic_system\"] = MyGenericBlock\n"
"\n"
"# add a completely new block\n"
"from conan.tools.cmake import CMakeToolchain\n"
"def generate(self):\n"
"    tc = CMakeToolchain(self)\n"
"    # this could go to a python_requires\n"
"    class MyBlock:\n"
"        template = \"Hello {{myvar}}!!!\"\n"
"\n"
"        def context(self):\n"
"            return {\"myvar\": \"World\"}\n"
"\n"
"    tc.blocks[\"mynewblock\"] = MyBlock"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:618
msgid ""
"It is possible to select which blocks are active from configuration in "
"profiles, using the ``tools.cmake.cmaketoolchain:enabled_blocks`` "
"configuration. This is a list of blocks, so doing:"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:621
msgid ""
"[conf]\n"
"tools.cmake.cmaketoolchain:enabled_blocks=[\"generic_system\"]"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:626
msgid ""
"Will leave only the ``generic_system`` block, and discard all others. This "
"feature can be used for example when users are providing their own toolchain "
"files, and they don't need Conan ``CMakeToolchain`` to define any flags or "
"CMake variables, except for the necessary paths so dependencies can be "
"found. For this case, it should be possible to do something like:"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:632
msgid ""
"[conf]\n"
"tools.cmake.cmaketoolchain:user_toolchain+=my_user_toolchain.cmake\n"
"tools.cmake.cmaketoolchain:enabled_blocks=[\"find_paths\"]"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:639
msgid ""
"For more information about these blocks, please have a look at the source "
"code."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:642
msgid "Finding dependencies paths"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:644
msgid ""
"The generated ``conan_toolchain.cmake`` contains information in its "
"``find_paths`` block for variables such as ``CMAKE_PROGRAM_PATH``, "
"``CMAKE_LIBRARY_PATH``, ``CMAKE_INCLUDE_PATH`` and others, that allow CMake "
"to run ``find_program()``, ``find_file()`` and other special \"finder\" "
"routines that find artifacts without a explicit package and targets "
"definition via the overall recommended ``find_package()``."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:649
msgid ""
"With the new incubating ``CMakeConfigDeps``, the ``conan_toolchain.cmake`` "
"block ``find_paths`` no longer defines the information itself, but it just "
"loads a new file generated by the ``CMakeConfigDeps`` generator, the "
"``conan_cmakedeps_paths.cmake`` file. This way, the responsibility for "
"creating information about dependencies is the ``CMakeConfigDeps`` "
"generator, and that new file can be used in some scenarios in which passing "
"a toolchain is not possible."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:657
msgid "Cross building"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:659
msgid ""
"The ``generic_system`` block contains some basic cross-building "
"capabilities. In the general case, the user would want to provide their own "
"user toolchain defining all the specifics, which can be done with the "
"configuration ``tools.cmake.cmaketoolchain:user_toolchain``. If this conf "
"value is defined, the ``generic_system`` block will include the provided "
"file or files, but no further define any CMake variable for cross-building."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:665
msgid ""
"If ``user_toolchain`` is not defined and Conan detects it is cross-building, "
"because the build and host profiles contain different OS or architecture, it "
"will try to define the following variables:"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:669
msgid ""
"``CMAKE_SYSTEM_NAME``: ``tools.cmake.cmaketoolchain:system_name`` "
"configuration if defined, otherwise, it will try to autodetect it. This "
"block will consider cross-building if Android systems (that is managed by "
"other blocks), and not 64bits to 32bits builds in x86_64, sparc and ppc "
"systems."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:673
msgid ""
"``CMAKE_SYSTEM_VERSION``: ``tools.cmake.cmaketoolchain:system_version`` conf "
"if defined, otherwise ``os.version`` subsetting (host) when defined. On "
"Apple systems, this ``os.version`` is converted to the corresponding Darwin "
"version."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:675
msgid ""
"``CMAKE_SYSTEM_PROCESSOR``: ``tools.cmake.cmaketoolchain:system_processor`` "
"conf if defined, otherwise ``arch`` setting (host) if defined"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:681
msgid "Support for Universal Binaries in macOS"
msgstr ""

#: ../../../common/experimental_warning.inc:3
msgid ""
"This feature is experimental and subject to breaking changes. See :ref:`the "
"Conan stability<stability>` section for more information."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:685
msgid ""
"Starting in Conan 2.2.0, there's preliminary support for building universal "
"binaries on macOS using CMakeToolchain. To specify multiple architectures "
"for a universal binary in Conan, use the `|` separator when defining the "
"architecture in the settings. This approach enables passing a list of "
"architectures. For example, running:"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:690
msgid "conan create . --name=mylibrary --version=1.0 -s=\"arch=armv8|x86_64\""
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:694
msgid ""
"will create a universal binary for *mylibrary* containing both ``armv8`` and "
"``x86_64`` architectures, by setting ``CMAKE_OSX_ARCHITECTURES`` with a "
"value of ``arm64;x86_64`` in the *conan_toolchain.cmake* file."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:700
msgid ""
"It is important to note that this method is not applicable to build systems "
"other than CMake."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:703
msgid ""
"Be aware that this feature is primarily beneficial for building final "
"univeral binaries for release purposes. The default Conan behavior of "
"managing one binary per architecture generally provides a more reliable and "
"trouble-free experience. Users should be cautious and not overly rely on "
"this feature for broader use cases."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:710
msgid "Reference"
msgstr ""

#: ../../../conan_sources/conan/tools/cmake/toolchain/toolchain.py:docstring of
#: conan.tools.cmake.toolchain.toolchain.CMakeToolchain.generate:1
msgid ""
"This method will save the generated files to the conanfile.generators_folder"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:720
msgid "conf"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:722
msgid "CMakeToolchain is affected by these ``[conf]`` variables:"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:724
msgid ""
"**tools.cmake.cmaketoolchain:toolchain_file** user toolchain file to replace "
"the ``conan_toolchain.cmake`` one."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:725
msgid ""
"**tools.cmake.cmaketoolchain:user_toolchain** list of user toolchains to be "
"included from the ``conan_toolchain.cmake`` file."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:726
msgid "**tools.android:ndk_path** value for ``ANDROID_NDK_PATH``."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:727
msgid ""
"**tools.android:cmake_legacy_toolchain**: boolean value for "
"``ANDROID_USE_LEGACY_TOOLCHAIN_FILE``. It will only be defined in "
"``conan_toolchain.cmake`` if given a value. This is taken into account by "
"the CMake toolchain inside the Android NDK specified in the ``tools.android:"
"ndk_path`` config, for versions ``r23c`` and above. It may be useful to set "
"this to ``False`` if compiler flags are defined via ``tools.build:cflags`` "
"or ``tools.build:cxxflags`` to prevent Android's legacy CMake toolchain from "
"overriding the values. If setting this to ``False``, please ensure you are "
"using CMake 3.21 or above."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:731
msgid ""
"**tools.cmake.cmaketoolchain:system_name** is not necessary in most cases "
"and is only used to force-define ``CMAKE_SYSTEM_NAME``."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:732
msgid ""
"**tools.cmake.cmaketoolchain:system_version** is not necessary in most cases "
"and is only used to force-define ``CMAKE_SYSTEM_VERSION``."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:733
msgid ""
"**tools.cmake.cmaketoolchain:system_processor** is not necessary in most "
"cases and is only used to force-define ``CMAKE_SYSTEM_PROCESSOR``."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:734
msgid ""
"**tools.cmake.cmaketoolchain:enabled_blocks** define which blocks are "
"enabled and discard the others."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:735
msgid ""
"**tools.cmake.cmaketoolchain:extra_variables**: dict-like python object "
"which specifies the CMake variable name and value. The value can be a plain "
"string, a number or a dict-like python object which must specify the "
"``value`` (string/number) , ``cache`` (boolean), ``type`` (CMake cache type) "
"and optionally, ``docstring`` (string: defaulted to variable name) and "
"``force`` (boolean) keys. It can override CMakeToolchain defined variables, "
"for which users are at their own risk. E.g."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:737
msgid ""
"[conf]\n"
"tools.cmake.cmaketoolchain:extra_variables={'MY_CMAKE_VAR': 'MyValue'}"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:742
#: ../../../reference/tools/cmake/cmaketoolchain.rst:757
msgid "Resulting in:"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:744
msgid "set(MY_CMAKE_VAR \"MyValue\")"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:748
msgid ""
"Which will be injected later so it can override default Conan variables."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:750
msgid "Another advanced usage:"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:752
msgid ""
"tools.cmake.cmaketoolchain:extra_variables={'MyIntegerVariable': 42, "
"'CMAKE_GENERATOR_INSTANCE': '${ENV}/buildTools/'}\n"
"tools.cmake.cmaketoolchain:extra_variables*={'CACHED_VAR': {'value': '/var/"
"run', 'cache': True, 'type': 'PATH', 'docstring': 'test cache var', 'force': "
"True}}"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:759
msgid ""
"set(MyIntegerVariable 42)\n"
"set(CMAKE_GENERATOR_INSTANCE \"${ENV}/buildTools/\")\n"
"set(CACHED_VAR \"/var/run\" CACHE BOOL \"test cache var\" FORCE)"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:765
msgid ""
"This block injects ``$`` which will be expanded later. It also defines a "
"cache variable of type ``PATH``."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:769
msgid ""
"Use the :ref:`configuration data operator<configuration_data_operators>` "
"``*=`` to **update** (instead of redefining) conf variables already set in "
"profiles or the global configuration."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:771
msgid ""
"**tools.cmake.cmaketoolchain:toolset_arch**: Will add the ``,host=xxx`` "
"specifier in the ``CMAKE_GENERATOR_TOOLSET`` variable of ``conan_toolchain."
"cmake`` file."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:772
msgid ""
"**tools.cmake.cmaketoolchain:toolset_cuda**: (Experimental) Will add the ``,"
"cuda=xxx`` specifier in the ``CMAKE_GENERATOR_TOOLSET`` variable of "
"``conan_toolchain.cmake`` file."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:773
msgid ""
"**tools.cmake.cmake_layout:build_folder_vars**: Settings, Options, ``self."
"name`` and ``self.version`` and constants ``const.uservalue`` that will "
"produce a different build folder and different CMake presets names."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:774
msgid ""
"**tools.cmake.cmaketoolchain:presets_environment**: Set to ``'disabled'`` to "
"prevent the addition of the environment section to the generated CMake "
"presets."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:775
msgid ""
"**tools.cmake.cmaketoolchain:user_presets**: (Experimental) Allows setting a "
"custom name or subfolder for the `CMakeUserPresets.json` file. An empty "
"string disables file generation entirely."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:776
msgid ""
"**tools.build:cxxflags** list of extra C++ flags that will be appended to "
"``CMAKE_CXX_FLAGS_INIT``."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:777
msgid ""
"**tools.build:cflags** list of extra of pure C flags that will be appended "
"to ``CMAKE_C_FLAGS_INIT``."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:778
msgid ""
"**tools.build:sharedlinkflags** list of extra linker flags that will be "
"appended to ``CMAKE_SHARED_LINKER_FLAGS_INIT``."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:779
msgid ""
"**tools.build:exelinkflags** list of extra linker flags that will be "
"appended to ``CMAKE_EXE_LINKER_FLAGS_INIT``."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:780
msgid ""
"**tools.build:defines** list of preprocessor definitions that will be used "
"by ``add_definitions()``."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:781
msgid ""
"**tools.apple:sdk_path** value for ``CMAKE_OSX_SYSROOT``. In the general "
"case it's not needed and will be passed to CMake by the settings values."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:782
msgid ""
"**tools.apple:enable_bitcode** boolean value to enable/disable Bitcode Apple "
"Clang flags, e.g., ``CMAKE_XCODE_ATTRIBUTE_ENABLE_BITCODE``."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:783
msgid ""
"**tools.apple:enable_arc** boolean value to enable/disable ARC Apple Clang "
"flags, e.g., ``CMAKE_XCODE_ATTRIBUTE_CLANG_ENABLE_OBJC_ARC``."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:784
msgid ""
"**tools.apple:enable_visibility** boolean value to enable/disable Visibility "
"Apple Clang flags, e.g., "
"``CMAKE_XCODE_ATTRIBUTE_GCC_SYMBOLS_PRIVATE_EXTERN``."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:785
msgid "**tools.build:sysroot** defines the value of ``CMAKE_SYSROOT``."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:786
msgid ""
"**tools.microsoft:winsdk_version** Defines the ``CMAKE_SYSTEM_VERSION`` or "
"the ``CMAKE_GENERATOR_PLATFORM`` according to CMake policy ``CMP0149``."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:787
msgid ""
"**tools.build:compiler_executables** dict-like Python object which specifies "
"the compiler as key and the compiler executable path as value. Those keys "
"will be mapped as follows:"
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:791
msgid "``c``: will set ``CMAKE_C_COMPILER`` in *conan_toolchain.cmake*."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:792
msgid "``cpp``: will set ``CMAKE_CXX_COMPILER`` in *conan_toolchain.cmake*."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:793
msgid "``RC``: will set ``CMAKE_RC_COMPILER`` in *conan_toolchain.cmake*."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:794
msgid "``objc``: will set ``CMAKE_OBJC_COMPILER`` in *conan_toolchain.cmake*."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:795
msgid ""
"``objcpp``: will set ``CMAKE_OBJCXX_COMPILER`` in *conan_toolchain.cmake*."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:796
msgid "``cuda``: will set ``CMAKE_CUDA_COMPILER`` in *conan_toolchain.cmake*."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:797
msgid ""
"``fortran``: will set ``CMAKE_Fortran_COMPILER`` in *conan_toolchain.cmake*."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:798
msgid "``asm``: will set ``CMAKE_ASM_COMPILER`` in *conan_toolchain.cmake*."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:799
msgid "``hip``: will set ``CMAKE_HIP_COMPILER`` in *conan_toolchain.cmake*."
msgstr ""

#: ../../../reference/tools/cmake/cmaketoolchain.rst:800
msgid "``ispc``: will set ``CMAKE_ISPC_COMPILER`` in *conan_toolchain.cmake*."
msgstr ""
