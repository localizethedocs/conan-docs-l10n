# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../examples/conanfile/layout/third_party_libraries.rst:4
msgid "Declaring the layout when creating packages for third-party libraries"
msgstr ""

#: ../../../examples/conanfile/layout/third_party_libraries.rst:6
msgid ""
"Please, first clone the sources to recreate this project. You can find them "
"in the `examples2 repository <https://github.com/conan-io/examples2>`_ in "
"GitHub:"
msgstr ""

#: ../../../examples/conanfile/layout/third_party_libraries.rst:9
msgid ""
"$ git clone https://github.com/conan-io/examples2.git\n"
"$ cd examples2/examples/conanfile/layout/third_party_libraries"
msgstr ""

#: ../../../examples/conanfile/layout/third_party_libraries.rst:15
msgid ""
"If we have this project, intended to create a package for a third-party "
"library whose code is located externally:"
msgstr ""

#: ../../../examples/conanfile/layout/third_party_libraries.rst:18
msgid ""
".\n"
"├── conanfile.py\n"
"└── patches\n"
"    └── mypatch"
msgstr ""

#: ../../../examples/conanfile/layout/third_party_libraries.rst:25
msgid "The ``conanfile.py`` would look like this:"
msgstr ""

#: ../../../examples/conanfile/layout/third_party_libraries.rst:27
msgid ""
"...\n"
"\n"
"class Pkg(ConanFile):\n"
"    name = \"hello\"\n"
"    version = \"1.0\"\n"
"    exports_sources = \"patches*\"\n"
"\n"
"    ...\n"
"\n"
"    def layout(self):\n"
"        cmake_layout(self, src_folder=\"src\")\n"
"        # if you are declaring your own layout, just declare:\n"
"        # self.folders.source = \"src\"\n"
"\n"
"    def source(self):\n"
"        # we are inside a \"src\" subfolder, as defined by layout\n"
"        # the downloaded soures will be inside the \"src\" subfolder\n"
"        get(self, \"https://github.com/conan-io/libhello/archive/refs/heads/"
"main.zip\",\n"
"            strip_root=True)\n"
"        # Please, be aware that using the head of the branch instead of an "
"immutable tag\n"
"        # or commit is not a good practice in general as the branch may "
"change the contents\n"
"\n"
"        # patching, replacing, happens here\n"
"        patch(self, patch_file=os.path.join(self.export_sources_folder, "
"\"patches/mypatch\"))\n"
"\n"
"    def build(self):\n"
"        # If necessary, the build() method also has access to the "
"export_sources_folder\n"
"        # for example if patching happens in build() instead of source()\n"
"        #patch(self, patch_file=os.path.join(self.export_sources_folder, "
"\"patches/mypatch\"))\n"
"        cmake = CMake(self)\n"
"        cmake.configure()\n"
"        cmake.build()\n"
"        ..."
msgstr ""

#: ../../../examples/conanfile/layout/third_party_libraries.rst:64
msgid ""
"We can see that the ``ConanFile.export_sources_folder`` attribute can "
"provide access to the root folder of the sources:"
msgstr ""

#: ../../../examples/conanfile/layout/third_party_libraries.rst:67
msgid "Locally it will be the folder where the ``conanfile.py`` lives"
msgstr ""

#: ../../../examples/conanfile/layout/third_party_libraries.rst:68
msgid ""
"In the cache it will be the \"source\" folder, that will contain a copy of "
"``CMakeLists.txt`` and ``patches``, while the \"source/src\" folder will "
"contain the actual downloaded sources."
msgstr ""

#: ../../../examples/conanfile/layout/third_party_libraries.rst:73
msgid "We can check that everything runs fine now:"
msgstr ""

#: ../../../examples/conanfile/layout/third_party_libraries.rst:75
msgid ""
"$ conan create .\n"
"...\n"
"Downloading main.zip\n"
"hello/1.0: Unzipping 3.7KB\n"
"Unzipping 100 %\n"
"...\n"
"[ 50%] Building CXX object CMakeFiles/hello.dir/src/hello.cpp.o\n"
"[100%] Linking CXX static library libhello.a\n"
"[100%] Built target hello\n"
"...\n"
"$ conan list hello/1.0\n"
"Local Cache\n"
"hello\n"
"    hello/1.0"
msgstr ""

#: ../../../examples/conanfile/layout/third_party_libraries.rst:94
msgid ""
"Read more about the :ref:`layout method<reference_conanfile_methods_layout>` "
"and :ref:`how the package layout works<tutorial_package_layout>`."
msgstr ""
