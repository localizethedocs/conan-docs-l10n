# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.15\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:32+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../examples/tools/cmake/cmake_toolchain/inject_cmake_variables.rst:4
msgid "CMakeToolchain: Inject arbitrary CMake variables into dependencies"
msgstr ""

#: ../../../examples/tools/cmake/cmake_toolchain/inject_cmake_variables.rst:6
msgid ""
"You can find the sources to recreate this project in the `examples2 "
"repository <https://github.com/conan-io/examples2>`_ in GitHub:"
msgstr ""

#: ../../../examples/tools/cmake/cmake_toolchain/inject_cmake_variables.rst:9
msgid ""
"$ git clone https://github.com/conan-io/examples2.git\n"
"$ cd examples2/examples/tools/cmake/cmake_toolchain/user_toolchain_profile"
msgstr ""

#: ../../../examples/tools/cmake/cmake_toolchain/inject_cmake_variables.rst:15
msgid ""
"In the general case, Conan package recipes provide the necessary "
"abstractions via settings, confs, and options to control different aspects "
"of the build. Many recipes define ``options`` to activate or deactivate "
"features, optional dependencies, or binary characteristics. Configurations "
"like ``tools.build:cxxflags`` can be used to inject arbitrary C++ compile "
"flags."
msgstr ""

#: ../../../examples/tools/cmake/cmake_toolchain/inject_cmake_variables.rst:20
msgid ""
"In some exceptional cases, it might be desired to inject CMake variables "
"directly into dependencies doing CMake builds. This is possible when these "
"dependencies use the ``CMakeToolchain`` integration. Let's check it in this "
"simple example."
msgstr ""

#: ../../../examples/tools/cmake/cmake_toolchain/inject_cmake_variables.rst:24
msgid ""
"If we have the following package recipe, with a simple ``conanfile.py`` and "
"a ``CMakeLists.txt`` printing a variable:"
msgstr ""

#: ../../../examples/tools/cmake/cmake_toolchain/inject_cmake_variables.rst:26
msgid "conanfile.py"
msgstr ""

#: ../../../examples/tools/cmake/cmake_toolchain/inject_cmake_variables.rst:26
msgid ""
"from conan import ConanFile\n"
"from conan.tools.cmake import CMake\n"
"\n"
"class AppConan(ConanFile):\n"
"    name = \"foo\"\n"
"    version = \"1.0\"\n"
"    settings = \"os\", \"compiler\", \"build_type\", \"arch\"\n"
"    exports_sources = \"CMakeLists.txt\"\n"
"\n"
"    generators = \"CMakeToolchain\"\n"
"\n"
"    def build(self):\n"
"        cmake = CMake(self)\n"
"        cmake.configure()\n"
"        cmake.build()"
msgstr ""

#: ../../../examples/tools/cmake/cmake_toolchain/inject_cmake_variables.rst:46
msgid "CMakeLists.txt"
msgstr ""

#: ../../../examples/tools/cmake/cmake_toolchain/inject_cmake_variables.rst:46
msgid ""
"cmake_minimum_required(VERSION 3.15)\n"
"project(foo LANGUAGES NONE)\n"
"message(STATUS \"MYVAR1 ${MY_USER_VAR1}!!\")"
msgstr ""

#: ../../../examples/tools/cmake/cmake_toolchain/inject_cmake_variables.rst:53
msgid ""
"We can define a profile file and a ``myvars.cmake`` file (both in the same "
"folder) like the following:"
msgstr ""

#: ../../../examples/tools/cmake/cmake_toolchain/inject_cmake_variables.rst:55
msgid "myprofile"
msgstr ""

#: ../../../examples/tools/cmake/cmake_toolchain/inject_cmake_variables.rst:55
msgid ""
"include(default)\n"
"[conf]\n"
"tools.cmake.cmaketoolchain:user_toolchain+={{profile_dir}}/myvars.cmake"
msgstr ""

#: ../../../examples/tools/cmake/cmake_toolchain/inject_cmake_variables.rst:62
msgid ""
"Note the ``{{profile_dir}}`` is a jinja template expression that evaluates "
"to the current profile folder, allowing to compute the necessary path to "
"``myvars.cmake`` file. The ``tools.cmake.cmaketoolchain:user_toolchain`` is "
"a **list** of files to inject to the generated ``conan_toolchain.cmake``, so "
"the ``+=`` operator is used to append to it."
msgstr ""

#: ../../../examples/tools/cmake/cmake_toolchain/inject_cmake_variables.rst:66
msgid "The ``myvars.cmake`` can define as many variables as we want:"
msgstr ""

#: ../../../examples/tools/cmake/cmake_toolchain/inject_cmake_variables.rst:68
msgid "myvars.cmake"
msgstr ""

#: ../../../examples/tools/cmake/cmake_toolchain/inject_cmake_variables.rst:68
msgid "set(MY_USER_VAR1 \"MYVALUE1\")"
msgstr ""

#: ../../../examples/tools/cmake/cmake_toolchain/inject_cmake_variables.rst:74
msgid ""
"Applying this profile, we can see that the package CMake build effectively "
"uses the variable provided in the external ``myvars.cmake`` file:"
msgstr ""

#: ../../../examples/tools/cmake/cmake_toolchain/inject_cmake_variables.rst:77
msgid ""
"$ conan create . -pr=myprofile\n"
"...\n"
"-- MY_USER_VAR1 MYVALUE1"
msgstr ""

#: ../../../examples/tools/cmake/cmake_toolchain/inject_cmake_variables.rst:83
msgid ""
"Note that using ``user_toolchain`` while defining values for confs like "
"``tools.cmake.cmaketoolchain:system_name`` is supported."
msgstr ""

#: ../../../examples/tools/cmake/cmake_toolchain/inject_cmake_variables.rst:85
msgid ""
"Also, ``user_toolchain`` files can define variables for cross-building, such "
"as ``CMAKE_SYSTEM_NAME``, ``CMAKE_SYSTEM_VERSION`` and "
"``CMAKE_SYSTEM_PROCESSOR``. If these variables are defined in the user "
"toolchain file, they will be respected, and the ``conan_toolchain.cmake`` "
"deduced ones will not overwrite the user defined ones. If those variables "
"are not defined in the user toolchain file, then the Conan automatically "
"deduced ones will be used."
msgstr ""

#: ../../../examples/tools/cmake/cmake_toolchain/inject_cmake_variables.rst:90
msgid ""
"The ``tools.cmake.cmaketoolchain:user_toolchain`` conf value might also be "
"passed in the command line ``-c`` argument, but the location of the ``myvars."
"cmake`` needs to be absolute to be found, as jinja replacement doesn't "
"happen in the command line."
msgstr ""
