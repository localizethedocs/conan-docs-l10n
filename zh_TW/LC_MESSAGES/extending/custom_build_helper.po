# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:10+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../extending/custom_build_helper.rst:4
msgid "Creating a custom build helper for Conan"
msgstr ""

#: ../../../extending/custom_build_helper.rst:6
msgid ""
"If Conan doesn't have a build helper for the build tool you are using, you "
"can create a custom build helper with the :ref:`python_requires`. You can "
"create a package defining the build helper for that build tool and reuse it "
"later in the consumers importing the build helper as a *Python requires*."
msgstr ""

#: ../../../extending/custom_build_helper.rst:11
msgid ""
"As you probably know, build helpers are wrappers of the build tool that help "
"with the conversion of the Conan settings to the build toolâ€™s ones. They "
"assist users with the compilation of libraries and applications in the "
"`build()` method of a recipe."
msgstr ""

#: ../../../extending/custom_build_helper.rst:15
msgid ""
"As an example, we are going to create a minimal implementation of a build "
"helper for the `Waf build system <https://waf.io/>`_ . First, we need to "
"create a recipe for the ``python_requires`` that will export "
"*waf_environment.py*, where all the implementation of the build helper is."
msgstr ""

#: ../../../extending/custom_build_helper.rst:19
msgid ""
"from conans import ConanFile\n"
"from waf_environment import WafBuildEnvironment\n"
"\n"
"\n"
"class PythonRequires(ConanFile):\n"
"    name = \"waf-build-helper\"\n"
"    version = \"0.1\"\n"
"    exports = \"waf_environment.py\""
msgstr ""

#: ../../../extending/custom_build_helper.rst:30
msgid ""
"As we said, the build helper is responsible for translating Conan settings "
"to something that the build tool understands. That can be passing arguments "
"through the command line when invoking the tool or creating files that will "
"take as an input. In this case, the build helper for *Waf* will create one "
"file named *waf_toolchain.py* that will contain linker and compiler flags "
"based on the Conan settings."
msgstr ""

#: ../../../extending/custom_build_helper.rst:36
msgid ""
"To pass that information to `Waf` in the file, you have to modify its "
"configuration environment through the ``conf.env`` variable setting all the "
"relevant flags. We will also define a ``configure`` and a ``build`` method. "
"Let's see how the most important parts of *waf_environment.py* file that "
"defines the build helper could look. In this case, for simplification, the "
"build helper will only add flags depending on the conan setting value for "
"the ``build_type``."
msgstr ""

#: ../../../extending/custom_build_helper.rst:42
msgid ""
"class WafBuildEnvironment(object):\n"
"    def __init__(self, conanfile):\n"
"        self._conanfile = conanfile\n"
"        self._settings = self._conanfile.settings\n"
"\n"
"    def build_type_flags(self, settings):\n"
"        if \"Visual Studio\" in self._compiler:\n"
"            if self._build_type == \"Debug\":\n"
"                return ['/Zi', '/FS']\n"
"            elif self._build_type == \"Release\":\n"
"                return ['/O2']\n"
"        else:\n"
"            if self._build_type == \"Debug\":\n"
"                return ['-g']\n"
"            elif self._build_type == \"Release\":\n"
"                return ['-O3']\n"
"\n"
"    def _toolchain_content(self):\n"
"        sections = []\n"
"        sections.append(\"def configure(conf):\")\n"
"        sections.append(\"    conf.env.CXXFLAGS = conf.env.CXXFLAGS or "
"[]\")\n"
"        _build_type_flags = build_type_flags(self._settings)\n"
"        sections.append(\"    conf.env.CXXFLAGS.extend({})\"."
"format(_build_type_flags))\n"
"        return \"\\n\".join(sections)\n"
"\n"
"    def _save_toolchain_file(self):\n"
"        filename = \"waf_conan_toolchain.py\"\n"
"        content = self._toolchain_content()\n"
"        output_path = self._conanfile.build_folder\n"
"        save(os.path.join(output_path, filename), content)\n"
"\n"
"    def configure(self, args=None):\n"
"        self._save_toolchain_file()\n"
"        args = args or []\n"
"        command = \"waf configure \" + \" \".join(arg for arg in args)\n"
"        self._conanfile.run(command)\n"
"\n"
"    def build(self, args=None):\n"
"        args = args or []\n"
"        command = \"waf build \" + \" \".join(arg for arg in args)\n"
"        self._conanfile.run(command)"
msgstr ""

#: ../../../extending/custom_build_helper.rst:87
msgid ""
"Now you can export your custom build helper to the local cache, or upload to "
"a remote:"
msgstr ""

#: ../../../extending/custom_build_helper.rst:89
msgid "$ conan export ."
msgstr ""

#: ../../../extending/custom_build_helper.rst:93
msgid ""
"After exporting this package to the local cache you can use this custom "
"build helper to compile our packages using the *Waf* build system. Just add "
"the necessary configuration files for *Waf* and import the "
"``python_requires``. The *conanfile.py* of that package could look similar "
"to this:"
msgstr ""

#: ../../../extending/custom_build_helper.rst:97
msgid ""
"from conans import ConanFile\n"
"\n"
"\n"
"class TestWafConan(ConanFile):\n"
"    python_requires = \"waf-build-helper/0.1\"\n"
"    settings = \"os\", \"compiler\", \"build_type\", \"arch\"\n"
"    name = \"waf-consumer\"\n"
"    generators = \"Waf\"\n"
"    requires = \"mylib-waf/1.0\"\n"
"    tool_requires = \"WafGen/0.1\", \"waf/2.0.19\"\n"
"    exports_sources = \"wscript\", \"main.cpp\"\n"
"\n"
"    def build(self):\n"
"        waf = self.python_requires[\"waf-build-helper\"].module."
"WafBuildEnvironment(self)\n"
"        waf.configure()\n"
"        waf.build()"
msgstr ""

#: ../../../extending/custom_build_helper.rst:116
msgid ""
"As you can see in the *conanfile.py* we also are requiring the build tool "
"and a generator for that build tool. If you want more detailed information "
"on how to integrate your own build system in Conan, please `check this blog-"
"post about that topic <https://blog.conan.io/2019/07/24/C++-build-systems-"
"new-integrations-in-Conan-package-manager.html>`_."
msgstr ""
