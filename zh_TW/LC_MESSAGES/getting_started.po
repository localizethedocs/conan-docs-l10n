# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2018, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../getting_started.rst:4
msgid "Getting Started"
msgstr ""

#: ../../../getting_started.rst:6
msgid ""
"Let's get started with an example using one of the most popular C++ "
"libraries: POCO_. We'll use CMake as our sample build system. Keep in mind "
"that Conan **works with any build system** and is not limited to using CMake."
msgstr ""

#: ../../../getting_started.rst:12
msgid "A Timer Using POCO Libraries"
msgstr ""

#: ../../../getting_started.rst:14
msgid "Let's create a folder for our project:"
msgstr ""

#: ../../../getting_started.rst:16
msgid ""
"$ mkdir mytimer\n"
"$ cd mytimer"
msgstr ""

#: ../../../getting_started.rst:23
msgid ""
"If your code is in a GitHub repository, simply clone the project instead of "
"creating this folder by using the following command:"
msgstr ""

#: ../../../getting_started.rst:25
msgid ""
"$ git clone https://github.com/memsharded/example-poco-timer.git mytimer"
msgstr ""

#: ../../../getting_started.rst:29
msgid "Create the following source files inside this folder:"
msgstr ""

#: ../../../getting_started.rst:31
msgid "**timer.cpp**"
msgstr ""

#: ../../../getting_started.rst:31
msgid ""
" // $Id: //poco/1.4/Foundation/samples/Timer/src/Timer.cpp#1 $\n"
" // This sample demonstrates the Timer and Stopwatch classes.\n"
" // Copyright (c) 2004-2006, Applied Informatics Software Engineering GmbH.\n"
" // and Contributors.\n"
" // SPDX-License-Identifier:    BSL-1.0\n"
"\n"
" #include \"Poco/Timer.h\"\n"
" #include \"Poco/Thread.h\"\n"
" #include \"Poco/Stopwatch.h\"\n"
" #include <iostream>\n"
"\n"
" using Poco::Timer;\n"
" using Poco::TimerCallback;\n"
" using Poco::Thread;\n"
" using Poco::Stopwatch;\n"
"\n"
" class TimerExample{\n"
" public:\n"
"     TimerExample(){ _sw.start();}\n"
"\n"
"     void onTimer(Timer& timer){\n"
"         std::cout << \"Callback called after \" << _sw.elapsed()/1000 << \" "
"milliseconds.\" << std::endl;\n"
"     }\n"
" private:\n"
"     Stopwatch _sw;\n"
" };\n"
"\n"
" int main(int argc, char** argv){\n"
"     TimerExample example;\n"
"     Timer timer(250, 500);\n"
"     timer.start(TimerCallback<TimerExample>(example, &TimerExample::"
"onTimer));\n"
"\n"
"     Thread::sleep(5000);\n"
"     timer.stop();\n"
"     return 0;\n"
" }"
msgstr ""

#: ../../../getting_started.rst:71
msgid "Create a *conanfile.txt* inside this folder with the following content:"
msgstr ""

#: ../../../getting_started.rst:73
msgid "**conanfile.txt**"
msgstr ""

#: ../../../getting_started.rst:73
msgid ""
" [requires]\n"
" Poco/1.9.0@pocoproject/stable\n"
"\n"
" [generators]\n"
" cmake"
msgstr ""

#: ../../../getting_started.rst:82
msgid ""
"In this example, we use CMake to build the project, which is why the "
"``cmake`` generator is specified. This generator creates a *conanbuildinfo."
"cmake* file that defines CMake variables including paths and library names "
"that can be used in our build."
msgstr ""

#: ../../../getting_started.rst:90
msgid ""
"To do so, include the generated file and add these variables to our "
"*CMakeLists.txt*:"
msgstr ""

#: ../../../getting_started.rst:92
msgid "**CMakeLists.txt**"
msgstr ""

#: ../../../getting_started.rst:92
msgid ""
" project(FoundationTimer)\n"
" cmake_minimum_required(VERSION 2.8.12)\n"
" add_definitions(\"-std=c++11\")\n"
"\n"
" include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)\n"
" conan_basic_setup()\n"
"\n"
" add_executable(timer timer.cpp)\n"
" target_link_libraries(timer ${CONAN_LIBS})"
msgstr ""

#: ../../../getting_started.rst:106
msgid "Installing Dependencies"
msgstr ""

#: ../../../getting_started.rst:108
msgid ""
"To improve visibility, if you have a terminal with bright colors, like the "
"default GNOME terminal in Ubuntu, set ``CONAN_COLOR_DARK=1`` to increase the "
"contrast. Then create a build folder for temporary build files, and install "
"the requirements (pointing to the parent directory, where the *conanfile."
"txt* is located):"
msgstr ""

#: ../../../getting_started.rst:112
msgid ""
"$ mkdir build && cd build\n"
"$ conan install .."
msgstr ""

#: ../../../getting_started.rst:119
msgid ""
"It is strongly recommended to review the generated default profile and "
"adjust the settings to accurately describe your system as described in the "
"following section :ref:`getting_started_other_configurations`."
msgstr ""

#: ../../../getting_started.rst:122
msgid ""
"When a GCC **compiler >= 5.1** is detected, the setting modeling for the c++ "
"standard library is set as follows: The ``compiler.libcxx`` is set to "
"``libstdc++`` that represents the old ABI compatibility for better "
"compatibility. Your compiler default is most likely to be set to the new "
"ABI, so you might want to change it to ``libstdc++11`` to use the new ABI "
"compliant with CXX11 directives and run :command:`conan install ..` again to "
"install the right binaries. Read more in :ref:`manage_gcc_abi`."
msgstr ""

#: ../../../getting_started.rst:127
msgid ""
"This :command:`conan install` command downloads the binary package required "
"for your configuration (detected the first time you ran the command), "
"**together with other (transitively required by Poco) libraries, like "
"OpenSSL and Zlib**. It will also create the *conanbuildinfo.cmake* file in "
"the current directory, in which you can see the CMake variables, and a "
"*conaninfo.txt* in which the settings, requirements and optional information "
"is saved."
msgstr ""

#: ../../../getting_started.rst:132
msgid ""
"It is very important to understand the installation process. When the :"
"command:`conan install` command runs, settings specified on the command line "
"or taken from the defaults in *<userhome>/.conan/profiles/default* file are "
"applied."
msgstr ""

#: ../../../getting_started.rst:140
msgid ""
"For example, the command :command:`conan install . -s os=\"Linux\" -s "
"compiler=\"gcc\"`, performs these steps:"
msgstr ""

#: ../../../getting_started.rst:142
msgid ""
"Checks if the package recipe (for ``Poco/1.9.0@pocoproject/stable`` package) "
"exists in the local cache. If we are just starting, the cache is empty."
msgstr ""

#: ../../../getting_started.rst:144
msgid ""
"Looks for the package recipe in the defined remotes. Conan comes with `conan-"
"center`_ Bintray remote as the default, but can be changed."
msgstr ""

#: ../../../getting_started.rst:145
msgid ""
"If the recipe exists, the Conan client fetches and stores it in your local "
"cache."
msgstr ""

#: ../../../getting_started.rst:146
msgid ""
"With the package recipe and the input settings (Linux, GCC), the Conan "
"client will validate that the corresponding binary is in the local cache. "
"This test will not run when installing for the first time."
msgstr ""

#: ../../../getting_started.rst:148
msgid ""
"The Conan client searches for the corresponding binary package in the "
"remote. It will be fetched if it exists."
msgstr ""

#: ../../../getting_started.rst:149
msgid ""
"The Conan client will then  generate the requested files specified in the "
"``[generators]`` section."
msgstr ""

#: ../../../getting_started.rst:151
msgid ""
"The Conan client will throw an error If the binary package required for "
"specific settings doesn't exist. It is possible to try to build the binary "
"package from sources using the :command:`--build=missing` command line "
"argument to install. A detailed description on how to build a binary package "
"is from sources is described in the below sections."
msgstr ""

#: ../../../getting_started.rst:157
msgid ""
"In the Bintray repositories there are binaries for several mainstream "
"compilers and versions, such as Visual Studio 12, 14, Linux GCC 4.9 and "
"Apple Clang 3.5. If you are using a different setup, running the command "
"might fail because of the missing package. You could try to change your "
"settings or build the package from source, using the :command:`--"
"build=missing` option, instead of retrieving the binaries. Such a build "
"might not have been tested and may eventually fail."
msgstr ""

#: ../../../getting_started.rst:163
msgid "Building the Timer Example"
msgstr ""

#: ../../../getting_started.rst:165
msgid "Now you are ready to build and run your project:"
msgstr ""

#: ../../../getting_started.rst:167
msgid ""
"(win)\n"
"$ cmake .. -G \"Visual Studio 14 Win64\"\n"
"$ cmake --build . --config Release\n"
"\n"
"(linux, mac)\n"
"$ cmake .. -G \"Unix Makefiles\" -DCMAKE_BUILD_TYPE=Release\n"
"$ cmake --build .\n"
"...\n"
"[100%] Built target timer\n"
"$ ./bin/timer\n"
"Callback called after 250 milliseconds.\n"
"..."
msgstr ""

#: ../../../getting_started.rst:183
msgid "Inspecting Dependencies"
msgstr ""

#: ../../../getting_started.rst:185
msgid ""
"The retrieved packages are installed to your local user cache (typically *."
"conan/data*), and can be reused from this location for other projects. This "
"allows to clean your current project and continue working even without "
"network connection. To search for packages in the local cache run:"
msgstr ""

#: ../../../getting_started.rst:189
msgid "$ conan search"
msgstr ""

#: ../../../getting_started.rst:193
msgid ""
"To inspect binary package details (for different installed binaries for a "
"given package recipe) run:"
msgstr ""

#: ../../../getting_started.rst:195
msgid "$ conan search Poco/1.9.0@pocoproject/stable"
msgstr ""

#: ../../../getting_started.rst:199
msgid ""
"There is also the option to generate a table for all binaries from a given "
"recipe with the :command:`--table` option, even in remotes:"
msgstr ""

#: ../../../getting_started.rst:201
msgid ""
"$ conan search zlib/1.2.11@conan/stable --table=file.html -r=conan-center\n"
"$ file.html # or open the file, double-click"
msgstr ""

#: ../../../getting_started.rst:211
msgid ""
"Check the reference for more information on how to search in remotes, how to "
"remove or clean packages from the local cache, and how to define a custom "
"cache directory per user or per project."
msgstr ""

#: ../../../getting_started.rst:214
msgid ""
"Inspect your current project's dependencies with the :command:`conan info` "
"command, by pointing to the location of the *conanfile.txt* folder:"
msgstr ""

#: ../../../getting_started.rst:217
msgid "$ conan info .."
msgstr ""

#: ../../../getting_started.rst:221
msgid "Generate a graph of your dependencies using Dot or HTML formats:"
msgstr ""

#: ../../../getting_started.rst:223
msgid ""
"$ conan info .. --graph=file.html\n"
"$ file.html # or open the file, double-click"
msgstr ""

#: ../../../getting_started.rst:234
msgid "Searching Packages"
msgstr ""

#: ../../../getting_started.rst:236
msgid ""
"The installed packages from the remote repository are configured by default "
"in the Conan client in the \"conan-center\" located in Bintray. To search "
"for existing packages run:"
msgstr ""

#: ../../../getting_started.rst:239
msgid "$ conan search \"zlib*\" -r=conan-center"
msgstr ""

#: ../../../getting_started.rst:243
msgid ""
"There are additional community repositories that can be configured and used. "
"For more information, see :ref:`remotes`."
msgstr ""

#: ../../../getting_started.rst:249
msgid "Building with Other Configurations"
msgstr ""

#: ../../../getting_started.rst:251
msgid ""
"In this example, we have built our project using the default configuration "
"detected by Conan. This configuration is known as the :ref:`default "
"profile<default_profile>`."
msgstr ""

#: ../../../getting_started.rst:254
msgid ""
"A profile needs to be available prior to running commands such as :command:"
"`conan install`. When running the command, your settings are automatically "
"detected (compiler, architecture...) and stored as the default profile. You "
"can edit these settings *~/.conan/profiles/default* or create new profiles "
"with your desired configuration."
msgstr ""

#: ../../../getting_started.rst:258
msgid ""
"For example, if we have a profile with a 32-bit GCC configuration in a "
"profile called *gcc_x86*, we can run the following:"
msgstr ""

#: ../../../getting_started.rst:260
msgid "$ conan install . -pr gcc_x86"
msgstr ""

#: ../../../getting_started.rst:266
msgid ""
"We strongly recommend using :ref:`profiles` and managing them with :ref:"
"`conan_config_install`."
msgstr ""

#: ../../../getting_started.rst:268
msgid ""
"However, the user can always override the default profile settings in the :"
"command:`conan install` command using the :command:`-s` parameter. As an "
"exercise, try building your timer project with a different configuration. "
"For example, try building the 32-bit version:"
msgstr ""

#: ../../../getting_started.rst:271
msgid "$ conan install . -s arch=x86"
msgstr ""

#: ../../../getting_started.rst:275
msgid ""
"The above command installs a different package, using the :command:`-s "
"arch=x86` setting, instead of the default used previously."
msgstr ""

#: ../../../getting_started.rst:277
msgid ""
"To use the 32-bit binaries, you will also have to change your project build:"
msgstr ""

#: ../../../getting_started.rst:279
msgid "In Windows, change the CMake invocation to ``Visual Studio 14``."
msgstr ""

#: ../../../getting_started.rst:280
msgid ""
"In Linux, you have to add the ``-m32`` flag to your ``CMakeLists.txt`` by "
"running ``SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -m32\")``, and the same "
"applies to ``CMAKE_C_FLAGS, CMAKE_SHARED_LINK_FLAGS and "
"CMAKE_EXE_LINKER_FLAGS``. This can also be done more easily, by "
"automatically using Conan, as we'll show later."
msgstr ""

#: ../../../getting_started.rst:283
msgid ""
"In macOS, you need to add the definition ``-DCMAKE_OSX_ARCHITECTURES=i386``."
msgstr ""

#: ../../../getting_started.rst:285
msgid "Got any doubts? Check out our :ref:`FAQ section <faq>` or |write_us|."
msgstr ""

#: ../../../getting_started.rst:287
msgid "<a href=\"mailto:info@conan.io\" target=\"_blank\">write us</a>"
msgstr ""
