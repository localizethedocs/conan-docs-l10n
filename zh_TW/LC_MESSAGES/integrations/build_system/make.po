# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2020, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.29\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../integrations/build_system/make.rst:4
msgid "Make"
msgstr ""

#: ../../../integrations/build_system/make.rst:6
msgid "Conan provides two integrations for plain Makefiles:"
msgstr ""

#: ../../../integrations/build_system/make.rst:0
msgid "The :ref:`Make generator<make_generator>`"
msgstr ""

#: ../../../integrations/build_system/make.rst:0
msgid "The :ref:`Make toolchain<make_toolchain>` (experimental)"
msgstr ""

#: ../../../integrations/build_system/make.rst:11
msgid ""
"Refer to the links above for more detail about each of them. Here we provide "
"a high-level explanation of how these integrations are meant to be used."
msgstr ""

#: ../../../integrations/build_system/make.rst:14
msgid ""
"If you are using ``Makefile`` to build your project you can use one or both "
"of these depending on your needs."
msgstr ""

#: ../../../integrations/build_system/make.rst:17
msgid ""
"The ``make`` generator outputs all the variables related to package "
"dependencies into a file which is named *conanbuildinfo.mak*. The ``make`` "
"toolchain outputs all the variables related to settings, options, and "
"platform into a file which is named ``conan_toolchain.mak``."
msgstr ""

#: ../../../integrations/build_system/make.rst:22
msgid "To use the generator, indicate it in your ``conanfile`` like this:"
msgstr ""

#: ../../../integrations/build_system/make.rst:24
msgid "*conanfile.txt*"
msgstr ""

#: ../../../integrations/build_system/make.rst:24
msgid ""
" [generators]\n"
" make"
msgstr ""

#: ../../../integrations/build_system/make.rst:30
#: ../../../integrations/build_system/make.rst:39
#: ../../../integrations/build_system/make.rst:82
msgid "*conanfile.py*"
msgstr ""

#: ../../../integrations/build_system/make.rst:30
msgid ""
" class MyConan(ConanFile):\n"
"     ...\n"
"     generators = \"make\""
msgstr ""

#: ../../../integrations/build_system/make.rst:37
msgid "To use the toolchain, add the following function to your ``conanfile``:"
msgstr ""

#: ../../../integrations/build_system/make.rst:39
msgid ""
" class MyConan(ConanFile):\n"
"     ...\n"
"     def toolchain(self):\n"
"         tc = Make(self)\n"
"         tc.write_toolchain_files()"
msgstr ""

#: ../../../integrations/build_system/make.rst:48
msgid ""
"**NOTE**: This can only be used in a ``conanfile.py`` and not ``conanfile."
"txt``."
msgstr ""

#: ../../../integrations/build_system/make.rst:52
msgid "Example"
msgstr ""

#: ../../../integrations/build_system/make.rst:54
msgid ""
"We are going to use the same example from :ref:`getting_started`, a MD5 hash "
"calculator app."
msgstr ""

#: ../../../integrations/build_system/make.rst:56
msgid "This is the main source file for it:"
msgstr ""

#: ../../../integrations/build_system/make.rst:58
msgid "main.cpp"
msgstr ""

#: ../../../integrations/build_system/make.rst:58
msgid ""
" #include \"Poco/MD5Engine.h\"\n"
" #include \"Poco/DigestStream.h\"\n"
"\n"
" #include <iostream>\n"
"\n"
"\n"
" int main(int argc, char** argv)\n"
" {\n"
"     Poco::MD5Engine md5;\n"
"     Poco::DigestOutputStream ds(md5);\n"
"     ds << \"abcdefghijklmnopqrstuvwxyz\";\n"
"     ds.close();\n"
"     std::cout << Poco::DigestEngine::digestToHex(md5.digest()) << std::"
"endl;\n"
"     return 0;\n"
" }"
msgstr ""

#: ../../../integrations/build_system/make.rst:77
msgid ""
"As this project relies on the Poco Libraries we are going to create a "
"``conanfile.py`` with our requirement and also declare the Make generator "
"and Make toolchain. For simplicity, this ``conanfile`` declares an empty "
"build and package step. They're not needed for for the local developer "
"workflow."
msgstr ""

#: ../../../integrations/build_system/make.rst:82
msgid ""
" from conans import ConanFile, MakeToolchain\n"
"\n"
" class MyConan(ConanFile):\n"
"     name = \"myconan\"\n"
"     version = \"0.1\"\n"
"     settings = \"os\", \"arch\", \"compiler\", \"build_type\"\n"
"     generators = \"make\"\n"
"     exports_sources = \"*\"\n"
"\n"
"     def toolchain(self):\n"
"         tc = Make(self)\n"
"         tc.write_toolchain_files()\n"
"\n"
"     def build(self):\n"
"         pass\n"
"\n"
"     def package(self):\n"
"         pass"
msgstr ""

#: ../../../integrations/build_system/make.rst:104
msgid ""
"In order to use this generator within your project, use the following "
"Makefile as a reference:"
msgstr ""

#: ../../../integrations/build_system/make.rst:106
msgid "Makefile"
msgstr ""

#: ../../../integrations/build_system/make.rst:106
msgid ""
" #----------------------------------------\n"
" #     Prepare flags from make generator\n"
" #----------------------------------------\n"
"\n"
" include conanbuildinfo.mak\n"
" $(call CONAN_BASIC_SETUP)\n"
"\n"
" #----------------------------------------\n"
" #     Prepare flags from make toolchain\n"
" #----------------------------------------\n"
"\n"
" include conan_toolchain.mak\n"
" $(call CONAN_TC_SETUP)\n"
"\n"
" #----------------------------------------\n"
" #     Make variables for a sample App\n"
" #----------------------------------------\n"
"\n"
" SRCS          = main.cpp\n"
" OBJS          = main.o\n"
" EXE_FILENAME  = main\n"
"\n"
" #----------------------------------------\n"
" #     Make Rules\n"
" #----------------------------------------\n"
"\n"
" .PHONY                  :   exe\n"
" exe                     :   $(EXE_FILENAME)\n"
"\n"
" $(EXE_FILENAME)         :   $(OBJS)\n"
"     g++ $(OBJS) $(CXXFLAGS) $(LDFLAGS) $(LDLIBS) -o $(EXE_FILENAME)\n"
"\n"
" %.o                     :   $(SRCS)\n"
"     g++ -c $(CPPFLAGS) $(CXXFLAGS) $< -o $@"
msgstr ""

#: ../../../integrations/build_system/make.rst:144
msgid ""
"Now we are going to let Conan retrieve the dependencies, generate the "
"dependency information in the file ``conanbuildinfo.mak``, and generate the "
"options and settings information in the file ``conan_toolchain.mak``:"
msgstr ""

#: ../../../integrations/build_system/make.rst:148
msgid "$ conan install ."
msgstr ""

#: ../../../integrations/build_system/make.rst:152
msgid "Then let's call :command:`make` to generate our project:"
msgstr ""

#: ../../../integrations/build_system/make.rst:154
msgid "$ make exe"
msgstr ""

#: ../../../integrations/build_system/make.rst:158
msgid "Now you can run your application with ``./main``."
msgstr ""

#: ../../../integrations/build_system/make.rst:0
msgid "Complete reference for :ref:`Make generator<make_generator>`"
msgstr ""

#: ../../../integrations/build_system/make.rst:0
msgid ""
"Complete reference for :ref:`Make toolchain<make_toolchain>` (experimental)"
msgstr ""
