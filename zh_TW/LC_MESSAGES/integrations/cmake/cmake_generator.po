# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2018, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../integrations/cmake/cmake_generator.rst:3
msgid "``cmake`` generator"
msgstr ""

#: ../../../integrations/cmake/cmake_generator.rst:5
msgid ""
"If you are using **CMake** to build your project, you can use the ``cmake`` "
"generator to define all your requirements information in cmake syntax. It "
"creates a file named ``conanbuildinfo.cmake`` that can be imported from your "
"``CMakeLists.txt``."
msgstr ""

#: ../../../integrations/cmake/cmake_generator.rst:9
msgid "**conanfile.txt**"
msgstr ""

#: ../../../integrations/cmake/cmake_generator.rst:11
msgid ""
"...\n"
"\n"
"[generators]\n"
"cmake"
msgstr ""

#: ../../../integrations/cmake/cmake_generator.rst:19
msgid ""
"When **conan install** is executed, a file named ``conanbuildinfo.cmake`` is "
"created."
msgstr ""

#: ../../../integrations/cmake/cmake_generator.rst:21
msgid ""
"We can include ``conanbuildinfo.cmake`` in our project's ``CMakeLists.txt`` "
"to manage our requirements. The inclusion of ``conanbuildinfo.cmake`` "
"doesn't alter cmake environment at all, it just provides ``CONAN_`` "
"variables and some useful macros."
msgstr ""

#: ../../../integrations/cmake/cmake_generator.rst:26
msgid "Global variables approach"
msgstr ""

#: ../../../integrations/cmake/cmake_generator.rst:28
msgid ""
"The simplest way to consume it would be to invoke the "
"``conan_basic_setup()`` macro, which will basically set global include "
"directories, libraries directories, definitions, etc. so typically is enough "
"to do:"
msgstr ""

#: ../../../integrations/cmake/cmake_generator.rst:31
msgid ""
"include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)\n"
"conan_basic_setup()\n"
"\n"
"add_executable(timer timer.cpp)\n"
"target_link_libraries(timer ${CONAN_LIBS})"
msgstr ""

#: ../../../integrations/cmake/cmake_generator.rst:39
msgid ""
"The ``conan_basic_setup()`` is split in smaller macros, that should be self "
"explanatory. If you need to do something different, you can just use them "
"individually."
msgstr ""

#: ../../../integrations/cmake/cmake_generator.rst:44
msgid "Targets approach"
msgstr ""

#: ../../../integrations/cmake/cmake_generator.rst:46
msgid "For **modern cmake (>=3.1.2)**, you can use the following approach:"
msgstr ""

#: ../../../integrations/cmake/cmake_generator.rst:48
msgid ""
"include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)\n"
"conan_basic_setup(TARGETS)\n"
"\n"
"add_executable(timer timer.cpp)\n"
"target_link_libraries(timer CONAN_PKG::Poco)"
msgstr ""

#: ../../../integrations/cmake/cmake_generator.rst:56
msgid ""
"Using ``TARGETS`` as argument, ``conan_basic_setup()`` will internally call "
"the macro ``conan_define_targets()`` which defines cmake ``INTERFACE "
"IMPORTED`` targets, one per package. These targets, named ``CONAN_PKG::"
"PackageName`` can be used to link with, instead of using global cmake setup."
msgstr ""

#: ../../../integrations/cmake/cmake_generator.rst:60
msgid ""
"Check the section :ref:`Reference/Generators/cmake <cmake_generator>` to "
"read more about this generator."
msgstr ""
