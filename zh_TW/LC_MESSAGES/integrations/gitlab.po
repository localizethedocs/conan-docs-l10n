# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2018, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:17+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../integrations/gitlab.rst:7
msgid "|gitlab_logo| Gitlab"
msgstr ""

#: ../../../integrations/gitlab.rst:81
msgid "gitlab_logo"
msgstr ""

#: ../../../integrations/gitlab.rst:9
msgid ""
"You can use `Gitlab CI`_ cloud or local service to automatically build and "
"test your project in Linux/OSX/Windows environments. It is free for OSS "
"projects, and offers an easy integration with Gitlab, so builds can be "
"automatically fired in Gitlab CI after a :command:`git push` to Gitlab."
msgstr ""

#: ../../../integrations/gitlab.rst:13
msgid "You can use Gitlab CI both for:"
msgstr ""

#: ../../../integrations/gitlab.rst:15
msgid ""
"Building and testing your project, which manages dependencies with Conan, "
"and probably a conanfile.txt file"
msgstr ""

#: ../../../integrations/gitlab.rst:16
msgid ""
"Building and testing conan binary packages for a given conan package recipe "
"(with a conanfile.py)"
msgstr ""

#: ../../../integrations/gitlab.rst:20
msgid "Building and testing your project"
msgstr "建置並測試您的專案"

#: ../../../integrations/gitlab.rst:22
msgid ""
"We are going to use an example with GTest package, with **Gitlab CI** "
"support to run the tests."
msgstr ""

#: ../../../integrations/gitlab.rst:25
msgid "Clone the project from github:"
msgstr ""

#: ../../../integrations/gitlab.rst:28
msgid "$ git clone https://github.com/lasote/conan-gtest-example"
msgstr ""

#: ../../../integrations/gitlab.rst:33
msgid "Create a ``.gitlab-ci.yml`` file and paste this code in it:"
msgstr ""

#: ../../../integrations/gitlab.rst:36
msgid ""
"image: lasote/conangcc63\n"
"\n"
"build:\n"
"  before_script:\n"
"    # Upgrade Conan version\n"
"    - sudo pip install --upgrade conan\n"
"    # Automatic detection of your arch, compiler, etc.\n"
"    - conan user\n"
"\n"
"  script:\n"
"    # Download dependencies, build, test and create package\n"
"    - conan create user/channel"
msgstr ""

#: ../../../integrations/gitlab.rst:52
msgid ""
"Gitlab CI will install the **conan** tool and will execute the **conan "
"install** command. Then, the **script** section creates the build folder, "
"compiles the project with **cmake** and runs the **tests**."
msgstr ""

#: ../../../integrations/gitlab.rst:57
msgid "Creating, testing and uploading conan binary packages"
msgstr ""

#: ../../../integrations/gitlab.rst:58
msgid ""
"You can use Gitlab CI to automate the building of binary packages, which "
"will be created in the cloud after pushing to Gitlab. You can probably setup "
"your own way, but conan has some utilities to help in the process."
msgstr ""

#: ../../../integrations/gitlab.rst:61
msgid ""
"The command :command:`conan new` has arguments to create a default working "
"``.gitlab-ci.yml`` file. Other setups might be possible, but for this "
"example we are assuming that you are using github and also uploading your "
"final packages to Bintray. You could follow these steps:"
msgstr ""

#: ../../../integrations/gitlab.rst:65
msgid ""
"First, create an empty gitlab repository, lets call it \"hello\", for "
"creating a \"hello world\" package. Gitlab allows to create it with a "
"Readme, license and .gitignore."
msgstr ""

#: ../../../integrations/gitlab.rst:66
msgid ""
"Get the credentials User and API Key (remember, Bintray uses the API key as "
"\"password\", not your main Bintray account password)"
msgstr ""

#: ../../../integrations/gitlab.rst:67
msgid ""
"Create a conan repository in Bintray under your user or organization, and "
"get its URL (\"Set me up\"). We will call it ``UPLOAD_URL``"
msgstr ""

#: ../../../integrations/gitlab.rst:68
msgid ""
"Under your project page, *Settings -> Pipelines -> Add a variable*, add the "
"``CONAN_PASSWORD`` environment variable with the Bintray API Key. If your "
"Bintray user is different from the package user, you can define your Bintray "
"username too, defining the environment variable ``CONAN_LOGIN_USERNAME``"
msgstr ""

#: ../../../integrations/gitlab.rst:69
msgid "Clone the repo: :command:`git clone <your_repo/hello> && cd hello`."
msgstr ""

#: ../../../integrations/gitlab.rst:70
msgid ""
"Create the package: :command:`conan new Hello/0.1@<user>/testing -t -s -"
"ciglg -ciglc -cis -ciu=UPLOAD_URL` where **user** is your Bintray username."
msgstr ""

#: ../../../integrations/gitlab.rst:71
msgid ""
"You can inspect the created files: both *.gitlab-ci.yml* and the *build.py* "
"script, that is used by **conan-package-tools** utility to split different "
"builds with different configurations in different GitLab CI jobs."
msgstr ""

#: ../../../integrations/gitlab.rst:73
msgid ""
"You can test locally, before pushing, with :command:`conan create` or by "
"GitLab Runner."
msgstr ""

#: ../../../integrations/gitlab.rst:74
msgid ""
"Add the changes, commit and push: :command:`git add . && git commit -m "
"\"first commit\" && git push`."
msgstr ""

#: ../../../integrations/gitlab.rst:75
msgid "Go to Pipelines page and see the pipeline, with the different jobs."
msgstr ""

#: ../../../integrations/gitlab.rst:76
msgid ""
"When it finish, go to your Bintray repository, you should see there the "
"uploaded packages for different configurations."
msgstr ""

#: ../../../integrations/gitlab.rst:77
msgid ""
"Check locally, searching in Bintray: :command:`conan search Hello/0.1@<user>/"
"testing -r=mybintray`."
msgstr ""

#: ../../../integrations/gitlab.rst:79
msgid ""
"If something fails, please report an issue in the **conan-package-tools** "
"github repository: https://github.com/conan-io/conan-package-tools"
msgstr ""
