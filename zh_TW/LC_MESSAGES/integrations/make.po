# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2018, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:21+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../integrations/make.rst:4
msgid "Make"
msgstr ""

#: ../../../integrations/make.rst:6
msgid ""
"Conan provides integration with plain Makefiles by means of the ``make`` "
"generator. If you are using ``Makefile`` to build your project you could get "
"the information of the dependencies in a *conanbuildinfo.mak* file. All you "
"have to do is indicate the generator like this:"
msgstr ""

#: ../../../integrations/make.rst:9
msgid "*conanfile.txt*"
msgstr ""

#: ../../../integrations/make.rst:9
msgid ""
" [generators]\n"
" make"
msgstr ""

#: ../../../integrations/make.rst:15
msgid "*conanfile.py*"
msgstr ""

#: ../../../integrations/make.rst:15
msgid ""
" class MyConan(ConanFile):\n"
"     ...\n"
"     generators = \"make\""
msgstr ""

#: ../../../integrations/make.rst:23
msgid "Example"
msgstr ""

#: ../../../integrations/make.rst:25
msgid ""
"We are going to use the same example from :ref:`getting_started`, a MD5 "
"Encrypter app."
msgstr ""

#: ../../../integrations/make.rst:27
msgid "This is the main file for it:"
msgstr ""

#: ../../../integrations/make.rst:29
msgid "main.cpp"
msgstr ""

#: ../../../integrations/make.rst:29
msgid ""
" #include \"Poco/MD5Engine.h\"\n"
" #include \"Poco/DigestStream.h\"\n"
"\n"
" #include <iostream>\n"
"\n"
"\n"
" int main(int argc, char** argv)\n"
" {\n"
"     Poco::MD5Engine md5;\n"
"     Poco::DigestOutputStream ds(md5);\n"
"     ds << \"abcdefghijklmnopqrstuvwxyz\";\n"
"     ds.close();\n"
"     std::cout << Poco::DigestEngine::digestToHex(md5.digest()) << std::"
"endl;\n"
"     return 0;\n"
" }"
msgstr ""

#: ../../../integrations/make.rst:48
msgid ""
"As this project relies on the Poco Libraries we are going to create a "
"*conanfile.txt* with our requirement and declare there the Make generator "
"too:"
msgstr ""

#: ../../../integrations/make.rst:51
msgid "conanfile.txt"
msgstr "conanfile.txt"

#: ../../../integrations/make.rst:51
msgid ""
" [requires]\n"
" Poco/1.9.0@pocoproject/stable\n"
"\n"
" [generators]\n"
" make"
msgstr ""

#: ../../../integrations/make.rst:60
msgid ""
"In order to use this generator within your project, use the following "
"Makefile as a reference:"
msgstr ""

#: ../../../integrations/make.rst:62
msgid "Makefile"
msgstr ""

#: ../../../integrations/make.rst:62
msgid ""
" include conanbuildinfo.mak\n"
"\n"
" #----------------------------------------\n"
" #     Make variables for a sample App\n"
" #----------------------------------------\n"
"\n"
" CXX_SRCS = \\\n"
" main.cpp\n"
"\n"
" CXX_OBJ_FILES = \\\n"
" main.o\n"
"\n"
" EXE_FILENAME = \\\n"
" main\n"
"\n"
"\n"
" #----------------------------------------\n"
" #     Prepare flags from variables\n"
" #----------------------------------------\n"
"\n"
" CFLAGS          += $(CONAN_CFLAGS)\n"
" CXXFLAGS        += $(CONAN_CPPFLAGS)\n"
" CPPFLAGS        += $(addprefix -I, $(CONAN_INCLUDE_PATHS))\n"
" CPPFLAGS        += $(addprefix -D, $(CONAN_DEFINES))\n"
" LDFLAGS         += $(addprefix -L, $(CONAN_LIB_PATHS))\n"
" LDLIBS          += $(addprefix -l, $(CONAN_LIBS))\n"
"\n"
"\n"
" #----------------------------------------\n"
" #     Make Commands\n"
" #----------------------------------------\n"
"\n"
" COMPILE_CXX_COMMAND         ?= \\\n"
"     g++ -c $(CPPFLAGS) $(CXXFLAGS) $< -o $@\n"
"\n"
" CREATE_EXE_COMMAND          ?= \\\n"
"     g++ $(CXX_OBJ_FILES) \\\n"
"     $(CXXFLAGS) $(LDFLAGS) $(LDLIBS) \\\n"
"     -o $(EXE_FILENAME)\n"
"\n"
"\n"
" #----------------------------------------\n"
" #     Make Rules\n"
" #----------------------------------------\n"
"\n"
" .PHONY                  :   exe\n"
" exe                     :   $(EXE_FILENAME)\n"
"\n"
" $(EXE_FILENAME)         :   $(CXX_OBJ_FILES)\n"
"     $(CREATE_EXE_COMMAND)\n"
"\n"
" %.o                     :   $(CXX_SRCS)\n"
"     $(COMPILE_CXX_COMMAND)"
msgstr ""

#: ../../../integrations/make.rst:119
msgid ""
"Now we are going to let Conan retrieve the dependencies and generate the "
"dependency information in a *conanbuildinfo.mak*:"
msgstr ""

#: ../../../integrations/make.rst:121
msgid "$ conan install ."
msgstr "$ conan install ."

#: ../../../integrations/make.rst:125
msgid "Then let's call :command:`make` to generate our project:"
msgstr ""

#: ../../../integrations/make.rst:127
msgid "$ make exe"
msgstr ""

#: ../../../integrations/make.rst:131
msgid "Now you can run your application with ``./main``."
msgstr ""

#: ../../../integrations/make.rst:135
msgid ""
"Check the complete reference of the :ref:`Make generator<make_generator>`."
msgstr ""
