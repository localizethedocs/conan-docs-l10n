# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.65\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:15+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../mastering/conanfile_py.rst:2
msgid "Use conanfile.py for consumers"
msgstr ""

#: ../../../mastering/conanfile_py.rst:6
msgid ""
"We are actively working to finalize the *Conan 2.0 Release*. Some of the "
"information on this page references **deprecated** features which will not "
"be carried forward with the new release. It's important to check the :ref:"
"`Migration Guidelines<conan2_migration_guide>` to ensure you are using the "
"most up to date features."
msgstr ""

#: ../../../mastering/conanfile_py.rst:10
msgid ""
"You can use a ``conanfile.py`` for installing/consuming packages, even if "
"you are not creating a package with it. You can also use the existing "
"``conanfile.py`` in a given package while developing it to install "
"dependencies. There's no need to have a separate ``conanfile.txt``."
msgstr ""

#: ../../../mastering/conanfile_py.rst:12
msgid ""
"Let's take a look at the complete ``conanfile.txt`` from the previous "
"*timer* example with POCO library, in which we have added a couple of extra "
"generators"
msgstr ""

#: ../../../mastering/conanfile_py.rst:14
msgid ""
"[requires]\n"
"poco/1.9.4\n"
"\n"
"[generators]\n"
"gcc\n"
"cmake\n"
"txt\n"
"\n"
"[options]\n"
"poco:shared=True\n"
"openssl:shared=True\n"
"\n"
"[imports]\n"
"bin, *.dll -> ./bin # Copies all dll files from the package \"bin\" folder "
"to my project \"bin\" folder\n"
"lib, *.dylib* -> ./bin # Copies all dylib files from the package \"lib\" "
"folder to my project \"bin\" folder"
msgstr ""

#: ../../../mastering/conanfile_py.rst:33
msgid "The equivalent ``conanfile.py`` file is:"
msgstr ""

#: ../../../mastering/conanfile_py.rst:35
msgid ""
"from conans import ConanFile, CMake\n"
"\n"
"class PocoTimerConan(ConanFile):\n"
"   settings = \"os\", \"compiler\", \"build_type\", \"arch\"\n"
"   requires = \"poco/1.9.4\" # comma-separated list of requirements\n"
"   generators = \"cmake\", \"gcc\", \"txt\"\n"
"   default_options = {\"poco:shared\": True, \"openssl:shared\": True}\n"
"\n"
"   def imports(self):\n"
"      self.copy(\"*.dll\", dst=\"bin\", src=\"bin\") # From bin to bin\n"
"      self.copy(\"*.dylib*\", dst=\"bin\", src=\"lib\") # From lib to bin"
msgstr ""

#: ../../../mastering/conanfile_py.rst:50
msgid ""
"Note that this ``conanfile.py`` doesn't have a name, version, or ``build()`` "
"or ``package()`` method, as it is not creating a package. They are not "
"required."
msgstr ""

#: ../../../mastering/conanfile_py.rst:52
msgid ""
"With this ``conanfile.py`` you can just work as usual. Nothing changes from "
"the user's perspective. You can install the requirements with (from mytimer/"
"build folder):"
msgstr ""

#: ../../../mastering/conanfile_py.rst:55
msgid "$ conan install .."
msgstr ""

#: ../../../mastering/conanfile_py.rst:61
msgid "conan build"
msgstr ""

#: ../../../mastering/conanfile_py.rst:63
msgid ""
"One advantage of using ``conanfile.py`` is that the project build can be "
"further simplified, using the conanfile.py ``build()`` method."
msgstr ""

#: ../../../mastering/conanfile_py.rst:67
msgid ""
"If you are building your project with CMake, edit your ``conanfile.py`` and "
"add the following ``build()`` method:"
msgstr ""

#: ../../../mastering/conanfile_py.rst:69
msgid ""
"from conans import ConanFile, CMake\n"
"\n"
"class PocoTimerConan(ConanFile):\n"
"   settings = \"os\", \"compiler\", \"build_type\", \"arch\"\n"
"   requires = \"poco/1.9.4\"\n"
"   generators = \"cmake\", \"gcc\", \"txt\"\n"
"   default_options = {\"poco:shared\": True, \"openssl:shared\": True}\n"
"\n"
"   def imports(self):\n"
"      self.copy(\"*.dll\", dst=\"bin\", src=\"bin\") # From bin to bin\n"
"      self.copy(\"*.dylib*\", dst=\"bin\", src=\"lib\") # From lib to bin\n"
"\n"
"   def build(self):\n"
"      cmake = CMake(self)\n"
"      cmake.configure()\n"
"      cmake.build()"
msgstr ""

#: ../../../mastering/conanfile_py.rst:90
msgid "Then execute, from your project root:"
msgstr ""

#: ../../../mastering/conanfile_py.rst:92
msgid ""
"$ conan install . --install-folder build\n"
"$ conan build . --build-folder build"
msgstr ""

#: ../../../mastering/conanfile_py.rst:97
msgid ""
"The :command:`conan install` command downloads and prepares the requirements "
"of your project (for the specified settings) and the :command:`conan build` "
"command uses all that information to invoke your ``build()`` method to build "
"your project, which in turn calls ``cmake``."
msgstr ""

#: ../../../mastering/conanfile_py.rst:101
msgid ""
"This :command:`conan build` will use the settings used in the :command:"
"`conan install` which have been cached in the local *conaninfo.txt* and file "
"in your build folder. This simplifies the process and reduces the errors of "
"mismatches between the installed packages and the current project "
"configuration. Also, the *conanbuildinfo.txt* file contains all the needed "
"information obtained from the requirements: ``deps_cpp_info``, "
"``deps_env_info``, ``deps_user_info`` objects."
msgstr ""

#: ../../../mastering/conanfile_py.rst:107
msgid ""
"If you want to build your project for **x86** or another setting just change "
"the parameters passed to :command:`conan install`:"
msgstr ""

#: ../../../mastering/conanfile_py.rst:109
msgid ""
"$ conan install . --install-folder build_x86 -s arch=x86\n"
"$ conan build . --build-folder build_x86"
msgstr ""

#: ../../../mastering/conanfile_py.rst:114
msgid ""
"Implementing and using the conanfile.py ``build()`` method ensures that we "
"always use the same settings both in the installation of requirements and "
"the build of the project, and simplifies calling the build system."
msgstr ""

#: ../../../mastering/conanfile_py.rst:119
msgid "Other local commands"
msgstr ""

#: ../../../mastering/conanfile_py.rst:121
msgid ""
"Conan implements other commands that can be executed locally over a consumer "
"``conanfile.py`` which is in user space, not in the local cache:"
msgstr ""

#: ../../../mastering/conanfile_py.rst:123
msgid ""
":command:`conan source <path>`: Execute locally the *conanfile.py* "
"``source()`` method."
msgstr ""

#: ../../../mastering/conanfile_py.rst:124
msgid ""
":command:`conan package <path>`: Execute locally the *conanfile.py* "
"``package()`` method."
msgstr ""

#: ../../../mastering/conanfile_py.rst:126
msgid ""
"These commands are mostly used for testing and debugging while developing a "
"new package, before **exporting** such package recipe into the local cache."
msgstr ""

#: ../../../mastering/conanfile_py.rst:129
msgid "Check the section :ref:`Reference/Commands<commands>` to find out more."
msgstr ""
