# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.66\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:06+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/commands/consumer/info.rst:5
msgid "conan info"
msgstr ""

#: ../../../reference/commands/consumer/info.rst:7
msgid ""
"$ conan info [-h] [--paths] [-bo BUILD_ORDER] [-g GRAPH]\n"
"             [-if INSTALL_FOLDER] [-j [JSON]] [-n ONLY]\n"
"             [--package-filter [PACKAGE_FILTER]] [-db [DRY_BUILD]]\n"
"             [-b [BUILD]] [-r REMOTE] [-u] [-l LOCKFILE]\n"
"             [--lockfile-out LOCKFILE_OUT] [-e ENV_HOST] [-e:b ENV_BUILD]\n"
"             [-e:h ENV_HOST] [-o OPTIONS_HOST] [-o:b OPTIONS_BUILD]\n"
"             [-o:h OPTIONS_HOST] [-pr PROFILE_HOST] [-pr:b PROFILE_BUILD]\n"
"             [-pr:h PROFILE_HOST] [-s SETTINGS_HOST]\n"
"             [-s:b SETTINGS_BUILD] [-s:h SETTINGS_HOST]\n"
"             [-c CONF_HOST] [-c:b CONF_BUILD] [-c:h CONF_HOST]\n"
"             path_or_reference"
msgstr ""

#: ../../../reference/commands/consumer/info.rst:21
msgid "Gets information about the dependency graph of a recipe."
msgstr ""

#: ../../../reference/commands/consumer/info.rst:23
msgid ""
"It can be used with a recipe or a reference for any existing package in your "
"local cache."
msgstr ""

#: ../../../reference/commands/consumer/info.rst:26
msgid ""
"positional arguments:\n"
"  path_or_reference     Path to a folder containing a recipe (conanfile.py "
"or\n"
"                        conanfile.txt) or to a recipe file. e.g.,\n"
"                        ./my_project/conanfile.txt. It could also be a\n"
"                        reference\n"
"\n"
"optional arguments:\n"
"  -h, --help            show this help message and exit\n"
"  --paths               Show package paths in local cache\n"
"  -bo BUILD_ORDER, --build-order BUILD_ORDER\n"
"                        given a modified reference, return an ordered list "
"to\n"
"                        build (CI). [DEPRECATED: use 'conan lock build-"
"order\n"
"                        ...' instead]\n"
"  -g GRAPH, --graph GRAPH\n"
"                        Creates file with project dependencies graph. It "
"will\n"
"                        generate a DOT or HTML file depending on the "
"filename\n"
"                        extension\n"
"  -if INSTALL_FOLDER, --install-folder INSTALL_FOLDER\n"
"                        local folder containing the conaninfo.txt and\n"
"                        conanbuildinfo.txt files (from a previous conan\n"
"                        install execution). Defaulted to current folder,\n"
"                        unless --profile, -s or -o is specified. If you\n"
"                        specify both install-folder and any setting/option "
"it\n"
"                        will raise an error.\n"
"  -j [JSON], --json [JSON]\n"
"                        Path to a json file where the information will be\n"
"                        written\n"
"  -n ONLY, --only ONLY  Show only the specified fields: \"id\", "
"\"build_id\",\n"
"                        \"remote\", \"url\", \"license\", \"requires\", "
"\"update\",\n"
"                        \"required\", \"date\", \"author\", "
"\"description\",\n"
"                        \"provides\", \"deprecated\", \"None\". '--paths'\n"
"                        information can also be filtered with options\n"
"                        \"export_folder\", \"build_folder\", "
"\"package_folder\",\n"
"                        \"source_folder\". Use '--only None' to show only\n"
"                        references.\n"
"  --package-filter [PACKAGE_FILTER]\n"
"                        Print information only for packages that match the\n"
"                        filter pattern e.g., MyPackage/1.2@user/channel or\n"
"                        MyPackage*\n"
"  -db [DRY_BUILD], --dry-build [DRY_BUILD]\n"
"                        Apply the --build argument to output the "
"information,\n"
"                        as it would be done by the install command\n"
"  -b [BUILD], --build [BUILD]\n"
"                        Given a build policy, return an ordered list of\n"
"                        packages that would be built from sources during "
"the\n"
"                        install command\n"
"  -r REMOTE, --remote REMOTE\n"
"                        Look in the specified remote server\n"
"  -u, --update          Will check if updates of the dependencies exist in "
"the\n"
"                        remotes (a new version that satisfies a version "
"range,\n"
"                        a new revision or a newer recipe if not using\n"
"                        revisions).\n"
"  -l LOCKFILE, --lockfile LOCKFILE\n"
"                        Path to a lockfile\n"
"  --lockfile-out LOCKFILE_OUT\n"
"                        Filename of the updated lockfile\n"
"  -e ENV_HOST, --env ENV_HOST\n"
"                        Environment variables that will be set during the\n"
"                        package build (host machine). e.g.: -e\n"
"                        CXX=/usr/bin/clang++\n"
"  -e:b ENV_BUILD, --env:build ENV_BUILD\n"
"                        Environment variables that will be set during the\n"
"                        package build (build machine). e.g.: -e:b\n"
"                        CXX=/usr/bin/clang++\n"
"  -e:h ENV_HOST, --env:host ENV_HOST\n"
"                        Environment variables that will be set during the\n"
"                        package build (host machine). e.g.: -e:h\n"
"                        CXX=/usr/bin/clang++\n"
"  -o OPTIONS_HOST, --options OPTIONS_HOST\n"
"                        Define options values (host machine), e.g.: -o\n"
"                        Pkg:with_qt=true\n"
"  -o:b OPTIONS_BUILD, --options:build OPTIONS_BUILD\n"
"                        Define options values (build machine), e.g.: -o:b\n"
"                        Pkg:with_qt=true\n"
"  -o:h OPTIONS_HOST, --options:host OPTIONS_HOST\n"
"                        Define options values (host machine), e.g.: -o:h\n"
"                        Pkg:with_qt=true\n"
"  -pr PROFILE_HOST, --profile PROFILE_HOST\n"
"                        Apply the specified profile to the host machine\n"
"  -pr:b PROFILE_BUILD, --profile:build PROFILE_BUILD\n"
"                        Apply the specified profile to the build machine\n"
"  -pr:h PROFILE_HOST, --profile:host PROFILE_HOST\n"
"                        Apply the specified profile to the host machine\n"
"  -s SETTINGS_HOST, --settings SETTINGS_HOST\n"
"                        Settings to build the package, overwriting the\n"
"                        defaults (host machine). e.g.: -s compiler=gcc\n"
"  -s:b SETTINGS_BUILD, --settings:build SETTINGS_BUILD\n"
"                        Settings to build the package, overwriting the\n"
"                        defaults (build machine). e.g.: -s:b compiler=gcc\n"
"  -s:h SETTINGS_HOST, --settings:host SETTINGS_HOST\n"
"                        Settings to build the package, overwriting the\n"
"                        defaults (host machine). e.g.: -s:h compiler=gcc\n"
"  -c CONF_HOST, --conf CONF_HOST\n"
"                        Configuration to build the package, overwriting the "
"defaults (host machine). e.g.: -c\n"
"                        tools.cmake.cmaketoolchain:generator=Xcode\n"
"  -c:b CONF_BUILD, --conf:build CONF_BUILD\n"
"                        Configuration to build the package, overwriting the "
"defaults (build machine). e.g.: -c:b\n"
"                        tools.cmake.cmaketoolchain:generator=Xcode\n"
"  -c:h CONF_HOST, --conf:host CONF_HOST\n"
"                        Configuration to build the package, overwriting the "
"defaults (host machine). e.g.: -c:h\n"
"                        tools.cmake.cmaketoolchain:generator=Xcode"
msgstr ""

#: ../../../reference/commands/consumer/info.rst:132
msgid "**Examples**:"
msgstr ""

#: ../../../reference/commands/consumer/info.rst:134
msgid ""
"$ conan info .\n"
"$ conan info myproject_folder\n"
"$ conan info myproject_folder/conanfile.py\n"
"$ conan info hello/1.0@user/channel"
msgstr ""

#: ../../../reference/commands/consumer/info.rst:141
#: ../../../reference/commands/consumer/info.rst:263
msgid "The output will look like:"
msgstr ""

#: ../../../reference/commands/consumer/info.rst:143
msgid ""
"Dependency/0.1@user/channel\n"
" ID: 5ab84d6acfe1f23c4fae0ab88f26e3a396351ac9\n"
" BuildID: None\n"
" Context: host\n"
" Remote: None\n"
" URL: http://...\n"
" License: MIT\n"
" Description: A common dependency\n"
" Updates: Version not checked\n"
" Creation date: 2017-10-31 14:45:34\n"
" Required by:\n"
"    hello/1.0@user/channel\n"
"\n"
"hello/1.0@user/channel\n"
" ID: 5ab84d6acfe1f23c4fa5ab84d6acfe1f23c4fa8\n"
" BuildID: None\n"
" Context: host\n"
" Remote: None\n"
" URL: http://...\n"
" License: MIT\n"
" Description: Hello World!\n"
" Updates: Version not checked\n"
" Required by:\n"
"    Project\n"
" Requires:\n"
"    hello0/0.1@user/channel"
msgstr ""

#: ../../../reference/commands/consumer/info.rst:172
msgid ""
":command:`conan info` builds the complete dependency graph, like :command:"
"`conan install` does. The main difference is that it doesn't try to install "
"or build the binaries, but the package recipes will be retrieved from "
"remotes if necessary."
msgstr ""

#: ../../../reference/commands/consumer/info.rst:176
msgid ""
"It is very important to note, that the :command:`info` command outputs the "
"dependency graph for a given configuration (settings, options), as the "
"dependency graph can be different for different configurations. Then, the "
"input to the :command:`conan info` command is the same as :command:`conan "
"install`, the configuration can be specified directly with settings and "
"options, or using profiles."
msgstr ""

#: ../../../reference/commands/consumer/info.rst:181
msgid ""
"Also, if you did a previous :command:`conan install` with a specific "
"configuration, or maybe different installs with different configurations, "
"you can reuse that information with the :command:`--install-folder` argument:"
msgstr ""

#: ../../../reference/commands/consumer/info.rst:185
msgid ""
"$ # dir with a conanfile.txt\n"
"$ mkdir build_release && cd build_release\n"
"$ conan install .. --profile=gcc54release\n"
"$ cd .. && mkdir build_debug && cd build_debug\n"
"$ conan install .. --profile=gcc54debug\n"
"$ cd ..\n"
"$ conan info . --install-folder=build_release\n"
"> info for the release dependency graph install\n"
"$ conan info . --install-folder=build_debug\n"
"> info for the debug dependency graph install"
msgstr ""

#: ../../../reference/commands/consumer/info.rst:199
msgid ""
"It is possible to use the :command:`conan info` command to extract useful "
"information for Continuous Integration systems. More precisely, it has the :"
"command:`--build-order, -bo` option (deprecated in favor of :ref:`conan lock "
"build-order<versioning_lockfiles_build_order>`), that will produce a machine-"
"readable output with an ordered list of package references, in the order "
"they should be built. E.g., let's assume that we have a project that depends "
"on Boost and Poco, which in turn depends on OpenSSL and zlib transitively. "
"So we can query our project with a reference that has changed (most likely "
"due to a git push on that package):"
msgstr ""

#: ../../../reference/commands/consumer/info.rst:207
msgid ""
"$ conan info . -bo zlib/1.2.11@\n"
"[zlib/1.2.11], [openssl/1.0.2u], [boost/1.71.0, poco/1.9.4]"
msgstr ""

#: ../../../reference/commands/consumer/info.rst:212
msgid ""
"Note the result is a list of lists. When there is more than one element in "
"one of the lists, it means that they are decoupled projects and they can be "
"built in parallel by the CI system."
msgstr ""

#: ../../../reference/commands/consumer/info.rst:215
msgid ""
"You can also specify the :command:`--build-order=ALL` argument, if you want "
"just to compute the whole dependency graph build order"
msgstr ""

#: ../../../reference/commands/consumer/info.rst:217
msgid ""
"$ conan info . --build-order=ALL\n"
"> [zlib/1.2.11], [openssl/1.0.2u], [boost/1.71.0, poco/1.9.4]"
msgstr ""

#: ../../../reference/commands/consumer/info.rst:223
msgid ""
"Also you can get a list of nodes that would be built (simulation) in an "
"install command specifying a build policy with the ``--build`` parameter."
msgstr ""

#: ../../../reference/commands/consumer/info.rst:225
msgid ""
"E.g., if I try to install ``boost/1.71.0`` recipe with ``--build missing`` "
"build policy and ``arch=x86``, which libraries will be built?"
msgstr ""

#: ../../../reference/commands/consumer/info.rst:227
msgid ""
"$ conan info boost/1.71.0@ --build missing -s arch=x86\n"
"bzip2/1.0.8, zlib/1.2.11, boost/1.71.0"
msgstr ""

#: ../../../reference/commands/consumer/info.rst:233
msgid "You can generate a graph of your dependencies, in dot or html formats:"
msgstr ""

#: ../../../reference/commands/consumer/info.rst:235
msgid ""
"$ conan info .. --graph=file.html\n"
"$ file.html # or open the file, double-click"
msgstr ""

#: ../../../reference/commands/consumer/info.rst:246
msgid ""
"The generated html output contains links to third party resources, the *vis."
"js* library (2 files: *vis.min.js*, *vis.min.css*). By default they are "
"retrieved from cloudfare. However, for environments without internet "
"connection, these files could be also used from the local cache and "
"installed with :command:`conan config install` by putting those files in the "
"root of the configuration folder:"
msgstr ""

#: ../../../reference/commands/consumer/info.rst:251
msgid ""
"*vis.min.js*: Default link to \"https://cdnjs.cloudflare.com/ajax/libs/"
"vis/4.18.1/vis.min.js\""
msgstr ""

#: ../../../reference/commands/consumer/info.rst:252
msgid ""
"*vis.min.css*: Default link to \"https://cdnjs.cloudflare.com/ajax/libs/"
"vis/4.18.1/vis.min.css\""
msgstr ""

#: ../../../reference/commands/consumer/info.rst:254
msgid ""
"It is not necessary to modify the generated html file. Conan will "
"automatically use the local paths to the cache files if present, or the "
"internet ones if not."
msgstr ""

#: ../../../reference/commands/consumer/info.rst:257
msgid ""
"You can find where the package is installed in your cache by using the "
"argument :command:`--paths`:"
msgstr ""

#: ../../../reference/commands/consumer/info.rst:259
msgid "$ conan info foobar/1.0.0@user/channel --paths"
msgstr ""

#: ../../../reference/commands/consumer/info.rst:265
msgid ""
"foobar/1.0.0@user/channel\n"
"    ID: 6af9cc7cb931c5ad942174fd7838eb655717c709\n"
"    BuildID: None\n"
"    Context: host\n"
"    export_folder: /home/conan/.conan/data/foobar/1.0.0/user/channel/export\n"
"    source_folder: /home/conan/.conan/data/foobar/1.0.0/user/channel/source\n"
"    build_folder: /home/conan/.conan/data/foobar/1.0.0/user/channel/"
"build/6af9cc7cb931c5ad942174fd7838eb655717c709\n"
"    package_folder: /home/conan/.conan/data/foobar/1.0.0/user/channel/"
"package/6af9cc7cb931c5ad942174fd7838eb655717c709\n"
"    Remote: None\n"
"    License: MIT\n"
"    Description: Foobar project\n"
"    Author: Dummy\n"
"    Topics: None\n"
"    Recipe: Cache\n"
"    Binary: Cache\n"
"    Binary remote: None\n"
"    Creation date: 2019-09-03 11:22:17"
msgstr ""
