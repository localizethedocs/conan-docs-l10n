# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2019, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.21\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:10+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/commands/creator/create.rst:9
msgid "conan create"
msgstr ""

#: ../../../reference/commands/creator/create.rst:11
msgid ""
"$ conan create [-h] [-j JSON] [-k] [-kb] [-ne] [-tbf TEST_BUILD_FOLDER]\n"
"               [-tf TEST_FOLDER] [--ignore-dirty] [-m [MANIFESTS]]\n"
"               [-mi [MANIFESTS_INTERACTIVE]] [-v [VERIFY]] [-b [BUILD]]\n"
"               [-e ENV] [-o OPTIONS] [-pr PROFILE] [-r REMOTE]\n"
"               [-s SETTINGS] [-u] [-l [LOCKFILE]]\n"
"               path [reference]"
msgstr ""

#: ../../../reference/commands/creator/create.rst:20
msgid "Builds a binary package for a recipe (conanfile.py)."
msgstr ""

#: ../../../reference/commands/creator/create.rst:22
msgid ""
"Uses the specified configuration in a profile or in -s settings, -o options "
"etc. If a 'test_package' folder (the name can be configured with -tf) is "
"found, the command will run the consumer project to ensure that the package "
"has been created correctly. Check 'conan test' command to know more about "
"'test_folder' project."
msgstr ""

#: ../../../reference/commands/creator/create.rst:28
msgid ""
"positional arguments:\n"
"  path                  Path to a folder containing a conanfile.py or to a\n"
"                        recipe file e.g., my_folder/conanfile.py\n"
"  reference             user/channel, version@user/channel or\n"
"                        pkg/version@user/channel (if name or version "
"declared\n"
"                        in conanfile.py, they should match)\n"
"\n"
"optional arguments:\n"
"  -h, --help            show this help message and exit\n"
"  -j JSON, --json JSON  json file path where the install information will "
"be\n"
"                        written to\n"
"  -k, -ks, --keep-source\n"
"                        Do not remove the source folder in local cache, "
"even\n"
"                        if the recipe changed. Use this for testing "
"purposes\n"
"                        only\n"
"  -kb, --keep-build     Do not remove the build folder in local cache. "
"Implies\n"
"                        --keep-source. Use this for testing purposes only\n"
"  -ne, --not-export     Do not export the conanfile.py\n"
"  -tbf TEST_BUILD_FOLDER, --test-build-folder TEST_BUILD_FOLDER\n"
"                        Working directory for the build of the test "
"project.\n"
"  -tf TEST_FOLDER, --test-folder TEST_FOLDER\n"
"                        Alternative test folder name. By default it is\n"
"                        \"test_package\". Use \"None\" to skip the test "
"stage\n"
"  --ignore-dirty        When using the \"scm\" feature with \"auto\" "
"values,\n"
"                        capture the revision and url even if there are\n"
"                        uncommitted changes\n"
"  -m [MANIFESTS], --manifests [MANIFESTS]\n"
"                        Install dependencies manifests in folder for later\n"
"                        verify. Default folder is .conan_manifests, but can "
"be\n"
"                        changed\n"
"  -mi [MANIFESTS_INTERACTIVE], --manifests-interactive "
"[MANIFESTS_INTERACTIVE]\n"
"                        Install dependencies manifests in folder for later\n"
"                        verify, asking user for confirmation. Default "
"folder\n"
"                        is .conan_manifests, but can be changed\n"
"  -v [VERIFY], --verify [VERIFY]\n"
"                        Verify dependencies manifests against stored ones\n"
"  -b [BUILD], --build [BUILD]\n"
"                        Optional, use it to choose if you want to build "
"from\n"
"                        sources: --build Build all from sources, do not use\n"
"                        binary packages. --build=never Never build, use "
"binary\n"
"                        packages or fail if a binary package is not found.\n"
"                        --build=missing Build from code if a binary package "
"is\n"
"                        not found. --build=cascade Will build from code all\n"
"                        the nodes with some dependency being built (for any\n"
"                        reason). Can be used together with any other build\n"
"                        policy. Useful to make sure that any new change\n"
"                        introduced in a dependency is incorporated by "
"building\n"
"                        again the package. --build=outdated Build from code "
"if\n"
"                        the binary is not built with the current recipe or\n"
"                        when missing binary package. --build=[pattern] "
"Build\n"
"                        always these packages from source, but never build "
"the\n"
"                        others. Allows multiple --build parameters. "
"'pattern'\n"
"                        is a fnmatch file pattern of a package reference.\n"
"                        Default behavior: If you don't specify anything, it\n"
"                        will be similar to '--build=package name', but "
"package\n"
"                        recipes can override it with their 'build_policy'\n"
"                        attribute in the conanfile.py.\n"
"  -e ENV, --env ENV     Environment variables that will be set during the\n"
"                        package build, -e CXX=/usr/bin/clang++\n"
"  -o OPTIONS, --options OPTIONS\n"
"                        Define options values, e.g., -o Pkg:with_qt=True\n"
"  -pr PROFILE, --profile PROFILE\n"
"                        Apply the specified profile to the install command\n"
"  -r REMOTE, --remote REMOTE\n"
"                        Look in the specified remote server\n"
"  -s SETTINGS, --settings SETTINGS\n"
"                        Settings to build the package, overwriting the\n"
"                        defaults. e.g., -s compiler=gcc\n"
"  -u, --update          Check updates exist from upstream remotes\n"
"  -l [LOCKFILE], --lockfile [LOCKFILE]\n"
"                        Path to a lockfile or folder containing 'conan."
"lock'\n"
"                        file. Lockfile can be updated if packages change"
msgstr ""

#: ../../../reference/commands/creator/create.rst:104
msgid "This is the recommended way to create packages."
msgstr ""

#: ../../../reference/commands/creator/create.rst:106
msgid "The ``reference`` field can be:"
msgstr ""

#: ../../../reference/commands/creator/create.rst:108
msgid ""
"A complete package reference: ``pkg/version@user/channel``. In this case, "
"the recipe doesn't need to declare the name or the version. If the recipe "
"declares them, they should match the provided values in the command line."
msgstr ""

#: ../../../reference/commands/creator/create.rst:111
msgid ""
"The user and channel: ``user/channel``. The command will assume that the "
"name and version are provided by the recipe."
msgstr ""

#: ../../../reference/commands/creator/create.rst:113
msgid ""
"The version, user and channel: ``version@user/channel``. The recipe must "
"provide the name, and if it does provide the version, it should match the "
"command line one."
msgstr ""

#: ../../../reference/commands/creator/create.rst:117
msgid ":command:`conan create . demo/testing` is equivalent to:"
msgstr ""

#: ../../../reference/commands/creator/create.rst:119
msgid ""
"$ conan export . demo/testing\n"
"$ conan install Hello/0.1@demo/testing --build=Hello\n"
"# package is created now, use test to test it\n"
"$ cd test_package\n"
"$ conan test . Hello/0.1@demo/testing"
msgstr ""

#: ../../../reference/commands/creator/create.rst:130
msgid ""
"Sometimes you need to **skip/disable test stage** to avoid a failure while "
"creating the package, i.e: when you are cross compiling libraries and target "
"code cannot be executed in current host platform. In that case you can skip/"
"disable the test package stage:"
msgstr ""

#: ../../../reference/commands/creator/create.rst:134
msgid "$ conan create . demo/testing --test-folder=None"
msgstr ""

#: ../../../reference/commands/creator/create.rst:138
msgid ""
":command:`conan create` executes methods of a *conanfile.py* in the "
"following order:"
msgstr ""

#: ../../../reference/commands/creator/create.rst:140
msgid "``config_options()``"
msgstr ""

#: ../../../reference/commands/creator/create.rst:141
msgid "``configure()``"
msgstr ""

#: ../../../reference/commands/creator/create.rst:142
msgid "``requirements()``"
msgstr ""

#: ../../../reference/commands/creator/create.rst:143
msgid "``package_id()``"
msgstr ""

#: ../../../reference/commands/creator/create.rst:144
msgid "``build_requirements()``"
msgstr ""

#: ../../../reference/commands/creator/create.rst:145
msgid "``build_id()``"
msgstr ""

#: ../../../reference/commands/creator/create.rst:146
msgid "``system_requirements()``"
msgstr ""

#: ../../../reference/commands/creator/create.rst:147
msgid "``source()``"
msgstr ""

#: ../../../reference/commands/creator/create.rst:148
msgid "``imports()``"
msgstr ""

#: ../../../reference/commands/creator/create.rst:149
msgid "``build()``"
msgstr ""

#: ../../../reference/commands/creator/create.rst:150
msgid "``package()``"
msgstr ""

#: ../../../reference/commands/creator/create.rst:151
msgid "``package_info()``"
msgstr ""

#: ../../../reference/commands/creator/create.rst:153
msgid ""
"In case of installing a pre-built binary, steps from 5 to 11 will be "
"skipped. Note that ``deploy()`` method is only used in :command:`conan "
"install`."
msgstr ""
