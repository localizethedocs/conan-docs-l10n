# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.16\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:31+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/commands/graph/build_order.rst:2
msgid "conan graph build-order"
msgstr ""

#: ../../../reference/commands/graph/build_order.rst:-1
msgid ""
"$ conan graph build-order -h\n"
"usage: conan graph build-order [-h] [-f FORMAT] [--out-file OUT_FILE] [-v "
"[V]]\n"
"                               [-cc CORE_CONF] [--name NAME]\n"
"                               [--version VERSION] [--user USER]\n"
"                               [--channel CHANNEL] [--requires REQUIRES]\n"
"                               [--tool-requires TOOL_REQUIRES] [-b BUILD]\n"
"                               [-r REMOTE | -nr] [-u [UPDATE]] [-pr "
"PROFILE]\n"
"                               [-pr:b PROFILE_BUILD] [-pr:h PROFILE_HOST]\n"
"                               [-pr:a PROFILE_ALL] [-o OPTIONS]\n"
"                               [-o:b OPTIONS_BUILD] [-o:h OPTIONS_HOST]\n"
"                               [-o:a OPTIONS_ALL] [-s SETTINGS]\n"
"                               [-s:b SETTINGS_BUILD] [-s:h SETTINGS_HOST]\n"
"                               [-s:a SETTINGS_ALL] [-c CONF] [-c:b "
"CONF_BUILD]\n"
"                               [-c:h CONF_HOST] [-c:a CONF_ALL] [-l "
"LOCKFILE]\n"
"                               [--lockfile-partial]\n"
"                               [--lockfile-out LOCKFILE_OUT]\n"
"                               [--lockfile-clean]\n"
"                               [--lockfile-overrides LOCKFILE_OVERRIDES]\n"
"                               [--order-by {recipe,configuration}] [--"
"reduce]\n"
"                               [path]\n"
"\n"
"Compute the build order of a dependency graph.\n"
"\n"
"positional arguments:\n"
"  path                  Path to a folder containing a recipe (conanfile.py "
"or\n"
"                        conanfile.txt) or to a recipe file. e.g.,\n"
"                        ./my_project/conanfile.txt.\n"
"\n"
"options:\n"
"  -h, --help            show this help message and exit\n"
"  -f FORMAT, --format FORMAT\n"
"                        Select the output format: json, html\n"
"  --out-file OUT_FILE   Write the output of the command to the specified "
"file\n"
"                        instead of stdout.\n"
"  -v [V]                Level of detail of the output. Valid options from "
"less\n"
"                        verbose to more verbose: -vquiet, -verror, -"
"vwarning,\n"
"                        -vnotice, -vstatus, -v or -vverbose, -vv or -"
"vdebug,\n"
"                        -vvv or -vtrace\n"
"  -cc CORE_CONF, --core-conf CORE_CONF\n"
"                        Define core configuration, overwriting global.conf\n"
"                        values. E.g.: -cc core:non_interactive=True\n"
"  --name NAME           Provide a package name if not specified in "
"conanfile\n"
"  --version VERSION     Provide a package version if not specified in\n"
"                        conanfile\n"
"  --user USER           Provide a user if not specified in conanfile\n"
"  --channel CHANNEL     Provide a channel if not specified in conanfile\n"
"  --requires REQUIRES   Directly provide requires instead of a conanfile\n"
"  --tool-requires TOOL_REQUIRES\n"
"                        Directly provide tool-requires instead of a "
"conanfile\n"
"  -b BUILD, --build BUILD\n"
"                        Optional, specify which packages to build from "
"source.\n"
"                        Combining multiple '--build' options on one command\n"
"                        line is allowed. Possible values: --build=never\n"
"                        Disallow build for all packages, use binary "
"packages\n"
"                        or fail if a binary package is not found, it cannot "
"be\n"
"                        combined with other '--build' options. --"
"build=missing\n"
"                        Build packages from source whose binary package is "
"not\n"
"                        found. --build=cascade Build packages from source "
"that\n"
"                        have at least one dependency being built from "
"source.\n"
"                        --build=[pattern] Build packages from source whose\n"
"                        package reference matches the pattern. The pattern\n"
"                        uses 'fnmatch' style wildcards, so '--build=\"*\"' "
"will\n"
"                        build everything from source. --build=~[pattern]\n"
"                        Excluded packages, which will not be built from the\n"
"                        source, whose package reference matches the "
"pattern.\n"
"                        The pattern uses 'fnmatch' style wildcards.\n"
"                        --build=missing:[pattern] Build from source if a\n"
"                        compatible binary does not exist, only for packages\n"
"                        matching pattern. --build=compatible:[pattern]\n"
"                        (Experimental) Build from source if a compatible\n"
"                        binary does not exist, and the requested package is\n"
"                        invalid, the closest package binary following the\n"
"                        defined compatibility policies (method and\n"
"                        compatibility.py)\n"
"  -r REMOTE, --remote REMOTE\n"
"                        Look in the specified remote or remotes server\n"
"  -nr, --no-remote      Do not use remote, resolve exclusively in the cache\n"
"  -u [UPDATE], --update [UPDATE]\n"
"                        Will install newer versions and/or revisions in the\n"
"                        local cache for the given reference name, or all\n"
"                        references in the graph if no argument is supplied.\n"
"                        When using version ranges, it will install the "
"latest\n"
"                        version that satisfies the range. It will update to\n"
"                        the latest revision for the resolved version range.\n"
"  -pr PROFILE, --profile PROFILE\n"
"                        Apply the specified profile. By default, or if\n"
"                        specifying -pr:h (--profile:host), it applies to "
"the\n"
"                        host context. Use -pr:b (--profile:build) to "
"specify\n"
"                        the build context, or -pr:a (--profile:all) to "
"specify\n"
"                        both contexts at once\n"
"  -pr:b PROFILE_BUILD, --profile:build PROFILE_BUILD\n"
"  -pr:h PROFILE_HOST, --profile:host PROFILE_HOST\n"
"  -pr:a PROFILE_ALL, --profile:all PROFILE_ALL\n"
"  -o OPTIONS, --options OPTIONS\n"
"                        Apply the specified options. By default, or if\n"
"                        specifying -o:h (--options:host), it applies to the\n"
"                        host context. Use -o:b (--options:build) to specify\n"
"                        the build context, or -o:a (--options:all) to "
"specify\n"
"                        both contexts at once. Example:\n"
"                        -o=\"pkg/*:with_qt=True\"\n"
"  -o:b OPTIONS_BUILD, --options:build OPTIONS_BUILD\n"
"  -o:h OPTIONS_HOST, --options:host OPTIONS_HOST\n"
"  -o:a OPTIONS_ALL, --options:all OPTIONS_ALL\n"
"  -s SETTINGS, --settings SETTINGS\n"
"                        Apply the specified settings. By default, or if\n"
"                        specifying -s:h (--settings:host), it applies to "
"the\n"
"                        host context. Use -s:b (--settings:build) to "
"specify\n"
"                        the build context, or -s:a (--settings:all) to "
"specify\n"
"                        both contexts at once. Example: -s=\"compiler=gcc\"\n"
"  -s:b SETTINGS_BUILD, --settings:build SETTINGS_BUILD\n"
"  -s:h SETTINGS_HOST, --settings:host SETTINGS_HOST\n"
"  -s:a SETTINGS_ALL, --settings:all SETTINGS_ALL\n"
"  -c CONF, --conf CONF  Apply the specified conf. By default, or if "
"specifying\n"
"                        -c:h (--conf:host), it applies to the host context.\n"
"                        Use -c:b (--conf:build) to specify the build "
"context,\n"
"                        or -c:a (--conf:all) to specify both contexts at "
"once.\n"
"                        Example:\n"
"                        -c=\"tools.cmake.cmaketoolchain:generator=Xcode\"\n"
"  -c:b CONF_BUILD, --conf:build CONF_BUILD\n"
"  -c:h CONF_HOST, --conf:host CONF_HOST\n"
"  -c:a CONF_ALL, --conf:all CONF_ALL\n"
"  -l LOCKFILE, --lockfile LOCKFILE\n"
"                        Path to a lockfile. Use --lockfile=\"\" to avoid\n"
"                        automatic use of existing 'conan.lock' file\n"
"  --lockfile-partial    Do not raise an error if some dependency is not "
"found\n"
"                        in lockfile\n"
"  --lockfile-out LOCKFILE_OUT\n"
"                        Filename of the updated lockfile\n"
"  --lockfile-clean      Remove unused entries from the lockfile\n"
"  --lockfile-overrides LOCKFILE_OVERRIDES\n"
"                        Overwrite lockfile overrides\n"
"  --order-by {recipe,configuration}\n"
"                        Select how to order the output, \"recipe\" by "
"default if\n"
"                        not set.\n"
"  --reduce              Reduce the build order, output only those to build.\n"
"                        Use this only if the result will not be merged "
"later\n"
"                        with other build-order\n"
"\n"
msgstr ""

#: ../../../reference/commands/graph/build_order.rst:8
msgid ""
"The ``conan graph build-order`` command computes the build order of the "
"dependency graph for the recipe specified in ``path`` or in ``--requires/--"
"tool-requires``."
msgstr ""

#: ../../../reference/commands/graph/build_order.rst:10
msgid ""
"There are 2 important arguments that affect how this build order is computed:"
msgstr ""

#: ../../../reference/commands/graph/build_order.rst:12
msgid ""
"The ``--order-by`` argument can take 2 values ``recipe`` and "
"``configuration``, depending how we want to structure and parallelize our CI."
msgstr ""

#: ../../../reference/commands/graph/build_order.rst:14
msgid ""
"The ``--reduce`` argument will strip all packages in the order that doesn't "
"need to be built from source."
msgstr ""

#: ../../../reference/commands/graph/build_order.rst:16
msgid ""
"By default, the ``conan graph build-order`` will return the order for the "
"full dependency graph, and it will annotate in each element what needs to be "
"done, for example ``\"binary\": \"Cache\"`` if the binary is already in the "
"Conan Cache and doesnt need to be built from source, and ``\"binary\": "
"\"Build\"``, if it needs to be built from source. Having the full order is "
"necessary if we want to ``conan graph build-order-merge`` several build-"
"orders into a single one later, because having the full information allows "
"to preserve the relative order that would otherwise be lost and broken. "
"Consequently, the ``--reduce`` argument should only be used when we are "
"directly going to use the result to do the build, but not if we plan to "
"later do a merge of the resulting build-order with other ones."
msgstr ""

#: ../../../reference/commands/graph/build_order.rst:26
msgid ""
"Let's consider installing `libpng` and wanting to see the build order for "
"this requirement ordered by recipe:"
msgstr ""

#: ../../../reference/commands/graph/build_order.rst:30
msgid ""
"Please be aware that starting with Conan 2.1.0, using the `--order-by` "
"argument is recommended, and its absence is deprecated. This argument will "
"be removed in the near future. It is maintained for backward compatibility. "
"Note that the JSON output will differ if you use the `--order-by` argument, "
"changing from a simple list to a dictionary with extended information."
msgstr ""

#: ../../../reference/commands/graph/build_order.rst:37
msgid ""
"$ conan graph build-order --requires=libpng/1.5.30 --format=json --order-"
"by=recipe\n"
"...\n"
"======== Computing the build order ========\n"
"{\n"
"    \"order_by\": \"recipe\",\n"
"    \"reduced\": false,\n"
"    \"order\": [\n"
"        [\n"
"            {\n"
"                \"ref\": \"zlib/1.3#06023034579559bb64357db3a53f88a4\",\n"
"                \"depends\": [],\n"
"                \"packages\": [\n"
"                    [\n"
"                        {\n"
"                            \"package_id\": "
"\"d62dff20d86436b9c58ddc0162499d197be9de1e\",\n"
"                            \"prev\": \"54b9c3efd9ddd25eb6a8cbf01860b499\",\n"
"                            \"context\": \"host\",\n"
"                            \"binary\": \"Cache\",\n"
"                            \"options\": [],\n"
"                            \"filenames\": [],\n"
"                            \"depends\": [],\n"
"                            \"overrides\": {},\n"
"                            \"build_args\": null\n"
"                        }\n"
"                    ]\n"
"                ]\n"
"            }\n"
"        ],\n"
"        [\n"
"            {\n"
"                \"ref\": "
"\"libpng/1.5.30#ed8593b3f837c6c9aa766f231c917a5b\",\n"
"                \"depends\": [\n"
"                    \"zlib/1.3#06023034579559bb64357db3a53f88a4\"\n"
"                ],\n"
"                \"packages\": [\n"
"                    [\n"
"                        {\n"
"                            \"package_id\": "
"\"60778dfa43503cdcda3636d15124c19bf6546ae3\",\n"
"                            \"prev\": \"ad092d2e4aebcd9d48a5b1f3fd51ba9a\",\n"
"                            \"context\": \"host\",\n"
"                            \"binary\": \"Download\",\n"
"                            \"options\": [],\n"
"                            \"filenames\": [],\n"
"                            \"depends\": [],\n"
"                            \"overrides\": {},\n"
"                            \"build_args\": null\n"
"                        }\n"
"                    ]\n"
"                ]\n"
"            }\n"
"        ]\n"
"    ],\n"
"    \"profiles\": {\n"
"        \"self\": {\n"
"            \"args\": \"\"\n"
"        }\n"
"    }\n"
"}"
msgstr ""

#: ../../../reference/commands/graph/build_order.rst:99
msgid ""
"Firstly, we can see the ``zlib`` package, as ``libpng`` depends on it. The "
"output is sorted by recipes as we passed with the `--order-by` argument; "
"however, we might prefer to see it sorted by configurations instead. For "
"that purpouse use the `--order-by` argument with value `configuration`."
msgstr ""

#: ../../../reference/commands/graph/build_order.rst:104
msgid ""
"At the end of the json, after the ``order`` field, we see a ``profiles`` "
"field, which contains the profile related command line arguments for the "
"current \"build-order\". As in this case we didn't provide any arguments, it "
"is empty. But if we used something like ``conan graph build-order ... -"
"pr=default -s build_type=Debug > bo.json``, the ``args`` will contain those "
"arguments (with json character escaping): ``\"args\": \"-pr:h=\\\"default\\"
"\" -s:h=\\\"build_type=Debug\\\"\"``"
msgstr ""

#: ../../../reference/commands/graph/build_order.rst:107
msgid ""
"Using ``--order-by=configuration`` we will get a different build-order "
"format:"
msgstr ""

#: ../../../reference/commands/graph/build_order.rst:109
msgid ""
"$ conan graph build-order --requires=libpng/1.5.30 --format=json --order-"
"by=configuration\n"
"...\n"
"======== Computing the build order ========\n"
"{\n"
"    \"order_by\": \"configuration\",\n"
"    \"reduced\": false,\n"
"    \"order\": [\n"
"        [\n"
"            {\n"
"                \"ref\": \"zlib/1.3#06023034579559bb64357db3a53f88a4\",\n"
"                \"pref\": \"zlib/1.3#06023034579559bb64357db3a53f88a4:"
"d62dff20d86436b9c58ddc0162499d197be9de1e#54b9c3efd9ddd25eb6a8cbf01860b499\",\n"
"                \"package_id\": "
"\"d62dff20d86436b9c58ddc0162499d197be9de1e\",\n"
"                \"prev\": \"54b9c3efd9ddd25eb6a8cbf01860b499\",\n"
"                \"context\": \"host\",\n"
"                \"binary\": \"Cache\",\n"
"                \"options\": [],\n"
"                \"filenames\": [],\n"
"                \"depends\": [],\n"
"                \"overrides\": {},\n"
"                \"build_args\": null\n"
"            }\n"
"        ],\n"
"        [\n"
"            {\n"
"                \"ref\": "
"\"libpng/1.5.30#ed8593b3f837c6c9aa766f231c917a5b\",\n"
"                \"pref\": "
"\"libpng/1.5.30#ed8593b3f837c6c9aa766f231c917a5b:60778dfa43503cdcda3636d15124c19bf6546ae3#ad092d2e4aebcd9d48a5b1f3fd51ba9a\",\n"
"                \"package_id\": "
"\"60778dfa43503cdcda3636d15124c19bf6546ae3\",\n"
"                \"prev\": \"ad092d2e4aebcd9d48a5b1f3fd51ba9a\",\n"
"                \"context\": \"host\",\n"
"                \"binary\": \"Download\",\n"
"                \"options\": [],\n"
"                \"filenames\": [],\n"
"                \"depends\": [\n"
"                    \"zlib/1.3#06023034579559bb64357db3a53f88a4:"
"d62dff20d86436b9c58ddc0162499d197be9de1e#54b9c3efd9ddd25eb6a8cbf01860b499\"\n"
"                ],\n"
"                \"overrides\": {},\n"
"                \"build_args\": null\n"
"            }\n"
"        ]\n"
"    ]\n"
"}"
msgstr ""

#: ../../../reference/commands/graph/build_order.rst:153
msgid "If we now apply the ``--reduce``:"
msgstr ""

#: ../../../reference/commands/graph/build_order.rst:155
msgid ""
"$ conan graph build-order --requires=libpng/1.5.30 --reduce --format=json --"
"order-by=configuration\n"
"...\n"
"======== Computing the build order ========\n"
"{\n"
"    \"order_by\": \"configuration\",\n"
"    \"reduced\": false,\n"
"    \"order\": []\n"
"}"
msgstr ""

#: ../../../reference/commands/graph/build_order.rst:166
msgid ""
"As there are no binaries to build here, all binaries already exist. If we "
"explicitly force to build some, the result would be only those that are "
"going to be built:"
msgstr ""

#: ../../../reference/commands/graph/build_order.rst:170
msgid ""
"$ conan graph build-order --requires=libpng/1.5.30 --build=\"libpng/*\" --"
"reduce --format=json --order-by=configuration\n"
"...\n"
"======== Computing the build order ========\n"
"{\n"
"    \"order_by\": \"configuration\",\n"
"    \"reduced\": false,\n"
"    \"order\": [\n"
"        [\n"
"            {\n"
"                \"ref\": "
"\"libpng/1.5.30#ed8593b3f837c6c9aa766f231c917a5b\",\n"
"                \"pref\": "
"\"libpng/1.5.30#ed8593b3f837c6c9aa766f231c917a5b:60778dfa43503cdcda3636d15124c19bf6546ae3#ad092d2e4aebcd9d48a5b1f3fd51ba9a\",\n"
"                \"package_id\": "
"\"60778dfa43503cdcda3636d15124c19bf6546ae3\",\n"
"                \"prev\": null,\n"
"                \"context\": \"host\",\n"
"                \"binary\": \"Build\",\n"
"                \"options\": [],\n"
"                \"filenames\": [],\n"
"                \"depends\": [],\n"
"                \"overrides\": {},\n"
"                \"build_args\": \"--require=libpng/1.5.30 --"
"build=libpng/1.5.30\"\n"
"            }\n"
"        ]\n"
"    ]\n"
"}"
msgstr ""

#: ../../../reference/commands/graph/build_order.rst:197
msgid ""
"Then it will contain exclusively the ``binary=Build`` nodes, but not the "
"rest. Note that it will also provide a ``build_args`` field with the "
"arguments needed for a ``conan install <args>`` to fire the build of this "
"package in the CI agent."
msgstr ""

#: ../../../reference/commands/graph/build_order.rst:202
msgid "**Getting a visual representation of the Build Order**"
msgstr ""

#: ../../../reference/commands/graph/build_order.rst:204
msgid ""
"You can obtain a visual representation of the build order by using the HTML "
"formatter. For example:"
msgstr ""

#: ../../../reference/commands/graph/build_order.rst:206
msgid ""
"$ conan graph build-order --requires=opencv/4.9.0 --order-by=recipe --"
"build=missing --format=html > build-order.html"
msgstr ""
