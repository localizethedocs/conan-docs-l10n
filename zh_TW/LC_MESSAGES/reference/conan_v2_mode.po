# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2022, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.44\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/conan_v2_mode.rst:5
msgid "CONAN_V2_MODE"
msgstr ""

#: ../../../reference/conan_v2_mode.rst:7
msgid ""
"If defined in the environment, this variable will raise errors whenever a :"
"ref:`Conan 2.0 <conan_v2>` deprecated feature is used. It is a good "
"mechanism to check the recipes future Conan 2.0 \"compliance\". Activating "
"it should not change behavior in any way, just raise error for deprecated "
"things, but if it works, the same result should be achieved. The number of "
"deprecated features will increase in future Conan 1.X releases, it could be "
"a good practice to have it activated in some nightly job or the like, to "
"report on current status of your recipes."
msgstr ""

#: ../../../reference/conan_v2_mode.rst:14
msgid ""
"So, if you are ready to experiment add the variable ``CONAN_V2_MODE`` to "
"your environment and, please, report your feedback about it."
msgstr ""

#: ../../../reference/conan_v2_mode.rst:18
msgid ""
"The following is a current known list of features that will change in Conan "
"2.0 and might start raising errors if CONAN_V2_MODE is activated:"
msgstr ""

#: ../../../reference/conan_v2_mode.rst:23
msgid "Changes related to the default configuration"
msgstr ""

#: ../../../reference/conan_v2_mode.rst:25
msgid "First level setting `cppstd` is removed."
msgstr ""

#: ../../../reference/conan_v2_mode.rst:26
msgid ""
"Revisions are enabled by default (adds ``revisions_enabled=1`` to *conan."
"conf*)."
msgstr ""

#: ../../../reference/conan_v2_mode.rst:27
msgid "No hooks activated by default."
msgstr ""

#: ../../../reference/conan_v2_mode.rst:28
msgid "SCM data will be stored into *conandata.yml*."
msgstr ""

#: ../../../reference/conan_v2_mode.rst:29
msgid "GCC >= 5 autodetected profile will use ``libstdc++11``."
msgstr ""

#: ../../../reference/conan_v2_mode.rst:30
msgid "Directory ``<cache>/python`` is not added to Python ``sys.path``."
msgstr ""

#: ../../../reference/conan_v2_mode.rst:34
msgid "Changes in recipes"
msgstr ""

#: ../../../reference/conan_v2_mode.rst:36
msgid "These changes could break existing recipes:"
msgstr ""

#: ../../../reference/conan_v2_mode.rst:38
msgid ""
"Forbid access to ``self.cpp_info`` in ``conanfile::package_id()`` method."
msgstr ""

#: ../../../reference/conan_v2_mode.rst:39
msgid "Deprecate ``conanfile::config()`` method."
msgstr ""

#: ../../../reference/conan_v2_mode.rst:40
msgid "Deprecate old ``python_requires`` syntax."
msgstr ""

#: ../../../reference/conan_v2_mode.rst:41
msgid "Forbid access to ``self.info`` in ``conanfile.package()``."
msgstr ""

#: ../../../reference/conan_v2_mode.rst:42
msgid "``default_options`` are required to be a dictionary."
msgstr ""

#: ../../../reference/conan_v2_mode.rst:43
msgid "Raise if setting ``cppstd`` appears in the recipe."
msgstr ""

#: ../../../reference/conan_v2_mode.rst:44
msgid ""
"Forbid ``self.settings`` and ``self.options`` in ``conanfile::source()`` "
"method."
msgstr ""

#: ../../../reference/conan_v2_mode.rst:45
msgid "Deprecate ``tools.msvc_build_command``."
msgstr ""

#: ../../../reference/conan_v2_mode.rst:46
msgid "Deprecate ``tools.build_sln_command``."
msgstr ""

#: ../../../reference/conan_v2_mode.rst:47
msgid "Deprecate ``cpp_info.cppflags`` (use ``cxxflags`` instead)."
msgstr ""

#: ../../../reference/conan_v2_mode.rst:48
msgid ""
"Deprecate environment variables ``CONAN_USERNAME`` and ``CONAN_CHANNEL``."
msgstr ""

#: ../../../reference/conan_v2_mode.rst:49
msgid ""
"``PYTHONPATH`` is not added automatically to the environment before running "
"consumer functions."
msgstr ""

#: ../../../reference/conan_v2_mode.rst:50
msgid ""
"Attribute ``self.version`` is ensured to be a string in all the functions "
"and scenarios."
msgstr ""

#: ../../../reference/conan_v2_mode.rst:51
msgid ""
"Access to member ``name`` in ``deps_cpp_info`` objects is forbidden, use "
"``get_name(<generator>)`` with the name of the generator."
msgstr ""

#: ../../../reference/conan_v2_mode.rst:56
msgid "Changes in profiles"
msgstr ""

#: ../../../reference/conan_v2_mode.rst:58
msgid "Could break existing profiles:"
msgstr ""

#: ../../../reference/conan_v2_mode.rst:60
msgid "Deprecate ``scopes`` section in profiles."
msgstr ""

#: ../../../reference/conan_v2_mode.rst:64
msgid "Other changes"
msgstr ""

#: ../../../reference/conan_v2_mode.rst:66
msgid ""
"Package name used by the ``pkg_config`` generator uses the same rules as any "
"other generator. Previously, if it was not explicit, it was using lowercase "
"``cpp_info.name`` when it was different from the package name."
msgstr ""

#: ../../../reference/conan_v2_mode.rst:69
msgid ""
"If ``build_type`` or ``compiler`` are not defined when using build helpers "
"Conan will raise an error."
msgstr ""

#: ../../../reference/conan_v2_mode.rst:71
msgid ""
"New compiler detection algorithm is used (e.g. when running ``conan profile "
"new <name> --detect``). Previously, ``<compiler> --version`` was parsed to "
"detect the compiler and its version. Now, using ``CONAN_V2_MODE``, Conan "
"will try to detect the compiler and its version via compiler's built-in "
"macro definitions."
msgstr ""

#: ../../../reference/conan_v2_mode.rst:77
msgid ""
"More changes will be added, some of them could be reverted and the behavior "
"may change without further noticing. If you are using ``CONAN_V2_MODE``, "
"**thanks!** We really appreciate your feedback about the future of Conan."
msgstr ""
