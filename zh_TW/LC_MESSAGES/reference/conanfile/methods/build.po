# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:31+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/conanfile/methods/build.rst:4
msgid "build()"
msgstr ""

#: ../../../reference/conanfile/methods/build.rst:6
msgid ""
"The ``build()`` method is used to define the build from source of the "
"package. In practice this means calling some build system, which could be "
"done explicitly or using any of the build helpers provided by Conan:"
msgstr ""

#: ../../../reference/conanfile/methods/build.rst:9
msgid ""
"from conan.tools.cmake import CMake\n"
"\n"
"class Pkg(ConanFile):\n"
"\n"
"    def build(self):\n"
"        # Either using some of the Conan built-in helpers\n"
"        cmake = CMake(self)\n"
"        cmake.configure()  # equivalent to self.run(\"cmake . <other "
"args>\")\n"
"        cmake.build() # equivalent to self.run(\"cmake --build . <other "
"args>\")\n"
"        cmake.test()  # equivalent to self.run(\"cmake --"
"target=RUN_TESTS\")\n"
"\n"
"        # Or it could run your own build system or scripts\n"
"        self.run(\"mybuildsystem . --configure\")\n"
"        self.run(\"mybuildsystem . --build\")"
msgstr ""

#: ../../../reference/conanfile/methods/build.rst:27
msgid ""
"For more information about the existing built-in build system integrations, "
"visit :ref:`conan_tools`."
msgstr ""

#: ../../../reference/conanfile/methods/build.rst:29
msgid ""
"The ``build()`` method should be as simple as possible, just wrapping the "
"command line invocations that a developer would do in the simplest possible "
"way. The ``generate()`` method is the one responsible for preparing the "
"build, creating toolchain files, CMake presets, or any other files which are "
"necessary so developers could easily call the build system by hand. This "
"allows for much better integrations with IDEs and improves the developer "
"experience. The result is that in practice the ``build()`` method should be "
"relatively simple."
msgstr ""

#: ../../../reference/conanfile/methods/build.rst:35
msgid ""
"The ``build()`` method runs once per unique configuration, so if there are "
"some source operations like applying patches that are done conditionally to "
"different configurations, they could be also applied in the ``build()`` "
"method, before the actual build. It is important to note that in this case "
"the :ref:`no_copy_source <conan_conanfile_properties_no_copy_source>` "
"attribute cannot be set to ``True``."
msgstr ""

#: ../../../reference/conanfile/methods/build.rst:38
msgid ""
"The ``build()`` method is the right place to build and run unit tests, "
"before packaging, and raising errors if those tests fail, interrupting the "
"process, and not even packaging the final binaries. The built-in helpers "
"will skip the unit tests if the ``tools.build:skip_test`` configuration is "
"defined. For custom integrations, it is expected that the method checks this "
"``conf`` value in order to skip building and running tests, which can be "
"useful for some CI scenarios."
msgstr ""

#: ../../../reference/conanfile/methods/build.rst:41
msgid ""
"**Running Tests in Cross-Building Scenarios**: There may be some cases where "
"you want to build tests but cannot run them, such as in cross-building "
"scenarios. For these rare situations, you can use the :ref:`conan.tools."
"build.can_run<conan_tools_build_can_run>` tool as follows:"
msgstr ""

#: ../../../reference/conanfile/methods/build.rst:46
msgid ""
"...\n"
"\n"
"def build(self):\n"
"    cmake = CMake(self)\n"
"    cmake.configure()\n"
"    cmake.build()\n"
"    if can_run(self):\n"
"        cmake.test()"
msgstr ""

#: ../../../reference/conanfile/methods/build.rst:59
msgid "**Best practices**"
msgstr "**最佳實踐**"

#: ../../../reference/conanfile/methods/build.rst:61
msgid ""
"The ``build()`` method should be as simple as possible, the heavy lifting of "
"preparing the build should happen in the ``generate()`` method in order to "
"achieve a good developer experience that can easily build locally with just "
"``conan install .``, plus directly calling the build system or opening their "
"IDE."
msgstr ""

#: ../../../reference/conanfile/methods/build.rst:66
msgid ""
"Follow the :ref:`tutorial about building packages<tutorial_creating_build>` "
"for more information about building from sources."
msgstr ""
