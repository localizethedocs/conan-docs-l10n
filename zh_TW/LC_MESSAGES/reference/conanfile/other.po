# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2018, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/conanfile/other.rst:2
msgid "Python requires"
msgstr ""

#: ../../../reference/conanfile/other.rst:4
msgid ""
"It is possible to reuse python code existing in other *conanfile.py* recipes "
"with the ``python_requires()`` functionality, doing something like:"
msgstr ""

#: ../../../reference/conanfile/other.rst:7
msgid ""
"from conans import python_requires\n"
"\n"
"base = python_requires(\"MyBuild/0.1@user/channel\")\n"
"\n"
"class PkgTest(base.MyBase):\n"
"    ...\n"
"    def build(self):\n"
"        base.my_build(self.settings)"
msgstr ""

#: ../../../reference/conanfile/other.rst:18
msgid ""
"See this section: :ref:`Python requires: reusing python code in "
"recipes<python_requires>`"
msgstr ""

#: ../../../reference/conanfile/other.rst:23
msgid "Output and Running"
msgstr ""

#: ../../../reference/conanfile/other.rst:28
msgid "Output contents"
msgstr ""

#: ../../../reference/conanfile/other.rst:30
msgid "Use the `self.output` to print contents to the output."
msgstr ""

#: ../../../reference/conanfile/other.rst:32
msgid ""
"self.output.success(\"This is a good, should be green\")\n"
"self.output.info(\"This is a neutral, should be white\")\n"
"self.output.warn(\"This is a warning, should be yellow\")\n"
"self.output.error(\"Error, should be red\")\n"
"self.output.rewrite_line(\"for progress bars, issues a cr\")"
msgstr ""

#: ../../../reference/conanfile/other.rst:40
msgid ""
"Check the source code. You might be able to produce different outputs with "
"different colors."
msgstr ""

#: ../../../reference/conanfile/other.rst:45
msgid "Running commands"
msgstr ""

#: ../../../reference/conanfile/other.rst:47
msgid ""
"run(self, command, output=True, cwd=None, win_bash=False, subsystem=None, "
"msys_mingw=True,\n"
"    ignore_errors=False, run_environment=False):"
msgstr ""

#: ../../../reference/conanfile/other.rst:53
msgid ""
"``self.run()`` is a helper to run system commands and throw exceptions when "
"errors occur, so that command errors are do not pass unnoticed. It is just a "
"wrapper for ``os.system()``"
msgstr ""

#: ../../../reference/conanfile/other.rst:56
msgid ""
"When the environment variable ``CONAN_PRINT_RUN_COMMANDS`` is set to true "
"(or its equivalent ``print_run_commands`` *conan.conf* configuration "
"variable, under ``[general]``) then all the invocations of ``self.run()`` "
"will print to output the command to be executed."
msgstr ""

#: ../../../reference/conanfile/other.rst:60
msgid "Optional parameters:"
msgstr ""

#: ../../../reference/conanfile/other.rst:63
msgid ""
"**output** (Optional, Defaulted to ``True``) When True it will write in "
"stdout."
msgstr ""

#: ../../../reference/conanfile/other.rst:63
msgid ""
"You can pass any stream that accepts a ``write`` method like a ``six."
"StringIO()``:"
msgstr ""

#: ../../../reference/conanfile/other.rst:65
msgid ""
"from six import StringIO  # Python 2 and 3 compatible\n"
"mybuf = StringIO()\n"
"self.run(\"mycommand\", output=mybuf)\n"
"self.output.warn(mybuf.getvalue())"
msgstr ""

#: ../../../reference/conanfile/other.rst:72
msgid ""
"**cwd** (Optional, Defaulted to ``.`` current directory): Current directory "
"to run the command."
msgstr ""

#: ../../../reference/conanfile/other.rst:73
msgid ""
"**win_bash** (Optional, Defaulted to ``False``): When True, it will run the "
"configure/make commands inside a bash."
msgstr ""

#: ../../../reference/conanfile/other.rst:74
msgid ""
"**subsystem** (Optional, Defaulted to ``None`` will autodetect the "
"subsystem). Used to escape the command according to the specified subsystem."
msgstr ""

#: ../../../reference/conanfile/other.rst:75
msgid ""
"**msys_mingw** (Optional, Defaulted to ``True``) If the specified subsystem "
"is MSYS2, will start it in MinGW mode (native windows development)."
msgstr ""

#: ../../../reference/conanfile/other.rst:76
msgid ""
"**ignore_errors** (Optional, Defaulted to ``False``). This method raises an "
"exception if the command fails. If ``ignore_errors=True``, it will not raise "
"an exception. Instead, the user can use the return code to check for errors."
msgstr ""

#: ../../../reference/conanfile/other.rst:78
msgid ""
"**run_environment** (Optional, Defaulted to ``False``). Applies a "
"``RunEnvironment``, so the environment variables PATH, LD_LIBRARY_PATH and "
"DYLIB_LIBRARY_PATH are defined in the command execution adding the values of "
"the \"lib\" and \"bin\" folders of the dependencies. Allows executables to "
"be easily run using shared libraries from its dependencies."
msgstr ""
