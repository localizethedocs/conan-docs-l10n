# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2020, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.35\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:05+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/conanfile/tools/cmake.rst:4
msgid "conan.tools.cmake"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:8
msgid "These tools are **experimental** and subject to breaking changes."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:12
msgid "CMakeDeps"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:14
msgid ""
"Available since: `1.33.0 <https://github.com/conan-io/conan/releases/"
"tag/1.33.0>`_"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:16
msgid ""
"The ``CMakeDeps`` helper will generate one **xxxx-config.cmake** file per "
"dependency, together with other necessary *.cmake* files like version, flags "
"and directory data or configuration. It can be used like:"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:20
msgid ""
"from conans import ConanFile\n"
"\n"
"class App(ConanFile):\n"
"    settings = \"os\", \"arch\", \"compiler\", \"build_type\"\n"
"    requires = \"hello/0.1\"\n"
"    generators = \"CMakeDeps\""
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:30
msgid ""
"The full instantiation, that allows custom configuration can be done in the "
"``generate()`` method:"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:33
msgid ""
"from conans import ConanFile\n"
"from conan.tools.cmake import CMakeDeps\n"
"\n"
"class App(ConanFile):\n"
"    settings = \"os\", \"arch\", \"compiler\", \"build_type\"\n"
"    requires = \"hello/0.1\"\n"
"\n"
"    def generate(self):\n"
"        cmake = CMakeDeps(self)\n"
"        cmake.configurations.append(\"ReleaseShared\")\n"
"        if self.options[\"hello\"].shared:\n"
"            cmake.configuration = \"ReleaseShared\"\n"
"        cmake.generate()"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:49
msgid ""
"As it can be seen, it allows to define custom user CMake configurations "
"besides the standard Release, Debug, etc ones. If the **settings.yml** file "
"is customized to add new configurations to the ``settings.build_type``, "
"then, adding it explicitly to ``.configurations`` is not necessary."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:56
msgid "CMakeToolchain"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:57
msgid ""
"The ``CMakeToolchain`` is the toolchain generator for CMake. It will "
"generate toolchain files that can be used in the command line invocation of "
"CMake with the ``-DCMAKE_TOOLCHAIN_FILE=conantoolchain.cmake``. This "
"generator translates the current package configuration, settings, and "
"options, into CMake toolchain syntax."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:61
msgid "It can be declared as:"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:63
msgid ""
"from conans import ConanFile\n"
"\n"
"class Pkg(ConanFile):\n"
"    generators = \"CMakeToolchain\""
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:70
msgid "Or fully instantiated in the ``generate()`` method:"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:72
msgid ""
"from conans import ConanFile\n"
"from conan.tools.cmake import CMakeToolchain\n"
"\n"
"class App(ConanFile):\n"
"    settings = \"os\", \"arch\", \"compiler\", \"build_type\"\n"
"    requires = \"hello/0.1\"\n"
"    generators = \"cmake_find_package_multi\"\n"
"    options = {\"shared\": [True, False], \"fPIC\": [True, False]}\n"
"    default_options = {\"shared\": False, \"fPIC\": True}\n"
"\n"
"    def generate(self):\n"
"        tc = CMakeToolchain(self)\n"
"        tc.variables[\"MYVAR\"] = \"MYVAR_VALUE\"\n"
"        tc.preprocessor_definitions[\"MYDEFINE\"] = \"MYDEF_VALUE\"\n"
"        tc.generate()"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:91
msgid ""
"This will generate a *conan_toolchain.cmake* file after a ``conan install`` "
"(or when building the package in the cache) with the information provided in "
"the ``generate()`` method as well as information translated from the current "
"``settings``."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:95
msgid ""
"These file will automatically manage the definition of cmake values "
"according to current Conan settings:"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:98
msgid "Definition of the CMake generator platform and generator toolset"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:99
msgid "Definition of the CMake ``build_type``"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:100
msgid ""
"Definition of the ``CMAKE_POSITION_INDEPENDENT_CODE``, based on ``fPIC`` "
"option."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:101
msgid "Definition of the C++ standard as necessary"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:102
msgid "Definition of the standard library used for C++"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:103
msgid "Deactivation of rpaths in OSX"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:105
msgid ""
"Most of these things will be configurable, please provide feedback at: "
"https://github.com/conan-io/conan/issues"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:108
#: ../../../reference/conanfile/tools/cmake.rst:240
msgid "constructor"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:115
msgid ""
"def __init__(self, conanfile, generator=None, generator_platform=None, "
"build_type=None,\n"
"             cmake_system_name=True, toolset=None):"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:116
msgid ""
"Most of the arguments are optional and will be deduced from the current "
"``settings``, and not necessary to define them."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:121
msgid "preprocessor_definitions"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:123
msgid ""
"This attribute allows defining CMake variables, for multiple configurations "
"(Debug, Release, etc)."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:133
msgid ""
"def generate(self):\n"
"    tc = CMakeToolchain(self)\n"
"    tc.preprocessor_definitions[\"MYVAR\"] = \"MyValue\"\n"
"    tc.preprocessor_definitions.debug[\"MYCONFIGVAR\"] = \"MyDebugValue\"\n"
"    tc.preprocessor_definitions.release[\"MYCONFIGVAR\"] = "
"\"MyReleaseValue\"\n"
"    tc.generate()"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:134
msgid "This will be translated to:"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:136
msgid ""
"One ``set()`` definition for ``MYVAR`` in ``conan_toolchain.cmake`` file."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:137
msgid ""
"One ``set()`` definition, using a cmake generator expression in "
"``conan_project_include.cmake`` file, using the different values for "
"different configurations. It is important to recall that things that depend "
"on the build type cannot be directly set in the toolchain."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:142
msgid ""
"The ``CMakeToolchain`` is intended to run with the ``CMakeDeps`` "
"dependencies generator. It might temporarily work with others like "
"``cmake_find_package`` and ``cmake_find_package_multi``, but this will be "
"removed soon."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:146
msgid "Using the toolchain in developer flow"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:148
msgid ""
"One of the advantages of using Conan toolchains is that they can help to "
"achieve the exact same build with local development flows, than when the "
"package is created in the cache."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:151
msgid ""
"With the ``CMakeToolchain`` it is possible to do, for multi-configuration "
"systems like Visual Studio (assuming we are using the "
"``cmake_find_package_multi`` generator):"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:169
msgid ""
"# Lets start in the folder containing the conanfile.py\n"
"$ mkdir build && cd build\n"
"# Install both debug and release deps and create the toolchain\n"
"$ conan install ..\n"
"$ conan install .. -s build_type=Debug\n"
"# the conan_toolchain.cmake is common for both configurations\n"
"# Need to pass the generator WITHOUT the platform, that matches your default "
"settings\n"
"$ cmake .. -G \"Visual Studio 15\" -DCMAKE_TOOLCHAIN_FILE=conan_toolchain."
"cmake\n"
"# Now you can open the IDE, select Debug or Release config and build\n"
"# or, in the command line\n"
"$ cmake --build . --config Release\n"
"$ cmake --build . --config Debug"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:170
msgid ""
"**NOTE**: The platform (Win64), is already encoded in the toolchain. The "
"command line shouldn't pass it, so using ``-G \"Visual Studio 15\"`` instead "
"of the ``-G \"Visual Studio 15 Win64\"``"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:174
msgid "For single-configuration build systems:"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:194
msgid ""
"# Lets start in the folder containing the conanfile.py\n"
"$ mkdir build_release && cd build_release\n"
"$ conan install ..\n"
"# the build type Release is encoded in the toolchain already.\n"
"# This conan_toolchain.cmake is specific for release\n"
"$ cmake .. -G \"Unix Makefiles\" -DCMAKE_TOOLCHAIN_FILE=conan_toolchain."
"cmake\n"
"$ cmake --build .  # or just \"make\"\n"
"\n"
"# debug build requires its own folder\n"
"$ cd .. && mkdir build_debug && cd build_debug\n"
"$ conan install .. -s build_type=Debug\n"
"# the build type Debug is encoded in the toolchain already.\n"
"# This conan_toolchain.cmake is specific for debug\n"
"$ cmake .. -G \"Unix Makefiles\" -DCMAKE_TOOLCHAIN_FILE=conan_toolchain."
"cmake\n"
"$ cmake --build .  # or just \"make\""
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:195
msgid ""
"Conan is able to generate a toolchain file for different systems. In the "
"following sections you can find more information about them:"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:198
msgid ":ref:`Android <conan-cmake-toolchain-android>`."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:199
msgid ":ref:`iOS <conan-cmake-toolchain-ios>`."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:203
msgid "CMake"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:204
msgid ""
"The ``CMake`` build helper is a wrapper around the command line invocation "
"of cmake. It will abstract the calls like ``cmake --build . --config "
"Release`` into Python method calls. It will also add the argument ``-"
"DCMAKE_TOOLCHAIN_FILE=conantoolchain.cmake`` to the ``configure()`` call."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:208
msgid ""
"The helper is intended to be used in the ``build()`` method, to call CMake "
"commands automatically when a package is being built directly by Conan "
"(create, install)"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:212
msgid ""
"from conans import ConanFile\n"
"from conan.tools.cmake import CMake, CMakeToolchain, CMakeDeps\n"
"\n"
"class App(ConanFile):\n"
"    settings = \"os\", \"arch\", \"compiler\", \"build_type\"\n"
"    requires = \"hello/0.1\"\n"
"    options = {\"shared\": [True, False], \"fPIC\": [True, False]}\n"
"    default_options = {\"shared\": False, \"fPIC\": True}\n"
"\n"
"    def generate(self):\n"
"        tc = CMakeToolchain(self)\n"
"        tc.generate()\n"
"        deps = CMakeDeps(self)\n"
"        deps.generate()\n"
"\n"
"    def build(self):\n"
"        cmake = CMake(self)\n"
"        cmake.configure()\n"
"        cmake.build()"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:234
msgid ""
"**Note:** This helper includes the additional flag `-DCMAKE_SH=\"CMAKE_SH-"
"NOTFOUND\"` when using the `MinGW Makefiles` CMake's generator, to avoid the "
"error of `sh` being in the PATH (CMake version < 3.17.0)."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:237
msgid "It supports the following methods:"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:245
msgid "def __init__(self, conanfile, generator=None, build_folder=None):"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:246
msgid "``conanfile``: the current recipe object. Always use ``self``."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:247
msgid ""
"``generator``: CMake generator. Define it only to override the default one "
"(like ``Visual Studio 15``). Note that as the platform (x64, Win32...) is "
"now defined in the toolchain it is not necessary to specify it here."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:249
msgid ""
"``build_folder``: Relative path to a folder to contain the temporary build "
"files"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:253
msgid "configure()"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:258
msgid "def configure(self, source_folder=None):"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:259
msgid ""
"Calls ``cmake``, with the given generator and passing ``-"
"DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake``. It will also provide the "
"CMake generator in the command like, like ``-G \"Visual Studio 15\"``. Note "
"that it is not necessary to specify the platform, like ``-G \"Visual Studio "
"15 Win64\"``, as the platform is already defined in the toolchain file."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:264
msgid ""
"``source_folder``: Relative path to the folder containing the root "
"*CMakeLists.txt*"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:268
msgid "build()"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:274
msgid "def build(self, build_type=None, target=None):"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:275
msgid ""
"Calls the build system. Equivalent to :command:`cmake --build .` in the "
"build folder."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:278
msgid ""
"``build_type``: Use it only to override the value defined in the ``settings."
"build_type`` for a multi-configuration generator (e.g. Visual Studio, "
"XCode). This value will be ignored for single-configuration generators, they "
"will use the one defined in the toolchain file during the install step."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:280
msgid "``target``: name of the build target to run."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:284
msgid "install()"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:290
msgid "def install(self, build_type=None):"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:291
msgid "Equivalent to run ``cmake --build . --target=install``"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:293
#: ../../../reference/conanfile/tools/cmake.rst:308
msgid ""
"``build_type``: Use it only to override the value defined in the ``settings."
"build_type``. It can fail if the build is single configuration (e.g. Unix "
"Makefiles), as in that case the build type must be specified at configure "
"time, not build type."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:299
msgid "test()"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:305
msgid "def test(self, build_type=None, target=None, output_on_failure=False):"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:306
msgid "Equivalent to running :command:`cmake --build . --target=RUN_TESTS`."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:311
msgid ""
"``target``: name of the build target to run, by default ``RUN_TESTS`` or "
"``test``."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:315
msgid "conf"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:317
msgid ""
"``tools.microsoft.msbuild:verbosity`` will accept one of ``\"Quiet\", "
"\"Minimal\", \"Normal\", \"Detailed\", \"Diagnostic\"`` to be passed to the "
"``CMake.build()`` command, when a Visual Studio generator (MSBuild build "
"system) is being used for CMake. It is passed as an argument to the "
"underlying build system via the call ``cmake --build . --config Release -- /"
"verbosity:Diagnostic``"
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:321
msgid ""
"``tools.ninja:jobs`` argument for the ``--jobs`` parameter when running "
"Ninja generator. (overrides the general ``tools.build:processes``)."
msgstr ""

#: ../../../reference/conanfile/tools/cmake.rst:324
msgid ""
"``tools.microsoft.msbuild:max_cpu_count`` argument for the ``/m`` (``/"
"maxCpuCount``) when running ``MSBuild`` (overrides the general ``tools.build:"
"processes``)."
msgstr ""
