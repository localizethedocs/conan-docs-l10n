# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2022, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.55\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:10+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/conanfile/tools/cmake/cmake.rst:4
msgid "CMake"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmake.rst:8
msgid ""
"These tools are still **experimental** (so subject to breaking changes) but "
"with very stable syntax. We encourage their usage to be prepared for Conan "
"2.0."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmake.rst:11
msgid ""
"Available since: `1.32.0 <https://github.com/conan-io/conan/releases/"
"tag/1.32.0>`_"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmake.rst:13
msgid ""
"The ``CMake`` build helper is a wrapper around the command line invocation "
"of cmake. It will abstract the calls like ``cmake --build . --config "
"Release`` into Python method calls. It will also add the argument ``-"
"DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake`` to the ``configure()`` call, "
"as well as other possible arguments like ``-DCMAKE_BUILD_TYPE=<config>``. "
"The arguments that will be used are obtained from a generated ``CMakePresets."
"json`` file."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmake.rst:19
msgid ""
"The helper is intended to be used in the ``build()`` method, to call CMake "
"commands automatically when a package is being built directly by Conan "
"(create, install)"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmake.rst:23
msgid ""
"from conan import ConanFile\n"
"from conan.tools.cmake import CMake, CMakeToolchain, CMakeDeps\n"
"\n"
"class App(ConanFile):\n"
"    settings = \"os\", \"arch\", \"compiler\", \"build_type\"\n"
"    requires = \"hello/0.1\"\n"
"    options = {\"shared\": [True, False], \"fPIC\": [True, False]}\n"
"    default_options = {\"shared\": False, \"fPIC\": True}\n"
"\n"
"    def generate(self):\n"
"        tc = CMakeToolchain(self)\n"
"        tc.generate()\n"
"        deps = CMakeDeps(self)\n"
"        deps.generate()\n"
"\n"
"    def build(self):\n"
"        cmake = CMake(self)\n"
"        cmake.configure()\n"
"        cmake.build()"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmake.rst:45
msgid ""
"**Note:** This helper includes the additional flag `-DCMAKE_SH=\"CMAKE_SH-"
"NOTFOUND\"` when using the `MinGW Makefiles` CMake's generator, to avoid the "
"error of `sh` being in the PATH (CMake version < 3.17.0)."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmake.rst:48
msgid "It supports the following methods:"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmake.rst:51
msgid "constructor"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmake.rst:56
msgid "def __init__(self, conanfile):"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmake.rst:57
msgid "``conanfile``: the current recipe object. Always use ``self``."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmake.rst:61
msgid "configure()"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmake.rst:66
msgid ""
"def configure(self, variables=None, build_script_folder=None, cli_args=None):"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmake.rst:67
msgid ""
"Reads the ``CMakePresets.json`` file generated by the :ref:"
"`CMakeToolchain<conan-cmake-toolchain>` to get:"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmake.rst:69
msgid "The generator, to append ``-G=\"xxx\"``."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmake.rst:70
msgid ""
"The path to the toolchain and append ``-DCMAKE_TOOLCHAIN_FILE=/path/"
"conan_toolchain.cmake``"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmake.rst:71
msgid "The declared ``cache variables`` and append ``-Dxxx``."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmake.rst:72
msgid ""
"``build_script_folder``: Relative path to the folder containing the root "
"*CMakeLists.txt*"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmake.rst:73
msgid "``cli_args``: List of extra arguments provided when calling to CMake."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmake.rst:75
msgid "and call ``cmake``."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmake.rst:80
msgid ""
"If ``CMakePresets.json`` file is not there, Conan will raise an exception "
"because it's a mandatory one even though it's empty."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmake.rst:83
msgid ""
"``variables``: should be a dictionary of CMake variables and values, that "
"will be mapped to command line ``-DVAR=VALUE`` arguments. Recall that in the "
"general case information to CMake should be passed in ``CMakeToolchain`` to "
"be provided in the ``conan_toolchain.cmake`` file. This ``variables`` "
"argument is intended for exceptional cases that wouldn't work in the "
"toolchain approach."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmake.rst:89
msgid "build()"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmake.rst:95
msgid ""
"def build(self, build_type=None, target=None, cli_args=None, "
"build_tool_args=None):"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmake.rst:96
msgid ""
"Calls the build system. Equivalent to :command:`cmake --build .` in the "
"build folder."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmake.rst:99
msgid ""
"``build_type``: Use it only to override the value defined in the ``settings."
"build_type`` for a multi-configuration generator (e.g. Visual Studio, "
"XCode). This value will be ignored for single-configuration generators, they "
"will use the one defined in the toolchain file during the install step."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmake.rst:101
msgid "``target``: name of the build target to run."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmake.rst:102
msgid ""
"``cli_args``: A list of arguments ``[arg1, arg2, ...]`` that will be passed "
"to the ``cmake --build ... arg1 arg2`` command directly."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmake.rst:103
msgid ""
"``build_tool_args``: A list of arguments ``[barg1, barg2, ...]`` for the "
"underlying build system that will be passed to the command line after the "
"``--`` indicator: ``cmake --build ... -- barg1 barg2``"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmake.rst:108
msgid "install()"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmake.rst:114
msgid "def install(self, build_type=None):"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmake.rst:115
msgid "Equivalent to run ``cmake --build . --target=install``"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmake.rst:117
#: ../../../reference/conanfile/tools/cmake/cmake.rst:132
msgid ""
"``build_type``: Use it only to override the value defined in the ``settings."
"build_type``. It can fail if the build is single configuration (e.g. Unix "
"Makefiles), as in that case the build type must be specified at configure "
"time, not build type."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmake.rst:123
msgid "test()"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmake.rst:129
msgid ""
"def test(self, build_type=None, target=None, cli_args=None, "
"build_tool_args=None):"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmake.rst:130
msgid "Equivalent to running :command:`cmake --build . --target=RUN_TESTS`."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmake.rst:135
msgid ""
"``target``: name of the build target to run, by default ``RUN_TESTS`` or "
"``test``."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmake.rst:136
msgid "``cli_args``: Same as above ``build()``"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmake.rst:137
msgid "``build_tool_args``: Same as above ``build()``"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmake.rst:141
msgid "conf"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmake.rst:143
msgid ""
"``tools.microsoft.msbuild:verbosity`` will accept one of ``\"Quiet\", "
"\"Minimal\", \"Normal\", \"Detailed\", \"Diagnostic\"`` to be passed to the "
"``CMake.build()`` command, when a Visual Studio generator (MSBuild build "
"system) is being used for CMake. It is passed as an argument to the "
"underlying build system via the call ``cmake --build . --config Release -- /"
"verbosity:Diagnostic``"
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmake.rst:147
msgid ""
"``tools.build:jobs`` argument for the ``--jobs`` parameter when running "
"Ninja generator."
msgstr ""

#: ../../../reference/conanfile/tools/cmake/cmake.rst:149
msgid ""
"``tools.microsoft.msbuild:max_cpu_count`` argument for the ``/m`` (``/"
"maxCpuCount``) when running ``MSBuild``"
msgstr ""
