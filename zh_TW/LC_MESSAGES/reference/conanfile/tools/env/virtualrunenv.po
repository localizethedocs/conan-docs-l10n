# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2022, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.48\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/conanfile/tools/env/virtualrunenv.rst:4
msgid "VirtualRunEnv"
msgstr ""

#: ../../../reference/conanfile/tools/env/virtualrunenv.rst:8
msgid ""
"These tools are still **experimental** (so subject to breaking changes) but "
"with very stable syntax. We encourage the usage of it to be prepared for "
"Conan 2.0."
msgstr ""

#: ../../../reference/conanfile/tools/env/virtualrunenv.rst:12
msgid "The ``VirtualRunEnv`` generator can be used by name in conanfiles:"
msgstr ""

#: ../../../reference/conanfile/tools/env/virtualrunenv.rst:14
#: ../../../reference/conanfile/tools/env/virtualrunenv.rst:28
#: ../../../reference/conanfile/tools/env/virtualrunenv.rst:67
msgid "conanfile.py"
msgstr ""

#: ../../../reference/conanfile/tools/env/virtualrunenv.rst:14
msgid ""
"class Pkg(ConanFile):\n"
"    generators = \"VirtualRunEnv\""
msgstr ""

#: ../../../reference/conanfile/tools/env/virtualrunenv.rst:20
msgid "conanfile.txt"
msgstr ""

#: ../../../reference/conanfile/tools/env/virtualrunenv.rst:20
msgid ""
"[generators]\n"
"VirtualRunEnv"
msgstr ""

#: ../../../reference/conanfile/tools/env/virtualrunenv.rst:26
msgid ""
"And it can also be fully instantiated in the conanfile ``generate()`` method:"
msgstr ""

#: ../../../reference/conanfile/tools/env/virtualrunenv.rst:28
msgid ""
"from conans import ConanFile\n"
"from conan.tools.env import VirtualRunEnv\n"
"\n"
"class Pkg(ConanFile):\n"
"    settings = \"os\", \"compiler\", \"arch\", \"build_type\"\n"
"    requires = \"zlib/1.2.11\", \"bzip2/1.0.8\"\n"
"\n"
"    def generate(self):\n"
"        ms = VirtualRunEnv(self)\n"
"        ms.generate()"
msgstr ""

#: ../../../reference/conanfile/tools/env/virtualrunenv.rst:42
msgid ""
"When the ``VirtualRunEnv`` generator is used, calling :command:`conan "
"install` will generate a *conanrunenv* .bat or .sh script containing "
"environment variables of the run time environment."
msgstr ""

#: ../../../reference/conanfile/tools/env/virtualrunenv.rst:45
msgid ""
"The launcher contains the runtime environment information, anything that is "
"necessary in the environment to actually run the compiled executables and "
"applications. The information is obtained from the ``self.runenv_info`` and "
"also automatically deduced from the ``self.cpp_info`` definition of the "
"package, to define ``PATH``, ``LD_LIBRARY_PATH``, ``DYLD_LIBRARY_PATH`` and "
"``DYLD_FRAMEWORK_PATH`` environment variables."
msgstr ""

#: ../../../reference/conanfile/tools/env/virtualrunenv.rst:50
msgid "This generator will create the following files:"
msgstr ""

#: ../../../reference/conanfile/tools/env/virtualrunenv.rst:52
msgid ""
"conanrunenv-release-x86_64.(bat|sh): This file contains the actual "
"definition of environment variables like PATH, LD_LIBRARY_PATH, etc, and "
"``runenv_info`` of dependencies corresponding to the ``host`` context, and "
"to the current installed configuration. If a repeated call is done with "
"other settings, a different file will be created."
msgstr ""

#: ../../../reference/conanfile/tools/env/virtualrunenv.rst:55
msgid ""
"conanrun.(bat|sh): Accumulates the calls to one or more other scripts to "
"give one single convenient file for all. This only calls the latest specific "
"configuration one, that is, if ``conan install`` is called first for Release "
"build type, and then for Debug, ``conanrun.(bat|sh)`` script will call the "
"Debug one."
msgstr ""

#: ../../../reference/conanfile/tools/env/virtualrunenv.rst:59
msgid ""
"After the execution of one of those files, a new deactivation script will be "
"generated, capturing the current environment, so the environment can be "
"restored when desired. The file will be named also following the current "
"active configuration, like ``deactivate_conanrunenv-release-x86_64.bat``."
msgstr ""

#: ../../../reference/conanfile/tools/env/virtualrunenv.rst:63
msgid ""
"Let's see an example on how to add an environment variable to the "
"``runenv_info`` and get its value later in the consumer side using the "
"``conanrun`` launcher:"
msgstr ""

#: ../../../reference/conanfile/tools/env/virtualrunenv.rst:67
msgid ""
"from conan import ConanFile\n"
"\n"
"class HelloConan(ConanFile):\n"
"\n"
"    def package_info(self):\n"
"        self.runenv_info.define(\"MYVAR\", \"My value!\")"
msgstr ""

#: ../../../reference/conanfile/tools/env/virtualrunenv.rst:78
msgid "test_package/conanfile.py"
msgstr ""

#: ../../../reference/conanfile/tools/env/virtualrunenv.rst:78
msgid ""
"from conan import ConanFile\n"
"\n"
"class HelloTestConan(ConanFile):\n"
"    # VirtualBuildEnv and VirtualRunEnv can be avoided if \"tools.env."
"virtualenv:auto_use\" is defined\n"
"    # (it will be defined in Conan 2.0)\n"
"    generators = \"VirtualRunEnv\"\n"
"\n"
"    def test(self):\n"
"        self.run(\"echo $MYVAR\", env=\"conanrun\")  # Unix-style"
msgstr ""

#: ../../../reference/conanfile/tools/env/virtualrunenv.rst:91
msgid ""
"As we already said above, the ``conanrun`` launcher contains the runtime "
"environment information, so let's run a :command:`conan create . hello/1.0@` "
"and check the console output that should show something like this:"
msgstr ""

#: ../../../reference/conanfile/tools/env/virtualrunenv.rst:94
msgid ""
"....\n"
"Configuring environment variables\n"
"My value!"
msgstr ""

#: ../../../reference/conanfile/tools/env/virtualrunenv.rst:102
msgid "Constructor"
msgstr ""

#: ../../../reference/conanfile/tools/env/virtualrunenv.rst:107
msgid "def __init__(self, conanfile):"
msgstr ""

#: ../../../reference/conanfile/tools/env/virtualrunenv.rst:108
msgid "``conanfile``: the current recipe object. Always use ``self``."
msgstr ""

#: ../../../reference/conanfile/tools/env/virtualrunenv.rst:112
msgid "generate()"
msgstr ""

#: ../../../reference/conanfile/tools/env/virtualrunenv.rst:118
msgid "def generate(self, scope=\"run\"):"
msgstr ""

#: ../../../reference/conanfile/tools/env/virtualrunenv.rst:119
msgid "Parameters:"
msgstr ""

#: ../../../reference/conanfile/tools/env/virtualrunenv.rst:121
msgid ""
"**scope** (Defaulted to ``run``): Add the launcher automatically to the "
"``conanrun`` launcher. Read more in the :ref:`Environment documentation "
"<conan_tools_env_environment_model>`."
msgstr ""
