# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2020, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.41\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/conanfile/tools/files.rst:4
msgid "conan.tools.files"
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:9
msgid "conan.tools.files.patch()"
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:11
msgid ""
"def patch(conanfile, base_path=None, patch_file=None, patch_string=None,\n"
"          strip=0, fuzz=False, **kwargs):"
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:16
msgid ""
"Applies a diff from file (*patch_file*) or string (*patch_string*) in the "
"``conanfile.source_folder`` directory. The folder containing the sources can "
"be customized with the ``self.folders`` attribute in the :ref:`layout(self) "
"method<layout_folders_reference>`."
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:20
#: ../../../reference/conanfile/tools/files.rst:105
#: ../../../reference/conanfile/tools/files.rst:127
#: ../../../reference/conanfile/tools/files.rst:156
#: ../../../reference/conanfile/tools/files.rst:192
msgid "Parameters:"
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:22
msgid "**patch_file**: Patch file that should be applied."
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:23
msgid "**base_path**: Relative path from **conanfile.source_folder**."
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:24
msgid "**patch_string**: Patch string that should be applied."
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:25
msgid "**strip**: Number of folders to be stripped from the path."
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:26
msgid "**output**: Stream object."
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:27
msgid "**fuzz**: Should accept fuzzy patches."
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:28
msgid ""
"**kwargs**: Extra parameters that can be added and will contribute to output "
"information."
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:31
msgid ""
"from conan.tools.files import patch\n"
"\n"
"def build(self):\n"
"    for it in self.conan_data.get(\"patches\", {}).get(self.version, []):\n"
"        patch(self, **it)"
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:42
msgid "conan.tools.files.apply_conandata_patches()"
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:44
msgid "def apply_conandata_patches(conanfile):"
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:48
msgid ""
"Applies patches stored in ``conanfile.conan_data`` (read from ``conandata."
"yml`` file). It will apply all the patches under ``patches`` entry that "
"matches the given ``conanfile.version``. If versions are not defined in "
"``conandata.yml`` it will apply all the patches directly under ``patches`` "
"keyword."
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:52
msgid ""
"The key entries will be passed as kwargs to the :ref:"
"`patch<conan_tools_files_patch>` function."
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:54
msgid "Example of ``conandata.yml`` without versions defined:"
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:56
msgid ""
"from conan.tools.files import apply_conandata_patches\n"
"\n"
"def build(self):\n"
"    apply_conandata_patches(self)"
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:63
msgid ""
"patches:\n"
"- patch_file: \"patches/0001-buildflatbuffers-cmake.patch\"\n"
"- patch_file: \"patches/0002-implicit-copy-constructor.patch\"\n"
"  base_path: \"subfolder\"\n"
"  patch_type: backport\n"
"  patch_source: https://github.com/google/flatbuffers/pull/5650\n"
"  patch_description: Needed to build with modern clang compilers."
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:73
msgid ""
"Example of ``conandata.yml`` with different patches for different versions:"
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:75
msgid ""
"patches:\n"
"  \"1.11.0\":\n"
"    - patch_file: \"patches/0001-buildflatbuffers-cmake.patch\"\n"
"    - patch_file: \"patches/0002-implicit-copy-constructor.patch\"\n"
"      base_path: \"subfolder\"\n"
"      patch_type: backport\n"
"      patch_source: https://github.com/google/flatbuffers/pull/5650\n"
"      patch_description: Needed to build with modern clang compilers.\n"
"  \"1.12.0\":\n"
"    - patch_file: \"patches/0001-buildflatbuffers-cmake.patch\""
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:90
msgid "conan.tools.files.rename()"
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:92
msgid "def rename(conanfile, src, dst)"
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:96
msgid ""
"Utility functions to rename a file or folder *src* to *dst*. On Windows, it "
"is very common that ``os.rename()`` raises an \"Access is denied\" "
"exception, so this tool uses:command:`robocopy` if available. If that is not "
"the case, or the rename is done in a non-Windows machine, it falls back to "
"the ``os.rename()`` implementation."
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:98
msgid ""
"from conan.tools.files import rename\n"
"\n"
"def source(self):\n"
"    rename(self, \"lib-sources-abe2h9fe\", \"sources\")  # renaming a folder"
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:107
msgid "**conanfile**: Conanfile object."
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:108
msgid "**src** (Required): Path to be renamed."
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:109
msgid "**dst** (Required): Path to be renamed to."
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:114
msgid "conan.tools.files.get()"
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:116
msgid ""
"def get(conanfile, url, md5='', sha1='', sha256='', destination=\".\", "
"filename=\"\",\n"
"        keep_permissions=False, pattern=None, verify=True, retry=None, "
"retry_wait=None,\n"
"        auth=None, headers=None, strip_root=False)"
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:122
msgid ""
"High level download and decompressing of a tgz, zip or other compressed "
"format file. Just a high level wrapper for download, unzip, and remove the "
"temporary zip file once unzipped. You can pass hash checking parameters: "
"``md5``, ``sha1``, ``sha256``. All the specified algorithms will be checked. "
"If any of them doesn't match, it will raise a ``ConanException``."
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:129
msgid ""
"**url**, **filename**, **md5**, **sha1**, **sha256**, **verify**, **retry**, "
"**retry_wait**, **auth**, **headers**: forwarded to ``download()``"
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:130
msgid ""
"**keep_permissions**, **pattern**, **strip_root**: forwarded to ``tools."
"unzip()`` (legacy, will be updated)."
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:133
#: ../../../reference/conanfile/tools/files.rst:164
#: ../../../reference/conanfile/tools/files.rst:212
msgid "Examples:"
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:135
msgid ""
"from conan.tools.files import get\n"
"\n"
"def source(self):\n"
"    get(self, \"http://url/file\", md5='d2da0cd0756cd9da6560b9a56016a0cb')\n"
"    # also, specify a destination folder\n"
"    get(self, \"http://url/file\", destination=\"subfolder\")"
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:146
msgid "conan.tools.files.ftp_download()"
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:148
msgid "def ftp_download(conanfile, ip, filename, login='', password='')"
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:153
msgid ""
"Ftp download of a file. Retrieves a file from an FTP server. This doesn't "
"support SSL, but you might implement it yourself using the standard Python "
"FTP library."
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:158
msgid "**conanfile**: Conanfile object, use always ``self``"
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:159
msgid "**ip** (Required): The IP or address of the ftp server."
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:160
msgid ""
"**filename** (Required): The filename, including the path/folder where it is "
"located."
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:161
msgid ""
"**login** (Optional, Defaulted to ``\"\"``): Login credentials for the ftp "
"server."
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:162
msgid ""
"**password** (Optional, Defaulted to ``\"\"``): Password credentials for the "
"ftp server."
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:166
msgid ""
"from conan.tools.files import ftp_download\n"
"\n"
"def source(self):\n"
"    ftp_download(self, 'ftp.debian.org', \"debian/README\")\n"
"    self.output.info(load(\"README\"))"
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:176
msgid "conan.tools.files.download()"
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:178
msgid "Download a file"
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:180
msgid ""
"def download(conanfile, url, filename, verify=True, retry=None, "
"retry_wait=None,\n"
"             auth=None, headers=None, md5='', sha1='', sha256='')"
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:185
msgid ""
"Retrieves a file from a given URL into a file with a given filename. It uses "
"certificates from a list of known verifiers for https downloads, but this "
"can be optionally disabled."
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:188
msgid ""
"You can pass hash checking parameters: ``md5``, ``sha1``, ``sha256``. All "
"the specified algorithms will be checked. If any of them doesn't match, the "
"downloaded file will be removed and it will raise a ``ConanException``."
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:194
msgid "**conanfile** (Required): Conanfile object, use ``self`` always"
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:195
msgid ""
"**url** (Required): URL to download. It can be a list, which only the first "
"one will be downloaded, and the follow URLs will be used as mirror in case "
"of download error."
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:196
msgid ""
"**filename** (Required): Name of the file to be created in the local storage"
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:197
msgid ""
"**verify** (Optional, Defaulted to ``True``): When False, disables https "
"certificate validation."
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:198
msgid ""
"**retry** (Optional, Defaulted to ``1``): Number of retries in case of "
"failure."
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:199
msgid ""
"**retry_wait** (Optional, Defaulted to ``5``): Seconds to wait between "
"download attempts."
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:200
msgid ""
"**auth** (Optional, Defaulted to ``None``): A tuple of user and password to "
"use HTTPBasic authentication. This is used directly in the ``requests`` "
"Python library. Check other uses here: https://requests.readthedocs.io/en/"
"master/user/authentication/#basic-authentication"
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:201
msgid ""
"**headers** (Optional, Defaulted to ``None``): A dictionary with additional "
"headers."
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:202
msgid ""
"**md5** (Optional, Defaulted to ``\"\"``): MD5 hash code to check the "
"downloaded file."
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:203
msgid ""
"**sha1** (Optional, Defaulted to ``\"\"``): SHA-1 hash code to check the "
"downloaded file."
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:204
msgid ""
"**sha256** (Optional, Defaulted to ``\"\"``): SHA-256 hash code to check the "
"downloaded file."
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:206
msgid "Configuration:"
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:208
msgid ""
"``tools.files.download:retry``: number of retries in case some error occurs."
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:209
msgid "``tools.files.download:retry_wait``: seconds to wait between retries."
msgstr ""

#: ../../../reference/conanfile/tools/files.rst:214
msgid ""
"download(self, \"http://someurl/somefile.zip\", \"myfilename.zip\")\n"
"\n"
"# to disable verification:\n"
"download(self, \"http://someurl/somefile.zip\", \"myfilename.zip\", "
"verify=False)\n"
"\n"
"# to retry the download 2 times waiting 5 seconds between them\n"
"download(self, \"http://someurl/somefile.zip\", \"myfilename.zip\", retry=2, "
"retry_wait=5)\n"
"\n"
"# Use https basic authentication\n"
"download(self, \"http://someurl/somefile.zip\", \"myfilename.zip\", "
"auth=(\"user\", \"password\"))\n"
"\n"
"# Pass some header\n"
"download(self, \"http://someurl/somefile.zip\", \"myfilename.zip\", "
"headers={\"Myheader\": \"My value\"})\n"
"\n"
"# Download and check file checksum\n"
"download(self, \"http://someurl/somefile.zip\", \"myfilename.zip\", "
"md5=\"e5d695597e9fa520209d1b41edad2a27\")\n"
"\n"
"# to add mirrors\n"
"download(self, [\"https://ftp.gnu.org/gnu/gcc/gcc-9.3.0/gcc-9.3.0.tar.gz\",\n"
"                \"http://mirror.linux-ia64.org/gnu/gcc/releases/gcc-9.3.0/"
"gcc-9.3.0.tar.gz\"],\n"
"                \"gcc-9.3.0.tar.gz\",\n"
"               sha256=\"5258a9b6afe9463c2e56b9e8355b1a4bee125ca828b8078f910303bc2ef91fa6\")"
msgstr ""
