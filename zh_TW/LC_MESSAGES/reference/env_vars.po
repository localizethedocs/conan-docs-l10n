# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2022, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.58\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/env_vars.rst:4
msgid "Environment variables"
msgstr "環境變數"

#: ../../../reference/env_vars.rst:6
msgid "These are the environment variables used to customize Conan."
msgstr ""

#: ../../../reference/env_vars.rst:8
msgid ""
"Most of them can be set in the *conan.conf* configuration file (inside your "
"``<userhome>/.conan`` folder). However, this environment variables will take "
"precedence over the *conan.conf* configuration."
msgstr ""

#: ../../../reference/env_vars.rst:14
msgid "CMAKE RELATED VARIABLES"
msgstr ""

#: ../../../reference/env_vars.rst:16
msgid ""
"There are some Conan environment variables that will set the equivalent "
"CMake variable using the :ref:`cmake generator<cmake_generator>` and the :"
"ref:`CMake build tool<cmake_reference>`:"
msgstr ""

#: ../../../reference/env_vars.rst:20
msgid "Variable"
msgstr ""

#: ../../../reference/env_vars.rst:20
msgid "CMake set variable"
msgstr ""

#: ../../../reference/env_vars.rst:22
msgid "CONAN_CMAKE_TOOLCHAIN_FILE"
msgstr ""

#: ../../../reference/env_vars.rst:22
msgid "CMAKE_TOOLCHAIN_FILE"
msgstr ""

#: ../../../reference/env_vars.rst:24
msgid "CONAN_CMAKE_SYSTEM_NAME"
msgstr ""

#: ../../../reference/env_vars.rst:24
msgid "CMAKE_SYSTEM_NAME"
msgstr ""

#: ../../../reference/env_vars.rst:26
msgid "CONAN_CMAKE_SYSTEM_VERSION"
msgstr ""

#: ../../../reference/env_vars.rst:26
msgid "CMAKE_SYSTEM_VERSION"
msgstr ""

#: ../../../reference/env_vars.rst:28
msgid "CONAN_CMAKE_SYSTEM_PROCESSOR"
msgstr ""

#: ../../../reference/env_vars.rst:28
msgid "CMAKE_SYSTEM_PROCESSOR"
msgstr ""

#: ../../../reference/env_vars.rst:30
msgid "CONAN_CMAKE_SYSROOT"
msgstr ""

#: ../../../reference/env_vars.rst:30
msgid "CMAKE_SYSROOT"
msgstr ""

#: ../../../reference/env_vars.rst:32
msgid "CONAN_CMAKE_FIND_ROOT_PATH"
msgstr ""

#: ../../../reference/env_vars.rst:32
msgid "CMAKE_FIND_ROOT_PATH"
msgstr ""

#: ../../../reference/env_vars.rst:34
msgid "CONAN_CMAKE_FIND_ROOT_PATH_MODE_PROGRAM"
msgstr ""

#: ../../../reference/env_vars.rst:34
msgid "CMAKE_FIND_ROOT_PATH_MODE_PROGRAM"
msgstr ""

#: ../../../reference/env_vars.rst:36
msgid "CONAN_CMAKE_FIND_ROOT_PATH_MODE_LIBRARY"
msgstr ""

#: ../../../reference/env_vars.rst:36
msgid "CMAKE_FIND_ROOT_PATH_MODE_LIBRARY"
msgstr ""

#: ../../../reference/env_vars.rst:38
msgid "CONAN_CMAKE_FIND_ROOT_PATH_MODE_INCLUDE"
msgstr ""

#: ../../../reference/env_vars.rst:38
msgid "CMAKE_FIND_ROOT_PATH_MODE_INCLUDE"
msgstr ""

#: ../../../reference/env_vars.rst:40 ../../../reference/env_vars.rst:84
msgid "CONAN_CMAKE_GENERATOR_PLATFORM"
msgstr ""

#: ../../../reference/env_vars.rst:40
msgid "CMAKE_GENERATOR_PLATFORM"
msgstr ""

#: ../../../reference/env_vars.rst:42
msgid "CONAN_CMAKE_ANDROID_NDK"
msgstr ""

#: ../../../reference/env_vars.rst:42
msgid "CMAKE_ANDROID_NDK"
msgstr ""

#: ../../../reference/env_vars.rst:47
msgid ""
"See `CMake cross building wiki <https://gitlab.kitware.com/cmake/community/-/"
"wikis/doc/cmake/CrossCompiling>`_"
msgstr ""

#: ../../../reference/env_vars.rst:52
msgid "CONAN_BASH_PATH"
msgstr ""

#: ../../../reference/env_vars.rst:54 ../../../reference/env_vars.rst:109
#: ../../../reference/env_vars.rst:119 ../../../reference/env_vars.rst:127
#: ../../../reference/env_vars.rst:144 ../../../reference/env_vars.rst:174
#: ../../../reference/env_vars.rst:280 ../../../reference/env_vars.rst:307
#: ../../../reference/env_vars.rst:323 ../../../reference/env_vars.rst:343
#: ../../../reference/env_vars.rst:356 ../../../reference/env_vars.rst:371
#: ../../../reference/env_vars.rst:398 ../../../reference/env_vars.rst:429
#: ../../../reference/env_vars.rst:554 ../../../reference/env_vars.rst:590
#: ../../../reference/env_vars.rst:603 ../../../reference/env_vars.rst:616
#: ../../../reference/env_vars.rst:673 ../../../reference/env_vars.rst:696
msgid "**Defaulted to**: Not defined"
msgstr ""

#: ../../../reference/env_vars.rst:56
msgid ""
"Used only in windows to help the :ref:`tools."
"run_in_windows_bash()<tools_run_in_windows_bash>` function to locate our "
"Cygwin/MSYS2 bash. Set it with the bash executable path if it's not in the "
"``PATH`` or you want to use a different one."
msgstr ""

#: ../../../reference/env_vars.rst:60
msgid "CONAN_CACHE_NO_LOCKS"
msgstr ""

#: ../../../reference/env_vars.rst:62 ../../../reference/env_vars.rst:135
#: ../../../reference/env_vars.rst:184 ../../../reference/env_vars.rst:501
#: ../../../reference/env_vars.rst:545 ../../../reference/env_vars.rst:689
msgid "**Defaulted to**: ``False``/``0``"
msgstr ""

#: ../../../reference/env_vars.rst:64
msgid ""
"Set it to ``True``/``1`` to disable locking mechanism of local cache. Set it "
"to ``False``/``0`` to enable locking mechanism of local cache. Use it with "
"caution, and only for debugging purposes. Disabling locks may easily lead to "
"corrupted packages. Not recommended for production environments, and in "
"general should be used for conan development and contributions only."
msgstr ""

#: ../../../reference/env_vars.rst:70
msgid "CONAN_CMAKE_GENERATOR"
msgstr ""

#: ../../../reference/env_vars.rst:72
msgid ""
"Conan ``CMake`` helper class is just a convenience to help to translate "
"Conan settings and options into CMake parameters, but you can easily do it "
"yourself, or adapt it."
msgstr ""

#: ../../../reference/env_vars.rst:75
msgid ""
"For some compiler configurations, as ``gcc`` it will use by default the "
"``Unix Makefiles`` CMake generator. Note that this is not a package "
"settings, building it with makefiles or other build system, as Ninja, should "
"lead to the same binary if using appropriately the same underlying compiler "
"settings. So it doesn't make sense to provide a setting or option for this."
msgstr ""

#: ../../../reference/env_vars.rst:80
msgid ""
"So it can be set with the environment variable ``CONAN_CMAKE_GENERATOR``. "
"Just set its value to your desired CMake generator (as ``Ninja``)."
msgstr ""

#: ../../../reference/env_vars.rst:86
msgid ""
"Defines generator platform to be used by particular CMake generator (see "
"`CMAKE_GENERATOR_PLATFORM documentation <https://cmake.org/cmake/help/latest/"
"variable/CMAKE_GENERATOR_PLATFORM.html>`). Resulting value is passed to the "
"``cmake`` command line (``-A`` argument) by the Conan ``CMake`` helper class "
"during the configuration step. Passing ``None`` causes auto-detection, which "
"currently only happens for the ``Visual Studio 16 2019`` generator. The "
"detection is according to the following table:"
msgstr ""

#: ../../../reference/env_vars.rst:91
msgid "settings.arch"
msgstr ""

#: ../../../reference/env_vars.rst:91
msgid "generator platform"
msgstr ""

#: ../../../reference/env_vars.rst:93
msgid "x86"
msgstr ""

#: ../../../reference/env_vars.rst:93
msgid "Win32"
msgstr ""

#: ../../../reference/env_vars.rst:95
msgid "x86_64"
msgstr ""

#: ../../../reference/env_vars.rst:95
msgid "x64"
msgstr ""

#: ../../../reference/env_vars.rst:97
msgid "armv7"
msgstr ""

#: ../../../reference/env_vars.rst:97
msgid "ARM"
msgstr ""

#: ../../../reference/env_vars.rst:99
msgid "armv8"
msgstr ""

#: ../../../reference/env_vars.rst:99
msgid "ARM64"
msgstr ""

#: ../../../reference/env_vars.rst:101
msgid "other"
msgstr ""

#: ../../../reference/env_vars.rst:101
msgid "(none)"
msgstr ""

#: ../../../reference/env_vars.rst:104
msgid ""
"For any other generators besides the ``Visual Studio 16 2019`` generator, "
"detection results in no generator platform applied (and no ``-A`` argument "
"passed to the CMake command line)."
msgstr ""

#: ../../../reference/env_vars.rst:107
msgid "CLICOLOR"
msgstr ""

#: ../../../reference/env_vars.rst:111
msgid ""
"Set it to ``0`` to disable console output colors, overriding tty detection. "
"Set it to any value other than ``0`` to enable console output colors if a "
"tty is detected. If this is left undefined, Conan will use the "
"``CONAN_COLOR_DISPLAY`` logic to determine whether colors should be enabled."
msgstr ""

#: ../../../reference/env_vars.rst:117
msgid "CLICOLOR_FORCE"
msgstr ""

#: ../../../reference/env_vars.rst:121
msgid ""
"Set it to any value other than ``0`` to force the generation of console "
"output colors, overriding tty detection and ``CLICOLOR``."
msgstr ""

#: ../../../reference/env_vars.rst:125
msgid "NO_COLOR"
msgstr ""

#: ../../../reference/env_vars.rst:129
msgid ""
"Set it to any value to force disable console output colors, overriding tty "
"detection and any other color output controls."
msgstr ""

#: ../../../reference/env_vars.rst:133
msgid "CONAN_COLOR_DARK"
msgstr ""

#: ../../../reference/env_vars.rst:137
msgid ""
"Set it to ``True``/``1`` to use dark colors in the terminal output, instead "
"of light ones. Useful for terminal or consoles with light colors as white, "
"so text is rendered in Blue, Black, Magenta, instead of Yellow, Cyan, White."
msgstr ""

#: ../../../reference/env_vars.rst:142
msgid "CONAN_COLOR_DISPLAY"
msgstr ""

#: ../../../reference/env_vars.rst:146
msgid ""
"By default if undefined Conan output will use color if a tty is detected."
msgstr ""

#: ../../../reference/env_vars.rst:148
msgid ""
"Set it to ``False``/``0`` to remove console output colors. Set it to "
"``True``/``1`` to force console output colors."
msgstr ""

#: ../../../reference/env_vars.rst:152
msgid "CONAN_COMPRESSION_LEVEL"
msgstr ""

#: ../../../reference/env_vars.rst:154
msgid "**Defaulted to**: ``9``"
msgstr ""

#: ../../../reference/env_vars.rst:156
msgid ""
"Conan uses *.tgz* compression for archives before uploading them to remotes. "
"The default compression level is good and fast enough for most cases, but "
"users with huge packages might want to change it and set "
"``CONAN_COMPRESSION_LEVEL`` environment variable to a lower number, which is "
"able to get slightly bigger archives but much better compression speed."
msgstr ""

#: ../../../reference/env_vars.rst:164
msgid "CONAN_CPU_COUNT"
msgstr ""

#: ../../../reference/env_vars.rst:166
msgid "**Defaulted to**: Number of available cores in your machine."
msgstr ""

#: ../../../reference/env_vars.rst:168
msgid ""
"Set the number of cores that the :ref:`tools_cpu_count` will return. Conan "
"recipes can use the ``cpu_count()`` tool to build the library using more "
"than one core."
msgstr ""

#: ../../../reference/env_vars.rst:172
msgid "CONAN_DEFAULT_PROFILE_PATH"
msgstr ""

#: ../../../reference/env_vars.rst:176
msgid ""
"This variable can be used to define a path to an existing profile file that "
"Conan will use as default. If relative, the path will be resolved from the "
"profiles folder."
msgstr ""

#: ../../../reference/env_vars.rst:182
msgid "CONAN_NON_INTERACTIVE"
msgstr ""

#: ../../../reference/env_vars.rst:186
msgid ""
"This environment variable, if set to ``True``/``1``, will prevent "
"interactive prompts. Invocations of Conan commands where an interactive "
"prompt would otherwise appear, will fail instead."
msgstr ""

#: ../../../reference/env_vars.rst:189
msgid ""
"This variable can also be set in ``conan.conf`` as ``non_interactive = "
"True`` in the ``[general]`` section."
msgstr ""

#: ../../../reference/env_vars.rst:193
msgid "CONAN_ENV_XXXX_YYYY"
msgstr ""

#: ../../../reference/env_vars.rst:195
msgid ""
"You can override the default settings (located in your ``~/.conan/profiles/"
"default`` directory) with environment variables."
msgstr ""

#: ../../../reference/env_vars.rst:197
msgid ""
"The ``XXXX`` is the setting name upper-case, and the ``YYYY`` (optional) is "
"the sub-setting name."
msgstr ""

#: ../../../reference/env_vars.rst:199
msgid "**Examples**:"
msgstr ""

#: ../../../reference/env_vars.rst:201
msgid "Override the default compiler:"
msgstr ""

#: ../../../reference/env_vars.rst:203
msgid "CONAN_ENV_COMPILER = \"Visual Studio\""
msgstr ""

#: ../../../reference/env_vars.rst:207
msgid "Override the default compiler version:"
msgstr ""

#: ../../../reference/env_vars.rst:209
msgid "CONAN_ENV_COMPILER_VERSION = \"14\""
msgstr ""

#: ../../../reference/env_vars.rst:213
msgid "Override the architecture:"
msgstr ""

#: ../../../reference/env_vars.rst:215
msgid "CONAN_ENV_ARCH = \"x86\""
msgstr ""

#: ../../../reference/env_vars.rst:222
msgid "CONAN_LOG_RUN_TO_FILE"
msgstr ""

#: ../../../reference/env_vars.rst:224 ../../../reference/env_vars.rst:407
#: ../../../reference/env_vars.rst:630
msgid "**Defaulted to**: ``0``"
msgstr ""

#: ../../../reference/env_vars.rst:226
msgid ""
"If set to ``1`` will log every ``self.run(\"{Some command}\")`` command "
"output in a file called ``conan_run.log``. That file will be located in the "
"current execution directory, so if we call ``self.run`` in the conanfile."
"py's build method, the file will be located in the build folder."
msgstr ""

#: ../../../reference/env_vars.rst:230
msgid ""
"In case we execute ``self.run`` in our ``source()`` method, the ``conan_run."
"log`` will be created in the source directory, but then conan will copy it "
"to the ``build`` folder following the regular execution flow. So the "
"``conan_run.log`` will contain all the logs from your conanfile.py command "
"executions."
msgstr ""

#: ../../../reference/env_vars.rst:234
msgid ""
"The file can be included in the Conan package (for debugging purposes) using "
"the ``package`` method."
msgstr ""

#: ../../../reference/env_vars.rst:236
msgid ""
"def package(self):\n"
"    self.copy(pattern=\"conan_run.log\", dst=\"\", keep_path=False)"
msgstr ""

#: ../../../reference/env_vars.rst:242
msgid "CONAN_LOG_RUN_TO_OUTPUT"
msgstr ""

#: ../../../reference/env_vars.rst:244
msgid "**Defaulted to**: ``1``"
msgstr ""

#: ../../../reference/env_vars.rst:246
msgid ""
"If set to ``0`` Conan won't print the command output to the stdout. Can be "
"used with ``CONAN_LOG_RUN_TO_FILE`` set to ``1`` to log only to file and not "
"printing the output."
msgstr ""

#: ../../../reference/env_vars.rst:250
msgid "CONAN_LOGGING_LEVEL"
msgstr ""

#: ../../../reference/env_vars.rst:252
msgid "**Defaulted to**: ``critical``"
msgstr ""

#: ../../../reference/env_vars.rst:254
msgid ""
"By default Conan logging level is only set for critical events. If you want "
"to show more detailed logging information, set this variable according to "
"`Python Logging Levels`_ or, use a logging level name:"
msgstr ""

#: ../../../reference/env_vars.rst:259
msgid "logging level name"
msgstr ""

#: ../../../reference/env_vars.rst:259
msgid "logging level id"
msgstr ""

#: ../../../reference/env_vars.rst:261
msgid "critical"
msgstr ""

#: ../../../reference/env_vars.rst:261
msgid "50"
msgstr ""

#: ../../../reference/env_vars.rst:263
msgid "error"
msgstr ""

#: ../../../reference/env_vars.rst:263
msgid "40"
msgstr ""

#: ../../../reference/env_vars.rst:265
msgid "warning/warn"
msgstr ""

#: ../../../reference/env_vars.rst:265
msgid "30"
msgstr ""

#: ../../../reference/env_vars.rst:267
msgid "info"
msgstr ""

#: ../../../reference/env_vars.rst:267
msgid "20"
msgstr ""

#: ../../../reference/env_vars.rst:269
msgid "debug"
msgstr ""

#: ../../../reference/env_vars.rst:269
msgid "10"
msgstr ""

#: ../../../reference/env_vars.rst:272
msgid ""
"Both names and IDs are acceptable by environment variable, or using the "
"conan.conf file."
msgstr ""

#: ../../../reference/env_vars.rst:278
msgid "CONAN_LOGIN_USERNAME, CONAN_LOGIN_USERNAME_{REMOTE_NAME}"
msgstr ""

#: ../../../reference/env_vars.rst:282
msgid ""
"You can define the username for the authentication process using environment "
"variables. Conan will use a variable **CONAN_LOGIN_USERNAME_{REMOTE_NAME}**, "
"if the variable is not declared Conan will use the variable "
"**CONAN_LOGIN_USERNAME**, if the variable is not declared either, Conan will "
"request to the user to input a username."
msgstr ""

#: ../../../reference/env_vars.rst:287 ../../../reference/env_vars.rst:378
msgid ""
"These variables are useful for unattended executions like CI servers or "
"automated tasks."
msgstr ""

#: ../../../reference/env_vars.rst:289
msgid ""
"If the remote name contains \"-\" you have to replace it with \"_\" in the "
"variable name:"
msgstr ""

#: ../../../reference/env_vars.rst:291
msgid "For example: For a remote named \"conancenter\":"
msgstr ""

#: ../../../reference/env_vars.rst:293
msgid "SET CONAN_LOGIN_USERNAME_CONANCENTER=MyUser"
msgstr ""

#: ../../../reference/env_vars.rst:299 ../../../reference/env_vars.rst:391
msgid ""
"See the :ref:`conan_user` command documentation for more information about "
"login to remotes"
msgstr ""

#: ../../../reference/env_vars.rst:305
msgid "CONAN_LOGIN_ENCRYPTION_KEY"
msgstr ""

#: ../../../reference/env_vars.rst:309
msgid ""
"This variable is used to obfuscate the credential token when it is stored in "
"the database after a successful :command:`conan user` command. The "
"encryption algorithm is a basic Vigenere cypher which is **not ok for "
"security at all**."
msgstr ""

#: ../../../reference/env_vars.rst:313
msgid ""
"This variable, however, is useful for shared CI servers where the stored "
"value can be compromised: assign a random generated string to this value for "
"each of the builds and configure your server to expire tokens, this will "
"make the value stored in the database harder to crack."
msgstr ""

#: ../../../reference/env_vars.rst:321
msgid "CONAN_MAKE_PROGRAM"
msgstr ""

#: ../../../reference/env_vars.rst:325
msgid "Specify an alternative ``make`` program to use with:"
msgstr ""

#: ../../../reference/env_vars.rst:327
msgid ""
"The build helper :ref:`AutoToolsBuildEnvironment<autotools_reference>`. Will "
"invoke the specified executable in the `make` method."
msgstr ""

#: ../../../reference/env_vars.rst:328
msgid ""
"The build helper :ref:`build helper CMake<cmake_reference>`. By adjusting "
"the CMake variable `CMAKE_MAKE_PROGRAM <https://cmake.org/cmake/help/v3.0/"
"variable/CMAKE_MAKE_PROGRAM.html>`_."
msgstr ""

#: ../../../reference/env_vars.rst:330 ../../../reference/env_vars.rst:347
#: ../../../reference/env_vars.rst:658
msgid "For example:"
msgstr ""

#: ../../../reference/env_vars.rst:332
msgid ""
"CONAN_MAKE_PROGRAM=\"/path/to/mingw32-make\"\n"
"\n"
"# Or only the exe name if it is in the path\n"
"\n"
"CONAN_MAKE_PROGRAM=\"mingw32-make\""
msgstr ""

#: ../../../reference/env_vars.rst:341
msgid "CONAN_CMAKE_PROGRAM"
msgstr ""

#: ../../../reference/env_vars.rst:345
msgid ""
"Specify an alternative ``cmake`` program to use with :ref:"
"`CMake<cmake_reference>` build helper."
msgstr ""

#: ../../../reference/env_vars.rst:349
msgid "CONAN_CMAKE_PROGRAM=\"scan-build cmake\""
msgstr ""

#: ../../../reference/env_vars.rst:354
msgid "CONAN_MSBUILD_VERBOSITY"
msgstr ""

#: ../../../reference/env_vars.rst:358
msgid "Specify ```MSBuild``` verbosity level to use with:"
msgstr ""

#: ../../../reference/env_vars.rst:360
msgid "The build helper :ref:`CMake<cmake_reference>`."
msgstr ""

#: ../../../reference/env_vars.rst:361
msgid "The build helper :ref:`MSBuild<msbuild>`."
msgstr ""

#: ../../../reference/env_vars.rst:363
msgid ""
"For list of allowed values and their meaning, check out the `MSBuild "
"documentation <https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-"
"command-line-reference?view=vs-2017>`_."
msgstr ""

#: ../../../reference/env_vars.rst:369
msgid "CONAN_PASSWORD, CONAN_PASSWORD_{REMOTE_NAME}"
msgstr ""

#: ../../../reference/env_vars.rst:373
msgid ""
"You can define the authentication password using environment variables. "
"Conan will use a variable **CONAN_PASSWORD_{REMOTE_NAME}**, if the variable "
"is not declared Conan will use the variable **CONAN_PASSWORD**, if the "
"variable is not declared either, Conan will request to the user to input a "
"password."
msgstr ""

#: ../../../reference/env_vars.rst:380
msgid ""
"The remote name is transformed to all uppercase. If the remote name contains "
"\"-\", you have to replace it with \"_\" in the variable name."
msgstr ""

#: ../../../reference/env_vars.rst:383
msgid "For example, for a remote named \"conancenter\":"
msgstr ""

#: ../../../reference/env_vars.rst:385
msgid "SET CONAN_PASSWORD_CONANCENTER=Mypassword"
msgstr ""

#: ../../../reference/env_vars.rst:396
msgid "CONAN_HOOKS"
msgstr ""

#: ../../../reference/env_vars.rst:400
msgid ""
"Can be set to a comma separated list with the names of the hooks that will "
"be executed when running a Conan command."
msgstr ""

#: ../../../reference/env_vars.rst:405
msgid "CONAN_PRINT_RUN_COMMANDS"
msgstr ""

#: ../../../reference/env_vars.rst:409
msgid ""
"If set to ``1``, every ``self.run(\"{Some command}\")`` call will log the "
"executed command {Some command} to the output."
msgstr ""

#: ../../../reference/env_vars.rst:411
msgid "For example: In the `conanfile.py` file:"
msgstr ""

#: ../../../reference/env_vars.rst:413
msgid ""
"self.run(\"cd %s && %s ./configure\" % (self.ZIP_FOLDER_NAME, env_line))"
msgstr ""

#: ../../../reference/env_vars.rst:417
msgid "Will print to the output (stout and/or file):"
msgstr ""

#: ../../../reference/env_vars.rst:419
msgid ""
"----Running------\n"
"> cd zlib-1.2.9 && env LIBS=\"\" LDFLAGS=\" -m64   $LDFLAGS\" CFLAGS=\"-"
"mstackrealign -fPIC $CFLAGS -m64  -s -DNDEBUG  \" CPPFLAGS=\"$CPPFLAGS -m64  "
"-s -DNDEBUG  \" C_INCLUDE_PATH=$C_INCLUDE_PATH: "
"CPLUS_INCLUDE_PATH=$CPLUS_INCLUDE_PATH: ./configure\n"
"-----------------\n"
"..."
msgstr ""

#: ../../../reference/env_vars.rst:427
msgid "CONAN_READ_ONLY_CACHE"
msgstr ""

#: ../../../reference/env_vars.rst:431
msgid ""
"This environment variable if defined, will make the Conan cache read-only. "
"This could prevent developers to accidentally edit some header of their "
"dependencies while navigating code in their IDEs."
msgstr ""

#: ../../../reference/env_vars.rst:435
msgid ""
"This variable can also be set in ``conan.conf`` as ``read_only_cache = "
"True`` in the ``[general]`` section."
msgstr ""

#: ../../../reference/env_vars.rst:438
msgid ""
"The packages are made read-only in two points: when a package is built from "
"sources, and when a package is retrieved from a remote repository."
msgstr ""

#: ../../../reference/env_vars.rst:441
msgid ""
"The packages are not modified for upload, so users should take that into "
"consideration before uploading packages, as they will be read-only and that "
"could have other side-effects."
msgstr ""

#: ../../../reference/env_vars.rst:446
msgid ""
"It is not recommended to upload packages directly from developers machines "
"with read-only mode as it could lead to inconsistencies. For better "
"reproducibility we recommend that packages are created and uploaded by CI "
"machines."
msgstr ""

#: ../../../reference/env_vars.rst:452
msgid "CONAN_RUN_TESTS"
msgstr ""

#: ../../../reference/env_vars.rst:454
msgid "**Defaulted to**: Not defined (True/False if defined)"
msgstr ""

#: ../../../reference/env_vars.rst:456
msgid ""
"This environment variable (if defined) can be used in ``conanfile.py`` to "
"enable/disable the tests for a library or application."
msgstr ""

#: ../../../reference/env_vars.rst:459
msgid ""
"It can be used as a convention variable and it's specially useful if a "
"library has unit tests and you are doing :ref:`cross building "
"<cross_building>`, the target binary can't be executed in current host "
"machine building the package."
msgstr ""

#: ../../../reference/env_vars.rst:463
msgid "It can be defined in your profile files at ``~/.conan/profiles``"
msgstr ""

#: ../../../reference/env_vars.rst:465
msgid ""
"...\n"
"[env]\n"
"CONAN_RUN_TESTS=False"
msgstr ""

#: ../../../reference/env_vars.rst:471
msgid ""
"or declared in command line when invoking :command:`conan install` to reduce "
"the variable scope for conan execution"
msgstr ""

#: ../../../reference/env_vars.rst:473
msgid "$ conan install . -e CONAN_RUN_TESTS=0"
msgstr ""

#: ../../../reference/env_vars.rst:477
msgid ""
"See how to retrieve the value with :ref:`tools.get_env() <tools_get_env>` "
"and check a use case with :ref:`a header only with unit tests recipe "
"<header_only_unit_tests_tip>` while cross building."
msgstr ""

#: ../../../reference/env_vars.rst:480
msgid ""
"This variable is evaluated inside the build helper call to ``test()`` and "
"will not run the tests if set to ``False``."
msgstr ""

#: ../../../reference/env_vars.rst:482
msgid ""
"from conans import ConanFile, CMake, tools\n"
"\n"
"class HelloConan(ConanFile):\n"
"    name = \"hello\"\n"
"    version = \"0.1\"\n"
"\n"
"    def build(self):\n"
"        cmake = CMake(self)\n"
"        cmake.configure()\n"
"        cmake.build()\n"
"        cmake.test()"
msgstr ""

#: ../../../reference/env_vars.rst:499
msgid "CONAN_SKIP_VS_PROJECTS_UPGRADE"
msgstr ""

#: ../../../reference/env_vars.rst:503
msgid ""
"When set to ``True``/``1``, the :ref:`tools.build_sln_command() "
"<tools_build_sln_command>`, the :ref:`tools.msvc_build_command() "
"<tools_msvc_build_command>` and the :ref:`MSBuild() <msbuild>` build helper, "
"will not call ``devenv`` command to upgrade the ``sln`` project, "
"irrespective of the ``upgrade_project`` parameter value."
msgstr ""

#: ../../../reference/env_vars.rst:511
msgid "CONAN_SYSREQUIRES_MODE"
msgstr ""

#: ../../../reference/env_vars.rst:513
msgid ""
"**Defaulted to**: Not defined (allowed values ``enabled``/``verify``/"
"``disabled``)"
msgstr ""

#: ../../../reference/env_vars.rst:515
msgid ""
"This environment variable controls whether system packages should be "
"installed into the system via ``SystemPackageTool`` helper, typically used "
"in :ref:`method_system_requirements`."
msgstr ""

#: ../../../reference/env_vars.rst:518
msgid "See values behavior:"
msgstr ""

#: ../../../reference/env_vars.rst:520
msgid ""
"``enabled``: Default value and any call to install method of "
"``SystemPackageTool`` helper should modify the system packages."
msgstr ""

#: ../../../reference/env_vars.rst:522
msgid ""
"``verify``: Display a report of system packages to be installed and abort "
"with exception. Useful if you don't want to allow Conan to modify your "
"system but you want to get a report of packages to be installed."
msgstr ""

#: ../../../reference/env_vars.rst:525
msgid ""
"``disabled``: Display a report of system packages that should be installed "
"but continue the Conan execution and doesn't install any package in your "
"system. Useful if you want to keep manual control of these dependencies, for "
"example in your development environment."
msgstr ""

#: ../../../reference/env_vars.rst:531
msgid "CONAN_SYSREQUIRES_SUDO"
msgstr ""

#: ../../../reference/env_vars.rst:533
msgid "**Defaulted to**: ``True``/``1``"
msgstr ""

#: ../../../reference/env_vars.rst:535
msgid ""
"This environment variable controls whether ``sudo`` is used for installing "
"apt, yum, etc. system packages via ``SystemPackageTool`` helper, typically "
"used in ``system_requirements()``. By default when the environment variable "
"does not exist, \"True\" is assumed, and ``sudo`` is automatically prefixed "
"in front of package management commands.  If you set this to \"False\" or "
"\"0\" ``sudo`` will not be prefixed in front of the commands, however "
"installation or updates of some packages may fail due to a lack of "
"privilege, depending on the user account Conan is running under."
msgstr ""

#: ../../../reference/env_vars.rst:543
msgid "CONAN_TEMP_TEST_FOLDER"
msgstr ""

#: ../../../reference/env_vars.rst:547
msgid ""
"Activating this variable will make build folder of *test_package* to be "
"created in the temporary folder of your machine."
msgstr ""

#: ../../../reference/env_vars.rst:552
msgid "CONAN_TRACE_FILE"
msgstr ""

#: ../../../reference/env_vars.rst:556
msgid ""
"If you want extra logging information about your Conan command executions, "
"you can enable it by setting the ``CONAN_TRACE_FILE`` environment variable. "
"Set it with an absolute path to a file."
msgstr ""

#: ../../../reference/env_vars.rst:559
msgid "export CONAN_TRACE_FILE=/tmp/conan_trace.log"
msgstr ""

#: ../../../reference/env_vars.rst:563
msgid ""
"When the Conan command is executed, some traces will be appended to the "
"specified file. Each line contains a JSON object. The ``_action`` field "
"contains the action type, like ``COMMAND`` for command executions, "
"``EXCEPTION`` for errors and ``REST_API_CALL`` for HTTP calls to a remote."
msgstr ""

#: ../../../reference/env_vars.rst:567
msgid ""
"The logger will append the traces until the ``CONAN_TRACE_FILE`` variable is "
"unset or pointed to a different file."
msgstr ""

#: ../../../reference/env_vars.rst:571
msgid "Read more here: :ref:`logging_and_debugging`"
msgstr ""

#: ../../../reference/env_vars.rst:574
msgid "CONAN_USERNAME, CONAN_CHANNEL"
msgstr ""

#: ../../../reference/env_vars.rst:578
msgid ""
"Environment variables ``CONAN_USERNAME`` and ``CONAN_CHANNEL`` are "
"deprecated and will be removed in Conan 2.0. Don't use them to populate the "
"value of ``self.user`` and ``self.channel``."
msgstr ""

#: ../../../reference/env_vars.rst:581
msgid ""
"These environment variables will be checked when using ``self.user`` or "
"``self.channel`` in package recipes in user space, where the user and "
"channel have not been assigned yet (they are assigned when exported in the "
"local cache). More about these variables in the :ref:`attributes reference "
"<user_channel>`."
msgstr ""

#: ../../../reference/env_vars.rst:588
msgid "CONAN_USER_HOME"
msgstr ""

#: ../../../reference/env_vars.rst:592
msgid ""
"Allows defining a custom base directory for Conan cache directory. Can be "
"useful for concurrent builds under different users in CI, to retrieve and "
"store per-project specific dependencies (useful for deployment, for "
"example). Conan will generate the folder ``.conan`` under the custom base "
"path."
msgstr ""

#: ../../../reference/env_vars.rst:598
msgid "Read more about it in :ref:`custom_cache`"
msgstr ""

#: ../../../reference/env_vars.rst:601
msgid "CONAN_USER_HOME_SHORT"
msgstr ""

#: ../../../reference/env_vars.rst:605
msgid ""
"Specify the base folder to be used with the :ref:`short "
"paths<short_paths_reference>` feature. When not specified, the packages "
"marked as `short_paths` will be stored in the ``C:\\.conan`` (or the current "
"drive letter)."
msgstr ""

#: ../../../reference/env_vars.rst:608
msgid ""
"If set to ``None``, it will disable the `short_paths` feature in Windows for "
"modern Windows that enable long paths at the system level."
msgstr ""

#: ../../../reference/env_vars.rst:610
msgid ""
"Setting this variable equal to, or to a subdirectory of, the local conan "
"cache (e.g. ~/.conan) would result in an invalid cache configuration and is "
"therefore disallowed."
msgstr ""

#: ../../../reference/env_vars.rst:614
msgid "CONAN_USE_ALWAYS_SHORT_PATHS"
msgstr ""

#: ../../../reference/env_vars.rst:618
msgid ""
"If defined to ``True`` or ``1``, every package will be stored in the *short "
"paths directory* resolved by Conan after evaluating "
"``CONAN_USER_HOME_SHORT`` variable (see above). This variable, therefore, "
"overrides the value defined in recipes for the attribute :ref:`short "
"paths<short_paths_reference>`."
msgstr ""

#: ../../../reference/env_vars.rst:622
msgid ""
"If the variable is not defined or it evaluates to ``False`` then every "
"recipe will be stored according to the value of its ``short_paths`` "
"attribute. So, ``CONAN_USE_ALWAYS_SHORT_PATHS`` can force every recipe to "
"use short paths, but it won't work to force the opposite behavior."
msgstr ""

#: ../../../reference/env_vars.rst:628
msgid "CONAN_VERBOSE_TRACEBACK"
msgstr ""

#: ../../../reference/env_vars.rst:632
msgid ""
"When an error is raised in a recipe or even in the Conan code base, if set "
"to ``1`` it will show the complete traceback to ease the debugging."
msgstr ""

#: ../../../reference/env_vars.rst:638
msgid "CONAN_ERROR_ON_OVERRIDE"
msgstr ""

#: ../../../reference/env_vars.rst:640 ../../../reference/env_vars.rst:706
msgid "**Defaulted to**: ``False``"
msgstr ""

#: ../../../reference/env_vars.rst:642
msgid ""
"When a consumer overrides one transitive requirement without using "
"explicitly the keyword ``override`` Conan will raise an error if this "
"environmente variable is set to ``True``."
msgstr ""

#: ../../../reference/env_vars.rst:645
msgid ""
"This variable can also be set in the :ref:`*conan.conf*<conan_conf>` file "
"under the section ``[general]``."
msgstr ""

#: ../../../reference/env_vars.rst:651
msgid "CONAN_VS_INSTALLATION_PREFERENCE"
msgstr ""

#: ../../../reference/env_vars.rst:653
msgid "**Defaulted to**: ``Enterprise, Professional, Community, BuildTools``"
msgstr ""

#: ../../../reference/env_vars.rst:655
msgid ""
"This environment variables defines the order of preference when searching "
"for a Visual installation product. This would affect every tool that uses "
"``tools.vs_installation_path()`` and will search in the order indicated."
msgstr ""

#: ../../../reference/env_vars.rst:660
msgid ""
"set CONAN_VS_INSTALLATION_PREFERENCE=Enterprise, Professional, Community, "
"BuildTools"
msgstr ""

#: ../../../reference/env_vars.rst:664
msgid ""
"It can also be used to fix the type of installation you want to use "
"indicating just one product type:"
msgstr ""

#: ../../../reference/env_vars.rst:666
msgid "set CONAN_VS_INSTALLATION_PREFERENCE=BuildTools"
msgstr ""

#: ../../../reference/env_vars.rst:671
msgid "CONAN_CACERT_PATH"
msgstr ""

#: ../../../reference/env_vars.rst:675
msgid ""
"Specify an alternative path to a *cacert.pem* file to be used for requests. "
"This variable overrides the value defined in the *conan.conf* as "
"``cacert_path = <path/to/cacert.pem>`` under the section ``[general]``."
msgstr ""

#: ../../../reference/env_vars.rst:680
msgid "CONAN_DEFAULT_PACKAGE_ID_MODE"
msgstr ""

#: ../../../reference/env_vars.rst:682
msgid "**Defaulted to**: semver_direct_mode"
msgstr ""

#: ../../../reference/env_vars.rst:684
msgid ""
"It changes the way package IDs are computed, but can change to any value "
"defined in :ref:`package_id_mode`."
msgstr ""

#: ../../../reference/env_vars.rst:687
msgid "CONAN_SKIP_BROKEN_SYMLINKS_CHECK"
msgstr ""

#: ../../../reference/env_vars.rst:691
msgid ""
"When set to ``True``/``1``, Conan will allow the existence broken symlinks "
"while creating a package."
msgstr ""

#: ../../../reference/env_vars.rst:694
msgid "CONAN_PYLINT_WERR"
msgstr ""

#: ../../../reference/env_vars.rst:698
msgid ""
"This environment variable changes the PyLint behavior from *warning* level "
"to *error*. Therefore, any inconsistency found in the recipe will break the "
"process during linter analysis."
msgstr ""

#: ../../../reference/env_vars.rst:704
msgid "CONAN_KEEP_PYTHON_FILES"
msgstr ""

#: ../../../reference/env_vars.rst:708
msgid ""
"This environment variable will allow Python *.pyc* files to be packaged. If "
"not set as ``True``/``1``, all the generated *.pyc* files will be filtered "
"when packaging."
msgstr ""
