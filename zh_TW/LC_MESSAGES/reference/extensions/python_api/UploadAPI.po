# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:37+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/extensions/python_api/UploadAPI.rst:2
msgid "Upload API"
msgstr ""

#: ../../../common/experimental_warning.inc:3
msgid ""
"This feature is experimental and subject to breaking changes. See :ref:`the "
"Conan stability<stability>` section for more information."
msgstr ""

#: ../../../conan_sources/conan/api/subapi/upload.py:docstring of
#: conan.api.subapi.upload.UploadAPI.check_upstream:1
msgid ""
"Check if the artifacts are already in the specified remote, skipping them "
"from the package_list in that case"
msgstr ""

#: ../../../conan_sources/conan/api/subapi/upload.py:docstring of
#: conan.api.subapi.upload.UploadAPI.prepare:1
msgid ""
"Compress the recipes and packages and fill the upload_data objects with the "
"complete information. It doesn't perform the upload nor checks upstream to "
"see if the recipe is still there :param package_list: :param "
"enabled_remotes: :param metadata: A list of patterns of metadata that should "
"be uploaded. Default None means all metadata will be uploaded together with "
"the pkg artifacts. If metadata is empty string (\"\"), it means that no "
"metadata files should be uploaded."
msgstr ""

#: ../../../conan_sources/conan/api/subapi/upload.py:docstring of
#: conan.api.subapi.upload.UploadAPI.upload_full:1
msgid ""
"Does the whole process of uploading, including the possibility of "
"parallelizing per recipe based on `core.upload:parallel`: - calls "
"check_integrity - checks which revision already exist in the server (not "
"necessary to upload) - prepare the artifacts to upload (compress .tgz) - "
"execute the actual upload - upload potential sources backups"
msgstr ""

#: ../../../conan_sources/conan/api/subapi/upload.py:docstring of
#: conan.api.subapi.upload.UploadAPI.get_backup_sources:1
msgid ""
"Get list of backup source files currently present in the cache, either all "
"of them if no argument, else filter by those belonging to the references in "
"the package_list"
msgstr ""
