# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2020, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.39\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:19+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/generators/msbuild.rst:4
msgid "msbuild"
msgstr ""

#: ../../../reference/generators/msbuild.rst:6
msgid ""
"Introduced in Conan 1.26. This generator is aimed to supersede the existing "
"``visualstudio`` and ``visualstudiomulti`` generators."
msgstr ""

#: ../../../reference/generators/msbuild.rst:11
msgid "This generator is experimental and subject to breaking changes."
msgstr ""

#: ../../../reference/generators/msbuild.rst:13
msgid ""
"This is a generator to be used for Visual Studio projects (*.sln* solutions "
"and *.vcxproject* files), natively, without using CMake at all. The "
"generator will create Visual Studio properties files that can be added to "
"the projects and solutions in the IDE, under the \"properties\" tab."
msgstr ""

#: ../../../reference/generators/msbuild.rst:17
msgid ""
"If a conanfile declares two requirements ``\"zlib/1.2.11\", "
"\"poco/1.9.4\"``, then running the :command:`conan install -g=msbuild` will "
"create the following files:"
msgstr ""

#: ../../../reference/generators/msbuild.rst:20
msgid ""
"One properties file for each dependency and transitive dependency, like "
"*conan_zlib.props*, *conan_openssl.props*and *conan_poco.props*. These files "
"will transitively import other files, in this case as the ``poco`` package "
"depends on ``openssl``, the *conan_poco.props* will import *conan_openssl."
"props* file."
msgstr ""

#: ../../../reference/generators/msbuild.rst:24
msgid ""
"One file for each dependency for each configuration, like "
"*conan_zlib_release_x64_v141.props*, containing the corresponding variables "
"(include folders, library folders, library name, etc.) for that "
"configuration, like the ``<ConanzlibIncludeDirectories>`` variable. These "
"files are conditionally included per configuration by the base dependency "
"file (*conan_zlib.props*)."
msgstr ""

#: ../../../reference/generators/msbuild.rst:28
msgid ""
"One *conan_deps.props* Visual Studio properties file, importing all the "
"direct dependencies, in this example both *conan_zlib.props* and *conan_poco."
"props*."
msgstr ""

#: ../../../reference/generators/msbuild.rst:32
msgid ""
"The per-configuration files are created after installing that specific "
"configurations."
msgstr ""

#: ../../../reference/generators/msbuild.rst:40
msgid ""
"$ conan install . -g msbuild -s build_type=Release -s arch=x86_64\n"
"# This will generate the conan_xxx_release_x64 properties files\n"
"$ conan install . -g msbuild -s build_type=Debug -s arch=x86\n"
"# This will generate the conan_xxx_debug_x86 properties files"
msgstr ""

#: ../../../reference/generators/msbuild.rst:41
msgid ""
"This is a multi-configuration generator, after installing different "
"configurations it is possible to switch the configuration directly in the "
"Visual Studio IDE."
msgstr ""

#: ../../../reference/generators/msbuild.rst:44
msgid ""
"If a Visual Studio solutions consists of multiple subprojects, it is "
"possible to add individual property files to specific subprojects, making it "
"available that dependency and its transitive dependencies to that subproject "
"only."
msgstr ""
