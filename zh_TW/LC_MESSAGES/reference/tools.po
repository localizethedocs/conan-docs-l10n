# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2018, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:17+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/tools.rst:4
msgid "Tools"
msgstr ""

#: ../../../reference/tools.rst:6
msgid ""
"Under the tools module there are several functions and utilities that can be "
"used in conan package recipes:"
msgstr ""

#: ../../../reference/tools.rst:9
msgid ""
" from conans import ConanFile\n"
" from conans import tools\n"
"\n"
" class ExampleConan(ConanFile):\n"
"     ..."
msgstr ""

#: ../../../reference/tools.rst:21
msgid "tools.cpu_count()"
msgstr ""

#: ../../../reference/tools.rst:23
msgid "def tools.cpu_count()"
msgstr ""

#: ../../../reference/tools.rst:27
msgid ""
"Returns the number of CPUs available, for parallel builds. If processor "
"detection is not enabled, it will safely return 1. Can be overwritten with "
"the environment variable ``CONAN_CPU_COUNT`` and configured in the :ref:"
"`conan.conf file<conan_conf>`."
msgstr ""

#: ../../../reference/tools.rst:31
msgid "tools.vcvars_command()"
msgstr ""

#: ../../../reference/tools.rst:33
msgid ""
"def vcvars_command(settings, arch=None, compiler_version=None, force=False)"
msgstr ""

#: ../../../reference/tools.rst:37
msgid ""
"Returns, for given settings, the command that should be called to load the "
"Visual Studio environment variables for a certain Visual Studio version. It "
"does not execute the command, as that typically have to be done in the same "
"command as the compilation, so the variables are loaded for the same "
"subprocess. It will be typically used in the ``build()`` method, like this:"
msgstr ""

#: ../../../reference/tools.rst:43
msgid ""
"from conans import tools\n"
"\n"
"def build(self):\n"
"    if self.settings.build_os == \"Windows\":\n"
"        vcvars = tools.vcvars_command(self.settings)\n"
"        build_command = ...\n"
"        self.run(\"%s && configure %s\" % (vcvars, \" \".join(args)))\n"
"        self.run(\"%s && %s %s\" % (vcvars, build_command, \" \"."
"join(build_args)))"
msgstr ""

#: ../../../reference/tools.rst:54
msgid ""
"The ``vcvars_command`` string will contain something like ``call "
"\"%vsXX0comntools%../../VC/vcvarsall.bat\"`` for the corresponding Visual "
"Studio version for the current settings."
msgstr ""

#: ../../../reference/tools.rst:57
msgid ""
"This is typically not needed if using ``CMake``, as the cmake generator will "
"handle the correct Visual Studio version."
msgstr ""

#: ../../../reference/tools.rst:60
msgid ""
"If **arch** or **compiler_version** is specified, it will ignore the "
"settings and return the command to set the Visual Studio environment for "
"these parameters."
msgstr ""

#: ../../../reference/tools.rst:67 ../../../reference/tools.rst:93
#: ../../../reference/tools.rst:167 ../../../reference/tools.rst:191
#: ../../../reference/tools.rst:227 ../../../reference/tools.rst:250
#: ../../../reference/tools.rst:275 ../../../reference/tools.rst:312
#: ../../../reference/tools.rst:353 ../../../reference/tools.rst:377
#: ../../../reference/tools.rst:406 ../../../reference/tools.rst:424
#: ../../../reference/tools.rst:496 ../../../reference/tools.rst:522
#: ../../../reference/tools.rst:542 ../../../reference/tools.rst:594
#: ../../../reference/tools.rst:632 ../../../reference/tools.rst:662
#: ../../../reference/tools.rst:676 ../../../reference/tools.rst:707
#: ../../../reference/tools.rst:751 ../../../reference/tools.rst:766
#: ../../../reference/tools.rst:787 ../../../reference/tools.rst:805
#: ../../../reference/tools.rst:826 ../../../reference/tools.rst:847
#: ../../../reference/tools.rst:876 ../../../reference/tools.rst:899
#: ../../../reference/tools.rst:925 ../../../reference/tools.rst:944
#: ../../../reference/tools.rst:976 ../../../reference/tools.rst:994
#: ../../../reference/tools.rst:1021
msgid "Parameters:"
msgstr ""

#: ../../../reference/tools.rst:64 ../../../reference/tools.rst:660
msgid "**settings** (Required): Conanfile settings. Use ``self.settings``."
msgstr ""

#: ../../../reference/tools.rst:65
msgid "**arch** (Optional, Defaulted to ``None``): Will use ``settings.arch``."
msgstr ""

#: ../../../reference/tools.rst:66
msgid ""
"**compiler_version** (Optional, Defaulted to ``None``): Will use ``settings."
"compiler.version``."
msgstr ""

#: ../../../reference/tools.rst:67
msgid ""
"**force** (Optional, Defaulted to ``False``): Will ignore if the environment "
"is already set for a different Visual Studio version."
msgstr ""

#: ../../../reference/tools.rst:70
msgid "tools.vcvars_dict()"
msgstr ""

#: ../../../reference/tools.rst:72
msgid ""
"vcvars_dict(settings, arch=None, compiler_version=None, force=False, "
"filter_known_paths=False)"
msgstr ""

#: ../../../reference/tools.rst:76
msgid ""
"Returns a dictionary with the variables set by the **tools.vcvars_command**."
msgstr ""

#: ../../../reference/tools.rst:78
msgid ""
"from conans import tools\n"
"\n"
"def build(self):\n"
"    env_vars = tools.vcvars_dict(self.settings):\n"
"    with tools.environment_append(env_vars):\n"
"        # Do something"
msgstr ""

#: ../../../reference/tools.rst:89
msgid "Same as ``vcvars_command``."
msgstr ""

#: ../../../reference/tools.rst:90
msgid ""
"**filter_known_paths** (Optional, Defaulted to ``False``): When True, the "
"function will only keep the PATH entries that follows some known patterns, "
"filtering all the non-Visual Studio ones. When False, it will keep the PATH "
"will all the system entries."
msgstr ""

#: ../../../reference/tools.rst:96
msgid "tools.vcvars()"
msgstr ""

#: ../../../reference/tools.rst:98
msgid ""
"vcvars(settings, arch=None, compiler_version=None, force=False, "
"filter_known_paths=False)"
msgstr ""

#: ../../../reference/tools.rst:104
msgid ""
"This context manager tool has no effect if used in a platform different from "
"Windows."
msgstr ""

#: ../../../reference/tools.rst:106
msgid ""
"This is a context manager that allows to append to the environment all the "
"variables set by the **tools.vcvars_dict()**. You can replace **tools."
"vcvars_command()** and use this context manager to get a cleaner way to "
"activate the Visual Studio environment:"
msgstr ""

#: ../../../reference/tools.rst:110
msgid ""
"from conans import tools\n"
"\n"
"def build(self):\n"
"    with tools.vcvars(self.settings):\n"
"        do_something()"
msgstr ""

#: ../../../reference/tools.rst:122
msgid "tools.build_sln_command() (DEPRECATED)"
msgstr ""

#: ../../../reference/tools.rst:126
msgid ""
"This tool is deprecated and will be removed in Conan 2.0. Use :ref:"
"`MSBuild()<msbuild>` build helper instead."
msgstr ""

#: ../../../reference/tools.rst:129
msgid ""
"def build_sln_command(settings, sln_path, targets=None, "
"upgrade_project=True, build_type=None,\n"
"                      arch=None, parallel=True, toolset=None, platforms=None)"
msgstr ""

#: ../../../reference/tools.rst:134
msgid ""
"Returns the command to call `devenv` and `msbuild` to build a Visual Studio "
"project. It's recommended to use it along with ``vcvars_command()``, so that "
"the Visual Studio tools will be in path."
msgstr ""

#: ../../../reference/tools.rst:137
msgid ""
"from conans import tools\n"
"\n"
"def build(self):\n"
"    build_command = build_sln_command(self.settings, \"myfile.sln\", "
"targets=[\"SDL2_image\"])\n"
"    command = \"%s && %s\" % (tools.vcvars_command(self.settings), "
"build_command)\n"
"    self.run(command)"
msgstr ""

#: ../../../reference/tools.rst:147
msgid "**settings** (Required): Conanfile settings. Use \"self.settings\"."
msgstr ""

#: ../../../reference/tools.rst:148
msgid "**sln_path** (Required):  Visual Studio project file path."
msgstr ""

#: ../../../reference/tools.rst:149
msgid ""
"**targets** (Optional, Defaulted to ``None``):  List of targets to build."
msgstr ""

#: ../../../reference/tools.rst:150
msgid ""
"**upgrade_project** (Optional, Defaulted to ``True``): If ``True``, the "
"project file will be upgraded if the project's VS version is older than "
"current. When :ref:"
"`CONAN_SKIP_VS_PROJECTS_UPGRADE<env_var_conan_skip_vs_project_upgrade>` "
"environment variable is set to ``True``/``1``, this parameter will be "
"ignored and the project won't be upgraded."
msgstr ""

#: ../../../reference/tools.rst:153
msgid ""
"**build_type** (Optional, Defaulted to ``None``): Override the build type "
"defined in the settings (``settings.build_type``)."
msgstr ""

#: ../../../reference/tools.rst:154
msgid ""
"**arch** (Optional, Defaulted to ``None``): Override the architecture "
"defined in the settings (``settings.arch``)."
msgstr ""

#: ../../../reference/tools.rst:155
msgid ""
"**parallel** (Optional, Defaulted to ``True``): Enables VS parallel build "
"with ``/m:X`` argument, where X is defined by CONAN_CPU_COUNT environment "
"variable or by the number of cores in the processor by default."
msgstr ""

#: ../../../reference/tools.rst:157
msgid ""
"**toolset** (Optional, Defaulted to ``None``): Specify a toolset. Will "
"append a ``/p:PlatformToolset`` option."
msgstr ""

#: ../../../reference/tools.rst:158
msgid ""
"**platforms** (Optional, Defaulted to ``None``): Dictionary with the mapping "
"of archs/platforms from Conan naming to another one. It is useful for Visual "
"Studio solutions that have a different naming in architectures. Example: "
"``platforms={\"x86\":\"Win32\"}`` (Visual solution uses \"Win32\" instead of "
"\"x86\"). This dictionary will update the default one:"
msgstr ""

#: ../../../reference/tools.rst:162
msgid ""
"msvc_arch = {'x86': 'x86',\n"
"             'x86_64': 'x64',\n"
"             'armv7': 'ARM',\n"
"             'armv8': 'ARM64'}"
msgstr ""

#: ../../../reference/tools.rst:173
msgid "tools.msvc_build_command() (DEPRECATED)"
msgstr ""

#: ../../../reference/tools.rst:177
msgid ""
"This tool is deprecated and will be removed in Conan 2.0. Use :ref:"
"`MSBuild()<msbuild>`.get_command() instead."
msgstr ""

#: ../../../reference/tools.rst:181
msgid ""
"def msvc_build_command(settings, sln_path, targets=None, "
"upgrade_project=True, build_type=None,\n"
"                       arch=None, parallel=True, force_vcvars=False, "
"toolset=None, platforms=None)"
msgstr ""

#: ../../../reference/tools.rst:186
msgid ""
"Returns a string with a joint command consisting in setting the environment "
"variables via ``vcvars.bat`` with the above ``tools.vcvars_command()`` "
"function, and building a Visual Studio project with the ``tools."
"build_sln_command()`` function."
msgstr ""

#: ../../../reference/tools.rst:190
msgid ""
"Same parameters as the above :ref:`tools."
"build_sln_command()<build_sln_commmand>`."
msgstr ""

#: ../../../reference/tools.rst:191
msgid ""
"**force_vcvars**: Optional. Defaulted to False. Will set "
"``vcvars_command(force=force_vcvars)``."
msgstr ""

#: ../../../reference/tools.rst:194
msgid "tools.unzip()"
msgstr ""

#: ../../../reference/tools.rst:196
msgid "def unzip(filename, destination=\".\", keep_permissions=False)"
msgstr ""

#: ../../../reference/tools.rst:200
msgid ""
"Function mainly used in ``source()``, but could be used in ``build()`` in "
"special cases, as when retrieving pre-built binaries from the Internet."
msgstr ""

#: ../../../reference/tools.rst:203
msgid ""
"This function accepts ``.tar.gz``, ``.tar``, ``.tzb2``, ``.tar.bz2``, ``."
"tgz`` and ``.zip`` files, and decompress them into the given destination "
"folder (the current one by default)."
msgstr ""

#: ../../../reference/tools.rst:206
msgid ""
"from conans import tools\n"
"\n"
"tools.unzip(\"myfile.zip\")\n"
"# or to extract in \"myfolder\" sub-folder\n"
"tools.unzip(\"myfile.zip\", \"myfolder\")"
msgstr ""

#: ../../../reference/tools.rst:214
msgid ""
"You can keep the permissions of the files using the "
"``keep_permissions=True`` parameter."
msgstr ""

#: ../../../reference/tools.rst:216
msgid ""
"from conans import tools\n"
"\n"
"tools.unzip(\"myfile.zip\", \"myfolder\", keep_permissions=True)"
msgstr ""

#: ../../../reference/tools.rst:223 ../../../reference/tools.rst:249
msgid "**filename** (Required): File to be unzipped."
msgstr ""

#: ../../../reference/tools.rst:224
msgid ""
"**destination** (Optional, Defaulted to ``\".\"``): Destination folder for "
"unzipped files."
msgstr ""

#: ../../../reference/tools.rst:225
msgid ""
"**keep_permissions** (Optional, Defaulted to ``False``): Keep permissions of "
"files. **WARNING:** Can be dangerous if the zip was not created in a NIX "
"system, the bits could produce undefined permission schema. Use only this "
"option if you are sure that the zip was created correctly."
msgstr ""

#: ../../../reference/tools.rst:230
msgid "tools.untargz()"
msgstr ""

#: ../../../reference/tools.rst:232
msgid "def untargz(filename, destination=\".\")"
msgstr ""

#: ../../../reference/tools.rst:236
msgid ""
"Extract tar gz files (or in the family). This is the function called by the "
"previous ``unzip()`` for the matching extensions, so generally not needed to "
"be called directly, call ``unzip()`` instead unless the file had a different "
"extension."
msgstr ""

#: ../../../reference/tools.rst:240
msgid ""
"from conans import tools\n"
"\n"
"tools.untargz(\"myfile.tar.gz\")\n"
"# or to extract in \"myfolder\" sub-folder\n"
"tools.untargz(\"myfile.tar.gz\", \"myfolder\")"
msgstr ""

#: ../../../reference/tools.rst:250
msgid ""
"**destination** (Optional, Defaulted to ``\".\"``): Destination folder for "
"*untargzed* files."
msgstr ""

#: ../../../reference/tools.rst:253
msgid "tools.get()"
msgstr ""

#: ../../../reference/tools.rst:255
msgid "def get(url, md5=\"\", sha1=\"\", sha256=\"\")"
msgstr ""

#: ../../../reference/tools.rst:259
msgid ""
"Just a high level wrapper for download, unzip, and remove the temporary zip "
"file once unzipped. You can pass hash checking parameters: ``md5``, "
"``sha1``, ``sha256``. All the specified algorithms will be checked, if any "
"of them doesn't match, it will raise a ``ConanException``."
msgstr ""

#: ../../../reference/tools.rst:263
msgid ""
"from conans import tools\n"
"\n"
"tools.get(\"http://url/file\", md5='d2da0cd0756cd9da6560b9a56016a0cb')\n"
"# also, specify a destination folder\n"
"tools.get(\"http://url/file\", destination=\"subfolder\")"
msgstr ""

#: ../../../reference/tools.rst:272 ../../../reference/tools.rst:344
msgid "**url** (Required): URL to download"
msgstr ""

#: ../../../reference/tools.rst:273
msgid ""
"**md5** (Optional, Defaulted to ``\"\"``): MD5 hash code to check the "
"downloaded file."
msgstr ""

#: ../../../reference/tools.rst:274
msgid ""
"**sha1** (Optional, Defaulted to ``\"\"``): SHA1 hash code to check the "
"downloaded file."
msgstr ""

#: ../../../reference/tools.rst:275
msgid ""
"**sha256** (Optional, Defaulted to ``\"\"``): SHA256 hash code to check the "
"downloaded file."
msgstr ""

#: ../../../reference/tools.rst:280
msgid "tools.get_env()"
msgstr ""

#: ../../../reference/tools.rst:282
msgid "def get_env(env_key, default=None, environment=None)"
msgstr ""

#: ../../../reference/tools.rst:286
msgid ""
"Parses an environment and cast its value against the **default** type passed "
"as an argument."
msgstr ""

#: ../../../reference/tools.rst:288
msgid ""
"Following python conventions, returns **default** if **env_key** is not "
"defined."
msgstr ""

#: ../../../reference/tools.rst:290
msgid ""
"See an usage example with an environment variable defined while executing "
"conan"
msgstr ""

#: ../../../reference/tools.rst:292
msgid "$ TEST_ENV=\"1\" conan <command> ..."
msgstr ""

#: ../../../reference/tools.rst:296
msgid ""
"from conans import tools\n"
"\n"
"tools.get_env(\"TEST_ENV\") # returns \"1\", returns current value\n"
"tools.get_env(\"TEST_ENV_NOT_DEFINED\") # returns None, TEST_ENV_NOT_DEFINED "
"not declared\n"
"tools.get_env(\"TEST_ENV_NOT_DEFINED\", []) # returns [], "
"TEST_ENV_NOT_DEFINED not declared\n"
"tools.get_env(\"TEST_ENV\", \"2\") # returns \"1\"\n"
"tools.get_env(\"TEST_ENV\", False) # returns True (default value is "
"boolean)\n"
"tools.get_env(\"TEST_ENV\", 2) # returns 1\n"
"tools.get_env(\"TEST_ENV\", 2.0) # returns 1.0\n"
"tools.get_env(\"TEST_ENV\", []) # returns [\"1\"]"
msgstr ""

#: ../../../reference/tools.rst:310
msgid "**env_key** (Required): environment variable name."
msgstr ""

#: ../../../reference/tools.rst:311
msgid ""
"**default** (Optional, Defaulted to ``None``): default value to return if "
"not defined or cast value against."
msgstr ""

#: ../../../reference/tools.rst:312
msgid ""
"**environment** (Optional, Defaulted to ``None``): ``os.environ`` if "
"``None`` or environment dictionary to look for."
msgstr ""

#: ../../../reference/tools.rst:315
msgid "tools.download()"
msgstr ""

#: ../../../reference/tools.rst:317
msgid ""
"def download(url, filename, verify=True, out=None, retry=2, retry_wait=5, "
"overwrite=False,\n"
"             auth=None, headers=None)"
msgstr ""

#: ../../../reference/tools.rst:322
msgid ""
"Retrieves a file from a given URL into a file with a given filename. It uses "
"certificates from a list of known verifiers for https downloads, but this "
"can be optionally disabled."
msgstr ""

#: ../../../reference/tools.rst:325
msgid ""
"from conans import tools\n"
"\n"
"tools.download(\"http://someurl/somefile.zip\", \"myfilename.zip\")\n"
"\n"
"# to disable verification:\n"
"tools.download(\"http://someurl/somefile.zip\", \"myfilename.zip\", "
"verify=False)\n"
"\n"
"# to retry the download 2 times waiting 5 seconds between them\n"
"tools.download(\"http://someurl/somefile.zip\", \"myfilename.zip\", retry=2, "
"retry_wait=5)\n"
"\n"
"# Use https basic authentication\n"
"tools.download(\"http://someurl/somefile.zip\", \"myfilename.zip\", "
"auth=(\"user\", \"password\"))\n"
"\n"
"# Pass some header\n"
"tools.download(\"http://someurl/somefile.zip\", \"myfilename.zip\", "
"headers={\"Myheader\": \"My value\"})"
msgstr ""

#: ../../../reference/tools.rst:345
msgid ""
"**filename** (Required): Name of the file to be created in the local storage"
msgstr ""

#: ../../../reference/tools.rst:346
msgid ""
"**verify** (Optional, Defaulted to ``True``): When False, disables https "
"certificate validation."
msgstr ""

#: ../../../reference/tools.rst:347
msgid ""
"**out**: (Optional, Defaulted to ``None``): An object with a write() method "
"can be passed to get the output, stdout will use if not specified."
msgstr ""

#: ../../../reference/tools.rst:348
msgid ""
"**retry** (Optional, Defaulted to ``2``): Number of retries in case of "
"failure."
msgstr ""

#: ../../../reference/tools.rst:349
msgid ""
"**retry_wait** (Optional, Defaulted to ``5``): Seconds to wait between "
"download attempts."
msgstr ""

#: ../../../reference/tools.rst:350
msgid ""
"**overwrite**: (Optional, Defaulted to ``False``): When `True` Conan will "
"overwrite the destination file if exists, if False it will raise."
msgstr ""

#: ../../../reference/tools.rst:351
msgid ""
"**auth** (Optional, Defaulted to ``None``): A tuple of user, password can be "
"passed to use HTTPBasic authentication. This is passed directly to the "
"requests python library, check here other uses of the **auth** parameter: "
"http://docs.python-requests.org/en/master/user/authentication"
msgstr ""

#: ../../../reference/tools.rst:353
msgid ""
"**headers** (Optional, Defaulted to ``None``): A dict with additional "
"headers."
msgstr ""

#: ../../../reference/tools.rst:356
msgid "tools.ftp_download()"
msgstr ""

#: ../../../reference/tools.rst:358
msgid "def ftp_download(ip, filename, login=\"\", password=\"\")"
msgstr ""

#: ../../../reference/tools.rst:362
msgid ""
"Retrieves a file from an FTP server. Right now it doesn't support SSL, but "
"you might implement it yourself using the standard python FTP library, and "
"also if you need some special functionality."
msgstr ""

#: ../../../reference/tools.rst:365
msgid ""
"from conans import tools\n"
"\n"
"def source(self):\n"
"    tools.ftp_download('ftp.debian.org', \"debian/README\")\n"
"    self.output.info(load(\"README\"))"
msgstr ""

#: ../../../reference/tools.rst:374
msgid "**ip** (Required): The IP or address of the ftp server."
msgstr ""

#: ../../../reference/tools.rst:375
msgid ""
"**filename** (Required): The filename, including the path/folder where it is "
"located."
msgstr ""

#: ../../../reference/tools.rst:376
msgid ""
"**login** (Optional, Defaulted to ``\"\"``): Login credentials for the ftp "
"server."
msgstr ""

#: ../../../reference/tools.rst:377
msgid ""
"**password** (Optional, Defaulted to ``\"\"``): Password credentials for the "
"ftp server."
msgstr ""

#: ../../../reference/tools.rst:380
msgid "tools.replace_in_file()"
msgstr ""

#: ../../../reference/tools.rst:382
msgid "def replace_in_file(file_path, search, replace, strict=True)"
msgstr ""

#: ../../../reference/tools.rst:386
msgid ""
"This function is useful for a simple \"patch\" or modification of source "
"files. A typical use would be to augment some library existing ``CMakeLists."
"txt`` in the ``source()`` method, so it uses conan dependencies without "
"forking or modifying the original project:"
msgstr ""

#: ../../../reference/tools.rst:390
msgid ""
"from conans import tools\n"
"\n"
"def source(self):\n"
"    # get the sources from somewhere\n"
"    tools.replace_in_file(\"hello/CMakeLists.txt\", \"PROJECT(MyHello)\",\n"
"        '''PROJECT(MyHello)\n"
"           include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)\n"
"           conan_basic_setup()''')"
msgstr ""

#: ../../../reference/tools.rst:402
msgid ""
"**file_path** (Required): File path of the file to perform the replace in."
msgstr ""

#: ../../../reference/tools.rst:403
msgid "**search** (Required): String you want to be replaced."
msgstr ""

#: ../../../reference/tools.rst:404
msgid "**replace** (Required): String to replace the searched string."
msgstr ""

#: ../../../reference/tools.rst:405
msgid ""
"**strict** (Optional, Defaulted to ``True``): If ``True``, it raises an "
"error if the searched string is not found, so nothing is actually replaced."
msgstr ""

#: ../../../reference/tools.rst:411
msgid "tools.check_with_algorithm_sum()"
msgstr ""

#: ../../../reference/tools.rst:413
msgid "def check_with_algorithm_sum(algorithm_name, file_path, signature)"
msgstr ""

#: ../../../reference/tools.rst:417
msgid ""
"Useful to check that some downloaded file or resource has a predefined hash, "
"so integrity and security are guaranteed. Something that could be typically "
"done in ``source()`` method after retrieving some file from the internet."
msgstr ""

#: ../../../reference/tools.rst:422
msgid "**algorithm_name** (Required): Name of the algorithm to be checked."
msgstr ""

#: ../../../reference/tools.rst:423
msgid "**file_path** (Required): File path of the file to be checked."
msgstr ""

#: ../../../reference/tools.rst:424
msgid "**signature** (Required): Hash code that the file should have."
msgstr ""

#: ../../../reference/tools.rst:426
msgid "There are specific functions for common algorithms:"
msgstr ""

#: ../../../reference/tools.rst:428
msgid ""
"def check_sha1(file_path, signature)\n"
"def check_md5(file_path, signature)\n"
"def check_sha256(file_path, signature)"
msgstr ""

#: ../../../reference/tools.rst:434
msgid "For example:"
msgstr ""

#: ../../../reference/tools.rst:436
msgid ""
"from conans import tools\n"
"\n"
"tools.check_sha1(\"myfile.zip\", "
"\"eb599ec83d383f0f25691c184f656d40384f9435\")"
msgstr ""

#: ../../../reference/tools.rst:442
msgid ""
"Other algorithms are also possible, as long as are recognized by python "
"``hashlib`` implementation, via ``hashlib.new(algorithm_name)``. The "
"previous is equivalent to:"
msgstr ""

#: ../../../reference/tools.rst:445
msgid ""
"from conans import tools\n"
"\n"
"tools.check_with_algorithm_sum(\"sha1\", \"myfile.zip\",\n"
"                                \"eb599ec83d383f0f25691c184f656d40384f9435\")"
msgstr ""

#: ../../../reference/tools.rst:453
msgid "tools.patch()"
msgstr ""

#: ../../../reference/tools.rst:455
msgid ""
"def patch(base_path=None, patch_file=None, patch_string=None, strip=0, "
"output=None)"
msgstr ""

#: ../../../reference/tools.rst:459
msgid ""
"Applies a patch from a file or from a string into the given path. The patch "
"should be in diff (unified diff) format. To be used mainly in the "
"``source()`` method."
msgstr ""

#: ../../../reference/tools.rst:462
msgid ""
"from conans import tools\n"
"\n"
"tools.patch(patch_file=\"file.patch\")\n"
"# from a string:\n"
"patch_content = \" real patch content ...\"\n"
"tools.patch(patch_string=patch_content)\n"
"# to apply in subfolder\n"
"tools.patch(base_path=mysubfolder, patch_string=patch_content)"
msgstr ""

#: ../../../reference/tools.rst:473
msgid ""
"If the patch to be applied uses alternate paths that have to be stripped, "
"like:"
msgstr ""

#: ../../../reference/tools.rst:475
msgid ""
"--- old_path/text.txt\\t2016-01-25 17:57:11.452848309 +0100\n"
"+++ new_path/text_new.txt\\t2016-01-25 17:57:28.839869950 +0100\n"
"@@ -1 +1 @@\n"
"- old content\n"
"+ new content"
msgstr ""

#: ../../../reference/tools.rst:483
msgid ""
"Then it can be done specifying the number of folders to be stripped from the "
"path:"
msgstr ""

#: ../../../reference/tools.rst:485
msgid ""
"from conans import tools\n"
"\n"
"tools.patch(patch_file=\"file.patch\", strip=1)"
msgstr ""

#: ../../../reference/tools.rst:492
msgid ""
"**base_path** (Optional, Defaulted to ``None``): Base path where the patch "
"should be applied."
msgstr ""

#: ../../../reference/tools.rst:493
msgid ""
"**patch_file** (Optional, Defaulted to ``None``): Patch file that should be "
"applied."
msgstr ""

#: ../../../reference/tools.rst:494
msgid ""
"**patch_string** (Optional, Defaulted to ``None``): Patch string that should "
"be applied."
msgstr ""

#: ../../../reference/tools.rst:495
msgid ""
"**strip** (Optional, Defaulted to ``0``): Number of folders to be stripped "
"from the path."
msgstr ""

#: ../../../reference/tools.rst:496
msgid "**output** (Optional, Defaulted to ``None``): Stream object."
msgstr ""

#: ../../../reference/tools.rst:501
msgid "tools.environment_append()"
msgstr ""

#: ../../../reference/tools.rst:503
msgid "def environment_append(env_vars)"
msgstr ""

#: ../../../reference/tools.rst:507
msgid ""
"This is a context manager that allows to temporary use environment variables "
"for a specific piece of code in your conanfile:"
msgstr ""

#: ../../../reference/tools.rst:510
msgid ""
"from conans import tools\n"
"\n"
"def build(self):\n"
"    with tools.environment_append({\"MY_VAR\": \"3\", \"CXX\": \"/path/to/"
"cxx\"}):\n"
"        do_something()"
msgstr ""

#: ../../../reference/tools.rst:518
msgid ""
"The environment variables will be overridden if the value is a string, while "
"it will be prepended if the value is a list. When the context manager block "
"ends, the environment variables will be unset."
msgstr ""

#: ../../../reference/tools.rst:522
msgid ""
"**env_vars** (Required): Dictionary object with environment variable name "
"and its value."
msgstr ""

#: ../../../reference/tools.rst:525
msgid "tools.chdir()"
msgstr ""

#: ../../../reference/tools.rst:527
msgid "def chdir(newdir)"
msgstr ""

#: ../../../reference/tools.rst:531
msgid ""
"This is a context manager that allows to temporary change the current "
"directory in your conanfile:"
msgstr ""

#: ../../../reference/tools.rst:533
msgid ""
"from conans import tools\n"
"\n"
"def build(self):\n"
"    with tools.chdir(\"./subdir\"):\n"
"        do_something()"
msgstr ""

#: ../../../reference/tools.rst:542
msgid ""
"**newdir** (Required): Directory path name to change the current directory."
msgstr ""

#: ../../../reference/tools.rst:545
msgid "tools.pythonpath()"
msgstr ""

#: ../../../reference/tools.rst:547
msgid ""
"This tool is automatically applied in the conanfile methods unless :ref:"
"`apply_env<apply_env>` is deactivated, so any PYTHONPATH inherited from the "
"requirements will be automatically available."
msgstr ""

#: ../../../reference/tools.rst:550
msgid "def pythonpath(conanfile)"
msgstr ""

#: ../../../reference/tools.rst:554
msgid ""
"This is a context manager that allows to load the PYTHONPATH for dependent "
"packages, create packages with python code, and reuse that code into your "
"own recipes."
msgstr ""

#: ../../../reference/tools.rst:557
msgid "It is automatically applied"
msgstr ""

#: ../../../reference/tools.rst:559
msgid ""
"from conans import tools\n"
"\n"
"def build(self):\n"
"    with tools.pythonpath(self):\n"
"        from module_name import whatever\n"
"        whatever.do_something()"
msgstr ""

#: ../../../reference/tools.rst:569
msgid ""
"When the :ref:`apply_env<apply_env>` is activated (default) the above code "
"could be simplified as:"
msgstr ""

#: ../../../reference/tools.rst:572
msgid ""
"from conans import tools\n"
"\n"
"def build(self):\n"
"    from module_name import whatever\n"
"    whatever.do_something()"
msgstr ""

#: ../../../reference/tools.rst:581
msgid ""
"For that to work, one of the dependencies of the current recipe, must have a "
"``module_name`` file or folder with a ``whatever`` file or object inside, "
"and should have declared in its ``package_info()``:"
msgstr ""

#: ../../../reference/tools.rst:585
msgid ""
"from conans import tools\n"
"\n"
"def package_info(self):\n"
"    self.env_info.PYTHONPATH.append(self.package_folder)"
msgstr ""

#: ../../../reference/tools.rst:593 ../../../reference/tools.rst:701
msgid "**conanfile** (Required): Current ``ConanFile`` object."
msgstr ""

#: ../../../reference/tools.rst:597
msgid "tools.no_op()"
msgstr ""

#: ../../../reference/tools.rst:599
msgid "def no_op()"
msgstr ""

#: ../../../reference/tools.rst:603
msgid ""
"Context manager that performs nothing. Useful to condition any other context "
"manager to get a cleaner code:"
msgstr ""

#: ../../../reference/tools.rst:605
msgid ""
"from conans import tools\n"
"\n"
"def build(self):\n"
"    with tools.chdir(\"some_dir\") if self.options.myoption else tools."
"no_op():\n"
"        # if not self.options.myoption, we are not in the \"some_dir\"\n"
"        pass"
msgstr ""

#: ../../../reference/tools.rst:615
msgid "tools.human_size()"
msgstr ""

#: ../../../reference/tools.rst:617
msgid "def human_size(size_bytes)"
msgstr ""

#: ../../../reference/tools.rst:621
msgid ""
"Will return a string from a given number of bytes, rounding it to the most "
"appropriate unit: GB, MB, KB, etc. It is mostly used by the conan downloads "
"and unzip progress, but you can use it if you want too."
msgstr ""

#: ../../../reference/tools.rst:624
msgid ""
"from conans import tools\n"
"\n"
"tools.human_size(1024)\n"
">> 1.0KB"
msgstr ""

#: ../../../reference/tools.rst:632
msgid "**size_bytes** (Required): Number of bytes."
msgstr ""

#: ../../../reference/tools.rst:637
msgid "tools.OSInfo and tools.SystemPackageTool"
msgstr ""

#: ../../../reference/tools.rst:639
msgid ""
"These are helpers to install system packages. Check :ref:"
"`method_system_requirements`."
msgstr ""

#: ../../../reference/tools.rst:644
msgid "tools.cross_building()"
msgstr ""

#: ../../../reference/tools.rst:646
msgid "def cross_building(settings, self_os=None, self_arch=None)"
msgstr ""

#: ../../../reference/tools.rst:650
msgid ""
"Reading the settings and the current host machine it returns ``True`` if we "
"are cross building a conan package:"
msgstr ""

#: ../../../reference/tools.rst:652
msgid ""
"from conans import tools\n"
"\n"
"if tools.cross_building(self.settings):\n"
"    # Some special action"
msgstr ""

#: ../../../reference/tools.rst:661
msgid ""
"**self_os** (Optional, Defaulted to ``None``): Current operating system "
"where the build is being done."
msgstr ""

#: ../../../reference/tools.rst:662
msgid ""
"**self_arch** (Optional, Defaulted to ``None``): Current architecture where "
"the build is being done."
msgstr ""

#: ../../../reference/tools.rst:665
msgid "tools.get_gnu_triplet()"
msgstr ""

#: ../../../reference/tools.rst:667
msgid "def get_gnu_triplet(os, arch, compiler=None)"
msgstr ""

#: ../../../reference/tools.rst:671
msgid ""
"Returns string with GNU like ``<machine>-<vendor>-<op_system>`` triplet."
msgstr ""

#: ../../../reference/tools.rst:674
msgid "**os** (Required): Operating system to be used to create the triplet."
msgstr ""

#: ../../../reference/tools.rst:675
msgid "**arch** (Required): Architecture to be used to create the triplet."
msgstr ""

#: ../../../reference/tools.rst:676
msgid ""
"**compiler** (Optional, Defaulted to ``None``): Compiler used to create the "
"triplet (only needed for Windows)."
msgstr ""

#: ../../../reference/tools.rst:681
msgid "tools.run_in_windows_bash()"
msgstr ""

#: ../../../reference/tools.rst:683
msgid ""
"def run_in_windows_bash(conanfile, bashcmd, cwd=None, subsystem=None, "
"msys_mingw=True, env=None)"
msgstr ""

#: ../../../reference/tools.rst:687
msgid ""
"Runs an unix command inside a bash shell. It requires to have \"bash\" in "
"the path. Useful to build libraries using ``configure`` and ``make`` in "
"Windows. Check :ref:`Windows subsytems <windows_subsystems>` section."
msgstr ""

#: ../../../reference/tools.rst:690
msgid ""
"You can customize the path of the bash executable using the environment "
"variable ``CONAN_BASH_PATH`` or the :ref:`conan.conf<conan_conf>` "
"``bash_path`` variable to change the default bash location."
msgstr ""

#: ../../../reference/tools.rst:693
msgid ""
"from conans import tools\n"
"\n"
"command = \"pwd\"\n"
"tools.run_in_windows_bash(self, command) # self is a conanfile instance"
msgstr ""

#: ../../../reference/tools.rst:702
msgid "**bashcmd** (Required): String with the command to be run."
msgstr ""

#: ../../../reference/tools.rst:703
msgid ""
"**cwd** (Optional, Defaulted to ``None``): Path to directory where to apply "
"the command from."
msgstr ""

#: ../../../reference/tools.rst:704
msgid ""
"**subsystem** (Optional, Defaulted to ``None`` will autodetect the "
"subsystem). Used to escape the command according to the specified subsystem."
msgstr ""

#: ../../../reference/tools.rst:705
msgid ""
"**msys_mingw** (Optional, Defaulted to ``True``) If the specified subsystem "
"is MSYS2, will start it in MinGW mode (native windows development)."
msgstr ""

#: ../../../reference/tools.rst:706
msgid ""
"**env** (Optional, Defaulted to ``None``) You can pass a dict with "
"environment variable to be applied **at first place** so they will have more "
"priority than others."
msgstr ""

#: ../../../reference/tools.rst:710
msgid "tools.get_cased_path()"
msgstr ""

#: ../../../reference/tools.rst:712
msgid "get_cased_path(abs_path)"
msgstr ""

#: ../../../reference/tools.rst:717
msgid ""
"For Windows, for any ``abs_path`` parameter containing a case-insensitive "
"absolute path, returns it case-sensitive, that is, with the real cased "
"characters. Useful when using Windows subsystems where the file system is "
"case-sensitive."
msgstr ""

#: ../../../reference/tools.rst:722
msgid "tools.remove_from_path()"
msgstr ""

#: ../../../reference/tools.rst:724
msgid "remove_from_path(command)"
msgstr ""

#: ../../../reference/tools.rst:728
msgid ""
"This is a context manager that allows you to remove a tool from the PATH. "
"Conan will locate the executable (using ``tools.which()``) and will remove "
"from the PATH the directory entry that contains it. It's not necessary to "
"specify the extension."
msgstr ""

#: ../../../reference/tools.rst:732
msgid ""
"from conans import tools\n"
"\n"
"with tools.remove_from_path(\"make\"):\n"
"    self.run(\"some command\")"
msgstr ""

#: ../../../reference/tools.rst:741
msgid "tools.unix_path()"
msgstr ""

#: ../../../reference/tools.rst:743
msgid "def unix_path(path, path_flavor=None)"
msgstr ""

#: ../../../reference/tools.rst:747
msgid ""
"Used to translate Windows paths to MSYS/CYGWIN unix paths like ``c/users/"
"path/to/file``."
msgstr ""

#: ../../../reference/tools.rst:750
msgid "**path** (Required): Path to be converted."
msgstr ""

#: ../../../reference/tools.rst:751
msgid ""
"**path_flavor** (Optional, Defaulted to ``None``, will try to autodetect the "
"subsystem): Type of unix path to be returned. Options are ``MSYS``, "
"``MSYS2``, ``CYGWIN``, ``WSL`` and ``SFU``."
msgstr ""

#: ../../../reference/tools.rst:754
msgid "tools.escape_windows_cmd()"
msgstr ""

#: ../../../reference/tools.rst:756
msgid "def escape_windows_cmd(command)"
msgstr ""

#: ../../../reference/tools.rst:760
msgid ""
"Useful to escape commands to be executed in a windows bash (msys2, cygwin "
"etc)."
msgstr ""

#: ../../../reference/tools.rst:762
msgid ""
"Adds escapes so the argument can be unpacked by ``CommandLineToArgvW()``."
msgstr ""

#: ../../../reference/tools.rst:763
msgid ""
"Adds escapes for cmmd.exe so the argument survives cmmd.exe's substitutions."
msgstr ""

#: ../../../reference/tools.rst:766
msgid "**command** (Required): Command to execute."
msgstr ""

#: ../../../reference/tools.rst:769
msgid "tools.sha1sum(), sha256sum(), md5sum()"
msgstr ""

#: ../../../reference/tools.rst:771
msgid ""
"def def md5sum(file_path)\n"
"def sha1sum(file_path)\n"
"def sha256sum(file_path)"
msgstr ""

#: ../../../reference/tools.rst:777
msgid "Return the respective hash or checksum for a file:"
msgstr ""

#: ../../../reference/tools.rst:779
msgid ""
"from conans import tools\n"
"\n"
"md5 = tools.md5sum(\"myfilepath.txt\")\n"
"sha1 = tools.sha1sum(\"myfilepath.txt\")"
msgstr ""

#: ../../../reference/tools.rst:787
msgid "**file_path** (Required): Path to the file."
msgstr ""

#: ../../../reference/tools.rst:790
msgid "tools.md5()"
msgstr ""

#: ../../../reference/tools.rst:792
msgid "def md5(content)"
msgstr ""

#: ../../../reference/tools.rst:796
msgid "Returns the MD5 hash for a string or byte object:"
msgstr ""

#: ../../../reference/tools.rst:798
msgid ""
"from conans import tools\n"
"\n"
"md5 = tools.md5(\"some string, not a file path\")"
msgstr ""

#: ../../../reference/tools.rst:805
msgid "**content** (Required): String or bytes to calculate its md5."
msgstr ""

#: ../../../reference/tools.rst:808
msgid "tools.save()"
msgstr ""

#: ../../../reference/tools.rst:810
msgid "def save(path, content, append=False)"
msgstr ""

#: ../../../reference/tools.rst:814
msgid ""
"Utility function to save files in one line. It will manage the open and "
"close of the file and creating directories if necessary."
msgstr ""

#: ../../../reference/tools.rst:817
msgid ""
"from conans import tools\n"
"\n"
"tools.save(\"otherfile.txt\", \"contents of the file\")"
msgstr ""

#: ../../../reference/tools.rst:824 ../../../reference/tools.rst:846
msgid "**path** (Required): Path to the file."
msgstr ""

#: ../../../reference/tools.rst:825
msgid "**content** (Required): Content that should be saved into the file."
msgstr ""

#: ../../../reference/tools.rst:826
msgid ""
"**append** (Optional, Defaulted to ``False``): If ``True``, it will append "
"the content."
msgstr ""

#: ../../../reference/tools.rst:829
msgid "tools.load()"
msgstr ""

#: ../../../reference/tools.rst:831
msgid "def load(path, binary=False)"
msgstr ""

#: ../../../reference/tools.rst:835
msgid ""
"Utility function to load files in one line. It will manage the open and "
"close of the file, and load binary encodings. Returns the content of the "
"file."
msgstr ""

#: ../../../reference/tools.rst:839
msgid ""
"from conans import tools\n"
"\n"
"content = tools.load(\"myfile.txt\")"
msgstr ""

#: ../../../reference/tools.rst:847
msgid ""
"**binary** (Optional, Defaulted to ``False``): If ``True``, it reads the the "
"file as binary code."
msgstr ""

#: ../../../reference/tools.rst:850
msgid "tools.mkdir(), tools.rmdir()"
msgstr ""

#: ../../../reference/tools.rst:852
msgid ""
"def mkdir(path)\n"
"def rmdir(path)"
msgstr ""

#: ../../../reference/tools.rst:857
msgid ""
"Utility functions to create/delete a directory. The existance of the "
"specified directory is checked, so ``mkdir()`` will do nothing if the "
"directory already exists and ``rmdir()`` will do nothing if the directory "
"does not exists."
msgstr ""

#: ../../../reference/tools.rst:861
msgid ""
"This makes it safe to use these functions in the ``package()`` method of a "
"``conanfile.py`` when ``no_copy_source=True``."
msgstr ""

#: ../../../reference/tools.rst:864
msgid ""
"from conans import tools\n"
"\n"
"tools.mkdir(\"mydir\") # Creates mydir if it does not already exist\n"
"tools.mkdir(\"mydir\") # Does nothing\n"
"\n"
"tools.rmdir(\"mydir\") # Deletes mydir\n"
"tools.rmdir(\"mydir\") # Does nothing"
msgstr ""

#: ../../../reference/tools.rst:875
msgid "**path** (Required): Path to the directory."
msgstr ""

#: ../../../reference/tools.rst:879
msgid "tools.which()"
msgstr ""

#: ../../../reference/tools.rst:881
msgid "def which(filename)"
msgstr ""

#: ../../../reference/tools.rst:885
msgid ""
"Returns the path to a specified executable searching in the ``PATH`` "
"environment variable. If not found, it returns ``None``."
msgstr ""

#: ../../../reference/tools.rst:887
msgid ""
"This tool also looks for filenames with following extensions if no extension "
"provided:"
msgstr ""

#: ../../../reference/tools.rst:889
msgid "``.com``, ``.exe``, ``.bat`` ``.cmd`` for Windows."
msgstr ""

#: ../../../reference/tools.rst:890
msgid "``.sh`` if not Windows."
msgstr ""

#: ../../../reference/tools.rst:892
msgid ""
"from conans import tools\n"
"\n"
"abs_path_make = tools.which(\"make\")"
msgstr ""

#: ../../../reference/tools.rst:899
msgid ""
"**filename** (Required): Name of the executable file. It doesn't require the "
"extension of the executable."
msgstr ""

#: ../../../reference/tools.rst:902
msgid "tools.touch()"
msgstr ""

#: ../../../reference/tools.rst:904
msgid "def touch(fname, times=None)"
msgstr ""

#: ../../../reference/tools.rst:908
msgid ""
"Updates the timestamp (last access and last modificatiion times) of a file. "
"This is similar to Unix' ``touch`` command, except the command fails if the "
"file does not exist."
msgstr ""

#: ../../../reference/tools.rst:911
msgid ""
"Optionally, a tuple of two numbers can be specified, which denotes the new "
"values for the 'last access' and 'last modified' times respectively."
msgstr ""

#: ../../../reference/tools.rst:914
msgid ""
"from conans import tools\n"
"import time\n"
"\n"
"tools.touch(\"myfile\")                            # Sets atime and mtime to "
"the current time\n"
"tools.touch(\"myfile\", (time.time(), time.time()) # Similar to above\n"
"tools.touch(\"myfile\", (time.time(), 1))          # Modified long, long ago"
msgstr ""

#: ../../../reference/tools.rst:924
msgid "**fname** (Required): File name of the file to be touched."
msgstr ""

#: ../../../reference/tools.rst:925
msgid ""
"**times** (Optional, Defaulted to ``None``: Tuple with 'last access' and "
"'last modified' times."
msgstr ""

#: ../../../reference/tools.rst:928
msgid "tools.relative_dirs()"
msgstr ""

#: ../../../reference/tools.rst:930
msgid "def relative_dirs(path)"
msgstr ""

#: ../../../reference/tools.rst:934
msgid ""
"Recursively walks a given directory (using ``os.walk()``) and returns a list "
"of all contained file paths relative to the given directory."
msgstr ""

#: ../../../reference/tools.rst:937
msgid ""
"from conans import tools\n"
"\n"
"tools.relative_dirs(\"mydir\")"
msgstr ""

#: ../../../reference/tools.rst:944
msgid "**path** (Required): Path of the directory."
msgstr ""

#: ../../../reference/tools.rst:947
msgid "tools.vswhere()"
msgstr ""

#: ../../../reference/tools.rst:949
msgid ""
"def vswhere(all_=False, prerelease=False, products=None, requires=None, "
"version=\"\",\n"
"            latest=False, legacy=False, property_=\"\", nologo=True)"
msgstr ""

#: ../../../reference/tools.rst:954
msgid ""
"Wrapper of ``vswhere`` tool to look for details of Visual Studio "
"installations. Its output is always a list with a dictionary for each "
"installation found."
msgstr ""

#: ../../../reference/tools.rst:957
msgid ""
"from conans import tools\n"
"\n"
"vs_legacy_installations = tool.vswhere(legacy=True)"
msgstr ""

#: ../../../reference/tools.rst:964
msgid ""
"**all_** (Optional, Defaulted to ``False``): Finds all instances even if "
"they are incomplete and may not launch."
msgstr ""

#: ../../../reference/tools.rst:965
msgid ""
"**prerelease** (Optional, Defaulted to ``False``): Also searches "
"prereleases. By default, only releases are searched."
msgstr ""

#: ../../../reference/tools.rst:966
msgid ""
"**products** (Optional, Defaulted to ``None``): List of one or more product "
"IDs to find. Defaults to Community, Professional, and Enterprise. Specify "
"``[\"*\"]`` by itself to search all product instances installed."
msgstr ""

#: ../../../reference/tools.rst:968
msgid ""
"**requires** (Optional, Defaulted to ``None``): List of one or more workload "
"or component IDs required when finding instances. See https://docs.microsoft."
"com/en-us/visualstudio/install/workload-and-component-ids for a list of "
"workload and component IDs."
msgstr ""

#: ../../../reference/tools.rst:970
msgid ""
"**version** (Optional, Defaulted to ``\"\"``): A version range for instances "
"to find. Example: ``\"[15.0,16.0)\"`` will find versions 15.*."
msgstr ""

#: ../../../reference/tools.rst:971
msgid ""
"**latest** (Optional, Defaulted to ``False``): Return only the newest "
"version and last installed."
msgstr ""

#: ../../../reference/tools.rst:972
msgid ""
"**legacy** (Optional, Defaulted to ``False``): Also searches Visual Studio "
"2015 and older products. Information is limited. This option cannot be used "
"with either ``products`` or ``requires`` parameters."
msgstr ""

#: ../../../reference/tools.rst:974
msgid ""
"**property_** (Optional, Defaulted to ``\"\"``): The name of a property to "
"return. Use delimiters ``.``, ``/``, or ``_`` to separate object and "
"property names. Example: ``\"properties.nickname\"`` will return the "
"\"nickname\" property under \"properties\"."
msgstr ""

#: ../../../reference/tools.rst:976
msgid ""
"**nologo** (Optional, Defaulted to ``True``): Do not show logo information."
msgstr ""

#: ../../../reference/tools.rst:979
msgid "tools.vs_comntools()"
msgstr ""

#: ../../../reference/tools.rst:981
msgid "def vs_comntools(compiler_version)"
msgstr ""

#: ../../../reference/tools.rst:985
msgid ""
"Returns the value of the environment variable "
"``VS<compiler_version>.0COMNTOOLS`` for the compiler version indicated."
msgstr ""

#: ../../../reference/tools.rst:987
msgid ""
"from conans import tools\n"
"\n"
"vs_path = tools.vs_comntools(\"14\")"
msgstr ""

#: ../../../reference/tools.rst:994
msgid ""
"**compiler_version** (Required): String with the version number: ``\"14\"``, "
"``\"12\"``..."
msgstr ""

#: ../../../reference/tools.rst:997
msgid "tools.vs_installation_path()"
msgstr ""

#: ../../../reference/tools.rst:999
msgid "def vs_installation_path(version, preference=None)"
msgstr ""

#: ../../../reference/tools.rst:1003
msgid ""
"Returns the Visual Studio installation path for the given version. It uses "
"``tools.vswhere()`` and ``tool.vs_comntools()``. It will also look for the "
"installation paths following ``CONAN_VS_INSTALLATION_PREFERENCE`` "
"environment variable or the preference parameter itself. If the tool is not "
"able to return the path it returns ``None``."
msgstr ""

#: ../../../reference/tools.rst:1008
msgid ""
"from conans import tools\n"
"\n"
"vs_path_2017 = tools.vs_installation_path(\"15\", preference=[\"Community\", "
"\"BuildTools\", \"Professional\", \"Enterprise\"])"
msgstr ""

#: ../../../reference/tools.rst:1015
msgid ""
"**version** (Required): Visual Studio version to locate. Valid version "
"numbers are strings: ``\"10\"``, ``\"11\"``, ``\"12\"``, ``\"13\"``, "
"``\"14\"``, ``\"15\"``..."
msgstr ""

#: ../../../reference/tools.rst:1017
msgid ""
"**preference** (Optional, Defaulted to ``None``): Set to value of "
"``CONAN_VS_INSTALLATION_PREFERENCE`` or defaulted to ``[\"Enterprise\", "
"\"Professional\", \"Community\", \"BuildTools\"]``. If only set to one type "
"of preference, it will return the installation path only for that Visual "
"type and version, otherwise ``None``."
msgstr ""

#: ../../../reference/tools.rst:1024
msgid "tools.replace_prefix_in_pc_file()"
msgstr ""

#: ../../../reference/tools.rst:1026
msgid "def replace_prefix_in_pc_file(pc_file, new_prefix)"
msgstr ""

#: ../../../reference/tools.rst:1030
msgid ""
"Replaces the ``prefix`` variable in a package config file ``.pc`` with the "
"specified value."
msgstr ""

#: ../../../reference/tools.rst:1032
msgid ""
"from conans import tools\n"
"\n"
"lib_b_path = self.deps_cpp_info[\"libB\"].rootpath\n"
"tools.replace_prefix_in_pc_file(\"libB.pc\", lib_b_path)"
msgstr ""

#: ../../../reference/tools.rst:1041 ../../../reference/tools.rst:1067
msgid "**Parameters:**"
msgstr ""

#: ../../../reference/tools.rst:1040
msgid "**pc_file** (Required): Path to the pc file"
msgstr ""

#: ../../../reference/tools.rst:1041
msgid ""
"**new_prefix** (Required): New prefix variable value (Usually a path "
"pointing to a package)."
msgstr ""

#: ../../../reference/tools.rst:1045
msgid ""
"Check section integrations/:ref:`pkg-config and pc files<pc_files>` to know "
"more."
msgstr ""

#: ../../../reference/tools.rst:1049
msgid "tools.collect_libs()"
msgstr ""

#: ../../../reference/tools.rst:1051
msgid "def collect_libs(conanfile, folder=\"lib\")"
msgstr ""

#: ../../../reference/tools.rst:1055
msgid ""
"Fetches a list of all libraries in the package folder. Useful to collect not "
"inter-dependent libraries or with complex names like ``libmylib-x86-debug-en."
"lib``."
msgstr ""

#: ../../../reference/tools.rst:1058
msgid ""
"from conans import tools\n"
"\n"
"def package_info(self):\n"
"    self.cpp_info.libs = tools.collect_libs(self)"
msgstr ""

#: ../../../reference/tools.rst:1066
msgid ""
"**conanfile** (Required): A `ConanFile` object from which to get the "
"`package_folder`."
msgstr ""

#: ../../../reference/tools.rst:1067
msgid ""
"**folder** (Optional, Defaulted to ``\"lib\"``): The subfolder where the "
"library files are."
msgstr ""

#: ../../../reference/tools.rst:1071
msgid ""
"This tool collects the libraries searching directly inside the package "
"folder and returns them in no specific order. If libraries are inter-"
"dependent, then package_info() method should order them to achieve correct "
"linking order."
msgstr ""

#: ../../../reference/tools.rst:1078
msgid "tools.PkgConfig()"
msgstr ""

#: ../../../reference/tools.rst:1080
msgid ""
"class PkgConfig(object):\n"
"\n"
"    def __init__(self, library, pkg_config_executable=\"pkg-config\", "
"static=False, msvc_syntax=False, variables=None)"
msgstr ""

#: ../../../reference/tools.rst:1086
msgid "Wrapper of the ``pkg-config`` tool."
msgstr "``pkg-config`` 工具的包裝器。"

#: ../../../reference/tools.rst:1088
msgid ""
"from conans import tools\n"
"\n"
"with environment_append({'PKG_CONFIG_PATH': tmp_dir}):\n"
"    pkg_config = PkgConfig(\"libastral\")\n"
"    print(pkg_config.cflags)\n"
"    print(pkg_config.cflags_only_I)\n"
"    print(pkg_config.variables)"
msgstr ""

#: ../../../reference/tools.rst:1103
msgid "Parameters of the constructor:"
msgstr ""

#: ../../../reference/tools.rst:1099
msgid "**library** (Required): Library (package) name, such as ``libastral``."
msgstr ""

#: ../../../reference/tools.rst:1100
msgid ""
"**pkg_config_executable** (Optional, Defaulted to ``\"pkg-config\"``): "
"Specify custom pkg-config executable (e.g. for cross-compilation)."
msgstr ""

#: ../../../reference/tools.rst:1101
msgid ""
"**static** (Optional, Defaulted to ``False``): Output libraries suitable for "
"static linking (adds ``--static`` to ``pkg-config`` command line)."
msgstr ""

#: ../../../reference/tools.rst:1102
msgid ""
"**msvc_syntax** (Optional, Defaulted to ``False``): MSVC compatibility (adds "
"``--msvc-syntax`` to ``pkg-config`` command line)."
msgstr ""

#: ../../../reference/tools.rst:1103
msgid ""
"**variables** (Optional, Defaulted to ``None``): Dictionary of pkg-config "
"variables (passed as ``--define-variable=VARIABLENAME=VARIABLEVALUE``)."
msgstr ""

#: ../../../reference/tools.rst:1105
msgid "**Properties:**"
msgstr ""

#: ../../../reference/tools.rst:1108
msgid "PROPERTY"
msgstr ""

#: ../../../reference/tools.rst:1108
msgid "DESCRIPTION"
msgstr ""

#: ../../../reference/tools.rst:1110
msgid ".cflags"
msgstr ""

#: ../../../reference/tools.rst:1110
msgid "get all pre-processor and compiler flags"
msgstr ""

#: ../../../reference/tools.rst:1112
msgid ".cflags_only_I"
msgstr ""

#: ../../../reference/tools.rst:1112
msgid "get -I flags"
msgstr ""

#: ../../../reference/tools.rst:1114
msgid ".cflags_only_other"
msgstr ""

#: ../../../reference/tools.rst:1114
msgid "get cflags not covered by the cflags-only-I option"
msgstr ""

#: ../../../reference/tools.rst:1116
msgid ".libs"
msgstr ""

#: ../../../reference/tools.rst:1116
msgid "get all linker flags"
msgstr ""

#: ../../../reference/tools.rst:1118
msgid ".libs_only_L"
msgstr ""

#: ../../../reference/tools.rst:1118
msgid "get -L flags"
msgstr ""

#: ../../../reference/tools.rst:1120
msgid ".libs_only_l"
msgstr ""

#: ../../../reference/tools.rst:1120
msgid "get -l flags"
msgstr ""

#: ../../../reference/tools.rst:1122
msgid ".libs_only_other"
msgstr ""

#: ../../../reference/tools.rst:1122
msgid "get other libs (e.g. -pthread)"
msgstr ""

#: ../../../reference/tools.rst:1124
msgid ".provides"
msgstr ""

#: ../../../reference/tools.rst:1124
msgid "get which packages the package provides"
msgstr ""

#: ../../../reference/tools.rst:1126
msgid ".requires"
msgstr ""

#: ../../../reference/tools.rst:1126
msgid "get which packages the package requires"
msgstr ""

#: ../../../reference/tools.rst:1128
msgid ".requires_private"
msgstr ""

#: ../../../reference/tools.rst:1128
msgid "get packages the package requires for static linking"
msgstr ""

#: ../../../reference/tools.rst:1130
msgid ".variables"
msgstr ""

#: ../../../reference/tools.rst:1130
msgid "get list of variables defined by the module"
msgstr ""
