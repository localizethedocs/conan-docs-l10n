# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:32+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/tools/google/bazeldeps.rst:4
msgid "BazelDeps"
msgstr ""

#: ../../../common/experimental_warning.inc:3
msgid ""
"This feature is experimental and subject to breaking changes. See :ref:`the "
"Conan stability<stability>` section for more information."
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:8
msgid ""
"The ``BazelDeps`` is the dependencies generator for Bazel. Generates a "
"*<REPOSITORY>/BUILD.bazel* file per dependency, where the *<REPOSITORY>/* "
"folder is the Conan recipe reference name by default, e.g., *mypkg/BUILD."
"bazel*. Apart from that, it also generates a *dependencies.bzl* file which "
"contains a Bazel function to load all your Conan dependencies."
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:12
msgid "The ``BazelDeps`` generator can be used by name in conanfiles:"
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:14
#: ../../../reference/tools/google/bazeldeps.rst:136
msgid "conanfile.py"
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:14
msgid ""
"class Pkg(ConanFile):\n"
"    generators = \"BazelDeps\""
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:20
msgid "conanfile.txt"
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:20
msgid ""
"[generators]\n"
"BazelDeps"
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:26
msgid ""
"And it can also be fully instantiated in the conanfile ``generate()`` method:"
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:28
msgid ""
"from conan import ConanFile\n"
"from conan.tools.google import BazelDeps\n"
"\n"
"class App(ConanFile):\n"
"    settings = \"os\", \"arch\", \"compiler\", \"build_type\"\n"
"    requires = \"zlib/1.2.11\"\n"
"\n"
"    def generate(self):\n"
"        bz = BazelDeps(self)\n"
"        bz.generate()"
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:42
msgid "Generated files"
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:44
msgid ""
"When the ``BazelDeps`` generator is used, every invocation of ``conan "
"install`` will generate several bazel files. For the *conanfile.py* above, "
"for example:"
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:48
msgid ""
"$ conan install .\n"
".\n"
"├── BUILD.bazel\n"
"├── conanfile.py\n"
"├── dependencies.bzl\n"
"└── zlib\n"
"    └── BUILD.bazel"
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:58
msgid "Every :command:`conan install` generates these files:"
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:60
msgid ""
"*BUILD.bazel*: An empty file aimed to be alongside the *dependencies.bzl* "
"one. More information `here <https://bazel.build/concepts/build-files>`__."
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:62
msgid ""
"*dependencies.bzl*: this file tells your Bazel *WORKSPACE* how to load the "
"dependencies."
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:63
msgid ""
"*zlib/BUILD.bazel*: contains all the targets that you can load from any of "
"your *BUILD* files. More information in :ref:"
"`conan_tools_google_bazeldeps_customization`."
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:66
msgid "Let's check the content of the files created:"
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:68
msgid "dependencies.bzl"
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:68
msgid ""
"# This Bazel module should be loaded by your WORKSPACE file.\n"
"# Add these lines to your WORKSPACE one (assuming that you're using the "
"\"bazel_layout\"):\n"
"# load(\"@//conan:dependencies.bzl\", \"load_conan_dependencies\")\n"
"# load_conan_dependencies()\n"
"\n"
"def load_conan_dependencies():\n"
"    native.new_local_repository(\n"
"        name=\"zlib\",\n"
"        path=\"/path/to/conan/package/folder/\",\n"
"        build_file=\"/your/current/working/directory/zlib/BUILD.bazel\",\n"
"    )"
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:83
msgid ""
"Given the example above, and imagining that your WORKSPACE is at the same "
"directory, you would have to add these lines in there:"
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:85
#: ../../../reference/tools/google/bazeldeps.rst:170
msgid "WORKSPACE"
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:85
msgid ""
"load(\"@//:dependencies.bzl\", \"load_conan_dependencies\")\n"
"load_conan_dependencies()"
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:92
msgid "zlib/BUILD.bazel"
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:92
msgid ""
"load(\"@rules_cc//cc:defs.bzl\", \"cc_import\", \"cc_library\")\n"
"\n"
"# Components precompiled libs\n"
"# Root package precompiled libs\n"
"cc_import(\n"
"    name = \"z_precompiled\",\n"
"    static_library = \"lib/libz.a\",\n"
")\n"
"\n"
"# Components libraries declaration\n"
"# Package library declaration\n"
"cc_library(\n"
"    name = \"zlib\",\n"
"    hdrs = glob([\n"
"        \"include/**\",\n"
"    ]),\n"
"    includes = [\n"
"        \"include\",\n"
"    ],\n"
"    visibility = [\"//visibility:public\"],\n"
"    deps = [\n"
"        \":z_precompiled\",\n"
"    ],\n"
")\n"
"\n"
"# Filegroup library declaration\n"
"filegroup(\n"
"    name = \"zlib_binaries\",\n"
"    srcs = glob([\n"
"        \"bin/**\",\n"
"    ]),\n"
"    visibility = [\"//visibility:public\"],\n"
")"
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:129
msgid ""
"As you can observe, the *zlib/BUILD.bazel* defines these global targets:"
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:131
msgid ""
"``zlib``: bazel library target. The label used to depend on it would be "
"``@zlib//:zlib``."
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:132
msgid ""
"``zlib_binaries``: bazel filegroup target. The label used to depend on it "
"would be ``@zlib//:zlib_binaries``."
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:134
msgid ""
"You can put all the files generated by ``BazelDeps`` into another folder "
"using the ``bazel_layout``:"
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:136
msgid ""
"from conan import ConanFile\n"
"from conan.tools.google import BazelDeps, bazel_layout\n"
"\n"
"class App(ConanFile):\n"
"    settings = \"os\", \"arch\", \"compiler\", \"build_type\"\n"
"    requires = \"zlib/1.2.11\"\n"
"\n"
"    def layout(self):\n"
"        bazel_layout(self)\n"
"\n"
"    def generate(self):\n"
"        bz = BazelDeps(self)\n"
"        bz.generate()"
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:154
msgid ""
"Running again the :command:`conan install` command, we now get this "
"structure:"
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:156
msgid ""
"$ conan install .\n"
".\n"
"├── conan\n"
"│   ├── BUILD.bazel\n"
"│   ├── dependencies.bzl\n"
"│   └── zlib\n"
"│       └── BUILD.bazel\n"
"└── conanfile.py"
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:168
msgid ""
"Now your Conan-bazel files were generated in the *conan/* folder, so your "
"WORKSPACE will look like:"
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:170
msgid ""
"load(\"@//conan:dependencies.bzl\", \"load_conan_dependencies\")\n"
"load_conan_dependencies()"
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:179
msgid "Customization"
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:182
msgid "Naming"
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:184
msgid ""
"The ``<REPOSITORY>/BUILD.bazel`` file contains all the targets declared by "
"the dependency. Both the ``<REPOSITORY>/`` folder and the targets declared "
"in there will be named following these rules by default:"
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:189
msgid ""
"For packages, it uses the package name as folder/target name, e.g., package "
"``zlib/1.2.11`` will have:"
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:188
msgid "Folder: ``zlib/BUILD.bazel``."
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:189
msgid "Global target: ``zlib``."
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:190
msgid "How it can be consumed: ``@zlib//:zlib``."
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:199
msgid ""
"For components, the package name + hyphen + component name, e.g., package "
"``openssl/3.1.4`` will have:"
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:192
msgid "Folder: ``openssl/BUILD.bazel``."
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:193
msgid "Global target: ``openssl``."
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:194
msgid "Components targets: ``openssl-ssl``, and ``openssl-crypto``."
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:199
msgid "How it can be consumed:"
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:196
msgid "``@openssl//:openssl`` (global one which includes all the components)"
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:197
msgid "``@openssl//:openssl-ssl`` (component one)"
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:198
msgid "``@openssl//:openssl-crypto`` (component one)"
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:201
msgid ""
"You can change that default behavior with the ``bazel_target_name`` and the "
"``bazel_repository_name`` properties. See :ref:`Properties section below "
"<conan_tools_google_bazeldeps_properties>`."
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:205
msgid "Reference"
msgstr ""

#: ../../../conan_sources/conan/tools/google/bazeldeps.py:docstring of
#: conan.tools.google.bazeldeps.BazelDeps:0
msgid "Parameters"
msgstr "參數"

#: ../../../conan_sources/conan/tools/google/bazeldeps.py:docstring of
#: conan.tools.google.bazeldeps.BazelDeps:1
msgid ""
"``< ConanFile object >`` The current recipe object. Always use ``self``."
msgstr ""

#: ../../../docstring of conan.tools.google.BazelDeps.build_context_activated:1
msgid "Activates the build context for the specified Conan package names."
msgstr ""

#: ../../../conan_sources/conan/tools/google/bazeldeps.py:docstring of
#: conan.tools.google.bazeldeps.BazelDeps.generate:1
msgid ""
"Generates all the targets <DEP>/BUILD.bazel files and the dependencies.bzl "
"one in the build folder. It's important to highlight that the dependencies."
"bzl file should be loaded by your WORKSPACE Bazel file:"
msgstr ""

#: ../../../conan_sources/conan/tools/google/bazeldeps.py:docstring of
#: conan.tools.google.bazeldeps.BazelDeps.generate:5
msgid ""
"load(\"@//[BUILD_FOLDER]:dependencies.bzl\", \"load_conan_dependencies\")\n"
"load_conan_dependencies()"
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:214
msgid "build_context_activated"
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:216
msgid ""
"When you have a **build-requirement**, by default, the Bazel files are not "
"generated. But you can activate it using the **build_context_activated** "
"attribute:"
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:219
msgid ""
"def build_requirements(self):\n"
"    self.tool_requires(\"my_tool/0.0.1\")\n"
"\n"
"def layout(self):\n"
"    bazel_layout(self)\n"
"\n"
"def generate(self):\n"
"    bz = BazelDeps(self)\n"
"    # generate the build-mytool/BUILD.bazel file for the tool require\n"
"    bz.build_context_activated = [\"my_tool\"]\n"
"    bz.generate()"
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:234
msgid ""
"Running the :command:`conan install` command, the structure created is as "
"follows:"
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:236
msgid ""
"$ conan install . -pr:b default\n"
".\n"
"├── conan\n"
"│   ├── BUILD.bazel\n"
"│   ├── build-my_tool\n"
"│   │   └── BUILD.bazel\n"
"│   └── dependencies.bzl\n"
"└── conanfile.py"
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:247
msgid ""
"Notice that *my_tool* Bazel folder is prefixed with ``build-`` which "
"indicates that it's being used in the build context."
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:252
msgid "Properties"
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:254
msgid "The following properties affect the ``BazelDeps`` generator:"
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:256
msgid ""
"**bazel_target_name** property will define the name of the target declared "
"in the ``<REPOSITORY>/BUILD.bazel``. This property can be defined at both "
"global and component ``cpp_info`` level."
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:258
msgid ""
"**bazel_repository_name** property will define the name of the folder where "
"the dependency *BUILD.bazel* will be allocated. This property can only be "
"defined at global ``cpp_info`` level."
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:261
msgid "Example:"
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:263
msgid ""
"def package_info(self):\n"
"    self.cpp_info.set_property(\"bazel_target_name\", \"my_target\")\n"
"    self.cpp_info.set_property(\"bazel_repository_name\", \"my_repo\")\n"
"    self.cpp_info.components[\"mycomponent\"]."
"set_property(\"bazel_target_name\", \"component_name\")"
msgstr ""

#: ../../../reference/tools/google/bazeldeps.rst:273
msgid ":ref:`examples_tools_bazel_toolchain_build_simple_bazel_project`"
msgstr ""
