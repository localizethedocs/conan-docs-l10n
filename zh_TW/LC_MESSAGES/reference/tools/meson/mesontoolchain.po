# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.19\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../reference/tools/meson/mesontoolchain.rst:4
msgid "MesonToolchain"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:10
msgid ""
"This class will generate files that are only compatible with Meson versions "
">= 0.55.0"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:13
msgid ""
"The ``MesonToolchain`` is the toolchain generator for Meson and it can be "
"used in the ``generate()`` method as follows:"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:17
msgid ""
"from conan import ConanFile\n"
"from conan.tools.meson import MesonToolchain\n"
"\n"
"class App(ConanFile):\n"
"    settings = \"os\", \"arch\", \"compiler\", \"build_type\"\n"
"    requires = \"hello/0.1\"\n"
"    options = {\"shared\": [True, False]}\n"
"    default_options = {\"shared\": False}\n"
"\n"
"    def generate(self):\n"
"        tc = MesonToolchain(self)\n"
"        tc.preprocessor_definitions[\"MYDEFINE\"] = \"MYDEF_VALUE\"\n"
"        tc.generate()"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:36
msgid ""
"When your recipe has dependencies ``MesonToolchain`` only works with the "
"``PkgConfigDeps`` generator. Please, do not use other generators, as they "
"can have overlapping definitions that can conflict."
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:41
msgid "Generated files"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:43
msgid ""
"The ``MesonToolchain`` generates the following files after a :command:`conan "
"install` (or when building the package in the cache) with the information "
"provided in the ``generate()`` method as well as information translated from "
"the current ``settings``, ``conf``, etc.:"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:47
msgid "*conan_meson_native.ini*: if doing a native build."
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:48
msgid ""
"*conan_meson_cross.ini*: if doing a cross-build (:ref:`conan_tools_build`)."
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:51
msgid "conan_meson_native.ini"
msgstr "conan_meson_native.ini"

#: ../../../reference/tools/meson/mesontoolchain.rst:53
msgid ""
"This file contains the definitions of all the Meson properties related to "
"the Conan options and settings for the current package, platform, etc. This "
"includes but is not limited to the following:"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:56
msgid "Detection of ``default_library`` from Conan settings."
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:58
msgid "Based on existence/value of an option named ``shared``."
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:60
msgid "Detection of ``buildtype`` from Conan settings."
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:62
msgid "Definition of the C++ standard as necessary."
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:64
msgid ""
"The Visual Studio runtime (``b_vscrt``), obtained from Conan input settings."
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:68
msgid "conan_meson_cross.ini"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:70
msgid ""
"This file contains the same information as the previous *conan_meson_native."
"ini*, but with additional information to describe host, target, and build "
"machines (such as the processor architecture)."
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:74
msgid ""
"Check out the meson documentation for more details on native and cross files:"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:76
msgid "`Machine files <https://mesonbuild.com/Machine-files.html>`_"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:77
msgid ""
"`Native environments <https://mesonbuild.com/Native-environments.html>`_"
msgstr "`原生環境 <https://mesonbuild.com/Native-environments.html>`_"

#: ../../../reference/tools/meson/mesontoolchain.rst:78
msgid "`Cross compilation <https://mesonbuild.com/Cross-compilation.html>`_"
msgstr "`交叉編譯 <https://mesonbuild.com/Cross-compilation.html>`_"

#: ../../../reference/tools/meson/mesontoolchain.rst:82
msgid "Default directories"
msgstr "預設目錄"

#: ../../../reference/tools/meson/mesontoolchain.rst:84
msgid ""
"``MesonToolchain`` manages some of the directories used by Meson. These are "
"variables declared under the ``[project options]`` section of the files "
"`conan_meson_native.ini` and `conan_meson_cross.ini` (see more information "
"about `Meson directories <https://mesonbuild.com/Builtin-options."
"html#directories>`__):"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:89
msgid ""
"``bindir``: value coming from ``self.cpp.package.bindirs``. Defaulted to "
"None. ``sbindir``: value coming from ``self.cpp.package.bindirs``. Defaulted "
"to None. ``libexecdir``: value coming from ``self.cpp.package.bindirs``. "
"Defaulted to None. ``datadir``: value coming from ``self.cpp.package."
"resdirs``. Defaulted to None. ``localedir``: value coming from ``self.cpp."
"package.resdirs``. Defaulted to None. ``mandir``: value coming from ``self."
"cpp.package.resdirs``. Defaulted to None. ``infodir``: value coming from "
"``self.cpp.package.resdirs``. Defaulted to None. ``includedir``: value "
"coming from ``self.cpp.package.includedirs``. Defaulted to None. ``libdir``: "
"value coming from ``self.cpp.package.libdirs``. Defaulted to None."
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:99
msgid ""
"Notice that it needs a ``layout`` to be able to initialize those ``self.cpp."
"package.xxxxx`` variables. For instance:"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:101
msgid ""
"from conan import ConanFile\n"
"from conan.tools.meson import MesonToolchain\n"
"class App(ConanFile):\n"
"    settings = \"os\", \"arch\", \"compiler\", \"build_type\"\n"
"    def layout(self):\n"
"        self.folders.build = \"build\"\n"
"        self.cpp.package.resdirs = [\"res\"]\n"
"    def generate(self):\n"
"        tc = MesonToolchain(self)\n"
"        self.output.info(tc.project_options[\"datadir\"])  # Will print "
"'[\"res\"]'\n"
"        tc.generate()"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:117
msgid ""
"All of them are saved only if they have any value. If the values "
"are``None``, they won't be mentioned in ``[project options]`` section."
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:122
msgid "Customization"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:125
msgid "Attributes"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:128
msgid "project_options"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:130
msgid "This attribute allows defining Meson project options:"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:132
msgid ""
"def generate(self):\n"
"    tc = MesonToolchain(self)\n"
"    tc.project_options[\"MYVAR\"] = \"MyValue\"\n"
"    tc.generate()"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:139
#: ../../../reference/tools/meson/mesontoolchain.rst:166
#: ../../../reference/tools/meson/mesontoolchain.rst:184
msgid "This is translated to:"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:141
msgid ""
"One project options definition for ``MYVAR`` in ``conan_meson_native.ini`` "
"or ``conan_meson_cross.ini`` file."
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:143
msgid ""
"The ``wrap_mode: nofallback`` is defined by default as a project option, to "
"make sure that dependencies are found in Conan packages. It is possible to "
"change or remove it with:"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:145
msgid ""
"def generate(self):\n"
"    tc = MesonToolchain(self)\n"
"    tc.project_options.pop(\"wrap_mode\")\n"
"    tc.generate()"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:152
msgid ""
"Note that in this case, Meson might be able to find dependencies in "
"\"wraps\", it is the responsibility of the user to check the behavior and "
"make sure about the dependencies origin."
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:155
msgid "subproject_options"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:157
msgid "This attribute allows defining Meson subproject options:"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:159
msgid ""
"def generate(self):\n"
"    tc = MesonToolchain(self)\n"
"    tc.subproject_options[\"SUBPROJECT\"] = [{'MYVAR': 'MyValue'}]\n"
"    tc.generate()"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:168
msgid ""
"One subproject ``SUBPROJECT`` and option definition for ``MYVAR`` in the "
"``conan_meson_native.ini`` or ``conan_meson_cross.ini`` file."
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:170
msgid ""
"Note that in contrast to ``project_options``, ``subproject_options`` is a "
"dictionary of lists of dictionaries. This is because Meson allows multiple "
"subprojects, and each subproject can have multiple options."
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:173
msgid "preprocessor_definitions"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:175
msgid ""
"This attribute allows defining compiler preprocessor definitions, for "
"multiple configurations (Debug, Release, etc)."
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:177
msgid ""
"def generate(self):\n"
"    tc = MesonToolchain(self)\n"
"    tc.preprocessor_definitions[\"MYDEF\"] = \"MyValue\"\n"
"    tc.generate()"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:186
msgid ""
"One preprocessor definition for ``MYDEF`` in ``conan_meson_native.ini`` or "
"``conan_meson_cross.ini`` file."
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:189
msgid "conf"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:191
msgid "``MesonToolchain`` is affected by these ``[conf]`` variables:"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:193
msgid ""
"``tools.meson.mesontoolchain:backend``. the meson `backend <https://"
"mesonbuild.com/Configuring-a-build-directory.html>`_ to use. Possible "
"values: ``ninja``, ``vs``, ``vs2010``, ``vs2015``, ``vs2017``, ``vs2019``, "
"``xcode``."
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:196
msgid ""
"``tools.apple:sdk_path`` argument for SDK path in case of Apple cross-"
"compilation. It is used as value of the flag ``-isysroot``."
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:198
msgid ""
"``tools.android:ndk_path`` argument for NDK path in case of Android cross-"
"compilation. It is used to get some binaries like ``c``, ``cpp`` and ``ar`` "
"used in ``[binaries]`` section from *conan_meson_cross.ini*."
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:200
msgid ""
"``tools.build:cxxflags`` list of extra C++ flags that is used by "
"``cpp_args``."
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:201
msgid ""
"``tools.build:cflags`` list of extra of pure C flags that is used by "
"``c_args``."
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:202
msgid ""
"``tools.build:sharedlinkflags`` list of extra linker flags that is used by "
"``c_link_args`` and ``cpp_link_args``."
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:203
msgid ""
"``tools.build:exelinkflags`` list of extra linker flags that is used by "
"``c_link_args`` and ``cpp_link_args``."
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:204
msgid ""
"``tools.build:linker_scripts`` list of linker scripts, each of which will be "
"prefixed with ``-T`` and passed to ``c_link_args`` and ``cpp_link_args``. "
"Only use this flag with linkers that supports specifying linker scripts with "
"the ``-T`` flag, such as ``ld``, ``gold``, and ``lld``."
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:207
msgid ""
"``tools.build:defines`` list of preprocessor definitions, each of which will "
"be prefixed with ``-D`` and passed to ``cpp_args`` and ``c_args``."
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:208
msgid ""
"``tools.build:compiler_executables`` dict-like Python object which specifies "
"the compiler as key and the compiler executable path as value. Those keys "
"will be mapped as follows:"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:210
msgid ""
"``tools.build:sysroot`` which accepts a path to the system root directory "
"and sets the ``--sysroot`` flag that is used by ``c_args``, ``cpp_args``, "
"``c_link_args`` and ``cpp_link_args``."
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:212
msgid ""
"``c``: will set ``c`` in ``[binaries]`` section from *conan_meson_xxxx.ini*."
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:213
msgid ""
"``cpp``: will set ``cpp`` in ``[binaries]`` section from *conan_meson_xxxx."
"ini*."
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:214
msgid ""
"``objc``: will set ``objc`` in ``[binaries]`` section from *conan_meson_xxxx."
"ini*."
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:215
msgid ""
"``objcpp``: will set ``objcpp`` in ``[binaries]`` section from "
"*conan_meson_xxxx.ini*."
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:219
msgid "Using Proper Data Types for Conan Options in Meson"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:221
msgid ""
"Always transform Conan options into valid Python data types before assigning "
"them as Meson values:"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:224
msgid ""
"options = {{\"shared\": [True, False], \"fPIC\": [True, False], "
"\"with_msg\": [\"ANY\"]}}\n"
"default_options = {{\"shared\": False, \"fPIC\": True, \"with_msg\": \"Hi "
"everyone!\"}}\n"
"\n"
"def generate(self):\n"
"    tc = MesonToolchain(self)\n"
"    tc.project_options[\"DYNAMIC\"] = bool(self.options.shared)  # shared is "
"bool\n"
"    tc.project_options[\"GREETINGS\"] = str(self.options.with_msg)  # "
"with_msg is str\n"
"    tc.subproject_options[\"SUBPROJECT\"] = [{'MYVAR': str(self.options."
"with_msg)}]  # with_msg is str\n"
"    tc.subproject_options[\"SUBPROJECT\"].append({'MYVAR': bool(self.options."
"shared)})  # shared is bool\n"
"    tc.generate()"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:237
msgid ""
"In contrast, directly assigning a Conan option as a Meson value is strongly "
"discouraged:"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:239
msgid ""
"options = {{\"shared\": [True, False], \"fPIC\": [True, False], "
"\"with_msg\": [\"ANY\"]}}\n"
"default_options = {{\"shared\": False, \"fPIC\": True, \"with_msg\": \"Hi "
"everyone!\"}}\n"
"# ...\n"
"def generate(self):\n"
"    tc = MesonToolchain(self)\n"
"    tc.project_options[\"DYNAMIC\"] = self.options.shared  # == "
"<PackageOption object>\n"
"    tc.project_options[\"GREETINGS\"] = self.options.with_msg  # == "
"<PackageOption object>\n"
"    tc.subproject_options[\"SUBPROJECT\"] = [{'MYVAR': self.options."
"with_msg}]  # == <PackageOption object>\n"
"    tc.subproject_options[\"SUBPROJECT\"].append({'MYVAR': self.options."
"shared})  # == <PackageOption object>\n"
"    tc.generate()"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:252
msgid ""
"These are not boolean or string values but an internal Conan class "
"representing such option values. If you assign these values directly, upon "
"executing the `generate()` function, you should receive a warning in your "
"console stating, ``WARN: deprecated: Please, do not use a Conan option value "
"directly.`` This method is considered bad practice as it can result in "
"unexpected errors during your project's build process."
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:260
msgid "Cross-building for Apple and Android"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:262
msgid ""
"The ``MesonToolchain`` generator adds all the flags required to cross-"
"compile for Apple (MacOS M1, iOS, etc.) and Android."
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:264
msgid "**Apple**"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:266
msgid ""
"It adds link flags ``-arch XXX``, ``-isysroot [SDK_PATH]`` and the minimum "
"deployment target flag, e.g., ``-mios-version-min=8.0`` to the "
"``MesonToolchain`` ``c_args``, ``c_link_args``, ``cpp_args``, and "
"``cpp_link_args`` attributes, given the Conan settings for any Apple OS "
"(iOS, watchOS, etc.) and the ``tools.apple:sdk_path`` configuration value "
"like it's shown in this example of host profile:"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:271
msgid "**ios_host_profile**"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:271
msgid ""
"[settings]\n"
"os = iOS\n"
"os.version = 10.0\n"
"os.sdk = iphoneos\n"
"arch = armv8\n"
"compiler = apple-clang\n"
"compiler.version = 12.0\n"
"compiler.libcxx = libc++\n"
"\n"
"[conf]\n"
"tools.apple:sdk_path=/my/path/to/iPhoneOS.sdk"
msgstr ""
"[settings]\n"
"os = iOS\n"
"os.version = 10.0\n"
"os.sdk = iphoneos\n"
"arch = armv8\n"
"compiler = apple-clang\n"
"compiler.version = 12.0\n"
"compiler.libcxx = libc++\n"
"\n"
"[conf]\n"
"tools.apple:sdk_path=/my/path/to/iPhoneOS.sdk"

#: ../../../reference/tools/meson/mesontoolchain.rst:287
msgid "**Android**"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:289
msgid ""
"It initializes the ``MesonToolchain`` ``c``, ``cpp``, and ``ar`` attributes, "
"which are needed to cross-compile for Android, given the Conan settings for "
"Android and the ``tools.android:ndk_path`` configuration value like it's "
"shown in this example of host profile:"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:294
msgid "**android_host_profile**"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:294
msgid ""
"[settings]\n"
"os = Android\n"
"os.api_level = 21\n"
"arch = armv8\n"
"\n"
"[conf]\n"
"tools.android:ndk_path=/my/path/to/NDK"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:307
msgid "Cross-building and native=true"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:309
msgid ""
"New since `Conan 2.3.0 <https://github.com/conan-io/conan/releases/"
"tag/2.3.0>`__"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:311
msgid ""
"When you are cross-building, sometimes you need to build a tool which is "
"used to generate source files. For this you would want to build some targets "
"with the system's native compiler. Then, you need Conan to create both "
"context files:"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:315
msgid ""
"def generate(self):\n"
"    tc = MesonToolchain(self)\n"
"    tc.generate()\n"
"    # Forcing to create the native context too\n"
"    if cross_building(self):\n"
"        tc = MesonToolchain(self, native=True)\n"
"        tc.generate()"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:325
msgid ""
"See also `this reference <https://mesonbuild.com/Cross-compilation."
"html#mixing-host-and-build-targets>`__ from the Meson documentation for more "
"information."
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:330
msgid "Objective-C arguments"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:332
msgid ""
"In Apple OS's there are also specific Objective-C/Objective-C++ arguments: "
"``objc``, ``objcpp``, ``objc_args``, ``objc_link_args``, ``objcpp_args``, "
"and ``objcpp_link_args``, as public attributes of the ``MesonToolchain`` "
"class, where the variables ``objc`` and ``objcpp`` are initialized as "
"``clang`` and ``clang++`` respectively by default."
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:340
msgid ""
":ref:`Getting started with "
"Meson<examples_tools_meson_toolchain_build_simple_meson_project>`"
msgstr ""

#: ../../../reference/tools/meson/mesontoolchain.rst:346
msgid "Reference"
msgstr ""

#: ../../../conan_sources/conan/tools/meson/toolchain.py:docstring of
#: conan.tools.meson.toolchain.MesonToolchain:1
msgid "MesonToolchain generator"
msgstr ""

#: ../../../conan_sources/conan/tools/meson/toolchain.py:docstring of
#: conan.tools.meson.toolchain.MesonToolchain:0
msgid "Parameters"
msgstr "參數"

#: ../../../conan_sources/conan/tools/meson/toolchain.py:docstring of
#: conan.tools.meson.toolchain.MesonToolchain:3
msgid ""
"``< ConanFile object >`` The current recipe object. Always use ``self``."
msgstr ""

#: ../../../conan_sources/conan/tools/meson/toolchain.py:docstring of
#: conan.tools.meson.toolchain.MesonToolchain:4
msgid ""
"(**DEPRECATED**, use ``self.backend`` instead) ``str`` ``backend`` Meson "
"variable value. By default, ``ninja``."
msgstr ""

#: ../../../conan_sources/conan/tools/meson/toolchain.py:docstring of
#: conan.tools.meson.toolchain.MesonToolchain:6
msgid ""
"``bool`` Indicates whether you want Conan to create the ``conan_meson_native."
"ini`` in a cross-building context. Notice that it only makes sense if your "
"project's ``meson.build`` uses the ``native=true`` (see also https://"
"mesonbuild.com/Cross-compilation.html#mixing-host-and-build-targets)."
msgstr ""

#: ../../../docstring of conan.tools.meson.MesonToolchain.backend:1
msgid ""
"Backend to use. Defined by the conf ``tools.meson.mesontoolchain:backend``. "
"By default, ``ninja``."
msgstr ""

#: ../../../docstring of conan.tools.meson.MesonToolchain.buildtype:1
msgid "Build type to use."
msgstr ""

#: ../../../docstring of conan.tools.meson.MesonToolchain.b_ndebug:1
msgid "Disable asserts."
msgstr ""

#: ../../../docstring of conan.tools.meson.MesonToolchain.b_staticpic:1
msgid ""
"Build static libraries as position independent. By default, ``self.options."
"get_safe(\"fPIC\")``"
msgstr ""

#: ../../../docstring of conan.tools.meson.MesonToolchain.default_library:1
msgid "Default library type, e.g., \"shared."
msgstr ""

#: ../../../docstring of conan.tools.meson.MesonToolchain.cpp_std:1
msgid ""
"C++ language standard to use. Defined by ``to_cppstd_flag()`` by default."
msgstr ""

#: ../../../docstring of conan.tools.meson.MesonToolchain.c_std:1
msgid "C language standard to use. Defined by ``to_cstd_flag()`` by default."
msgstr ""

#: ../../../docstring of conan.tools.meson.MesonToolchain.b_vscrt:1
msgid ""
"VS runtime library to use. Defined by ``msvc_runtime_flag()`` by default."
msgstr ""

#: ../../../docstring of conan.tools.meson.MesonToolchain.extra_cxxflags:1
msgid "List of extra ``CXX`` flags. Added to ``cpp_args``"
msgstr ""

#: ../../../docstring of conan.tools.meson.MesonToolchain.extra_cflags:1
msgid "List of extra ``C`` flags. Added to ``c_args``"
msgstr ""

#: ../../../docstring of conan.tools.meson.MesonToolchain.extra_ldflags:1
msgid ""
"List of extra linker flags. Added to ``c_link_args`` and ``cpp_link_args``"
msgstr ""

#: ../../../docstring of conan.tools.meson.MesonToolchain.extra_defines:1
msgid ""
"List of extra preprocessor definitions. Added to ``c_args`` and ``cpp_args`` "
"with the format ``-D[FLAG_N]``."
msgstr ""

#: ../../../docstring of conan.tools.meson.MesonToolchain.arch_flag:1
msgid ""
"Architecture flag deduced by Conan and added to ``c_args``, ``cpp_args``, "
"``c_link_args`` and ``cpp_link_args``"
msgstr ""

#: ../../../docstring of conan.tools.meson.MesonToolchain.arch_link_flag:1
msgid ""
"Architecture link flag deduced by Conan and added to ``c_link_args`` and "
"``cpp_link_args``"
msgstr ""

#: ../../../docstring of conan.tools.meson.MesonToolchain.threads_flags:1
msgid ""
"Threads flags deduced by Conan and added to ``c_args``, ``cpp_args``, "
"``c_link_args`` and ``cpp_link_args``"
msgstr ""

#: ../../../docstring of conan.tools.meson.MesonToolchain.properties:1
msgid ""
"Dict-like object that defines Meson ``properties`` with ``key=value`` format"
msgstr ""

#: ../../../docstring of conan.tools.meson.MesonToolchain.project_options:1
msgid ""
"Dict-like object that defines Meson ``project options`` with ``key=value`` "
"format"
msgstr ""

#: ../../../docstring of
#: conan.tools.meson.MesonToolchain.preprocessor_definitions:1
msgid "Dict-like object that defines Meson ``preprocessor definitions``"
msgstr ""

#: ../../../docstring of conan.tools.meson.MesonToolchain.subproject_options:1
msgid "Dict-like object that defines Meson ``subproject options``."
msgstr ""

#: ../../../docstring of conan.tools.meson.MesonToolchain.pkg_config_path:1
msgid "Defines the Meson ``pkg_config_path`` variable"
msgstr ""

#: ../../../docstring of conan.tools.meson.MesonToolchain.cross_build:1
msgid ""
"Dict-like object with the build, host, and target as the Meson machine "
"context"
msgstr ""

#: ../../../docstring of conan.tools.meson.MesonToolchain.c:1
msgid ""
"Sets the Meson ``c`` variable, defaulting to the ``CC`` build environment "
"value. If provided as a blank-separated string, it will be transformed into "
"a list. Otherwise, it remains a single string."
msgstr ""

#: ../../../docstring of conan.tools.meson.MesonToolchain.cpp:1
msgid ""
"Sets the Meson ``cpp`` variable, defaulting to the ``CXX`` build environment "
"value. If provided as a blank-separated string, it will be transformed into "
"a list. Otherwise, it remains a single string."
msgstr ""

#: ../../../docstring of conan.tools.meson.MesonToolchain.ld:1
msgid ""
"Sets the Meson ``ld`` variable, defaulting to the ``LD`` build environment "
"value. If provided as a blank-separated string, it will be transformed into "
"a list. Otherwise, it remains a single string."
msgstr ""

#: ../../../docstring of conan.tools.meson.MesonToolchain.c_ld:1
msgid ""
"Defines the Meson ``c_ld`` variable. Defaulted to ``CC_LD`` environment value"
msgstr ""

#: ../../../docstring of conan.tools.meson.MesonToolchain.cpp_ld:1
msgid ""
"Defines the Meson ``cpp_ld`` variable. Defaulted to ``CXX_LD`` environment "
"value"
msgstr ""

#: ../../../docstring of conan.tools.meson.MesonToolchain.ar:1
msgid ""
"Defines the Meson ``ar`` variable. Defaulted to ``AR`` build environment "
"value"
msgstr ""

#: ../../../docstring of conan.tools.meson.MesonToolchain.strip:1
msgid ""
"Defines the Meson ``strip`` variable. Defaulted to ``STRIP`` build "
"environment value"
msgstr ""

#: ../../../docstring of conan.tools.meson.MesonToolchain.as_:1
msgid ""
"Defines the Meson ``as`` variable. Defaulted to ``AS`` build environment "
"value"
msgstr ""

#: ../../../docstring of conan.tools.meson.MesonToolchain.windres:1
msgid ""
"Defines the Meson ``windres`` variable. Defaulted to ``WINDRES`` build "
"environment value"
msgstr ""

#: ../../../docstring of conan.tools.meson.MesonToolchain.pkgconfig:1
msgid ""
"Defines the Meson ``pkgconfig`` variable. Defaulted to ``PKG_CONFIG`` build "
"environment value"
msgstr ""

#: ../../../docstring of conan.tools.meson.MesonToolchain.c_args:1
msgid ""
"Defines the Meson ``c_args`` variable. Defaulted to ``CFLAGS`` build "
"environment value"
msgstr ""

#: ../../../docstring of conan.tools.meson.MesonToolchain.c_link_args:1
msgid ""
"Defines the Meson ``c_link_args`` variable. Defaulted to ``LDFLAGS`` build "
"environment value"
msgstr ""

#: ../../../docstring of conan.tools.meson.MesonToolchain.cpp_args:1
msgid ""
"Defines the Meson ``cpp_args`` variable. Defaulted to ``CXXFLAGS`` build "
"environment value"
msgstr ""

#: ../../../docstring of conan.tools.meson.MesonToolchain.cpp_link_args:1
msgid ""
"Defines the Meson ``cpp_link_args`` variable. Defaulted to ``LDFLAGS`` build "
"environment value"
msgstr ""

#: ../../../docstring of conan.tools.meson.MesonToolchain.apple_arch_flag:1
msgid "Apple arch flag as a list, e.g., ``[\"-arch\", \"i386\"]``"
msgstr ""

#: ../../../docstring of conan.tools.meson.MesonToolchain.apple_isysroot_flag:1
msgid ""
"Apple sysroot flag as a list, e.g., ``[\"-isysroot\", \"./Platforms/MacOSX."
"platform\"]``"
msgstr ""

#: ../../../docstring of
#: conan.tools.meson.MesonToolchain.apple_min_version_flag:1
msgid ""
"Apple minimum binary version flag as a list, e.g., ``[\"-mios-version-min\", "
"\"10.8\"]``"
msgstr ""

#: ../../../docstring of conan.tools.meson.MesonToolchain.apple_extra_flags:1
msgid "Apple bitcode, visibility and arc flags"
msgstr ""

#: ../../../docstring of conan.tools.meson.MesonToolchain.objc:1
msgid ""
"Defines the Meson ``objc`` variable. Defaulted to ``None``, if if any Apple "
"OS ``clang``"
msgstr ""

#: ../../../docstring of conan.tools.meson.MesonToolchain.objcpp:1
msgid ""
"Defines the Meson ``objcpp`` variable. Defaulted to ``None``, if if any "
"Apple OS ``clang++``"
msgstr ""

#: ../../../docstring of conan.tools.meson.MesonToolchain.objc_args:1
msgid ""
"Defines the Meson ``objc_args`` variable. Defaulted to ``OBJCFLAGS`` build "
"environment value"
msgstr ""

#: ../../../docstring of conan.tools.meson.MesonToolchain.objc_link_args:1
msgid ""
"Defines the Meson ``objc_link_args`` variable. Defaulted to ``LDFLAGS`` "
"build environment value"
msgstr ""

#: ../../../docstring of conan.tools.meson.MesonToolchain.objcpp_args:1
msgid ""
"Defines the Meson ``objcpp_args`` variable. Defaulted to ``OBJCXXFLAGS`` "
"build environment value"
msgstr ""

#: ../../../docstring of conan.tools.meson.MesonToolchain.objcpp_link_args:1
msgid ""
"Defines the Meson ``objcpp_link_args`` variable. Defaulted to ``LDFLAGS`` "
"build environment value"
msgstr ""

#: ../../../conan_sources/conan/tools/meson/toolchain.py:docstring of
#: conan.tools.meson.toolchain.MesonToolchain.generate:1
msgid ""
"Creates a ``conan_meson_native.ini`` (if native builds) or a "
"``conan_meson_cross.ini`` (if cross builds) with the proper content. If "
"Windows OS, it will be created a ``conanvcvars.bat`` as well."
msgstr ""
