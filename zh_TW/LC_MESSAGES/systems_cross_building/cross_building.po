# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2019, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.24\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:03+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../systems_cross_building/cross_building.rst:4
msgid "Cross building"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:6
msgid ""
"Cross building (or cross compilation) is the process of generating binaries "
"for a platform that is not the one where the compiling process is running."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:9
msgid ""
"Cross compilation is mostly used to build software for an alien device, such "
"as an embedded device where you don't have an operating system nor a "
"compiler available. It's also used to build software for slower devices, "
"like an Android machine or a Raspberry Pi where running the native "
"compilation will take too much time."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:13
msgid ""
"In order to cross build a codebase the right toolchain is needed, with a "
"proper compiler (cross compiler), a linker and the set of libraries matching "
"the ``host`` platform."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:18
msgid "GNU triplet convention"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:20
msgid ""
"According to the GNU convention, there are three platforms involved in the "
"software building:"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:22
msgid ""
"**Build platform:** The platform on which the compilation tools are being "
"executed."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:23
msgid ""
"**Host platform:** The platform on which the generated binaries will run."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:24
msgid ""
"**Target platform:** Only when building a cross compiler, it is the platform "
"it will generate binaries for."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:27
msgid ""
"Depending on the values of these platforms, there are different scenarios:"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:29
msgid ""
"**Native building**: when the ``build`` and the ``host`` platforms are the "
"same, it means that the platform where the compiler is running is the same "
"one where the generated binaries will run. This is the most common scenario."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:32
msgid ""
"**Cross building**: when the ``build`` and the ``host`` platform are "
"different, it requires a cross compiler running in the build platform that "
"generates binaries for the host platform."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:36
msgid ""
"The ``target`` platform plays and important role when compiling a cross "
"compiler, in that scenario the ``target`` is the platform the compiler will "
"generate binaries for: in order to be a cross compiler the ``host`` platform "
"(where the cross compiler will run) has to be different from the ``target`` "
"platform. If the ``build`` platform is also different, it is called "
"**Canadian Cross**."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:41
msgid "Let's illustrate these scenarios with some examples:"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:43
msgid ""
"The Android NDK is a cross compiler to Android: it can be executed in Linux "
"(the ``build`` platform) to generate binaries for Android (the ``host`` "
"platform)."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:45
msgid ""
"The Android NDK was once compiled, during that compilation a different "
"compiler was used running in a ``build`` platform (maybe Windows) to "
"generate the actual Android NDK that will run in the ``host`` platform "
"Linux, and as we saw before, that Android NDK cross compiler will generate "
"binaries for a ``target`` platform which is Android."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:50
msgid ""
"The values of the ``build``, ``host`` and ``target`` platforms are not "
"absolute, and they depend on the process we are talking about. The ``host`` "
"when compiling a cross compiler turns into the ``build`` when using that "
"same cross compiler, or the ``target`` of the cross compiler is the ``host`` "
"platform of the binaries generated with it."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:58
msgid ""
"One way to avoid this complexity is to run the compilation in the host "
"platform, so both ``build`` and ``host`` will take the same value and it "
"will be a *native compilation*. Docker is a very successful tool that can "
"help you with this, read more about it in :ref:`this section "
"<use_docker_to_crossbuild>`."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:64
msgid "Cross building with Conan"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:66
msgid ""
"If you want to cross build a Conan package (for example using your Linux "
"machine) to build the ``zlib`` Conan package for Windows, you need to tell "
"Conan where to find your toolchain/cross compiler."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:69
msgid "There are two approaches:"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:71
msgid ""
"Install the toolchain in your computer and use a ``profile`` to declare the "
"settings and point to the needed tools/libraries in the toolchain using the "
"``[env]`` section to declare, at least, the ``CC`` and ``CXX`` environment "
"variables."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:75
msgid ""
"Package the toolchain as a Conan package and include it as a "
"``build_requires``."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:79
msgid "Using a profile"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:81
msgid ""
"Using a Conan profile we can declare not only the ``settings`` that will "
"identify our binary, but also all the environment variables needed to use a "
"toolchain or cross compiler. The profile needs the following sections:"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:85
msgid ""
"A **[settings]** section containing the regular settings: ``os``, ``arch``, "
"``compiler`` and ``build_type`` depending on your library. These settings "
"will identify your binary."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:88
msgid ""
"An **[env]** section with a PATH variable pointing to your installed "
"toolchain. Also any other variable that the toolchain expects (read the docs "
"of your compiler). Some build systems need a variable ``SYSROOT`` to locate "
"where the host system libraries and tools are."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:92
msgid ""
"For example, in the following profile we declare the ``host`` platform to be "
"Windows x86_64 with the compiler, version and other settings be are using. "
"And we add the **[env]** section with all the variables needed to use an "
"installed toolchain:"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:96
#: ../../../systems_cross_building/cross_building.rst:355
msgid ""
"toolchain=/usr/x86_64-w64-mingw32 # Adjust this path\n"
"target_host=x86_64-w64-mingw32\n"
"cc_compiler=gcc\n"
"cxx_compiler=g++\n"
"\n"
"[env]\n"
"CONAN_CMAKE_FIND_ROOT_PATH=$toolchain\n"
"CHOST=$target_host\n"
"AR=$target_host-ar\n"
"AS=$target_host-as\n"
"RANLIB=$target_host-ranlib\n"
"CC=$target_host-$cc_compiler\n"
"CXX=$target_host-$cxx_compiler\n"
"STRIP=$target_host-strip\n"
"RC=$target_host-windres\n"
"\n"
"[settings]\n"
"# We are cross-building to Windows\n"
"os=Windows\n"
"arch=x86_64\n"
"compiler=gcc\n"
"\n"
"# Adjust to the gcc version of your MinGW package\n"
"compiler.version=7.3\n"
"compiler.libcxx=libstdc++11\n"
"build_type=Release"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:125
msgid ""
"You can find working examples at the :ref:`bottom of this section "
"<cross_building_examples_profiles>`."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:131
msgid "Using build requires"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:133
msgid ""
"Instead of manually downloading the toolchain and creating a profile, you "
"can create a Conan package with it. Starting with Conan v1.24 and the "
"command line arguments ``--profile:host`` and ``--profile:build`` this "
"should be a regular recipe, for older versions some more work is needed."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:139
msgid "Conan v1.24 and newer"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:141
msgid ""
"A recipe with a toolchain is like any other recipe with a binary executable:"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:143
msgid ""
"import os\n"
"from conans import ConanFile\n"
"\n"
"class MyToolchainXXXConan(ConanFile):\n"
"    name = \"my_toolchain\"\n"
"    version = \"0.1\"\n"
"    settings = \"os\", \"arch\", \"compiler\", \"build_type\"\n"
"\n"
"    #Â Implement source() and build() as usual\n"
"\n"
"    def package(self):\n"
"        # Copy all the required files for your toolchain\n"
"        self.copy(\"*\", dst=\"\", src=\"toolchain\")\n"
"\n"
"    def package_info(self):\n"
"        bin_folder = os.path.join(self.package_folder, \"bin\")\n"
"        self.env_info.CC = os.path.join(bin_folder, \"mycompiler-cc\")\n"
"        self.env_info.CXX = os.path.join(bin_folder, \"mycompiler-cxx\")\n"
"        self.env_info.SYSROOT = self.package_folder"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:166
msgid ""
"The Conan package with the toolchain needs to fill the ``env_info`` object "
"in the :ref:`package_info()<method_package_info>` method with the same "
"variables we've specified in the examples above in the ``[env]`` section of "
"profiles."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:170
msgid ""
"Then you will need to consume this recipe as any regular :ref:`build "
"requires <build_requires>` that belongs to the ``build`` context: you need "
"to use the ``--profile:build`` argument in the command line while creating "
"your library:"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:173
msgid ""
"conan create path/to/conanfile.py --profile:build=profile_build --profile:"
"host=profile_host"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:183
msgid ""
"The profile ``profile_build`` will contain just the settings related to your "
"``build`` platform, where you are running the command, and the "
"``profile_host`` will list the settings for the ``host`` platform (and "
"eventually the ``my_toolchain/0.1`` as ``build_requires`` if it is not "
"listed in the recipe itself)."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:187
msgid ""
"Conan will apply the appropiate profile to each recipe, and will inject the "
"environment of all the build requirements that belong to the ``build`` "
"context before running the ``build()`` method of the libraries being "
"compiled. That way, the environment variables ``CC``, ``CXX`` and "
"``SYSROOT`` from ``my_toolchain/0.1`` will be available and also the path to "
"the ``bindirs`` directory from that package."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:192
msgid ""
"The above means that **Conan is able to compile the full graph in a single "
"execution**, it will compile the build requires using the ``profile_build`` "
"and then it will compile the libraries using the ``host_profile`` settings "
"applying the environment of the former ones."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:198
msgid "Conan older than v1.24"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:202
msgid ""
"We ask you to use the previous approach for Conan 1.24 and newer, and avoid "
"any specific modification of your recipes to make them work as build "
"requirements in a cross building scenario."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:206
msgid ""
"With this approach, only one profile is provided in the command line (the "
"``--profile:host`` or just ``--profile``) and it has to define the "
"``os_build`` and ``arch_build`` settings too. The recipe of this build "
"requires has to be modified to take into account these settings and the "
"``compiler`` and ``build_type`` settings have to be removed because their "
"values for the ``build`` platform are not defined in the profile:"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:213
msgid ""
"from conans import ConanFile\n"
"import os\n"
"\n"
"\n"
"class MyToolchainXXXConan(ConanFile):\n"
"    name = \"my_toolchain\"\n"
"    version = \"0.1\"\n"
"    settings = \"os_build\", \"arch_build\"\n"
"\n"
"    # As typically, this recipe doesn't declare 'compiler' and "
"'build_type',\n"
"    #   the source() and build() methods need a custom implementation\n"
"    def build(self):\n"
"        # Typically download the toolchain for the 'build' platform\n"
"        url = \"http://fake_url.com/installers/%s/%s/toolchain.tgz\" % "
"(os_build, os_arch)\n"
"        tools.download(url, \"toolchain.tgz\")\n"
"        tools.unzip(\"toolchain.tgz\")\n"
"\n"
"    def package(self):\n"
"        # Copy all the required files for your toolchain\n"
"        self.copy(\"*\", dst=\"\", src=\"toolchain\")\n"
"\n"
"    def package_info(self):\n"
"        bin_folder = os.path.join(self.package_folder, \"bin\")\n"
"        self.env_info.PATH.append(bin_folder)\n"
"        self.env_info.CC = os.path.join(bin_folder, \"mycompiler-cc\")\n"
"        self.env_info.CXX = os.path.join(bin_folder, \"mycompiler-cxx\")\n"
"        self.env_info.SYSROOT = self.package_folder"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:244
msgid ""
"With this approach we also need to add the path to the binaries to the "
"``PATH`` environment variable. The one and only profile has to include a "
"``[build_requires]`` section with the reference to our new packaged "
"toolchain and it will also contain a ``[settings]`` section with the regular "
"settings plus the ``os_build`` and ``arch_build`` ones."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:248
msgid ""
"This approach requires a special profile, and it needs a modified recipe "
"without the ``compiler`` and ``build_type`` settings, Conan can still "
"compile it from sources but it won't be able to identify the binary properly "
"and it can be really to tackle if the build requirements has other Conan "
"dependencies."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:254
msgid "Settings ``*_build`` and ``*_target``"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:258
msgid ""
"**These settings are being reviewed and might be deprecated in the future**, "
"we encourage you to try not to use them. If you need help with your use "
"case, please `open an issue in the Conan repository <https://github.com/"
"conan-io/conan/issues>`_ and we will help you."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:263
msgid ""
"Before Conan v1.24 the recommended way to deal with cross building was to "
"use some extra settings like ``os_build``, ``arch_build`` and ``os_target`` "
"and ``arch_target``. These settings have a special meaning for some Conan "
"tools and build helpers, but they also need to be listed in the recipes "
"themselves creating a dedicated set of recipes for *installers* and *tools* "
"in general. This approach should be superseeded with the introduction in "
"Conan 1.24 of the command line arguments ``--profile:host`` and ``--profile:"
"build`` that allow to declare two different profiles with all the "
"information needed for the corresponding platforms."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:270
msgid "The meaning of those settings is the following:"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:272
msgid ""
"The settings ``os_build`` and ``arch_build`` identify the ``build`` platform "
"according to the GNU convention triplet. These settings are detected the "
"first time you run Conan with the same values than the ``host`` settings, so "
"by default, we are doing **native building**. You will probably never need "
"to change the value of this setting because they describe where are you "
"running Conan."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:276
msgid ""
"The settings ``os_target`` and ``arch_target`` identify the ``target`` "
"platform. If you are building a cross compiler, these settings specify where "
"the compiled code will run."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:279
msgid ""
"The rest of settings, as we already know, identify the ``host`` platform."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:283
msgid "Preparing recipes to be cross-compiled"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:285
msgid ""
"If you use the build helpers :ref:"
"`AutoToolsBuildEnvironment<autotools_reference>` or :ref:"
"`CMake<cmake_reference>` together with ``os_build`` and ``arch_build`` "
"settings, Conan will adjust the configuration accordingly to the specified "
"settings."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:288
msgid ""
"If not, you can always check the regular settings ``os``, ``arch``,... "
"(matching the ``host`` platform) and inject the needed flags to your build "
"system script."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:291
msgid "Also, you can use this tool to check if you are cross-building:"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:293
msgid ""
":ref:`tools.cross_building(self.settings)<cross_building_reference>` "
"(returns True or False)"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:298
msgid ""
"In the following releases, this build helpers and tools will take into "
"account the values of the command line arguments ``--profile:host`` and ``--"
"profile:build`` to implement the proper cross building behavior."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:304
msgid "ARM architecture reference"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:306
msgid ""
"Remember that the Conan settings are intended to unify the different names "
"for operating systems, compilers, architectures etc."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:309
msgid ""
"Conan has different architecture settings for ARM: ``armv6``, ``armv7``, "
"``armv7hf``, ``armv8``. The \"problem\" with ARM architecture is that it's "
"frequently named in different ways, so maybe you are wondering what setting "
"do you need to specify in your case."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:313
msgid "Here is a table with some typical ARM platforms:"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:316
msgid "Platform"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:316
msgid "Conan setting"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:318
msgid "Raspberry PI 1"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:318
msgid "``armv6``"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:320
msgid "Raspberry PI 2"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:320
msgid "``armv7`` or ``armv7hf`` if we want to use the float point hard support"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:322
msgid "Raspberry PI 3"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:322
msgid "``armv8`` also known as armv64-v8a"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:324
msgid "Visual Studio"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:324
msgid ""
"``armv7`` currently Visual Studio builds ``armv7`` binaries when you select "
"ARM."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:326
msgid "Android armbeabi-v7a"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:326
msgid "``armv7``"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:328
msgid "Android armv64-v8a"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:328
msgid "``armv8``"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:330
msgid "Android armeabi"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:330
msgid "``armv6`` (as a minimal compatible, will be compatible with v7 too)"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:335
msgid "Examples"
msgstr "ç¯ä¾"

#: ../../../systems_cross_building/cross_building.rst:341
msgid "Examples using profiles"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:344
msgid "Linux to Windows"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:346
msgid "Install the needed toolchain, in Ubuntu:"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:348
msgid "sudo apt-get install g++-mingw-w64 gcc-mingw-w64"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:353
msgid "Create a file named **linux_to_win64** with the contents:"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:384
#: ../../../systems_cross_building/cross_building.rst:447
msgid "Clone an example recipe or use your own recipe:"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:386
#: ../../../systems_cross_building/cross_building.rst:449
msgid "git clone https://github.com/memsharded/conan-hello.git"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:390
msgid "Call :command:`conan create` using the created **linux_to_win64**"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:392
msgid ""
"$ cd conan-hello && conan create . conan/testing --profile ../"
"linux_to_win64\n"
"...\n"
"[ 50%] Building CXX object CMakeFiles/example.dir/example.cpp.obj\n"
"[100%] Linking CXX executable bin/example.exe\n"
"[100%] Built target example"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:400
msgid "A *bin/example.exe* for Win64 platform has been built."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:403
msgid "Windows to Raspberry Pi (Linux/ARM)"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:405
msgid ""
"Install the toolchain: https://gnutoolchains.com/raspberry/ You can choose "
"different versions of the GCC cross compiler. Choose one and adjust the "
"following settings in the profile accordingly."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:409
msgid "Create a file named **win_to_rpi** with the contents:"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:411
msgid ""
"target_host=arm-linux-gnueabihf\n"
"standalone_toolchain=C:/sysgcc/raspberry\n"
"cc_compiler=gcc\n"
"cxx_compiler=g++\n"
"\n"
"[settings]\n"
"os=Linux\n"
"arch=armv7 # Change to armv6 if you are using Raspberry 1\n"
"compiler=gcc\n"
"compiler.version=6\n"
"compiler.libcxx=libstdc++11\n"
"build_type=Release\n"
"\n"
"[env]\n"
"CONAN_CMAKE_FIND_ROOT_PATH=$standalone_toolchain/$target_host/sysroot\n"
"PATH=[$standalone_toolchain/bin]\n"
"CHOST=$target_host\n"
"AR=$target_host-ar\n"
"AS=$target_host-as\n"
"RANLIB=$target_host-ranlib\n"
"LD=$target_host-ld\n"
"STRIP=$target_host-strip\n"
"CC=$target_host-$cc_compiler\n"
"CXX=$target_host-$cxx_compiler\n"
"CXXFLAGS=-I\"$standalone_toolchain/$target_host/lib/include\""
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:439
msgid ""
"The profiles to target Linux are all very similar. You probably just need to "
"adjust the variables declared at the top of the profile:"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:442
msgid ""
"**target_host**: All the executables in the toolchain starts with this "
"prefix."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:443
msgid "**standalone_toolchain**: Path to the toolchain installation."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:444
msgid ""
"**cc_compiler/cxx_compiler**: In this case ``gcc``/``g++``, but could be "
"``clang``/``clang++``."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:453
#: ../../../systems_cross_building/cross_building.rst:617
msgid "Call :command:`conan create` using the created profile."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:455
msgid ""
"$ cd conan-hello && conan create . conan/testing --profile=../win_to_rpi\n"
"...\n"
"[ 50%] Building CXX object CMakeFiles/example.dir/example.cpp.obj\n"
"[100%] Linking CXX executable bin/example\n"
"[100%] Built target example"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:463
msgid ""
"A *bin/example* for Raspberry PI (Linux/armv7hf) platform has been built."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:468
msgid "Windows to Windows CE"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:469
msgid ""
"The Windows CE (WinCE) operating system is supported for CMake and MSBuild. "
"Since WinCE depends on the MSVC compiler, Visual Studio and the according "
"Windows CE platform SDK for the WinCE device have to be installed on the "
"build host."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:473
msgid ""
"The ``os.platform`` defines the WinCE Platform SDK and is equal to the "
"``Platform`` in Visual Studio."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:475
msgid "Some examples for Windows CE platforms:"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:477
msgid "``SDK_AM335X_SK_WEC2013_V310``"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:478
msgid "``STANDARDSDK_500 (ARMV4I)``"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:479
msgid "``Windows Mobile 5.0 Pocket PC SDK (ARMV4I)``"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:480
msgid "``Toradex_CE800 (ARMV7)``"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:482
msgid ""
"The ``os.version`` defines the WinCE version and must be ``\"5.0\"``, "
"``\"6.0\"`` or ``\"7.0\"``."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:484
msgid ""
"CMake supports Visual Studio 2008 (``compiler.version=9``) and Visual Studio "
"2012 (``compiler.version=11``)."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:486
msgid "Example of an Windows CE conan profile:"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:488
msgid ""
"[settings]\n"
"os=WindowsCE\n"
"os.version=8.0\n"
"os.platform=Toradex_CE800 (ARMV7)\n"
"arch=armv7\n"
"compiler=Visual Studio\n"
"compiler.version=11\n"
"\n"
"# Release configuration\n"
"build_type=Release\n"
"compiler.runtime=MD"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:504
msgid ""
"Further information about CMake and WinCE can be found in the CMake "
"documentation:"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:506
msgid ""
"`CMake - Cross Compiling for Windows CE <https://cmake.org/cmake/help/latest/"
"manual/cmake-toolchains.7.html#cross-compiling-for-windows-ce>`_"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:512
msgid "Linux/Windows/macOS to Android"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:514
msgid ""
"Cross-building a library for Android is very similar to the previous "
"examples, except the complexity of managing different architectures "
"(armeabi, armeabi-v7a, x86, arm64-v8a) and the Android API levels."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:517
msgid ""
"Download the Android NDK `here <https://developer.android.com/ndk/"
"downloads>`_ and unzip it."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:521
msgid ""
"If you are in Windows the process will be almost the same, but unzip the "
"file in the root folder of your hard disk (``C:\\``) to avoid issues with "
"path lengths."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:523
msgid ""
"Now you have to build a `standalone toolchain <https://developer.android.com/"
"ndk/guides/standalone_toolchain>`_. We are going to target the \"arm\" "
"architecture and the Android API level 21. Change the ``--install-dir`` to "
"any other place that works for you:"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:527
msgid ""
"$ cd build/tools\n"
"$ python make_standalone_toolchain.py --arch=arm --api=21 --stl=libc++ --"
"install-dir=/myfolder/arm_21_toolchain"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:535
msgid ""
"You can generate the standalone toolchain with several different options to "
"target different architectures, API levels etc."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:537
msgid ""
"Check the Android docs: `standalone toolchain <https://developer.android.com/"
"ndk/guides/standalone_toolchain>`_"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:540
msgid ""
"To use the ``clang`` compiler, create a profile ``android_21_arm_clang``. "
"Once again, the profile is very similar to the RPI one:"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:543
msgid ""
"standalone_toolchain=/myfolder/arm_21_toolchain # Adjust this path\n"
"target_host=arm-linux-androideabi\n"
"cc_compiler=clang\n"
"cxx_compiler=clang++\n"
"\n"
"[settings]\n"
"compiler=clang\n"
"compiler.version=5.0\n"
"compiler.libcxx=libc++\n"
"os=Android\n"
"os.api_level=21\n"
"arch=armv7\n"
"build_type=Release\n"
"\n"
"[env]\n"
"CONAN_CMAKE_FIND_ROOT_PATH=$standalone_toolchain/sysroot\n"
"PATH=[$standalone_toolchain/bin]\n"
"CHOST=$target_host\n"
"AR=$target_host-ar\n"
"AS=$target_host-as\n"
"RANLIB=$target_host-ranlib\n"
"CC=$target_host-$cc_compiler\n"
"CXX=$target_host-$cxx_compiler\n"
"LD=$target_host-ld\n"
"STRIP=$target_host-strip\n"
"CFLAGS= -fPIE -fPIC -I$standalone_toolchain/include/c++/4.9.x\n"
"CXXFLAGS= -fPIE -fPIC -I$standalone_toolchain/include/c++/4.9.x\n"
"LDFLAGS= -pie"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:575
msgid ""
"You could also use ``gcc`` using this profile ``arm_21_toolchain_gcc``, "
"changing the ``cc_compiler`` and ``cxx_compiler`` variables, removing ``-"
"fPIE`` flag and, of course, changing the ``[settings]`` to match the gcc "
"toolchain compiler:"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:580
msgid ""
"standalone_toolchain=/myfolder/arm_21_toolchain\n"
"target_host=arm-linux-androideabi\n"
"cc_compiler=gcc\n"
"cxx_compiler=g++\n"
"\n"
"[settings]\n"
"compiler=gcc\n"
"compiler.version=4.9\n"
"compiler.libcxx=libstdc++\n"
"os=Android\n"
"os.api_level=21\n"
"arch=armv7\n"
"build_type=Release\n"
"\n"
"[env]\n"
"CONAN_CMAKE_FIND_ROOT_PATH=$standalone_toolchain/sysroot\n"
"PATH=[$standalone_toolchain/bin]\n"
"CHOST=$target_host\n"
"AR=$target_host-ar\n"
"AS=$target_host-as\n"
"RANLIB=$target_host-ranlib\n"
"CC=$target_host-$cc_compiler\n"
"CXX=$target_host-$cxx_compiler\n"
"LD=$target_host-ld\n"
"STRIP=$target_host-strip\n"
"CFLAGS= -fPIC -I$standalone_toolchain/include/c++/4.9.x\n"
"CXXFLAGS= -fPIC -I$standalone_toolchain/include/c++/4.9.x\n"
"LDFLAGS="
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:611
msgid "Clone, for example, the zlib library to try to build it to Android"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:613
msgid "git clone https://github.com/conan-community/conan-zlib.git"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:619
msgid ""
"$ cd conan-zlib && conan create . --profile=../android_21_arm_clang\n"
"\n"
"...\n"
"-- Build files have been written to: /tmp/conan-zlib/test_package/build/"
"ba0b9dbae0576b9a23ce7005180b00e4fdef1198\n"
"Scanning dependencies of target enough\n"
"[ 50%] Building C object CMakeFiles/enough.dir/enough.c.o\n"
"[100%] Linking C executable bin/enough\n"
"[100%] Built target enough\n"
"zlib/1.2.11 (test package): Running test()"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:631
msgid "A **bin/enough** for Android ARM platform has been built."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:637
msgid "Examples using build requires"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:642
msgid "Example: Darwin Toolchain"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:644
msgid ""
"Check the `Darwin Toolchain <https://github.com/theodelrieu/conan-darwin-"
"toolchain>`_  package in conan-center. You can use a profile like the "
"following to cross-build your packages for ``iOS``,  ``watchOS`` and "
"``tvOS``:"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:647
msgid "ios_profile"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:647
msgid ""
"include(default)\n"
"\n"
"[settings]\n"
"os=iOS\n"
"os.version=9.0\n"
"arch=armv7\n"
"\n"
"[build_requires]\n"
"darwin-toolchain/1.0@theodelrieu/stable"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:661
msgid "$ conan install . --profile ios_profile"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:667
msgid ""
"Check the :ref:`Creating conan packages to install dev "
"tools<create_installer_packages>` to learn more about how to create Conan "
"packages for tools."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:670
msgid ""
"Check the `mingw-installer <https://github.com/conan-community/conan-mingw-"
"installer/blob/master/conanfile.py>`_ build require recipe as an example of "
"packaging a compiler."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:675
msgid "---"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:678
msgid "Reference links"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:680
msgid "**ARM**"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:682
msgid ""
"https://developer.arm.com/docs/dui0773/latest/compiling-c-and-c-code/"
"specifying-a-target-architecture-processor-and-instruction-set"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:683
msgid ""
"https://developer.arm.com/docs/dui0472/latest/compiler-command-line-options"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:685
msgid "**ANDROID**"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:687
msgid "https://developer.android.com/ndk/guides/standalone_toolchain"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:689
msgid "**VISUAL STUDIO**"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:691
msgid ""
"https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-command-line-"
"reference?view=vs-2017"
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:696
msgid ""
"See :ref:`conan.conf file<conan_conf>` and :ref:`Environment variables "
"<env_vars>` sections to know more."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:697
msgid ""
"See :ref:`AutoToolsBuildEnvironment build helper<autotools_reference>` "
"reference."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:698
msgid "See :ref:`CMake build helper<cmake_reference>` reference."
msgstr ""

#: ../../../systems_cross_building/cross_building.rst:699
msgid ""
"See `CMake cross-building wiki <https://vtk.org/Wiki/"
"CMake_Cross_Compiling>`_ to know more about cross-building with CMake."
msgstr ""
