# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../tutorial/creating_packages/handle_sources_in_packages.rst:4
msgid "Handle sources in packages"
msgstr ""

#: ../../../tutorial/creating_packages/handle_sources_in_packages.rst:6
msgid ""
"In the :ref:`previous tutorial "
"section<creating_packages_create_your_first_conan_package>` we created a "
"Conan package for a \"Hello World\" C++ library. We used the "
"``exports_sources`` attribute of the Conanfile to declare the location of "
"the sources for the library. This method is the simplest way to define the "
"location of the source files when they are in the same folder as the "
"Conanfile. However, sometimes the source files are stored in a repository or "
"a file in a remote server, and not in the same location as the Conanfile. In "
"this section, we will modify the recipe we created previously by adding a "
"``source()`` method and explain how to:"
msgstr ""

#: ../../../tutorial/creating_packages/handle_sources_in_packages.rst:15
msgid "Retrieve the sources from a *zip* file stored in a remote repository."
msgstr ""

#: ../../../tutorial/creating_packages/handle_sources_in_packages.rst:16
msgid "Retrieve the sources from a branch of a *git* repository."
msgstr ""

#: ../../../tutorial/creating_packages/handle_sources_in_packages.rst:18
msgid ""
"Please, first clone the sources to recreate this project. You can find them "
"in the `examples2 repository <https://github.com/conan-io/examples2>`_ on "
"GitHub:"
msgstr ""

#: ../../../tutorial/creating_packages/handle_sources_in_packages.rst:21
msgid ""
"$ git clone https://github.com/conan-io/examples2.git\n"
"$ cd examples2/tutorial/creating_packages/handle_sources"
msgstr ""

#: ../../../tutorial/creating_packages/handle_sources_in_packages.rst:26
msgid ""
"The structure of the project is the same as the one in the previous example "
"but without the library sources:"
msgstr ""

#: ../../../tutorial/creating_packages/handle_sources_in_packages.rst:29
msgid ""
".\n"
"├── CMakeLists.txt\n"
"├── conanfile.py\n"
"└── test_package\n"
"    ├── CMakeLists.txt\n"
"    ├── conanfile.py\n"
"    └── src\n"
"        └── example.cpp"
msgstr ""

#: ../../../tutorial/creating_packages/handle_sources_in_packages.rst:41
msgid "Sources from a *zip* file stored in a remote repository"
msgstr ""

#: ../../../tutorial/creating_packages/handle_sources_in_packages.rst:43
msgid "Let's have a look at the changes in the *conanfile.py*:"
msgstr ""

#: ../../../tutorial/creating_packages/handle_sources_in_packages.rst:45
msgid ""
"from conan import ConanFile\n"
"from conan.tools.cmake import CMakeToolchain, CMake, cmake_layout\n"
"from conan.tools.files import get\n"
"\n"
"\n"
"class helloRecipe(ConanFile):\n"
"    name = \"hello\"\n"
"    version = \"1.0\"\n"
"\n"
"    ...\n"
"\n"
"    # Binary configuration\n"
"    settings = \"os\", \"compiler\", \"build_type\", \"arch\"\n"
"    options = {\"shared\": [True, False], \"fPIC\": [True, False]}\n"
"    default_options = {\"shared\": False, \"fPIC\": True}\n"
"\n"
"    def source(self):\n"
"        # Please, be aware that using the head of the branch instead of an "
"immutable tag\n"
"        # or commit is a bad practice and not allowed by Conan\n"
"        get(self, \"https://github.com/conan-io/libhello/archive/refs/heads/"
"main.zip\",\n"
"                  strip_root=True)\n"
"\n"
"    def config_options(self):\n"
"        if self.settings.os == \"Windows\":\n"
"            del self.options.fPIC\n"
"\n"
"    def layout(self):\n"
"        cmake_layout(self)\n"
"\n"
"    def generate(self):\n"
"        tc = CMakeToolchain(self)\n"
"        tc.generate()\n"
"\n"
"    def build(self):\n"
"        cmake = CMake(self)\n"
"        cmake.configure()\n"
"        cmake.build()\n"
"\n"
"    def package(self):\n"
"        cmake = CMake(self)\n"
"        cmake.install()\n"
"\n"
"    def package_info(self):\n"
"        self.cpp_info.libs = [\"hello\"]"
msgstr ""

#: ../../../tutorial/creating_packages/handle_sources_in_packages.rst:92
msgid ""
"As you can see, the recipe is the same but instead of declaring the "
"``exports_sources`` attribute as we did previously, i.e."
msgstr ""

#: ../../../tutorial/creating_packages/handle_sources_in_packages.rst:95
msgid "exports_sources = \"CMakeLists.txt\", \"src/*\", \"include/*\""
msgstr ""

#: ../../../tutorial/creating_packages/handle_sources_in_packages.rst:100
msgid "we declare a ``source()`` method with this information:"
msgstr ""

#: ../../../tutorial/creating_packages/handle_sources_in_packages.rst:102
msgid ""
"def source(self):\n"
"    # Please, be aware that using the head of the branch instead of an "
"immutable tag\n"
"    # or commit is strongly discouraged, unsupported by Conan and likely to "
"cause issues\n"
"    get(self, \"https://github.com/conan-io/libhello/archive/refs/heads/main."
"zip\",\n"
"              strip_root=True)"
msgstr ""

#: ../../../tutorial/creating_packages/handle_sources_in_packages.rst:110
msgid ""
"We used the :ref:`conan.tools.files.get()<conan_tools_files_get>` tool that "
"will first **download** the *zip* file from the URL that we pass as an "
"argument and then **unzip** it. Note that we pass the ``strip_root=True`` "
"argument so that if all the unzipped contents are in a single folder, all "
"the contents are moved to the parent folder (check the :ref:`conan.tools."
"files.unzip()<conan_tools_files_unzip>` reference for more details)."
msgstr ""

#: ../../../tutorial/creating_packages/handle_sources_in_packages.rst:118
msgid ""
"It is expected that retrieving the sources in the future produces the same "
"results. Using mutable source origins, like a moving reference in git (e.g "
"HEAD branch), or the URL to a file where the contents may change over time, "
"is strongly discouraged and not supported. Not following this practice will "
"result in undefined behavior likely to cause breakages"
msgstr ""

#: ../../../tutorial/creating_packages/handle_sources_in_packages.rst:121
msgid ""
"The contents of the zip file are the same as the sources we previously had "
"beside the Conan recipe, so if you do a :command:`conan create` the results "
"will be the same as before."
msgstr ""

#: ../../../tutorial/creating_packages/handle_sources_in_packages.rst:125
msgid ""
"$ conan create .\n"
"\n"
"...\n"
"\n"
"-------- Installing packages ----------\n"
"\n"
"Installing (downloading, building) binaries...\n"
"hello/1.0: Calling source() in /Users/user/.conan2/p/0fcb5ffd11025446/s/.\n"
"Downloading update_source.zip\n"
"\n"
"hello/1.0: Unzipping 3.7KB\n"
"Unzipping 100 %\n"
"hello/1.0: Copying sources to build folder\n"
"hello/1.0: Building your package in /Users/user/.conan2/p/"
"tmp/369786d0fb355069/b\n"
"\n"
"...\n"
"\n"
"-------- Testing the package: Running test() ----------\n"
"hello/1.0 (test package): Running test()\n"
"hello/1.0 (test package): RUN: ./example\n"
"hello/1.0: Hello World Release!\n"
"hello/1.0: __x86_64__ defined\n"
"hello/1.0: __cplusplus199711\n"
"hello/1.0: __GNUC__4\n"
"hello/1.0: __GNUC_MINOR__2\n"
"hello/1.0: __clang_major__13\n"
"hello/1.0: __clang_minor__1\n"
"hello/1.0: __apple_build_version__13160021"
msgstr ""

#: ../../../tutorial/creating_packages/handle_sources_in_packages.rst:157
msgid ""
"Please, check the highlighted lines with the messages about the download and "
"unzip operation."
msgstr ""

#: ../../../tutorial/creating_packages/handle_sources_in_packages.rst:161
msgid "Sources from a branch in a *git* repository"
msgstr ""

#: ../../../tutorial/creating_packages/handle_sources_in_packages.rst:163
msgid ""
"Now, let's modify the ``source()`` method to bring the sources from a *git* "
"repository instead of a *zip* file. We show just the relevant parts:"
msgstr ""

#: ../../../tutorial/creating_packages/handle_sources_in_packages.rst:166
msgid ""
"...\n"
"\n"
"from conan.tools.scm import Git\n"
"\n"
"\n"
"class helloRecipe(ConanFile):\n"
"    name = \"hello\"\n"
"    version = \"1.0\"\n"
"\n"
"    ...\n"
"\n"
"    def source(self):\n"
"        git = Git(self)\n"
"        git.clone(url=\"https://github.com/conan-io/libhello.git\", "
"target=\".\")\n"
"\n"
"    ..."
msgstr ""

#: ../../../tutorial/creating_packages/handle_sources_in_packages.rst:186
msgid ""
"Here, we use the :ref:`conan.tools.scm.Git()<reference>` tool. The ``Git`` "
"class implements several methods to work with *git* repositories. In this "
"case, we call the clone method to clone the `<https://github.com/conan-io/"
"libhello.git>`_ repository in the default branch using the same folder for "
"cloning the sources instead of a subfolder (passing the ``target=\".\"`` "
"argument)."
msgstr ""

#: ../../../tutorial/creating_packages/handle_sources_in_packages.rst:195
msgid ""
"As above, this is only a simple example. The source origin for ``Git()`` "
"also has to be immutable, it is necessary to checkout out an immutable tag "
"or a specific commit to guarantee the correct behavior. Using the HEAD of "
"the repository is not allowed and can cause undefined behavior and breakages."
msgstr ""

#: ../../../tutorial/creating_packages/handle_sources_in_packages.rst:197
msgid ""
"To checkout a commit or tag in the repository we use the ``checkout()`` "
"method of the Git tool:"
msgstr ""

#: ../../../tutorial/creating_packages/handle_sources_in_packages.rst:200
msgid ""
"def source(self):\n"
"    git = Git(self)\n"
"    git.clone(url=\"https://github.com/conan-io/libhello.git\", target=\"."
"\")\n"
"    git.checkout(\"<tag> or <commit hash>\")"
msgstr ""

#: ../../../tutorial/creating_packages/handle_sources_in_packages.rst:207
msgid ""
"For more information about the ``Git`` class methods, please check the :ref:"
"`conan.tools.scm.Git()<reference>` reference."
msgstr ""

#: ../../../tutorial/creating_packages/handle_sources_in_packages.rst:210
msgid ""
"Note that it's also possible to run other commands by invoking the ``self."
"run()`` method."
msgstr ""

#: ../../../tutorial/creating_packages/handle_sources_in_packages.rst:216
msgid "Using the conandata.yml file"
msgstr ""

#: ../../../tutorial/creating_packages/handle_sources_in_packages.rst:218
msgid ""
"We can write a file named ``conandata.yml`` in the same folder of the "
"``conanfile.py``. This file will be automatically exported and parsed by "
"Conan and we can read that information from the recipe. This is handy for "
"example to extract the URLs of the external sources repositories, zip files "
"etc. This is an example of ``conandata.yml``:"
msgstr ""

#: ../../../tutorial/creating_packages/handle_sources_in_packages.rst:223
msgid ""
"sources:\n"
"  \"1.0\":\n"
"    url: \"https://github.com/conan-io/libhello/archive/refs/heads/main."
"zip\"\n"
"    sha256: "
"\"7bc71c682895758a996ccf33b70b91611f51252832b01ef3b4675371510ee466\"\n"
"    strip_root: true\n"
"  \"1.1\":\n"
"    url: ...\n"
"    sha256: ..."
msgstr ""

#: ../../../tutorial/creating_packages/handle_sources_in_packages.rst:235
msgid ""
"The recipe doesn't need to be modified for each version of the code. We can "
"pass all the ``keys`` of the specified version (``url``, ``sha256``, and "
"``strip_root``) as arguments to the ``get`` function, that, in this case, "
"allow us to verify that the downloaded zip file has the correct ``sha256``. "
"So we could modify the source method to this:"
msgstr ""

#: ../../../tutorial/creating_packages/handle_sources_in_packages.rst:240
msgid ""
"def source(self):\n"
"    get(self, **self.conan_data[\"sources\"][self.version])\n"
"    # Similar to:\n"
"    # data = self.conan_data[\"sources\"][self.version]\n"
"    # get(self, data[\"url\"], sha256=data[\"sha256\"], "
"strip_root=data[\"strip_root\"])"
msgstr ""

#: ../../../tutorial/creating_packages/handle_sources_in_packages.rst:252
msgid ":ref:`Patching sources<examples_tools_files_patches>`"
msgstr ""

#: ../../../tutorial/creating_packages/handle_sources_in_packages.rst:253
msgid ""
":ref:`Capturing Git SCM source information<examples_tools_scm_git_capture>` "
"instead of copying sources with ``exports_sources``."
msgstr ""

#: ../../../tutorial/creating_packages/handle_sources_in_packages.rst:254
msgid ":ref:`source() method reference<reference_conanfile_methods_source>`"
msgstr ""
