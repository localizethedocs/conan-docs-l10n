# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2024, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 2.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 14:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../tutorial/creating_packages/package_method.rst:4
msgid "Package files: the package() method"
msgstr ""

#: ../../../tutorial/creating_packages/package_method.rst:6
msgid ""
"We already used the ``package()`` method in our `hello` package to invoke "
"CMake's install step. In this tutorial, we will explain the use of the :ref:"
"`CMake.install() <conan_tools_cmake_helper>` in more detail and also how to "
"modify this method to do things like:"
msgstr ""

#: ../../../tutorial/creating_packages/package_method.rst:11
msgid ""
"Using :ref:`conan.tools.files <conan_tools_files>` utilities to copy the "
"generated artifacts from the build folder to the package folder"
msgstr ""

#: ../../../tutorial/creating_packages/package_method.rst:13
msgid "Copying package licenses"
msgstr ""

#: ../../../tutorial/creating_packages/package_method.rst:14
msgid "Manage how to package symlinks"
msgstr ""

#: ../../../tutorial/creating_packages/package_method.rst:16
msgid ""
"Please, first clone the sources to recreate this project. You can find them "
"in the `examples2 repository <https://github.com/conan-io/examples2>`_ on "
"GitHub:"
msgstr ""

#: ../../../tutorial/creating_packages/package_method.rst:19
msgid ""
"$ git clone https://github.com/conan-io/examples2.git\n"
"$ cd examples2/tutorial/creating_packages/package_method"
msgstr ""

#: ../../../tutorial/creating_packages/package_method.rst:26
msgid "Using CMake install step in the package() method"
msgstr ""

#: ../../../tutorial/creating_packages/package_method.rst:28
msgid ""
"This is the simplest choice when you have already defined in your "
"`CMakeLists.txt` the functionality of extracting the artifacts (headers, "
"libraries, binaries) from the build and source folder to a predetermined "
"place and maybe do some post-processing of those artifacts. This will work "
"without changes in your `CMakeLists.txt` because Conan will set the "
"``CMAKE_INSTALL_PREFIX`` CMake variable to point to the recipe's :ref:"
"`package_folder <conan_conanfile_properties_package_folder>` attribute. "
"Then, just calling `install()` in the `CMakeLists.txt` over the created "
"target is enough for Conan to move the built artifacts to the correct "
"location in the Conan local cache."
msgstr ""

#: ../../../tutorial/creating_packages/package_method.rst:37
msgid "*CMakeLists.txt*"
msgstr ""

#: ../../../tutorial/creating_packages/package_method.rst:37
msgid ""
"cmake_minimum_required(VERSION 3.15)\n"
"project(hello CXX)\n"
"\n"
"add_library(hello src/hello.cpp)\n"
"target_include_directories(hello PUBLIC include)\n"
"set_target_properties(hello PROPERTIES PUBLIC_HEADER \"include/hello.h\")\n"
"\n"
"...\n"
"\n"
"install(TARGETS hello)"
msgstr ""

#: ../../../tutorial/creating_packages/package_method.rst:52
#: ../../../tutorial/creating_packages/package_method.rst:104
#: ../../../tutorial/creating_packages/package_method.rst:157
msgid "*conanfile.py*"
msgstr ""

#: ../../../tutorial/creating_packages/package_method.rst:52
msgid ""
"def package(self):\n"
"    cmake = CMake(self)\n"
"    cmake.install()"
msgstr ""

#: ../../../tutorial/creating_packages/package_method.rst:60
msgid ""
"Let's build our package again and pay attention to the lines regarding the "
"packaging of files in the Conan local cache:"
msgstr ""

#: ../../../tutorial/creating_packages/package_method.rst:63
msgid ""
"$ conan create . --build=missing -tf=\"\"\n"
"...\n"
"hello/1.0: Build folder /Users/user/.conan2/p/tmp/b5857f2e70d1b2fd/b/build/"
"Release\n"
"hello/1.0: Generated conaninfo.txt\n"
"hello/1.0: Generating the package\n"
"hello/1.0: Temporary package folder /Users/user/.conan2/p/tmp/"
"b5857f2e70d1b2fd/p\n"
"hello/1.0: Calling package()\n"
"hello/1.0: CMake command: cmake --install \"/Users/user/.conan2/p/tmp/"
"b5857f2e70d1b2fd/b/build/Release\" --prefix \"/Users/user/.conan2/p/tmp/"
"b5857f2e70d1b2fd/p\"\n"
"hello/1.0: RUN: cmake --install \"/Users/user/.conan2/p/tmp/b5857f2e70d1b2fd/"
"b/build/Release\" --prefix \"/Users/user/.conan2/p/tmp/b5857f2e70d1b2fd/p\"\n"
"-- Install configuration: \"Release\"\n"
"-- Installing: /Users/user/.conan2/p/tmp/b5857f2e70d1b2fd/p/lib/libhello.a\n"
"-- Installing: /Users/user/.conan2/p/tmp/b5857f2e70d1b2fd/p/include/hello.h\n"
"hello/1.0 package(): Packaged 1 '.h' file: hello.h\n"
"hello/1.0 package(): Packaged 1 '.a' file: libhello.a\n"
"hello/1.0: Package 'fd7c4113dad406f7d8211b3470c16627b54ff3af' created\n"
"hello/1.0: Created package revision bf7f5b9a3bb2c957742be4be216dfcbb\n"
"hello/1.0: Full package reference: "
"hello/1.0#25e0b5c00ae41ef9fbfbbb1e5ac86e1e:"
"fd7c4113dad406f7d8211b3470c16627b54ff3af#bf7f5b9a3bb2c957742be4be216dfcbb\n"
"hello/1.0: Package folder /Users/user/.conan2/p/47b4c4c61c8616e5/p"
msgstr ""

#: ../../../tutorial/creating_packages/package_method.rst:85
msgid ""
"As you can see both the *include* and *library* files were copied to the "
"package folder after calling to the ``cmake.install()`` method."
msgstr ""

#: ../../../tutorial/creating_packages/package_method.rst:90
msgid ""
"Use conan.tools.files.copy() in the package() method and packaging licenses"
msgstr ""

#: ../../../tutorial/creating_packages/package_method.rst:92
msgid ""
"For the cases that you don't want to rely on CMake's install functionality "
"or that you are using another build-system, Conan provides the tools to copy "
"the selected files to the :ref:`package_folder "
"<conan_conanfile_properties_package_folder>`. In this case, you can use the :"
"ref:`tools.files.copy <conan_tools_files_copy>` function to make that copy. "
"We can replace the previous ``cmake.install()`` step with a custom copy of "
"the files and the result would be the same."
msgstr ""

#: ../../../tutorial/creating_packages/package_method.rst:99
msgid ""
"Note that we are also packaging the ``LICENSE`` file from the library "
"sources in the *licenses* folder. This is a common pattern in Conan packages "
"and could also be added to the previous example using ``cmake.install()`` as "
"the *CMakeLists.txt* will not copy this file to the *package folder*."
msgstr ""

#: ../../../tutorial/creating_packages/package_method.rst:104
msgid ""
"def package(self):\n"
"    copy(self, \"LICENSE\", src=self.source_folder, dst=os.path.join(self."
"package_folder, \"licenses\"))\n"
"    copy(self, pattern=\"*.h\", src=os.path.join(self.source_folder, "
"\"include\"), dst=os.path.join(self.package_folder, \"include\"))\n"
"    copy(self, pattern=\"*.a\", src=self.build_folder, dst=os.path.join(self."
"package_folder, \"lib\"), keep_path=False)\n"
"    copy(self, pattern=\"*.so\", src=self.build_folder, dst=os.path."
"join(self.package_folder, \"lib\"), keep_path=False)\n"
"    copy(self, pattern=\"*.lib\", src=self.build_folder, dst=os.path."
"join(self.package_folder, \"lib\"), keep_path=False)\n"
"    copy(self, pattern=\"*.dll\", src=self.build_folder, dst=os.path."
"join(self.package_folder, \"bin\"), keep_path=False)\n"
"    copy(self, pattern=\"*.dylib\", src=self.build_folder, dst=os.path."
"join(self.package_folder, \"lib\"), keep_path=False)"
msgstr ""

#: ../../../tutorial/creating_packages/package_method.rst:116
msgid ""
"Let's build our package one more time and pay attention to the lines "
"regarding the packaging of files in the Conan local cache:"
msgstr ""

#: ../../../tutorial/creating_packages/package_method.rst:119
msgid ""
"$ conan create . --build=missing -tf=\"\"\n"
"...\n"
"hello/1.0: Build folder /Users/user/.conan2/p/tmp/222db0532bba7cbc/b/build/"
"Release\n"
"hello/1.0: Generated conaninfo.txt\n"
"hello/1.0: Generating the package\n"
"hello/1.0: Temporary package folder /Users/user/.conan2/p/"
"tmp/222db0532bba7cbc/p\n"
"hello/1.0: Calling package()\n"
"hello/1.0: Copied 1 file: LICENSE\n"
"hello/1.0: Copied 1 '.h' file: hello.h\n"
"hello/1.0: Copied 1 '.a' file: libhello.a\n"
"hello/1.0 package(): Packaged 1 file: LICENSE\n"
"hello/1.0 package(): Packaged 1 '.h' file: hello.h\n"
"hello/1.0 package(): Packaged 1 '.a' file: libhello.a\n"
"hello/1.0: Package 'fd7c4113dad406f7d8211b3470c16627b54ff3af' created\n"
"hello/1.0: Created package revision 50f91e204d09b64b24b29df3b87a2f3a\n"
"hello/1.0: Full package reference: "
"hello/1.0#96ed9fb1f78bc96708b1abf4841523b0:"
"fd7c4113dad406f7d8211b3470c16627b54ff3af#50f91e204d09b64b24b29df3b87a2f3a\n"
"hello/1.0: Package folder /Users/user/.conan2/p/21ec37b931782de8/p"
msgstr ""

#: ../../../tutorial/creating_packages/package_method.rst:140
msgid ""
"Check how the *include* and *library* files are packaged. The LICENSE file "
"is also copied as we explained above."
msgstr ""

#: ../../../tutorial/creating_packages/package_method.rst:144
msgid "Managing symlinks in the package() method"
msgstr ""

#: ../../../tutorial/creating_packages/package_method.rst:146
msgid ""
"Another thing you can do in the package method is managing how to package "
"symlinks. Conan wonâ€™t manipulate symlinks by default, so we provide several :"
"ref:`tools <conan_tools_files_symlinks>` to convert absolute symlinks to "
"relative ones and removing external or broken symlinks."
msgstr ""

#: ../../../tutorial/creating_packages/package_method.rst:151
msgid ""
"Imagine that some of the files packaged in the latest example were symlinks "
"that point to an absolute location inside the Conan cache. Then, calling to "
"``conan.tools.files.symlinks.absolute_to_relative_symlinks()`` would convert "
"those absolute links into relative paths and make the package relocatable."
msgstr ""

#: ../../../tutorial/creating_packages/package_method.rst:157
msgid ""
"from conan.tools.files.symlinks import absolute_to_relative_symlinks\n"
"\n"
"def package(self):\n"
"    copy(self, \"LICENSE\", src=self.source_folder, dst=os.path.join(self."
"package_folder, \"licenses\"))\n"
"    copy(self, pattern=\"*.h\", src=os.path.join(self.source_folder, "
"\"include\"), dst=os.path.join(self.package_folder, \"include\"))\n"
"    copy(self, pattern=\"*.a\", src=self.build_folder, dst=os.path.join(self."
"package_folder, \"lib\"), keep_path=False)\n"
"    ...\n"
"\n"
"    absolute_to_relative_symlinks(self, self.package_folder)"
msgstr ""

#: ../../../tutorial/creating_packages/package_method.rst:173
msgid ":ref:`package() method reference<reference_conanfile_methods_package>`"
msgstr ""
