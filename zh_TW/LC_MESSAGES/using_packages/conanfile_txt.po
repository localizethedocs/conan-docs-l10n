# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2018, JFrog
# This file is distributed under the same license as the conan package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: conan 1.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 10:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../using_packages/conanfile_txt.rst:4
msgid "Installing dependencies"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:6
msgid ""
"In :ref:`Getting started<getting_started>` we used the :command:`conan "
"install` command to download the **Poco** library and build an example."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:9
msgid ""
"If you inspect the ``conanbuildinfo.cmake`` file that was created when "
"running :command:`conan install`, you can see there that there are many "
"CMake variables declared. For example ``CONAN_INCLUDE_DIRS_ZLIB``, that "
"defines the include path to the zlib headers, and ``CONAN_INCLUDE_DIRS`` "
"that defines include paths for all dependencies headers."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:19
msgid ""
"If you check the full path that each of these variables defines, you will "
"see that it points to a folder under your ``<userhome>`` folder. Together, "
"these folders are the **local cache**. This is where package recipes and "
"binary packages are stored and cached, so they don't have to be retrieved "
"again. You can inspect the **local cache** with :command:`conan search`, and "
"remove packages from it with :command:`conan remove` command."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:25
msgid ""
"If you navigate to the folders referenced in ``conanbuildinfo.cmake`` you "
"will find the headers and libraries for each package."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:28
msgid ""
"If you execute a :command:`conan install Poco/1.9.0@pocoproject/stable` "
"command in your shell, Conan will download the Poco package and its "
"dependencies (*OpenSSL/1.0.2l@conan/stable* and *zlib/1.2.11@conan/stable*) "
"to your local cache and print information about the folder where they are "
"installed. While you can handle them manually, the recommended approach is "
"to use a ``conanfile.txt``."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:35
msgid "Requires"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:37
msgid ""
"The required dependencies should be specified in the **[requires]** section. "
"Here is an example:"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:40
msgid ""
"[requires]\n"
"Poco/1.9.0@pocoproject/stable"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:45
msgid "Where:"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:47
msgid ""
"``Poco`` is the name of the package which is usually the same as the project/"
"library."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:48
msgid ""
"``1.9.0`` is the version which usually matches that of the packaged project/"
"library. This can be any string; it does not have to be a number, so, for "
"example, it could indicate if this is a \"develop\" or \"master\" version. "
"Packages can be overwritten, so it is also OK to have packages like "
"\"nightly\" or \"weekly\", that are regenerated periodically."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:52
msgid ""
"``pocoproject`` is the owner of this package version. It is basically a "
"namespace that allows different users to have their own packages for the "
"same library with the same name, and interchange them. So, for example, you "
"can upload a certain library under your own user name, and later the same "
"packages can be uploaded, without modifications, to another official group "
"or company username."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:57
msgid ""
"``stable`` is the channel. Channels provide another way to have different "
"variants of packages for the same library and use them interchangeably. They "
"usually denote the maturity of the package as an arbitrary string such as "
"\"stable\" or \"testing\", but they can be used for any purpose such as "
"package revisions (e.g., the library version has not changed, but the "
"package recipe has evolved)."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:63
msgid "Overriding requirements"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:65
msgid ""
"You can specify multiple requirements and **override** transitive "
"\"require's requirements\". In our example, Conan installed the Poco package "
"and all its requirements transitively:"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:69
msgid "**OpenSSL/1.0.2l@conan/stable**"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:70
msgid "**zlib/1.2.11@conan/stable**"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:74
msgid ""
"This is a good example of overriding requirements given the importance of "
"keeping the OpenSSL library updated."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:77
msgid ""
"Consider that a new release of the OpenSSL library has been released, and a "
"new corresponding Conan package is available. In our example, we do not need "
"to wait until `pocoproject`_ (the author) generates a new package of POCO "
"that includes the new OpenSSL library."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:81
msgid "We can simply enter the new version in **[requires]** section:"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:83
msgid ""
"[requires]\n"
"Poco/1.9.0@pocoproject/stable\n"
"OpenSSL/1.0.2p@conan/stable"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:89
msgid ""
"The second line will override the OpenSSL/1.0.2l required by POCO with the "
"currently non-existent **OpenSSL/1.0.2p**."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:91
msgid ""
"Another example in which we may want to try some new zlib alpha features, we "
"could replace the zlib requirement with one from another user or channel."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:94
msgid ""
"[requires]\n"
"Poco/1.9.0@pocoproject/stable\n"
"OpenSSL/1.0.2p@conan/stable\n"
"zlib/1.2.11@otheruser/alpha"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:104
msgid "Generators"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:106
msgid ""
"Conan reads the **[generators]** section from ``conanfile.txt`` and creates "
"files for each generator with all the information needed to link your "
"program with the specified requirements. The generated files are usually "
"temporary, created in build folders and not committed to version control, as "
"they have paths to local folders that will not exist in another machine. "
"Moreover, it is very important to highlight that generated files match the "
"given configuration (Debug/Release, x86/x86_64, etc) specified when running :"
"command:`conan install`. If the configuration changes, the files will change "
"accordingly."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:114
msgid ""
"For a full list of generators, please refer to the complete :ref:"
"`generators<generators_reference>` reference."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:119
msgid "Options"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:121
msgid ""
"We have already seen that there are some **settings** that can be specified "
"during installation. For example, :command:`conan install . -s "
"build_type=Debug`. These settings are typically a project-wide configuration "
"defined by the client machine, so they cannot have a default value in the "
"recipe. For example, it doesn't make sense for a package recipe to declare "
"\"Visual Studio\" as a default compiler because that is something defined by "
"the end consumer, and unlikely to make sense if they are working in Linux."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:128
msgid ""
"On the other hand, **options** are intended for package specific "
"configuration that can be set to a default value in the recipe. For example, "
"one package can define that its default linkage is static, and this is the "
"linkage that should be used if consumers don't specify otherwise."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:134
msgid ""
"You can see the available options for a package by inspecting the recipe "
"with :command:`conan get <reference>` command:"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:136
msgid "$ conan get Poco/1.9.0@pocoproject/stable"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:140
msgid ""
"For example, we can modify the previous example to use dynamic linkage "
"instead of the default one, which was static, by editing the *conanfile.txt*:"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:143
msgid ""
"[requires]\n"
"Poco/1.9.0@pocoproject/stable\n"
"\n"
"[generators]\n"
"cmake\n"
"\n"
"[options]\n"
"Poco:shared=True # PACKAGE:OPTION=VALUE\n"
"OpenSSL:shared=True"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:155
msgid ""
"Install the requirements and compile from the build folder (change the CMake "
"generator if not in Windows):"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:157
msgid ""
"$ conan install ..\n"
"$ cmake .. -G \"Visual Studio 14 Win64\"\n"
"$ cmake --build . --config Release"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:163
msgid ""
"As an alternative to defining options in the ``conanfile.txt`` file, you can "
"specify them directly in the command line:"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:166
msgid ""
"$ conan install .. -o Poco:shared=True -o OpenSSL:shared=True\n"
"# or even with wildcards, to apply to many packages\n"
"$ conan install .. -o *:shared=True"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:172
msgid ""
"Conan will install the binaries of the shared library packages, and the "
"example will link with them. You can again inspect the different binaries "
"installed. For example, :command:`conan search zlib/1.2.8@lasote/stable`."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:175
msgid "Finally, launch the executable:"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:177
msgid "$ ./bin/timer"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:181
msgid ""
"What happened? It fails because it can't find the shared libraries in the "
"path. Remember that shared libraries are used at runtime, so the operating "
"system, which is running the application, must be able to locate them."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:184
msgid ""
"We could inspect the generated executable, and see that it is using the "
"shared libraries. For example, in Linux, we could use the `objdump` tool and "
"see the *Dynamic section*:"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:187
msgid ""
"$ cd bin\n"
"$ objdump -p timer\n"
"...\n"
"Dynamic Section:\n"
" NEEDED               libPocoUtil.so.31\n"
" NEEDED               libPocoXML.so.31\n"
" NEEDED               libPocoJSON.so.31\n"
" NEEDED               libPocoMongoDB.so.31\n"
" NEEDED               libPocoNet.so.31\n"
" NEEDED               libPocoCrypto.so.31\n"
" NEEDED               libPocoData.so.31\n"
" NEEDED               libPocoDataSQLite.so.31\n"
" NEEDED               libPocoZip.so.31\n"
" NEEDED               libPocoFoundation.so.31\n"
" NEEDED               libpthread.so.0\n"
" NEEDED               libdl.so.2\n"
" NEEDED               librt.so.1\n"
" NEEDED               libssl.so.1.0.0\n"
" NEEDED               libcrypto.so.1.0.0\n"
" NEEDED               libstdc++.so.6\n"
" NEEDED               libm.so.6\n"
" NEEDED               libgcc_s.so.1\n"
" NEEDED               libc.so.6"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:216
msgid "Imports"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:218
msgid ""
"There are some differences between shared libraries on Linux (\\*.so), "
"Windows (\\*.dll) and MacOS (\\*.dylib). The shared libraries must be "
"located in a folder where they can be found, either by the linker, or by the "
"OS runtime."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:222
msgid ""
"You can add the libraries' folders to the path (dynamic linker "
"LD_LIBRARY_PATH path in Linux, DYLD_LIBRARY_PATH in OSX, or system PATH in "
"Windows), or copy those shared libraries to some system folder where they "
"can be found by the OS. But these operations are are typical operations "
"deployments or final installation of apps; they are not desired during "
"development, and Conan is intended for developers, so it avoids "
"manipulations on the OS."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:228
msgid ""
"In Windows and OSX, the simplest approach is to copy the shared libraries to "
"the executable folder, so they are found by the executable, without having "
"to modify the path."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:231
msgid "This is done using the **[imports]** section in ``conanfile.txt``."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:233
msgid ""
"To demonstrate this, edit the ``conanfile.txt`` file and paste the following "
"**[imports]** section:"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:235
msgid ""
"[requires]\n"
"Poco/1.9.0@pocoproject/stable\n"
"\n"
"[generators]\n"
"cmake\n"
"\n"
"[options]\n"
"Poco:shared=True\n"
"OpenSSL:shared=True\n"
"\n"
"[imports]\n"
"bin, *.dll -> ./bin # Copies all dll files from packages bin folder to my "
"\"bin\" folder\n"
"lib, *.dylib* -> ./bin # Copies all dylib files from packages lib folder to "
"my \"bin\" folder"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:253
msgid ""
"You can explore the package folder in your local cache (~/.conan/data) and "
"see where the shared libraries are. It is common that **\\*.dll** are copied "
"to **/bin**. The rest of the libraries should be found in the **/lib** "
"folder, however, this is just a convention, and different layouts are "
"possible."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:258
msgid ""
"Install the requirements (from the ``mytimer/build`` folder), and run the "
"binary again:"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:260
msgid ""
"$ conan install ..\n"
"$ ./bin/timer"
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:265
msgid ""
"Now look at the ``mytimer/build/bin`` folder and verify that the required "
"shared libraries are there."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:267
msgid ""
"As you can see, the **[imports]** section is a very generic way to import "
"files from your requirements to your project."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:270
msgid ""
"This method can be used for packaging applications and copying the resulting "
"executables to your bin folder, or for copying assets, images, sounds, test "
"static files, etc. Conan is a generic solution for package management, not "
"only (but focused in) for C/C++ or libraries."
msgstr ""

#: ../../../using_packages/conanfile_txt.rst:276
msgid ""
"To learn more about working with shared libraries, please refer to :ref:"
"`Howtos/Manage shared libraries<manage_shared>`."
msgstr ""
